
XMEGA_A3BU_XPLAINED_DEMO1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000567a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015e  00802000  0000567a  0000570e  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000008fb  00802160  00802160  0000586c  2**2
                  ALLOC
  3 .stab         000025a4  00000000  00000000  0000586c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000aa1  00000000  00000000  00007e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000088b1  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000bd8  00000000  00000000  000088e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0001b965  00000000  00000000  000094b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005c1d  00000000  00000000  00024e1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00015400  00000000  00000000  0002aa3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000024a8  00000000  00000000  0003fe3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00034b53  00000000  00000000  000422e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000bd6b  00000000  00000000  00076e37  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ef0  00000000  00000000  00082ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000f855  00000000  00000000  00083a98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	16 c3       	rjmp	.+1580   	; 0x62e <__ctors_end>
       2:	00 00       	nop
       4:	35 c3       	rjmp	.+1642   	; 0x670 <__bad_interrupt>
       6:	00 00       	nop
       8:	33 c3       	rjmp	.+1638   	; 0x670 <__bad_interrupt>
       a:	00 00       	nop
       c:	31 c3       	rjmp	.+1634   	; 0x670 <__bad_interrupt>
       e:	00 00       	nop
      10:	2f c3       	rjmp	.+1630   	; 0x670 <__bad_interrupt>
      12:	00 00       	nop
      14:	2d c3       	rjmp	.+1626   	; 0x670 <__bad_interrupt>
      16:	00 00       	nop
      18:	2b c3       	rjmp	.+1622   	; 0x670 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	29 c3       	rjmp	.+1618   	; 0x670 <__bad_interrupt>
      1e:	00 00       	nop
      20:	27 c3       	rjmp	.+1614   	; 0x670 <__bad_interrupt>
      22:	00 00       	nop
      24:	25 c3       	rjmp	.+1610   	; 0x670 <__bad_interrupt>
      26:	00 00       	nop
      28:	23 c3       	rjmp	.+1606   	; 0x670 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 81 19 	jmp	0x3302	; 0x3302 <__vector_11>
      30:	1f c3       	rjmp	.+1598   	; 0x670 <__bad_interrupt>
      32:	00 00       	nop
      34:	1d c3       	rjmp	.+1594   	; 0x670 <__bad_interrupt>
      36:	00 00       	nop
      38:	1b c3       	rjmp	.+1590   	; 0x670 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	19 c3       	rjmp	.+1586   	; 0x670 <__bad_interrupt>
      3e:	00 00       	nop
      40:	17 c3       	rjmp	.+1582   	; 0x670 <__bad_interrupt>
      42:	00 00       	nop
      44:	15 c3       	rjmp	.+1578   	; 0x670 <__bad_interrupt>
      46:	00 00       	nop
      48:	13 c3       	rjmp	.+1574   	; 0x670 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	11 c3       	rjmp	.+1570   	; 0x670 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0f c3       	rjmp	.+1566   	; 0x670 <__bad_interrupt>
      52:	00 00       	nop
      54:	0d c3       	rjmp	.+1562   	; 0x670 <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 0b 24 	jmp	0x4816	; 0x4816 <__vector_22>
      5c:	09 c3       	rjmp	.+1554   	; 0x670 <__bad_interrupt>
      5e:	00 00       	nop
      60:	07 c3       	rjmp	.+1550   	; 0x670 <__bad_interrupt>
      62:	00 00       	nop
      64:	05 c3       	rjmp	.+1546   	; 0x670 <__bad_interrupt>
      66:	00 00       	nop
      68:	03 c3       	rjmp	.+1542   	; 0x670 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	01 c3       	rjmp	.+1538   	; 0x670 <__bad_interrupt>
      6e:	00 00       	nop
      70:	ff c2       	rjmp	.+1534   	; 0x670 <__bad_interrupt>
      72:	00 00       	nop
      74:	fd c2       	rjmp	.+1530   	; 0x670 <__bad_interrupt>
      76:	00 00       	nop
      78:	fb c2       	rjmp	.+1526   	; 0x670 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f9 c2       	rjmp	.+1522   	; 0x670 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f7 c2       	rjmp	.+1518   	; 0x670 <__bad_interrupt>
      82:	00 00       	nop
      84:	f5 c2       	rjmp	.+1514   	; 0x670 <__bad_interrupt>
      86:	00 00       	nop
      88:	f3 c2       	rjmp	.+1510   	; 0x670 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f1 c2       	rjmp	.+1506   	; 0x670 <__bad_interrupt>
      8e:	00 00       	nop
      90:	ef c2       	rjmp	.+1502   	; 0x670 <__bad_interrupt>
      92:	00 00       	nop
      94:	ed c2       	rjmp	.+1498   	; 0x670 <__bad_interrupt>
      96:	00 00       	nop
      98:	eb c2       	rjmp	.+1494   	; 0x670 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 1a 17 	jmp	0x2e34	; 0x2e34 <__vector_39>
      a0:	0c 94 4c 17 	jmp	0x2e98	; 0x2e98 <__vector_40>
      a4:	0c 94 7e 17 	jmp	0x2efc	; 0x2efc <__vector_41>
      a8:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <__vector_42>
      ac:	e1 c2       	rjmp	.+1474   	; 0x670 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	df c2       	rjmp	.+1470   	; 0x670 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	dd c2       	rjmp	.+1466   	; 0x670 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	db c2       	rjmp	.+1462   	; 0x670 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	d9 c2       	rjmp	.+1458   	; 0x670 <__bad_interrupt>
      be:	00 00       	nop
      c0:	d7 c2       	rjmp	.+1454   	; 0x670 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	d5 c2       	rjmp	.+1450   	; 0x670 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	d3 c2       	rjmp	.+1446   	; 0x670 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	d1 c2       	rjmp	.+1442   	; 0x670 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	cf c2       	rjmp	.+1438   	; 0x670 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	cd c2       	rjmp	.+1434   	; 0x670 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	cb c2       	rjmp	.+1430   	; 0x670 <__bad_interrupt>
      da:	00 00       	nop
      dc:	c9 c2       	rjmp	.+1426   	; 0x670 <__bad_interrupt>
      de:	00 00       	nop
      e0:	c7 c2       	rjmp	.+1422   	; 0x670 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c5 c2       	rjmp	.+1418   	; 0x670 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	c3 c2       	rjmp	.+1414   	; 0x670 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	c1 c2       	rjmp	.+1410   	; 0x670 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	bf c2       	rjmp	.+1406   	; 0x670 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	bd c2       	rjmp	.+1402   	; 0x670 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	bb c2       	rjmp	.+1398   	; 0x670 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	b9 c2       	rjmp	.+1394   	; 0x670 <__bad_interrupt>
      fe:	00 00       	nop
     100:	b7 c2       	rjmp	.+1390   	; 0x670 <__bad_interrupt>
     102:	00 00       	nop
     104:	b5 c2       	rjmp	.+1386   	; 0x670 <__bad_interrupt>
     106:	00 00       	nop
     108:	b3 c2       	rjmp	.+1382   	; 0x670 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	b1 c2       	rjmp	.+1378   	; 0x670 <__bad_interrupt>
     10e:	00 00       	nop
     110:	af c2       	rjmp	.+1374   	; 0x670 <__bad_interrupt>
     112:	00 00       	nop
     114:	ad c2       	rjmp	.+1370   	; 0x670 <__bad_interrupt>
     116:	00 00       	nop
     118:	ab c2       	rjmp	.+1366   	; 0x670 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	0c 94 52 16 	jmp	0x2ca4	; 0x2ca4 <__vector_71>
     120:	0c 94 84 16 	jmp	0x2d08	; 0x2d08 <__vector_72>
     124:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <__vector_73>
     128:	0c 94 e8 16 	jmp	0x2dd0	; 0x2dd0 <__vector_74>
     12c:	a1 c2       	rjmp	.+1346   	; 0x670 <__bad_interrupt>
     12e:	00 00       	nop
     130:	9f c2       	rjmp	.+1342   	; 0x670 <__bad_interrupt>
     132:	00 00       	nop
     134:	9d c2       	rjmp	.+1338   	; 0x670 <__bad_interrupt>
     136:	00 00       	nop
     138:	9b c2       	rjmp	.+1334   	; 0x670 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	99 c2       	rjmp	.+1330   	; 0x670 <__bad_interrupt>
     13e:	00 00       	nop
     140:	97 c2       	rjmp	.+1326   	; 0x670 <__bad_interrupt>
     142:	00 00       	nop
     144:	95 c2       	rjmp	.+1322   	; 0x670 <__bad_interrupt>
     146:	00 00       	nop
     148:	93 c2       	rjmp	.+1318   	; 0x670 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	91 c2       	rjmp	.+1314   	; 0x670 <__bad_interrupt>
     14e:	00 00       	nop
     150:	8f c2       	rjmp	.+1310   	; 0x670 <__bad_interrupt>
     152:	00 00       	nop
     154:	8d c2       	rjmp	.+1306   	; 0x670 <__bad_interrupt>
     156:	00 00       	nop
     158:	8b c2       	rjmp	.+1302   	; 0x670 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	89 c2       	rjmp	.+1298   	; 0x670 <__bad_interrupt>
     15e:	00 00       	nop
     160:	87 c2       	rjmp	.+1294   	; 0x670 <__bad_interrupt>
     162:	00 00       	nop
     164:	85 c2       	rjmp	.+1290   	; 0x670 <__bad_interrupt>
     166:	00 00       	nop
     168:	83 c2       	rjmp	.+1286   	; 0x670 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	81 c2       	rjmp	.+1282   	; 0x670 <__bad_interrupt>
     16e:	00 00       	nop
     170:	7f c2       	rjmp	.+1278   	; 0x670 <__bad_interrupt>
     172:	00 00       	nop
     174:	7d c2       	rjmp	.+1274   	; 0x670 <__bad_interrupt>
     176:	00 00       	nop
     178:	7b c2       	rjmp	.+1270   	; 0x670 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	79 c2       	rjmp	.+1266   	; 0x670 <__bad_interrupt>
     17e:	00 00       	nop
     180:	77 c2       	rjmp	.+1262   	; 0x670 <__bad_interrupt>
     182:	00 00       	nop
     184:	75 c2       	rjmp	.+1258   	; 0x670 <__bad_interrupt>
     186:	00 00       	nop
     188:	73 c2       	rjmp	.+1254   	; 0x670 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	71 c2       	rjmp	.+1250   	; 0x670 <__bad_interrupt>
     18e:	00 00       	nop
     190:	6f c2       	rjmp	.+1246   	; 0x670 <__bad_interrupt>
     192:	00 00       	nop
     194:	6d c2       	rjmp	.+1242   	; 0x670 <__bad_interrupt>
     196:	00 00       	nop
     198:	6b c2       	rjmp	.+1238   	; 0x670 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	69 c2       	rjmp	.+1234   	; 0x670 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	67 c2       	rjmp	.+1230   	; 0x670 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	65 c2       	rjmp	.+1226   	; 0x670 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	63 c2       	rjmp	.+1222   	; 0x670 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	61 c2       	rjmp	.+1218   	; 0x670 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	5f c2       	rjmp	.+1214   	; 0x670 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	5d c2       	rjmp	.+1210   	; 0x670 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	5b c2       	rjmp	.+1206   	; 0x670 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	59 c2       	rjmp	.+1202   	; 0x670 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	57 c2       	rjmp	.+1198   	; 0x670 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	55 c2       	rjmp	.+1194   	; 0x670 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	53 c2       	rjmp	.+1190   	; 0x670 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	51 c2       	rjmp	.+1186   	; 0x670 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	4f c2       	rjmp	.+1182   	; 0x670 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	4d c2       	rjmp	.+1178   	; 0x670 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	4b c2       	rjmp	.+1174   	; 0x670 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	49 c2       	rjmp	.+1170   	; 0x670 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	47 c2       	rjmp	.+1166   	; 0x670 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	45 c2       	rjmp	.+1162   	; 0x670 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	43 c2       	rjmp	.+1158   	; 0x670 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	41 c2       	rjmp	.+1154   	; 0x670 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	3f c2       	rjmp	.+1150   	; 0x670 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 3c 1f 	jmp	0x3e78	; 0x3e78 <__vector_125>
     1f8:	0c 94 ec 1f 	jmp	0x3fd8	; 0x3fd8 <__vector_126>

000001fc <sysfont_glyphs>:
     1fc:	00 00 00 00 00 00 00 20 20 20 20 20 00 20 50 50     .......     . PP
     20c:	50 00 00 00 00 50 50 f8 50 f8 50 50 20 78 a0 70     P....PP.P.PP x.p
     21c:	28 f0 20 c0 c8 10 20 40 98 18 60 90 a0 40 a8 90     (. ... @..`..@..
     22c:	68 60 20 40 00 00 00 00 10 20 40 40 40 20 10 40     h` @..... @@@ .@
     23c:	20 10 10 10 20 40 00 50 20 f8 20 50 00 00 20 20      ... @.P . P..  
     24c:	f8 20 20 00 00 00 00 00 60 20 40 00 00 00 f8 00     .  .....` @.....
     25c:	00 00 00 00 00 00 00 60 60 00 08 10 20 40 80 00     .......``... @..
     26c:	70 88 98 a8 c8 88 70 20 60 20 20 20 20 70 70 88     p.....p `    pp.
     27c:	08 10 20 40 f8 f8 10 20 10 08 88 70 10 30 50 90     .. @... ...p.0P.
     28c:	f8 10 10 f8 80 f0 08 08 88 70 30 40 80 f0 88 88     .........p0@....
     29c:	70 f8 08 10 20 40 40 40 70 88 88 70 88 88 70 70     p... @@@p..p..pp
     2ac:	88 88 78 08 10 60 00 60 60 00 60 60 00 00 60 60     ..x..`.``.``..``
     2bc:	00 60 20 40 08 10 20 40 20 10 08 00 00 f8 00 f8     .` @.. @ .......
     2cc:	00 00 80 40 20 10 20 40 80 70 88 08 10 20 00 20     ...@ . @.p... . 
     2dc:	70 88 08 68 a8 a8 70 70 88 88 88 f8 88 88 f0 88     p..h..pp........
     2ec:	88 f0 88 88 f0 70 88 80 80 80 88 70 e0 90 88 88     .....p.....p....
     2fc:	88 90 e0 f8 80 80 f0 80 80 f8 f8 80 80 e0 80 80     ................
     30c:	80 70 88 80 80 98 88 70 88 88 88 f8 88 88 88 70     .p.....p.......p
     31c:	20 20 20 20 20 70 38 10 10 10 10 90 60 88 90 a0          p8.....`...
     32c:	c0 a0 90 88 80 80 80 80 80 80 f8 88 d8 a8 88 88     ................
     33c:	88 88 88 88 c8 a8 98 88 88 70 88 88 88 88 88 70     .........p.....p
     34c:	f0 88 88 f0 80 80 80 70 88 88 88 a8 90 68 f0 88     .......p.....h..
     35c:	88 f0 a0 90 88 78 80 80 70 08 08 f0 f8 20 20 20     .....x..p....   
     36c:	20 20 20 88 88 88 88 88 88 70 88 88 88 88 88 50        ......p.....P
     37c:	20 88 88 88 a8 a8 d8 88 88 88 50 20 50 88 88 88      .........P P...
     38c:	88 50 20 20 20 20 f8 08 10 20 40 80 f8 38 20 20     .P    ... @..8  
     39c:	20 20 20 38 00 80 40 20 10 08 00 e0 20 20 20 20        8..@ ....    
     3ac:	20 e0 20 50 88 00 00 00 00 00 00 00 00 00 00 f8      . P............
     3bc:	40 20 10 00 00 00 00 00 00 70 08 78 88 78 80 80     @ .......p.x.x..
     3cc:	b0 c8 88 88 f0 00 00 70 80 80 88 70 08 08 68 98     .......p...p..h.
     3dc:	88 88 78 00 00 70 88 f8 80 70 30 48 40 e0 40 40     ..x..p...p0H@.@@
     3ec:	40 00 00 78 88 78 08 30 80 80 b0 c8 88 88 88 20     @..x.x.0....... 
     3fc:	00 60 20 20 20 70 10 00 30 10 10 90 60 40 40 48     .`   p..0...`@@H
     40c:	50 60 50 48 60 20 20 20 20 20 70 00 00 d0 a8 a8     P`PH`     p.....
     41c:	88 88 00 00 b0 c8 88 88 88 00 00 70 88 88 88 70     ...........p...p
     42c:	00 00 f0 88 f0 80 80 00 00 68 98 78 08 08 00 00     .........h.x....
     43c:	b0 c8 80 80 80 00 00 70 80 70 08 f0 40 40 e0 40     .......p.p..@@.@
     44c:	40 48 30 00 00 88 88 88 98 68 00 00 88 88 88 50     @H0......h.....P
     45c:	20 00 00 88 88 a8 a8 50 00 00 88 50 20 50 88 00      ......P...P P..
     46c:	00 88 88 78 08 70 00 00 f8 10 20 40 f8 10 20 20     ...x.p.... @..  
     47c:	40 20 20 10 20 20 20 20 20 20 20 40 20 20 10 20     @  .       @  . 
     48c:	20 40                                                @

0000048e <tz_min_45>:
     48e:	2b 34 35 20 6d 69 6e 00                             +45 min.

00000496 <tz_min_30>:
     496:	2b 33 30 20 6d 69 6e 00                             +30 min.

0000049e <tz_min_15>:
     49e:	2b 31 35 20 6d 69 6e 00                             +15 min.

000004a6 <tz_min_00>:
     4a6:	20 30 20 6d 69 6e 00                                 0 min.

000004ad <tz_minutes_title>:
     4ad:	54 69 6d 65 7a 6f 6e 65 20 6d 69 6e 75 74 65 73     Timezone minutes
     4bd:	3a 00                                               :.

000004bf <tz_12>:
     4bf:	2b 31 32 3a 20 46 69 6a 69 00                       +12: Fiji.

000004c9 <tz_11>:
     4c9:	2b 31 31 3a 20 53 6f 6c 6f 6d 6f 6e 20 49 73 6c     +11: Solomon Isl
     4d9:	61 6e 64 00                                         and.

000004dd <tz_10>:
     4dd:	2b 31 30 3a 20 41 45 53 54 00                       +10: AEST.

000004e7 <tz_09>:
     4e7:	20 2b 39 3a 20 54 6f 6b 79 6f 00                     +9: Tokyo.

000004f2 <tz_08>:
     4f2:	20 2b 38 3a 20 48 6f 6e 67 20 4b 6f 6e 67 00         +8: Hong Kong.

00000501 <tz_07>:
     501:	20 2b 37 3a 20 54 68 61 69 6c 61 6e 64 00            +7: Thailand.

0000050f <tz_06>:
     50f:	20 2b 36 3a 20 42 61 6e 67 6c 61 64 65 73 68 00      +6: Bangladesh.

0000051f <tz_05>:
     51f:	20 2b 35 3a 20 50 61 6b 69 73 74 61 6e 00            +5: Pakistan.

0000052d <tz_04>:
     52d:	20 2b 34 3a 20 4d 6f 73 63 6f 77 00                  +4: Moscow.

00000539 <tz_03>:
     539:	20 2b 33 3a 20 4e 61 69 72 6f 62 69 00               +3: Nairobi.

00000546 <tz_02>:
     546:	20 2b 32 3a 20 49 73 74 61 6e 62 75 6c 00            +2: Istanbul.

00000554 <tz_01>:
     554:	20 2b 31 3a 20 4f 73 6c 6f 2c 20 42 65 72 6c 69      +1: Oslo, Berli
     564:	6e 00                                               n.

00000566 <tz_00>:
     566:	55 54 43 3a 20 55 4b 20 28 47 4d 54 29 00           UTC: UK (GMT).

00000574 <tz_n01>:
     574:	20 2d 31 3a 20 50 72 61 69 61 00                     -1: Praia.

0000057f <tz_n02>:
     57f:	20 2d 32 3a 20 53 6f 75 74 68 20 47 65 6f 72 67      -2: South Georg
     58f:	69 61 00                                            ia.

00000592 <tz_n03>:
     592:	20 2d 33 3a 20 47 72 65 65 6e 6c 61 6e 64 00         -3: Greenland.

000005a1 <tz_n04>:
     5a1:	20 2d 34 3a 20 45 43 54 00                           -4: ECT.

000005aa <tz_n05>:
     5aa:	20 2d 35 3a 20 45 61 73 74 65 72 6e 00               -5: Eastern.

000005b7 <tz_n06>:
     5b7:	20 2d 36 3a 20 43 65 6e 74 72 61 6c 00               -6: Central.

000005c4 <tz_n07>:
     5c4:	20 2d 37 3a 20 4d 6f 75 6e 74 61 69 6e 00            -7: Mountain.

000005d2 <tz_n08>:
     5d2:	20 2d 38 3a 20 50 61 63 69 66 69 63 00               -8: Pacific.

000005df <tz_n09>:
     5df:	20 2d 39 3a 20 41 6c 61 73 6b 61 00                  -9: Alaska.

000005eb <tz_n10>:
     5eb:	2d 31 30 3a 20 48 61 77 61 69 69 00                 -10: Hawaii.

000005f7 <tz_n11>:
     5f7:	2d 31 31 3a 20 4b 69 6e 67 6d 61 6e 20 52 65 65     -11: Kingman Ree
     607:	66 00                                               f.

00000609 <tz_n12>:
     609:	2d 31 32 3a 20 42 61 6b 65 72 20 49 73 6c 61 6e     -12: Baker Islan
     619:	64 00                                               d.

0000061b <tz_hours_title>:
     61b:	54 69 6d 65 7a 6f 6e 65 20 68 6f 75 72 73 20 55     Timezone hours U
     62b:	54 43 00                                            TC.

0000062e <__ctors_end>:
     62e:	11 24       	eor	r1, r1
     630:	1f be       	out	0x3f, r1	; 63
     632:	cf ef       	ldi	r28, 0xFF	; 255
     634:	df e5       	ldi	r29, 0x5F	; 95
     636:	de bf       	out	0x3e, r29	; 62
     638:	cd bf       	out	0x3d, r28	; 61
     63a:	00 e0       	ldi	r16, 0x00	; 0
     63c:	0c bf       	out	0x3c, r16	; 60

0000063e <__do_copy_data>:
     63e:	11 e2       	ldi	r17, 0x21	; 33
     640:	a0 e0       	ldi	r26, 0x00	; 0
     642:	b0 e2       	ldi	r27, 0x20	; 32
     644:	ea e7       	ldi	r30, 0x7A	; 122
     646:	f6 e5       	ldi	r31, 0x56	; 86
     648:	00 e0       	ldi	r16, 0x00	; 0
     64a:	0b bf       	out	0x3b, r16	; 59
     64c:	02 c0       	rjmp	.+4      	; 0x652 <__do_copy_data+0x14>
     64e:	07 90       	elpm	r0, Z+
     650:	0d 92       	st	X+, r0
     652:	ae 35       	cpi	r26, 0x5E	; 94
     654:	b1 07       	cpc	r27, r17
     656:	d9 f7       	brne	.-10     	; 0x64e <__do_copy_data+0x10>

00000658 <__do_clear_bss>:
     658:	2a e2       	ldi	r18, 0x2A	; 42
     65a:	a0 e6       	ldi	r26, 0x60	; 96
     65c:	b1 e2       	ldi	r27, 0x21	; 33
     65e:	01 c0       	rjmp	.+2      	; 0x662 <.do_clear_bss_start>

00000660 <.do_clear_bss_loop>:
     660:	1d 92       	st	X+, r1

00000662 <.do_clear_bss_start>:
     662:	ab 35       	cpi	r26, 0x5B	; 91
     664:	b2 07       	cpc	r27, r18
     666:	e1 f7       	brne	.-8      	; 0x660 <.do_clear_bss_loop>
     668:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <main>
     66c:	0c 94 3b 2b 	jmp	0x5676	; 0x5676 <_exit>

00000670 <__bad_interrupt>:
     670:	c7 cc       	rjmp	.-1650   	; 0x0 <__vectors>

00000672 <_1101010101_>:

#if ((_STATIC_PORT_PIN_CONF_ == 1) && (QTOUCH_SNS_PORT_COUNT >= 1))

GLOBAL_FUNCTION _1101010101_
_1101010101_:
    sts	CONCAT( PORT, SNS1, _DIRCLR ), p_1
     672:	80 93 a2 06 	sts	0x06A2, r24
    sts	CONCAT( PORT, SNSK1, _DIRCLR ), p_2
     676:	60 93 a2 06 	sts	0x06A2, r22
    sts	CONCAT( PORT, SNS1, _OUTSET), p_1
     67a:	80 93 a5 06 	sts	0x06A5, r24
    sts	CONCAT( PORT, SNSK1, _OUTCLR), p_2
     67e:	60 93 a6 06 	sts	0x06A6, r22
    sts	CONCAT( PORT, SNSK1, _DIRSET), p_2
     682:	60 93 a1 06 	sts	0x06A1, r22
    ret
     686:	08 95       	ret

00000688 <_1101010111_>:


GLOBAL_FUNCTION _1101010111_
_1101010111_:
    push r19
     688:	3f 93       	push	r19
    sts	CONCAT( PORT, SNSK1, _DIRCLR), p_2
     68a:	60 93 a2 06 	sts	0x06A2, r22
    sts	CONCAT( PORT, SNS1, _DIRSET), p_1
     68e:	80 93 a1 06 	sts	0x06A1, r24
    _10100011_
    _01101001_
    _00011001_
    _00011001_
#endif
    sts	CONCAT( PORT, SNS1, _DIRCLR ), p_1
     692:	80 93 a2 06 	sts	0x06A2, r24
    sts	CONCAT( PORT, SNSK1, _DIRSET ), p_2
     696:	60 93 a1 06 	sts	0x06A1, r22
    pop  r19
     69a:	3f 91       	pop	r19
    lds	r_v, CONCAT(PORT, SNS1, _IN )
     69c:	80 91 a8 06 	lds	r24, 0x06A8
    and	r_v, p_3
     6a0:	84 23       	and	r24, r20
    ret
     6a2:	08 95       	ret

000006a4 <_1101010110_>:


GLOBAL_FUNCTION _1101010110_
_1101010110_:
    sts	CONCAT( PORT, SNS1, _OUTCLR), p_1
     6a4:	80 93 a6 06 	sts	0x06A6, r24
    sts	CONCAT( PORT, SNS1, _DIRSET), p_1
     6a8:	80 93 a1 06 	sts	0x06A1, r24
    ret
     6ac:	08 95       	ret

000006ae <burst_1_1_10_0>:
     6ae:	a1 e0       	ldi	r26, 0x01	; 1
     6b0:	b0 e0       	ldi	r27, 0x00	; 0
     6b2:	ed e5       	ldi	r30, 0x5D	; 93
     6b4:	f3 e0       	ldi	r31, 0x03	; 3
     6b6:	0c 94 8b 26 	jmp	0x4d16	; 0x4d16 <__prologue_saves__+0xc>
     6ba:	e8 2f       	mov	r30, r24
     6bc:	0f b7       	in	r16, 0x3f	; 63
     6be:	00 78       	andi	r16, 0x80	; 128
     6c0:	19 82       	std	Y+1, r1	; 0x01
     6c2:	80 91 60 21 	lds	r24, 0x2160
     6c6:	81 30       	cpi	r24, 0x01	; 1
     6c8:	19 f0       	breq	.+6      	; 0x6d0 <burst_1_1_10_0+0x22>
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	80 93 60 21 	sts	0x2160, r24
     6d0:	ce 2e       	mov	r12, r30
     6d2:	dd 24       	eor	r13, r13
     6d4:	f6 01       	movw	r30, r12
     6d6:	ee 55       	subi	r30, 0x5E	; 94
     6d8:	fe 4d       	sbci	r31, 0xDE	; 222
     6da:	b0 80       	ld	r11, Z
     6dc:	f6 01       	movw	r30, r12
     6de:	ea 55       	subi	r30, 0x5A	; 90
     6e0:	fe 4d       	sbci	r31, 0xDE	; 222
     6e2:	a0 80       	ld	r10, Z
     6e4:	f8 94       	cli
     6e6:	bb 20       	and	r11, r11
     6e8:	09 f4       	brne	.+2      	; 0x6ec <burst_1_1_10_0+0x3e>
     6ea:	aa c0       	rjmp	.+340    	; 0x840 <burst_1_1_10_0+0x192>
     6ec:	8b 2d       	mov	r24, r11
     6ee:	da df       	rcall	.-76     	; 0x6a4 <_1101010110_>
     6f0:	8b 2d       	mov	r24, r11
     6f2:	6a 2d       	mov	r22, r10
     6f4:	be df       	rcall	.-132    	; 0x672 <_1101010101_>
     6f6:	1b 2d       	mov	r17, r11
     6f8:	ee 24       	eor	r14, r14
     6fa:	ff 24       	eor	r15, r15
     6fc:	60 e0       	ldi	r22, 0x00	; 0
     6fe:	81 2c       	mov	r8, r1
     700:	30 e2       	ldi	r19, 0x20	; 32
     702:	93 2e       	mov	r9, r19
     704:	f5 fe       	sbrs	r15, 5
     706:	07 c0       	rjmp	.+14     	; 0x716 <burst_1_1_10_0+0x68>
     708:	90 91 a3 21 	lds	r25, 0x21A3
     70c:	80 91 a2 21 	lds	r24, 0x21A2
     710:	98 2b       	or	r25, r24
     712:	19 f5       	brne	.+70     	; 0x75a <burst_1_1_10_0+0xac>
     714:	35 c0       	rjmp	.+106    	; 0x780 <burst_1_1_10_0+0xd2>
     716:	8f b7       	in	r24, 0x3f	; 63
     718:	80 2b       	or	r24, r16
     71a:	8f bf       	out	0x3f, r24	; 63
     71c:	00 00       	nop
     71e:	f8 94       	cli
     720:	8b 2d       	mov	r24, r11
     722:	6a 2d       	mov	r22, r10
     724:	41 2f       	mov	r20, r17
     726:	b0 df       	rcall	.-160    	; 0x688 <_1101010111_>
     728:	68 2f       	mov	r22, r24
     72a:	08 94       	sec
     72c:	e1 1c       	adc	r14, r1
     72e:	f1 1c       	adc	r15, r1
     730:	80 91 00 20 	lds	r24, 0x2000
     734:	8f 5f       	subi	r24, 0xFF	; 255
     736:	80 93 00 20 	sts	0x2000, r24
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	30 f0       	brcs	.+12     	; 0x74a <burst_1_1_10_0+0x9c>
     73e:	82 30       	cpi	r24, 0x02	; 2
     740:	21 f0       	breq	.+8      	; 0x74a <burst_1_1_10_0+0x9c>
     742:	83 30       	cpi	r24, 0x03	; 3
     744:	11 f0       	breq	.+4      	; 0x74a <burst_1_1_10_0+0x9c>
     746:	10 92 00 20 	sts	0x2000, r1
     74a:	66 23       	and	r22, r22
     74c:	d9 f2       	breq	.-74     	; 0x704 <burst_1_1_10_0+0x56>
     74e:	20 91 a3 21 	lds	r18, 0x21A3
     752:	80 91 a2 21 	lds	r24, 0x21A2
     756:	28 2b       	or	r18, r24
     758:	15 c0       	rjmp	.+42     	; 0x784 <burst_1_1_10_0+0xd6>
     75a:	41 2f       	mov	r20, r17
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	40 ff       	sbrs	r20, 0
     760:	09 c0       	rjmp	.+18     	; 0x774 <burst_1_1_10_0+0xc6>
     762:	e8 2f       	mov	r30, r24
     764:	f0 e0       	ldi	r31, 0x00	; 0
     766:	ee 0f       	add	r30, r30
     768:	ff 1f       	adc	r31, r31
     76a:	e5 59       	subi	r30, 0x95	; 149
     76c:	fe 4d       	sbci	r31, 0xDE	; 222
     76e:	80 82       	st	Z, r8
     770:	91 82       	std	Z+1, r9	; 0x01
     772:	01 c0       	rjmp	.+2      	; 0x776 <burst_1_1_10_0+0xc8>
     774:	90 fd       	sbrc	r25, 0
     776:	8f 5f       	subi	r24, 0xFF	; 255
     778:	96 95       	lsr	r25
     77a:	46 95       	lsr	r20
     77c:	99 23       	and	r25, r25
     77e:	79 f7       	brne	.-34     	; 0x75e <burst_1_1_10_0+0xb0>
     780:	10 e0       	ldi	r17, 0x00	; 0
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	8f b7       	in	r24, 0x3f	; 63
     786:	80 2b       	or	r24, r16
     788:	8f bf       	out	0x3f, r24	; 63
     78a:	10 92 61 21 	sts	0x2161, r1
     78e:	22 23       	and	r18, r18
     790:	09 f4       	brne	.+2      	; 0x794 <burst_1_1_10_0+0xe6>
     792:	3f c0       	rjmp	.+126    	; 0x812 <burst_1_1_10_0+0x164>
     794:	11 23       	and	r17, r17
     796:	09 f4       	brne	.+2      	; 0x79a <burst_1_1_10_0+0xec>
     798:	3c c0       	rjmp	.+120    	; 0x812 <burst_1_1_10_0+0x164>
     79a:	30 91 a7 21 	lds	r19, 0x21A7
     79e:	80 91 a6 21 	lds	r24, 0x21A6
     7a2:	38 2b       	or	r19, r24
     7a4:	56 2f       	mov	r21, r22
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	40 e0       	ldi	r20, 0x00	; 0
     7ae:	23 c0       	rjmp	.+70     	; 0x7f6 <burst_1_1_10_0+0x148>
     7b0:	50 fd       	sbrc	r21, 0
     7b2:	17 c0       	rjmp	.+46     	; 0x7e2 <burst_1_1_10_0+0x134>
     7b4:	19 c0       	rjmp	.+50     	; 0x7e8 <burst_1_1_10_0+0x13a>
     7b6:	30 ff       	sbrs	r19, 0
     7b8:	13 c0       	rjmp	.+38     	; 0x7e0 <burst_1_1_10_0+0x132>
     7ba:	98 17       	cp	r25, r24
     7bc:	81 f4       	brne	.+32     	; 0x7de <burst_1_1_10_0+0x130>
     7be:	e4 2f       	mov	r30, r20
     7c0:	f0 e0       	ldi	r31, 0x00	; 0
     7c2:	ee 0f       	add	r30, r30
     7c4:	ff 1f       	adc	r31, r31
     7c6:	e5 59       	subi	r30, 0x95	; 149
     7c8:	fe 4d       	sbci	r31, 0xDE	; 222
     7ca:	e0 82       	st	Z, r14
     7cc:	f1 82       	std	Z+1, r15	; 0x01
     7ce:	85 2f       	mov	r24, r21
     7d0:	8e 7f       	andi	r24, 0xFE	; 254
     7d2:	19 f4       	brne	.+6      	; 0x7da <burst_1_1_10_0+0x12c>
     7d4:	89 2f       	mov	r24, r25
     7d6:	71 e0       	ldi	r23, 0x01	; 1
     7d8:	08 c0       	rjmp	.+16     	; 0x7ea <burst_1_1_10_0+0x13c>
     7da:	89 2f       	mov	r24, r25
     7dc:	06 c0       	rjmp	.+12     	; 0x7ea <burst_1_1_10_0+0x13c>
     7de:	8f 5f       	subi	r24, 0xFF	; 255
     7e0:	36 95       	lsr	r19
     7e2:	33 23       	and	r19, r19
     7e4:	41 f7       	brne	.-48     	; 0x7b6 <burst_1_1_10_0+0x108>
     7e6:	01 c0       	rjmp	.+2      	; 0x7ea <burst_1_1_10_0+0x13c>
     7e8:	20 fd       	sbrc	r18, 0
     7ea:	9f 5f       	subi	r25, 0xFF	; 255
     7ec:	20 fd       	sbrc	r18, 0
     7ee:	4f 5f       	subi	r20, 0xFF	; 255
     7f0:	56 95       	lsr	r21
     7f2:	26 95       	lsr	r18
     7f4:	11 f0       	breq	.+4      	; 0x7fa <burst_1_1_10_0+0x14c>
     7f6:	55 23       	and	r21, r21
     7f8:	d9 f6       	brne	.-74     	; 0x7b0 <burst_1_1_10_0+0x102>
     7fa:	40 93 61 21 	sts	0x2161, r20
     7fe:	60 95       	com	r22
     800:	16 23       	and	r17, r22
     802:	71 30       	cpi	r23, 0x01	; 1
     804:	21 f4       	brne	.+8      	; 0x80e <burst_1_1_10_0+0x160>
     806:	11 23       	and	r17, r17
     808:	11 f4       	brne	.+4      	; 0x80e <burst_1_1_10_0+0x160>
     80a:	ee 24       	eor	r14, r14
     80c:	ff 24       	eor	r15, r15
     80e:	60 e0       	ldi	r22, 0x00	; 0
     810:	13 c0       	rjmp	.+38     	; 0x838 <burst_1_1_10_0+0x18a>
     812:	80 91 a3 21 	lds	r24, 0x21A3
     816:	90 91 a2 21 	lds	r25, 0x21A2
     81a:	89 2b       	or	r24, r25
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	06 c0       	rjmp	.+12     	; 0x82e <burst_1_1_10_0+0x180>
     822:	89 81       	ldd	r24, Y+1	; 0x01
     824:	80 fd       	sbrc	r24, 0
     826:	9f 5f       	subi	r25, 0xFF	; 255
     828:	89 81       	ldd	r24, Y+1	; 0x01
     82a:	86 95       	lsr	r24
     82c:	89 83       	std	Y+1, r24	; 0x01
     82e:	89 81       	ldd	r24, Y+1	; 0x01
     830:	88 23       	and	r24, r24
     832:	b9 f7       	brne	.-18     	; 0x822 <burst_1_1_10_0+0x174>
     834:	90 93 61 21 	sts	0x2161, r25
     838:	f8 94       	cli
     83a:	11 23       	and	r17, r17
     83c:	09 f0       	breq	.+2      	; 0x840 <burst_1_1_10_0+0x192>
     83e:	62 cf       	rjmp	.-316    	; 0x704 <burst_1_1_10_0+0x56>
     840:	82 ea       	ldi	r24, 0xA2	; 162
     842:	91 e2       	ldi	r25, 0x21	; 33
     844:	c8 0e       	add	r12, r24
     846:	d9 1e       	adc	r13, r25
     848:	f6 01       	movw	r30, r12
     84a:	80 81       	ld	r24, Z
     84c:	2b df       	rcall	.-426    	; 0x6a4 <_1101010110_>
     84e:	8f b7       	in	r24, 0x3f	; 63
     850:	08 2b       	or	r16, r24
     852:	0f bf       	out	0x3f, r16	; 63
     854:	21 96       	adiw	r28, 0x01	; 1
     856:	ec e0       	ldi	r30, 0x0C	; 12
     858:	0c 94 a4 26 	jmp	0x4d48	; 0x4d48 <__epilogue_restores__+0xc>

0000085c <qt_get_library_sig>:
     85c:	fc 01       	movw	r30, r24
     85e:	80 e2       	ldi	r24, 0x20	; 32
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	80 83       	st	Z, r24
     864:	91 83       	std	Z+1, r25	; 0x01
     866:	12 82       	std	Z+2, r1	; 0x02
     868:	13 82       	std	Z+3, r1	; 0x03
     86a:	80 e3       	ldi	r24, 0x30	; 48
     86c:	94 e0       	ldi	r25, 0x04	; 4
     86e:	84 83       	std	Z+4, r24	; 0x04
     870:	95 83       	std	Z+5, r25	; 0x05
     872:	08 95       	ret

00000874 <qt_enable_key>:
     874:	90 91 9c 21 	lds	r25, 0x219C
     878:	a9 2f       	mov	r26, r25
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	fd 01       	movw	r30, r26
     87e:	ee 0f       	add	r30, r30
     880:	ff 1f       	adc	r31, r31
     882:	ea 0f       	add	r30, r26
     884:	fb 1f       	adc	r31, r27
     886:	ee 0f       	add	r30, r30
     888:	ff 1f       	adc	r31, r31
     88a:	ec 57       	subi	r30, 0x7C	; 124
     88c:	fe 4d       	sbci	r31, 0xDE	; 222
     88e:	43 83       	std	Z+3, r20	; 0x03
     890:	67 70       	andi	r22, 0x07	; 7
     892:	85 83       	std	Z+5, r24	; 0x05
     894:	23 70       	andi	r18, 0x03	; 3
     896:	66 0f       	add	r22, r22
     898:	66 0f       	add	r22, r22
     89a:	66 0f       	add	r22, r22
     89c:	26 2b       	or	r18, r22
     89e:	24 83       	std	Z+4, r18	; 0x04
     8a0:	9f 5f       	subi	r25, 0xFF	; 255
     8a2:	90 93 9c 21 	sts	0x219C, r25
     8a6:	08 95       	ret

000008a8 <qt_get_sensor_delta>:
     8a8:	1f 93       	push	r17
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
     8ae:	28 2f       	mov	r18, r24
     8b0:	c8 2f       	mov	r28, r24
     8b2:	d0 e0       	ldi	r29, 0x00	; 0
     8b4:	fe 01       	movw	r30, r28
     8b6:	ee 0f       	add	r30, r30
     8b8:	ff 1f       	adc	r31, r31
     8ba:	ec 0f       	add	r30, r28
     8bc:	fd 1f       	adc	r31, r29
     8be:	ee 0f       	add	r30, r30
     8c0:	ff 1f       	adc	r31, r31
     8c2:	ec 57       	subi	r30, 0x7C	; 124
     8c4:	fe 4d       	sbci	r31, 0xDE	; 222
     8c6:	35 81       	ldd	r19, Z+5	; 0x05
     8c8:	83 81       	ldd	r24, Z+3	; 0x03
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	00 90 64 21 	lds	r0, 0x2164
     8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <qt_get_sensor_delta+0x2e>
     8d2:	95 95       	asr	r25
     8d4:	87 95       	ror	r24
     8d6:	0a 94       	dec	r0
     8d8:	e2 f7       	brpl	.-8      	; 0x8d2 <qt_get_sensor_delta+0x2a>
     8da:	18 2f       	mov	r17, r24
     8dc:	84 30       	cpi	r24, 0x04	; 4
     8de:	08 f4       	brcc	.+2      	; 0x8e2 <qt_get_sensor_delta+0x3a>
     8e0:	14 e0       	ldi	r17, 0x04	; 4
     8e2:	80 91 9c 21 	lds	r24, 0x219C
     8e6:	28 17       	cp	r18, r24
     8e8:	18 f0       	brcs	.+6      	; 0x8f0 <qt_get_sensor_delta+0x48>
     8ea:	20 e0       	ldi	r18, 0x00	; 0
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	2d c0       	rjmp	.+90     	; 0x94a <qt_get_sensor_delta+0xa2>
     8f0:	83 2f       	mov	r24, r19
     8f2:	1d d1       	rcall	.+570    	; 0xb2e <get_channel_delta>
     8f4:	9c 01       	movw	r18, r24
     8f6:	41 2f       	mov	r20, r17
     8f8:	50 e0       	ldi	r21, 0x00	; 0
     8fa:	16 95       	lsr	r17
     8fc:	16 95       	lsr	r17
     8fe:	81 2f       	mov	r24, r17
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	84 1b       	sub	r24, r20
     904:	95 0b       	sbc	r25, r21
     906:	82 17       	cp	r24, r18
     908:	93 07       	cpc	r25, r19
     90a:	64 f4       	brge	.+24     	; 0x924 <qt_get_sensor_delta+0x7c>
     90c:	fe 01       	movw	r30, r28
     90e:	ee 0f       	add	r30, r30
     910:	ff 1f       	adc	r31, r31
     912:	ec 0f       	add	r30, r28
     914:	fd 1f       	adc	r31, r29
     916:	ee 0f       	add	r30, r30
     918:	ff 1f       	adc	r31, r31
     91a:	ec 57       	subi	r30, 0x7C	; 124
     91c:	fe 4d       	sbci	r31, 0xDE	; 222
     91e:	84 81       	ldd	r24, Z+4	; 0x04
     920:	8b 7f       	andi	r24, 0xFB	; 251
     922:	84 83       	std	Z+4, r24	; 0x04
     924:	88 27       	eor	r24, r24
     926:	99 27       	eor	r25, r25
     928:	84 1b       	sub	r24, r20
     92a:	95 0b       	sbc	r25, r21
     92c:	82 17       	cp	r24, r18
     92e:	93 07       	cpc	r25, r19
     930:	64 f0       	brlt	.+24     	; 0x94a <qt_get_sensor_delta+0xa2>
     932:	fe 01       	movw	r30, r28
     934:	ee 0f       	add	r30, r30
     936:	ff 1f       	adc	r31, r31
     938:	ec 0f       	add	r30, r28
     93a:	fd 1f       	adc	r31, r29
     93c:	ee 0f       	add	r30, r30
     93e:	ff 1f       	adc	r31, r31
     940:	ec 57       	subi	r30, 0x7C	; 124
     942:	fe 4d       	sbci	r31, 0xDE	; 222
     944:	84 81       	ldd	r24, Z+4	; 0x04
     946:	84 60       	ori	r24, 0x04	; 4
     948:	84 83       	std	Z+4, r24	; 0x04
     94a:	c9 01       	movw	r24, r18
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	1f 91       	pop	r17
     952:	08 95       	ret

00000954 <qt_measure_sensors>:
     954:	ff 92       	push	r15
     956:	0f 93       	push	r16
     958:	1f 93       	push	r17
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	10 92 7c 21 	sts	0x217C, r1
     962:	10 92 7d 21 	sts	0x217D, r1
     966:	20 91 80 21 	lds	r18, 0x2180
     96a:	30 91 81 21 	lds	r19, 0x2181
     96e:	80 93 80 21 	sts	0x2180, r24
     972:	90 93 81 21 	sts	0x2181, r25
     976:	40 91 82 21 	lds	r20, 0x2182
     97a:	50 91 83 21 	lds	r21, 0x2183
     97e:	42 1b       	sub	r20, r18
     980:	53 0b       	sbc	r21, r19
     982:	48 0f       	add	r20, r24
     984:	59 1f       	adc	r21, r25
     986:	ff 24       	eor	r15, r15
     988:	03 c0       	rjmp	.+6      	; 0x990 <qt_measure_sensors+0x3c>
     98a:	f3 94       	inc	r15
     98c:	48 5c       	subi	r20, 0xC8	; 200
     98e:	50 40       	sbci	r21, 0x00	; 0
     990:	48 3c       	cpi	r20, 0xC8	; 200
     992:	51 05       	cpc	r21, r1
     994:	d0 f7       	brcc	.-12     	; 0x98a <qt_measure_sensors+0x36>
     996:	40 93 82 21 	sts	0x2182, r20
     99a:	50 93 83 21 	sts	0x2183, r21
     99e:	80 91 9d 21 	lds	r24, 0x219D
     9a2:	88 23       	and	r24, r24
     9a4:	41 f0       	breq	.+16     	; 0x9b6 <qt_measure_sensors+0x62>
     9a6:	8f 15       	cp	r24, r15
     9a8:	18 f4       	brcc	.+6      	; 0x9b0 <qt_measure_sensors+0x5c>
     9aa:	10 92 9d 21 	sts	0x219D, r1
     9ae:	03 c0       	rjmp	.+6      	; 0x9b6 <qt_measure_sensors+0x62>
     9b0:	8f 19       	sub	r24, r15
     9b2:	80 93 9d 21 	sts	0x219D, r24
     9b6:	aa d3       	rcall	.+1876   	; 0x110c <burst>
     9b8:	e0 91 7e 21 	lds	r30, 0x217E
     9bc:	f0 91 7f 21 	lds	r31, 0x217F
     9c0:	30 97       	sbiw	r30, 0x00	; 0
     9c2:	09 f0       	breq	.+2      	; 0x9c6 <qt_measure_sensors+0x72>
     9c4:	19 95       	eicall
     9c6:	10 e0       	ldi	r17, 0x00	; 0
     9c8:	00 e0       	ldi	r16, 0x00	; 0
     9ca:	05 c0       	rjmp	.+10     	; 0x9d6 <qt_measure_sensors+0x82>
     9cc:	81 2f       	mov	r24, r17
     9ce:	6f 2d       	mov	r22, r15
     9d0:	c3 d0       	rcall	.+390    	; 0xb58 <process_sensor>
     9d2:	08 2b       	or	r16, r24
     9d4:	1f 5f       	subi	r17, 0xFF	; 255
     9d6:	60 91 9c 21 	lds	r22, 0x219C
     9da:	16 17       	cp	r17, r22
     9dc:	b8 f3       	brcs	.-18     	; 0x9cc <qt_measure_sensors+0x78>
     9de:	00 23       	and	r16, r16
     9e0:	49 f0       	breq	.+18     	; 0x9f4 <qt_measure_sensors+0xa0>
     9e2:	80 91 7c 21 	lds	r24, 0x217C
     9e6:	90 91 7d 21 	lds	r25, 0x217D
     9ea:	91 60       	ori	r25, 0x01	; 1
     9ec:	80 93 7c 21 	sts	0x217C, r24
     9f0:	90 93 7d 21 	sts	0x217D, r25
     9f4:	10 92 7b 21 	sts	0x217B, r1
     9f8:	a4 e8       	ldi	r26, 0x84	; 132
     9fa:	b1 e2       	ldi	r27, 0x21	; 33
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	41 e0       	ldi	r20, 0x01	; 1
     a00:	50 e0       	ldi	r21, 0x00	; 0
     a02:	17 c0       	rjmp	.+46     	; 0xa32 <qt_measure_sensors+0xde>
     a04:	8c 91       	ld	r24, X
     a06:	88 71       	andi	r24, 0x18	; 24
     a08:	91 f0       	breq	.+36     	; 0xa2e <qt_measure_sensors+0xda>
     a0a:	e3 2f       	mov	r30, r19
     a0c:	e6 95       	lsr	r30
     a0e:	e6 95       	lsr	r30
     a10:	e6 95       	lsr	r30
     a12:	f0 e0       	ldi	r31, 0x00	; 0
     a14:	e5 59       	subi	r30, 0x95	; 149
     a16:	fe 4d       	sbci	r31, 0xDE	; 222
     a18:	83 2f       	mov	r24, r19
     a1a:	87 70       	andi	r24, 0x07	; 7
     a1c:	ea 01       	movw	r28, r20
     a1e:	02 c0       	rjmp	.+4      	; 0xa24 <qt_measure_sensors+0xd0>
     a20:	cc 0f       	add	r28, r28
     a22:	dd 1f       	adc	r29, r29
     a24:	8a 95       	dec	r24
     a26:	e2 f7       	brpl	.-8      	; 0xa20 <qt_measure_sensors+0xcc>
     a28:	20 89       	ldd	r18, Z+16	; 0x10
     a2a:	2c 2b       	or	r18, r28
     a2c:	20 8b       	std	Z+16, r18	; 0x10
     a2e:	3f 5f       	subi	r19, 0xFF	; 255
     a30:	16 96       	adiw	r26, 0x06	; 6
     a32:	36 17       	cp	r19, r22
     a34:	38 f3       	brcs	.-50     	; 0xa04 <qt_measure_sensors+0xb0>
     a36:	80 91 7c 21 	lds	r24, 0x217C
     a3a:	90 91 7d 21 	lds	r25, 0x217D
     a3e:	cd b7       	in	r28, 0x3d	; 61
     a40:	de b7       	in	r29, 0x3e	; 62
     a42:	e5 e0       	ldi	r30, 0x05	; 5
     a44:	0c 94 ab 26 	jmp	0x4d56	; 0x4d56 <__epilogue_restores__+0x1a>

00000a48 <qt_reset_sensing>:
     a48:	10 92 9c 21 	sts	0x219C, r1
     a4c:	84 e0       	ldi	r24, 0x04	; 4
     a4e:	80 93 65 21 	sts	0x2165, r24
     a52:	94 e1       	ldi	r25, 0x14	; 20
     a54:	90 93 68 21 	sts	0x2168, r25
     a58:	85 e0       	ldi	r24, 0x05	; 5
     a5a:	80 93 69 21 	sts	0x2169, r24
     a5e:	10 92 67 21 	sts	0x2167, r1
     a62:	90 93 66 21 	sts	0x2166, r25
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	80 93 64 21 	sts	0x2164, r24
     a6c:	83 e0       	ldi	r24, 0x03	; 3
     a6e:	80 93 6a 21 	sts	0x216A, r24
     a72:	3b d3       	rcall	.+1654   	; 0x10ea <burst_reset>
     a74:	10 92 7e 21 	sts	0x217E, r1
     a78:	10 92 7f 21 	sts	0x217F, r1
     a7c:	08 95       	ret

00000a7e <qt_calibrate_sensing>:
     a7e:	1f 93       	push	r17
     a80:	10 e0       	ldi	r17, 0x00	; 0
     a82:	03 c0       	rjmp	.+6      	; 0xa8a <qt_calibrate_sensing+0xc>
     a84:	81 2f       	mov	r24, r17
     a86:	27 d0       	rcall	.+78     	; 0xad6 <start_cal_sensor>
     a88:	1f 5f       	subi	r17, 0xFF	; 255
     a8a:	80 91 9c 21 	lds	r24, 0x219C
     a8e:	18 17       	cp	r17, r24
     a90:	c8 f3       	brcs	.-14     	; 0xa84 <qt_calibrate_sensing+0x6>
     a92:	1f 91       	pop	r17
     a94:	08 95       	ret

00000a96 <qt_init_sensing_with_burst>:
     a96:	ef 92       	push	r14
     a98:	ff 92       	push	r15
     a9a:	1f 93       	push	r17
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	ec 01       	movw	r28, r24
     aa2:	7b 01       	movw	r14, r22
     aa4:	10 e0       	ldi	r17, 0x00	; 0
     aa6:	03 c0       	rjmp	.+6      	; 0xaae <qt_init_sensing_with_burst+0x18>
     aa8:	81 2f       	mov	r24, r17
     aaa:	15 d0       	rcall	.+42     	; 0xad6 <start_cal_sensor>
     aac:	1f 5f       	subi	r17, 0xFF	; 255
     aae:	80 91 9c 21 	lds	r24, 0x219C
     ab2:	18 17       	cp	r17, r24
     ab4:	c8 f3       	brcs	.-14     	; 0xaa8 <qt_init_sensing_with_burst+0x12>
     ab6:	10 92 80 21 	sts	0x2180, r1
     aba:	10 92 81 21 	sts	0x2181, r1
     abe:	c0 93 62 21 	sts	0x2162, r28
     ac2:	d0 93 63 21 	sts	0x2163, r29
     ac6:	c7 01       	movw	r24, r14
     ac8:	0b d3       	rcall	.+1558   	; 0x10e0 <burst_init>
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	1f 91       	pop	r17
     ad0:	ff 90       	pop	r15
     ad2:	ef 90       	pop	r14
     ad4:	08 95       	ret

00000ad6 <start_cal_sensor>:
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	e4 e8       	ldi	r30, 0x84	; 132
     ada:	f1 e2       	ldi	r31, 0x21	; 33
     adc:	9c 01       	movw	r18, r24
     ade:	22 0f       	add	r18, r18
     ae0:	33 1f       	adc	r19, r19
     ae2:	28 0f       	add	r18, r24
     ae4:	39 1f       	adc	r19, r25
     ae6:	d9 01       	movw	r26, r18
     ae8:	aa 0f       	add	r26, r26
     aea:	bb 1f       	adc	r27, r27
     aec:	ae 0f       	add	r26, r30
     aee:	bf 1f       	adc	r27, r31
     af0:	15 96       	adiw	r26, 0x05	; 5
     af2:	4c 91       	ld	r20, X
     af4:	15 97       	sbiw	r26, 0x05	; 5
     af6:	80 91 7c 21 	lds	r24, 0x217C
     afa:	90 91 7d 21 	lds	r25, 0x217D
     afe:	82 60       	ori	r24, 0x02	; 2
     b00:	80 93 7c 21 	sts	0x217C, r24
     b04:	90 93 7d 21 	sts	0x217D, r25
     b08:	2f 5f       	subi	r18, 0xFF	; 255
     b0a:	3f 4f       	sbci	r19, 0xFF	; 255
     b0c:	22 0f       	add	r18, r18
     b0e:	33 1f       	adc	r19, r19
     b10:	e2 0f       	add	r30, r18
     b12:	f3 1f       	adc	r31, r19
     b14:	10 82       	st	Z, r1
     b16:	ee e9       	ldi	r30, 0x9E	; 158
     b18:	f1 e2       	ldi	r31, 0x21	; 33
     b1a:	e4 0f       	add	r30, r20
     b1c:	f1 1d       	adc	r31, r1
     b1e:	80 e8       	ldi	r24, 0x80	; 128
     b20:	80 83       	st	Z, r24
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	8c 93       	st	X, r24
     b26:	8f e0       	ldi	r24, 0x0F	; 15
     b28:	11 96       	adiw	r26, 0x01	; 1
     b2a:	8c 93       	st	X, r24
     b2c:	08 95       	ret

00000b2e <get_channel_delta>:
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	fc 01       	movw	r30, r24
     b32:	34 96       	adiw	r30, 0x04	; 4
     b34:	ab e6       	ldi	r26, 0x6B	; 107
     b36:	b1 e2       	ldi	r27, 0x21	; 33
     b38:	ee 0f       	add	r30, r30
     b3a:	ff 1f       	adc	r31, r31
     b3c:	ea 0f       	add	r30, r26
     b3e:	fb 1f       	adc	r31, r27
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	a8 0f       	add	r26, r24
     b46:	b9 1f       	adc	r27, r25
     b48:	20 81       	ld	r18, Z
     b4a:	31 81       	ldd	r19, Z+1	; 0x01
     b4c:	8d 91       	ld	r24, X+
     b4e:	9c 91       	ld	r25, X
     b50:	28 1b       	sub	r18, r24
     b52:	39 0b       	sbc	r19, r25
     b54:	c9 01       	movw	r24, r18
     b56:	08 95       	ret

00000b58 <process_sensor>:
     b58:	a0 e0       	ldi	r26, 0x00	; 0
     b5a:	b0 e0       	ldi	r27, 0x00	; 0
     b5c:	e2 eb       	ldi	r30, 0xB2	; 178
     b5e:	f5 e0       	ldi	r31, 0x05	; 5
     b60:	0c 94 89 26 	jmp	0x4d12	; 0x4d12 <__prologue_saves__+0x8>
     b64:	78 2e       	mov	r7, r24
     b66:	f6 2e       	mov	r15, r22
     b68:	9f de       	rcall	.-706    	; 0x8a8 <qt_get_sensor_delta>
     b6a:	5c 01       	movw	r10, r24
     b6c:	07 2d       	mov	r16, r7
     b6e:	10 e0       	ldi	r17, 0x00	; 0
     b70:	f8 01       	movw	r30, r16
     b72:	ee 0f       	add	r30, r30
     b74:	ff 1f       	adc	r31, r31
     b76:	e0 0f       	add	r30, r16
     b78:	f1 1f       	adc	r31, r17
     b7a:	ee 0f       	add	r30, r30
     b7c:	ff 1f       	adc	r31, r31
     b7e:	ec 57       	subi	r30, 0x7C	; 124
     b80:	fe 4d       	sbci	r31, 0xDE	; 222
     b82:	54 81       	ldd	r21, Z+4	; 0x04
     b84:	43 81       	ldd	r20, Z+3	; 0x03
     b86:	24 2f       	mov	r18, r20
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	85 2f       	mov	r24, r21
     b8c:	83 70       	andi	r24, 0x03	; 3
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	01 96       	adiw	r24, 0x01	; 1
     b92:	02 c0       	rjmp	.+4      	; 0xb98 <process_sensor+0x40>
     b94:	35 95       	asr	r19
     b96:	27 95       	ror	r18
     b98:	8a 95       	dec	r24
     b9a:	e2 f7       	brpl	.-8      	; 0xb94 <process_sensor+0x3c>
     b9c:	82 2f       	mov	r24, r18
     b9e:	22 30       	cpi	r18, 0x02	; 2
     ba0:	08 f4       	brcc	.+2      	; 0xba4 <process_sensor+0x4c>
     ba2:	82 e0       	ldi	r24, 0x02	; 2
     ba4:	24 2f       	mov	r18, r20
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	b9 01       	movw	r22, r18
     baa:	68 1b       	sub	r22, r24
     bac:	71 09       	sbc	r23, r1
     bae:	f8 01       	movw	r30, r16
     bb0:	ee 0f       	add	r30, r30
     bb2:	ff 1f       	adc	r31, r31
     bb4:	e0 0f       	add	r30, r16
     bb6:	f1 1f       	adc	r31, r17
     bb8:	ef 01       	movw	r28, r30
     bba:	cc 0f       	add	r28, r28
     bbc:	dd 1f       	adc	r29, r29
     bbe:	cc 57       	subi	r28, 0x7C	; 124
     bc0:	de 4d       	sbci	r29, 0xDE	; 222
     bc2:	88 81       	ld	r24, Y
     bc4:	84 30       	cpi	r24, 0x04	; 4
     bc6:	09 f4       	brne	.+2      	; 0xbca <process_sensor+0x72>
     bc8:	f7 c0       	rjmp	.+494    	; 0xdb8 <process_sensor+0x260>
     bca:	85 30       	cpi	r24, 0x05	; 5
     bcc:	30 f4       	brcc	.+12     	; 0xbda <process_sensor+0x82>
     bce:	81 30       	cpi	r24, 0x01	; 1
     bd0:	71 f0       	breq	.+28     	; 0xbee <process_sensor+0x96>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	09 f0       	breq	.+2      	; 0xbd8 <process_sensor+0x80>
     bd6:	7d c2       	rjmp	.+1274   	; 0x10d2 <process_sensor+0x57a>
     bd8:	6e c0       	rjmp	.+220    	; 0xcb6 <process_sensor+0x15e>
     bda:	80 31       	cpi	r24, 0x10	; 16
     bdc:	09 f4       	brne	.+2      	; 0xbe0 <process_sensor+0x88>
     bde:	a1 c1       	rjmp	.+834    	; 0xf22 <process_sensor+0x3ca>
     be0:	80 32       	cpi	r24, 0x20	; 32
     be2:	09 f4       	brne	.+2      	; 0xbe6 <process_sensor+0x8e>
     be4:	42 c2       	rjmp	.+1156   	; 0x106a <process_sensor+0x512>
     be6:	88 30       	cpi	r24, 0x08	; 8
     be8:	09 f0       	breq	.+2      	; 0xbec <process_sensor+0x94>
     bea:	73 c2       	rjmp	.+1254   	; 0x10d2 <process_sensor+0x57a>
     bec:	ee c1       	rjmp	.+988    	; 0xfca <process_sensor+0x472>
     bee:	40 91 7c 21 	lds	r20, 0x217C
     bf2:	50 91 7d 21 	lds	r21, 0x217D
     bf6:	ca 01       	movw	r24, r20
     bf8:	92 60       	ori	r25, 0x02	; 2
     bfa:	80 93 7c 21 	sts	0x217C, r24
     bfe:	90 93 7d 21 	sts	0x217D, r25
     c02:	8d 81       	ldd	r24, Y+5	; 0x05
     c04:	69 81       	ldd	r22, Y+1	; 0x01
     c06:	a8 2f       	mov	r26, r24
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	6a 30       	cpi	r22, 0x0A	; 10
     c0c:	60 f0       	brcs	.+24     	; 0xc26 <process_sensor+0xce>
     c0e:	aa 0f       	add	r26, r26
     c10:	bb 1f       	adc	r27, r27
     c12:	fd 01       	movw	r30, r26
     c14:	e5 59       	subi	r30, 0x95	; 149
     c16:	fe 4d       	sbci	r31, 0xDE	; 222
     c18:	80 81       	ld	r24, Z
     c1a:	91 81       	ldd	r25, Z+1	; 0x01
     c1c:	ad 58       	subi	r26, 0x8D	; 141
     c1e:	be 4d       	sbci	r27, 0xDE	; 222
     c20:	8d 93       	st	X+, r24
     c22:	9c 93       	st	X, r25
     c24:	18 c0       	rjmp	.+48     	; 0xc56 <process_sensor+0xfe>
     c26:	aa 0f       	add	r26, r26
     c28:	bb 1f       	adc	r27, r27
     c2a:	fd 01       	movw	r30, r26
     c2c:	ed 58       	subi	r30, 0x8D	; 141
     c2e:	fe 4d       	sbci	r31, 0xDE	; 222
     c30:	20 81       	ld	r18, Z
     c32:	31 81       	ldd	r19, Z+1	; 0x01
     c34:	a5 59       	subi	r26, 0x95	; 149
     c36:	be 4d       	sbci	r27, 0xDE	; 222
     c38:	8d 91       	ld	r24, X+
     c3a:	9c 91       	ld	r25, X
     c3c:	82 17       	cp	r24, r18
     c3e:	93 07       	cpc	r25, r19
     c40:	18 f4       	brcc	.+6      	; 0xc48 <process_sensor+0xf0>
     c42:	21 50       	subi	r18, 0x01	; 1
     c44:	30 40       	sbci	r19, 0x00	; 0
     c46:	05 c0       	rjmp	.+10     	; 0xc52 <process_sensor+0xfa>
     c48:	28 17       	cp	r18, r24
     c4a:	39 07       	cpc	r19, r25
     c4c:	50 f4       	brcc	.+20     	; 0xc62 <process_sensor+0x10a>
     c4e:	2f 5f       	subi	r18, 0xFF	; 255
     c50:	3f 4f       	sbci	r19, 0xFF	; 255
     c52:	20 83       	st	Z, r18
     c54:	31 83       	std	Z+1, r19	; 0x01
     c56:	48 60       	ori	r20, 0x08	; 8
     c58:	52 60       	ori	r21, 0x02	; 2
     c5a:	40 93 7c 21 	sts	0x217C, r20
     c5e:	50 93 7d 21 	sts	0x217D, r21
     c62:	86 2f       	mov	r24, r22
     c64:	81 50       	subi	r24, 0x01	; 1
     c66:	f8 01       	movw	r30, r16
     c68:	ee 0f       	add	r30, r30
     c6a:	ff 1f       	adc	r31, r31
     c6c:	e0 0f       	add	r30, r16
     c6e:	f1 1f       	adc	r31, r17
     c70:	ef 01       	movw	r28, r30
     c72:	cc 0f       	add	r28, r28
     c74:	dd 1f       	adc	r29, r29
     c76:	cc 57       	subi	r28, 0x7C	; 124
     c78:	de 4d       	sbci	r29, 0xDE	; 222
     c7a:	89 83       	std	Y+1, r24	; 0x01
     c7c:	88 23       	and	r24, r24
     c7e:	b1 f4       	brne	.+44     	; 0xcac <process_sensor+0x154>
     c80:	ad 81       	ldd	r26, Y+5	; 0x05
     c82:	82 e0       	ldi	r24, 0x02	; 2
     c84:	88 83       	st	Y, r24
     c86:	80 91 7c 21 	lds	r24, 0x217C
     c8a:	90 91 7d 21 	lds	r25, 0x217D
     c8e:	82 60       	ori	r24, 0x02	; 2
     c90:	80 93 7c 21 	sts	0x217C, r24
     c94:	90 93 7d 21 	sts	0x217D, r25
     c98:	ee 0f       	add	r30, r30
     c9a:	ff 1f       	adc	r31, r31
     c9c:	ea 57       	subi	r30, 0x7A	; 122
     c9e:	fe 4d       	sbci	r31, 0xDE	; 222
     ca0:	10 82       	st	Z, r1
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	a2 56       	subi	r26, 0x62	; 98
     ca6:	be 4d       	sbci	r27, 0xDE	; 222
     ca8:	80 e8       	ldi	r24, 0x80	; 128
     caa:	8c 93       	st	X, r24
     cac:	80 91 66 21 	lds	r24, 0x2166
     cb0:	80 93 9d 21 	sts	0x219D, r24
     cb4:	0c c2       	rjmp	.+1048   	; 0x10ce <process_sensor+0x576>
     cb6:	52 ff       	sbrs	r21, 2
     cb8:	04 c0       	rjmp	.+8      	; 0xcc2 <process_sensor+0x16a>
     cba:	80 e2       	ldi	r24, 0x20	; 32
     cbc:	88 83       	st	Y, r24
     cbe:	19 82       	std	Y+1, r1	; 0x01
     cc0:	f7 c1       	rjmp	.+1006   	; 0x10b0 <process_sensor+0x558>
     cc2:	c5 01       	movw	r24, r10
     cc4:	b7 fe       	sbrs	r11, 7
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <process_sensor+0x174>
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	82 17       	cp	r24, r18
     cce:	93 07       	cpc	r25, r19
     cd0:	80 f0       	brcs	.+32     	; 0xcf2 <process_sensor+0x19a>
     cd2:	f8 01       	movw	r30, r16
     cd4:	ee 0f       	add	r30, r30
     cd6:	ff 1f       	adc	r31, r31
     cd8:	e0 0f       	add	r30, r16
     cda:	f1 1f       	adc	r31, r17
     cdc:	ee 0f       	add	r30, r30
     cde:	ff 1f       	adc	r31, r31
     ce0:	df 01       	movw	r26, r30
     ce2:	ac 57       	subi	r26, 0x7C	; 124
     ce4:	be 4d       	sbci	r27, 0xDE	; 222
     ce6:	84 e0       	ldi	r24, 0x04	; 4
     ce8:	8c 93       	st	X, r24
     cea:	ea 57       	subi	r30, 0x7A	; 122
     cec:	fe 4d       	sbci	r31, 0xDE	; 222
     cee:	10 82       	st	Z, r1
     cf0:	e5 c1       	rjmp	.+970    	; 0x10bc <process_sensor+0x564>
     cf2:	ff 20       	and	r15, r15
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <process_sensor+0x1a0>
     cf6:	ed c1       	rjmp	.+986    	; 0x10d2 <process_sensor+0x57a>
     cf8:	80 91 9d 21 	lds	r24, 0x219D
     cfc:	88 23       	and	r24, r24
     cfe:	09 f0       	breq	.+2      	; 0xd02 <process_sensor+0x1aa>
     d00:	e8 c1       	rjmp	.+976    	; 0x10d2 <process_sensor+0x57a>
     d02:	f8 01       	movw	r30, r16
     d04:	ee 0f       	add	r30, r30
     d06:	ff 1f       	adc	r31, r31
     d08:	e0 0f       	add	r30, r16
     d0a:	f1 1f       	adc	r31, r17
     d0c:	ee 0f       	add	r30, r30
     d0e:	ff 1f       	adc	r31, r31
     d10:	ec 57       	subi	r30, 0x7C	; 124
     d12:	fe 4d       	sbci	r31, 0xDE	; 222
     d14:	85 81       	ldd	r24, Z+5	; 0x05
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	ec 01       	movw	r28, r24
     d1a:	cc 0f       	add	r28, r28
     d1c:	dd 1f       	adc	r29, r29
     d1e:	cd 58       	subi	r28, 0x8D	; 141
     d20:	de 4d       	sbci	r29, 0xDE	; 222
     d22:	28 81       	ld	r18, Y
     d24:	39 81       	ldd	r19, Y+1	; 0x01
     d26:	fc 01       	movw	r30, r24
     d28:	ee 0f       	add	r30, r30
     d2a:	ff 1f       	adc	r31, r31
     d2c:	e5 59       	subi	r30, 0x95	; 149
     d2e:	fe 4d       	sbci	r31, 0xDE	; 222
     d30:	01 90       	ld	r0, Z+
     d32:	f0 81       	ld	r31, Z
     d34:	e0 2d       	mov	r30, r0
     d36:	2e 17       	cp	r18, r30
     d38:	3f 07       	cpc	r19, r31
     d3a:	88 f4       	brcc	.+34     	; 0xd5e <process_sensor+0x206>
     d3c:	fc 01       	movw	r30, r24
     d3e:	e2 56       	subi	r30, 0x62	; 98
     d40:	fe 4d       	sbci	r31, 0xDE	; 222
     d42:	90 81       	ld	r25, Z
     d44:	9f 0d       	add	r25, r15
     d46:	90 83       	st	Z, r25
     d48:	80 91 69 21 	lds	r24, 0x2169
     d4c:	80 58       	subi	r24, 0x80	; 128
     d4e:	98 17       	cp	r25, r24
     d50:	08 f4       	brcc	.+2      	; 0xd54 <process_sensor+0x1fc>
     d52:	bf c1       	rjmp	.+894    	; 0x10d2 <process_sensor+0x57a>
     d54:	80 e8       	ldi	r24, 0x80	; 128
     d56:	80 83       	st	Z, r24
     d58:	2f 5f       	subi	r18, 0xFF	; 255
     d5a:	3f 4f       	sbci	r19, 0xFF	; 255
     d5c:	14 c0       	rjmp	.+40     	; 0xd86 <process_sensor+0x22e>
     d5e:	dc 01       	movw	r26, r24
     d60:	a2 56       	subi	r26, 0x62	; 98
     d62:	be 4d       	sbci	r27, 0xDE	; 222
     d64:	e2 17       	cp	r30, r18
     d66:	f3 07       	cpc	r31, r19
     d68:	d0 f4       	brcc	.+52     	; 0xd9e <process_sensor+0x246>
     d6a:	8c 91       	ld	r24, X
     d6c:	8f 19       	sub	r24, r15
     d6e:	8c 93       	st	X, r24
     d70:	40 e8       	ldi	r20, 0x80	; 128
     d72:	90 91 68 21 	lds	r25, 0x2168
     d76:	54 2f       	mov	r21, r20
     d78:	59 1b       	sub	r21, r25
     d7a:	58 17       	cp	r21, r24
     d7c:	08 f4       	brcc	.+2      	; 0xd80 <process_sensor+0x228>
     d7e:	a9 c1       	rjmp	.+850    	; 0x10d2 <process_sensor+0x57a>
     d80:	4c 93       	st	X, r20
     d82:	21 50       	subi	r18, 0x01	; 1
     d84:	30 40       	sbci	r19, 0x00	; 0
     d86:	28 83       	st	Y, r18
     d88:	39 83       	std	Y+1, r19	; 0x01
     d8a:	80 91 7c 21 	lds	r24, 0x217C
     d8e:	90 91 7d 21 	lds	r25, 0x217D
     d92:	88 60       	ori	r24, 0x08	; 8
     d94:	80 93 7c 21 	sts	0x217C, r24
     d98:	90 93 7d 21 	sts	0x217D, r25
     d9c:	9a c1       	rjmp	.+820    	; 0x10d2 <process_sensor+0x57a>
     d9e:	2c 91       	ld	r18, X
     da0:	21 38       	cpi	r18, 0x81	; 129
     da2:	10 f0       	brcs	.+4      	; 0xda8 <process_sensor+0x250>
     da4:	21 50       	subi	r18, 0x01	; 1
     da6:	2c 93       	st	X, r18
     da8:	fc 01       	movw	r30, r24
     daa:	e2 56       	subi	r30, 0x62	; 98
     dac:	fe 4d       	sbci	r31, 0xDE	; 222
     dae:	80 81       	ld	r24, Z
     db0:	87 fd       	sbrc	r24, 7
     db2:	8f c1       	rjmp	.+798    	; 0x10d2 <process_sensor+0x57a>
     db4:	8f 5f       	subi	r24, 0xFF	; 255
     db6:	57 c1       	rjmp	.+686    	; 0x1066 <process_sensor+0x50e>
     db8:	c5 01       	movw	r24, r10
     dba:	b7 fe       	sbrs	r11, 7
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <process_sensor+0x26a>
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	f8 01       	movw	r30, r16
     dc4:	ee 0f       	add	r30, r30
     dc6:	ff 1f       	adc	r31, r31
     dc8:	82 17       	cp	r24, r18
     dca:	93 07       	cpc	r25, r19
     dcc:	08 f4       	brcc	.+2      	; 0xdd0 <process_sensor+0x278>
     dce:	8f c0       	rjmp	.+286    	; 0xeee <process_sensor+0x396>
     dd0:	80 91 66 21 	lds	r24, 0x2166
     dd4:	80 93 9d 21 	sts	0x219D, r24
     dd8:	9f 01       	movw	r18, r30
     dda:	20 0f       	add	r18, r16
     ddc:	31 1f       	adc	r19, r17
     dde:	22 0f       	add	r18, r18
     de0:	33 1f       	adc	r19, r19
     de2:	d9 01       	movw	r26, r18
     de4:	aa 57       	subi	r26, 0x7A	; 122
     de6:	be 4d       	sbci	r27, 0xDE	; 222
     de8:	8c 91       	ld	r24, X
     dea:	8f 5f       	subi	r24, 0xFF	; 255
     dec:	8c 93       	st	X, r24
     dee:	f9 01       	movw	r30, r18
     df0:	ec 57       	subi	r30, 0x7C	; 124
     df2:	fe 4d       	sbci	r31, 0xDE	; 222
     df4:	84 81       	ldd	r24, Z+4	; 0x04
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	88 73       	andi	r24, 0x38	; 56
     dfa:	90 70       	andi	r25, 0x00	; 0
     dfc:	23 e0       	ldi	r18, 0x03	; 3
     dfe:	96 95       	lsr	r25
     e00:	87 95       	ror	r24
     e02:	2a 95       	dec	r18
     e04:	e1 f7       	brne	.-8      	; 0xdfe <process_sensor+0x2a6>
     e06:	68 2e       	mov	r6, r24
     e08:	88 23       	and	r24, r24
     e0a:	09 f4       	brne	.+2      	; 0xe0e <process_sensor+0x2b6>
     e0c:	3e c0       	rjmp	.+124    	; 0xe8a <process_sensor+0x332>
     e0e:	dd 24       	eor	r13, r13
     e10:	cc 24       	eor	r12, r12
     e12:	7f 01       	movw	r14, r30
     e14:	83 e0       	ldi	r24, 0x03	; 3
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	e8 0e       	add	r14, r24
     e1a:	f9 1e       	adc	r15, r25
     e1c:	4d 01       	movw	r8, r26
     e1e:	2f c0       	rjmp	.+94     	; 0xe7e <process_sensor+0x326>
     e20:	d7 14       	cp	r13, r7
     e22:	61 f1       	breq	.+88     	; 0xe7c <process_sensor+0x324>
     e24:	8d 2d       	mov	r24, r13
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	ec 01       	movw	r28, r24
     e2a:	cc 0f       	add	r28, r28
     e2c:	dd 1f       	adc	r29, r29
     e2e:	c8 0f       	add	r28, r24
     e30:	d9 1f       	adc	r29, r25
     e32:	cc 0f       	add	r28, r28
     e34:	dd 1f       	adc	r29, r29
     e36:	cc 57       	subi	r28, 0x7C	; 124
     e38:	de 4d       	sbci	r29, 0xDE	; 222
     e3a:	8c 81       	ldd	r24, Y+4	; 0x04
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	88 73       	andi	r24, 0x38	; 56
     e40:	90 70       	andi	r25, 0x00	; 0
     e42:	73 e0       	ldi	r23, 0x03	; 3
     e44:	96 95       	lsr	r25
     e46:	87 95       	ror	r24
     e48:	7a 95       	dec	r23
     e4a:	e1 f7       	brne	.-8      	; 0xe44 <process_sensor+0x2ec>
     e4c:	68 16       	cp	r6, r24
     e4e:	b1 f4       	brne	.+44     	; 0xe7c <process_sensor+0x324>
     e50:	8d 2d       	mov	r24, r13
     e52:	2a dd       	rcall	.-1452   	; 0x8a8 <qt_get_sensor_delta>
     e54:	2b 81       	ldd	r18, Y+3	; 0x03
     e56:	82 1b       	sub	r24, r18
     e58:	91 09       	sbc	r25, r1
     e5a:	f7 01       	movw	r30, r14
     e5c:	20 81       	ld	r18, Z
     e5e:	a5 01       	movw	r20, r10
     e60:	42 1b       	sub	r20, r18
     e62:	51 09       	sbc	r21, r1
     e64:	48 17       	cp	r20, r24
     e66:	59 07       	cpc	r21, r25
     e68:	2c f0       	brlt	.+10     	; 0xe74 <process_sensor+0x31c>
     e6a:	88 81       	ld	r24, Y
     e6c:	80 31       	cpi	r24, 0x10	; 16
     e6e:	11 f0       	breq	.+4      	; 0xe74 <process_sensor+0x31c>
     e70:	88 30       	cpi	r24, 0x08	; 8
     e72:	21 f4       	brne	.+8      	; 0xe7c <process_sensor+0x324>
     e74:	f4 01       	movw	r30, r8
     e76:	10 82       	st	Z, r1
     e78:	cc 24       	eor	r12, r12
     e7a:	c3 94       	inc	r12
     e7c:	d3 94       	inc	r13
     e7e:	80 91 9c 21 	lds	r24, 0x219C
     e82:	d8 16       	cp	r13, r24
     e84:	68 f2       	brcs	.-102    	; 0xe20 <process_sensor+0x2c8>
     e86:	cc 20       	and	r12, r12
     e88:	79 f4       	brne	.+30     	; 0xea8 <process_sensor+0x350>
     e8a:	80 91 65 21 	lds	r24, 0x2165
     e8e:	88 23       	and	r24, r24
     e90:	59 f0       	breq	.+22     	; 0xea8 <process_sensor+0x350>
     e92:	80 91 7c 21 	lds	r24, 0x217C
     e96:	90 91 7d 21 	lds	r25, 0x217D
     e9a:	98 60       	ori	r25, 0x08	; 8
     e9c:	80 93 7c 21 	sts	0x217C, r24
     ea0:	90 93 7d 21 	sts	0x217D, r25
     ea4:	41 e0       	ldi	r20, 0x01	; 1
     ea6:	01 c0       	rjmp	.+2      	; 0xeaa <process_sensor+0x352>
     ea8:	40 e0       	ldi	r20, 0x00	; 0
     eaa:	98 01       	movw	r18, r16
     eac:	22 0f       	add	r18, r18
     eae:	33 1f       	adc	r19, r19
     eb0:	20 0f       	add	r18, r16
     eb2:	31 1f       	adc	r19, r17
     eb4:	f9 01       	movw	r30, r18
     eb6:	ee 0f       	add	r30, r30
     eb8:	ff 1f       	adc	r31, r31
     eba:	ea 57       	subi	r30, 0x7A	; 122
     ebc:	fe 4d       	sbci	r31, 0xDE	; 222
     ebe:	90 81       	ld	r25, Z
     ec0:	80 91 65 21 	lds	r24, 0x2165
     ec4:	98 17       	cp	r25, r24
     ec6:	08 f4       	brcc	.+2      	; 0xeca <process_sensor+0x372>
     ec8:	05 c1       	rjmp	.+522    	; 0x10d4 <process_sensor+0x57c>
     eca:	80 91 7c 21 	lds	r24, 0x217C
     ece:	90 91 7d 21 	lds	r25, 0x217D
     ed2:	83 60       	ori	r24, 0x03	; 3
     ed4:	80 93 7c 21 	sts	0x217C, r24
     ed8:	90 93 7d 21 	sts	0x217D, r25
     edc:	f9 01       	movw	r30, r18
     ede:	ee 0f       	add	r30, r30
     ee0:	ff 1f       	adc	r31, r31
     ee2:	ec 57       	subi	r30, 0x7C	; 124
     ee4:	fe 4d       	sbci	r31, 0xDE	; 222
     ee6:	80 e1       	ldi	r24, 0x10	; 16
     ee8:	80 83       	st	Z, r24
     eea:	11 82       	std	Z+1, r1	; 0x01
     eec:	f3 c0       	rjmp	.+486    	; 0x10d4 <process_sensor+0x57c>
     eee:	e0 0f       	add	r30, r16
     ef0:	f1 1f       	adc	r31, r17
     ef2:	ee 0f       	add	r30, r30
     ef4:	ff 1f       	adc	r31, r31
     ef6:	df 01       	movw	r26, r30
     ef8:	ac 57       	subi	r26, 0x7C	; 124
     efa:	be 4d       	sbci	r27, 0xDE	; 222
     efc:	15 96       	adiw	r26, 0x05	; 5
     efe:	2c 91       	ld	r18, X
     f00:	15 97       	sbiw	r26, 0x05	; 5
     f02:	82 e0       	ldi	r24, 0x02	; 2
     f04:	8c 93       	st	X, r24
     f06:	80 91 7c 21 	lds	r24, 0x217C
     f0a:	90 91 7d 21 	lds	r25, 0x217D
     f0e:	82 60       	ori	r24, 0x02	; 2
     f10:	80 93 7c 21 	sts	0x217C, r24
     f14:	90 93 7d 21 	sts	0x217D, r25
     f18:	ea 57       	subi	r30, 0x7A	; 122
     f1a:	fe 4d       	sbci	r31, 0xDE	; 222
     f1c:	10 82       	st	Z, r1
     f1e:	e2 2f       	mov	r30, r18
     f20:	9e c0       	rjmp	.+316    	; 0x105e <process_sensor+0x506>
     f22:	c5 01       	movw	r24, r10
     f24:	b7 fe       	sbrs	r11, 7
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <process_sensor+0x3d4>
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	f8 01       	movw	r30, r16
     f2e:	ee 0f       	add	r30, r30
     f30:	ff 1f       	adc	r31, r31
     f32:	40 91 7c 21 	lds	r20, 0x217C
     f36:	50 91 7d 21 	lds	r21, 0x217D
     f3a:	86 17       	cp	r24, r22
     f3c:	97 07       	cpc	r25, r23
     f3e:	70 f4       	brcc	.+28     	; 0xf5c <process_sensor+0x404>
     f40:	e0 0f       	add	r30, r16
     f42:	f1 1f       	adc	r31, r17
     f44:	ee 0f       	add	r30, r30
     f46:	ff 1f       	adc	r31, r31
     f48:	ec 57       	subi	r30, 0x7C	; 124
     f4a:	fe 4d       	sbci	r31, 0xDE	; 222
     f4c:	88 e0       	ldi	r24, 0x08	; 8
     f4e:	80 83       	st	Z, r24
     f50:	54 60       	ori	r21, 0x04	; 4
     f52:	40 93 7c 21 	sts	0x217C, r20
     f56:	50 93 7d 21 	sts	0x217D, r21
     f5a:	31 c0       	rjmp	.+98     	; 0xfbe <process_sensor+0x466>
     f5c:	41 60       	ori	r20, 0x01	; 1
     f5e:	40 93 7c 21 	sts	0x217C, r20
     f62:	50 93 7d 21 	sts	0x217D, r21
     f66:	e0 0f       	add	r30, r16
     f68:	f1 1f       	adc	r31, r17
     f6a:	ee 0f       	add	r30, r30
     f6c:	ff 1f       	adc	r31, r31
     f6e:	ea 57       	subi	r30, 0x7A	; 122
     f70:	fe 4d       	sbci	r31, 0xDE	; 222
     f72:	90 81       	ld	r25, Z
     f74:	80 91 65 21 	lds	r24, 0x2165
     f78:	98 17       	cp	r25, r24
     f7a:	10 f4       	brcc	.+4      	; 0xf80 <process_sensor+0x428>
     f7c:	9f 5f       	subi	r25, 0xFF	; 255
     f7e:	90 83       	st	Z, r25
     f80:	90 91 67 21 	lds	r25, 0x2167
     f84:	99 23       	and	r25, r25
     f86:	71 f0       	breq	.+28     	; 0xfa4 <process_sensor+0x44c>
     f88:	f8 01       	movw	r30, r16
     f8a:	ee 0f       	add	r30, r30
     f8c:	ff 1f       	adc	r31, r31
     f8e:	e0 0f       	add	r30, r16
     f90:	f1 1f       	adc	r31, r17
     f92:	ee 0f       	add	r30, r30
     f94:	ff 1f       	adc	r31, r31
     f96:	ec 57       	subi	r30, 0x7C	; 124
     f98:	fe 4d       	sbci	r31, 0xDE	; 222
     f9a:	81 81       	ldd	r24, Z+1	; 0x01
     f9c:	89 17       	cp	r24, r25
     f9e:	20 f4       	brcc	.+8      	; 0xfa8 <process_sensor+0x450>
     fa0:	8f 0d       	add	r24, r15
     fa2:	81 83       	std	Z+1, r24	; 0x01
     fa4:	40 e0       	ldi	r20, 0x00	; 0
     fa6:	0c c0       	rjmp	.+24     	; 0xfc0 <process_sensor+0x468>
     fa8:	87 2d       	mov	r24, r7
     faa:	95 dd       	rcall	.-1238   	; 0xad6 <start_cal_sensor>
     fac:	80 91 7c 21 	lds	r24, 0x217C
     fb0:	90 91 7d 21 	lds	r25, 0x217D
     fb4:	92 60       	ori	r25, 0x02	; 2
     fb6:	80 93 7c 21 	sts	0x217C, r24
     fba:	90 93 7d 21 	sts	0x217D, r25
     fbe:	41 e0       	ldi	r20, 0x01	; 1
     fc0:	80 91 66 21 	lds	r24, 0x2166
     fc4:	80 93 9d 21 	sts	0x219D, r24
     fc8:	85 c0       	rjmp	.+266    	; 0x10d4 <process_sensor+0x57c>
     fca:	80 91 66 21 	lds	r24, 0x2166
     fce:	80 93 9d 21 	sts	0x219D, r24
     fd2:	df 01       	movw	r26, r30
     fd4:	aa 0f       	add	r26, r26
     fd6:	bb 1f       	adc	r27, r27
     fd8:	aa 57       	subi	r26, 0x7A	; 122
     fda:	be 4d       	sbci	r27, 0xDE	; 222
     fdc:	8c 91       	ld	r24, X
     fde:	88 23       	and	r24, r24
     fe0:	89 f1       	breq	.+98     	; 0x1044 <process_sensor+0x4ec>
     fe2:	c5 01       	movw	r24, r10
     fe4:	b7 fe       	sbrs	r11, 7
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <process_sensor+0x494>
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	40 91 7c 21 	lds	r20, 0x217C
     ff0:	50 91 7d 21 	lds	r21, 0x217D
     ff4:	68 17       	cp	r22, r24
     ff6:	79 07       	cpc	r23, r25
     ff8:	90 f4       	brcc	.+36     	; 0x101e <process_sensor+0x4c6>
     ffa:	f8 01       	movw	r30, r16
     ffc:	ee 0f       	add	r30, r30
     ffe:	ff 1f       	adc	r31, r31
    1000:	e0 0f       	add	r30, r16
    1002:	f1 1f       	adc	r31, r17
    1004:	ee 0f       	add	r30, r30
    1006:	ff 1f       	adc	r31, r31
    1008:	ec 57       	subi	r30, 0x7C	; 124
    100a:	fe 4d       	sbci	r31, 0xDE	; 222
    100c:	80 e1       	ldi	r24, 0x10	; 16
    100e:	80 83       	st	Z, r24
    1010:	41 60       	ori	r20, 0x01	; 1
    1012:	40 93 7c 21 	sts	0x217C, r20
    1016:	50 93 7d 21 	sts	0x217D, r21
    101a:	40 e0       	ldi	r20, 0x00	; 0
    101c:	06 c0       	rjmp	.+12     	; 0x102a <process_sensor+0x4d2>
    101e:	54 60       	ori	r21, 0x04	; 4
    1020:	40 93 7c 21 	sts	0x217C, r20
    1024:	50 93 7d 21 	sts	0x217D, r21
    1028:	41 e0       	ldi	r20, 0x01	; 1
    102a:	f8 01       	movw	r30, r16
    102c:	ee 0f       	add	r30, r30
    102e:	ff 1f       	adc	r31, r31
    1030:	e0 0f       	add	r30, r16
    1032:	f1 1f       	adc	r31, r17
    1034:	ee 0f       	add	r30, r30
    1036:	ff 1f       	adc	r31, r31
    1038:	ea 57       	subi	r30, 0x7A	; 122
    103a:	fe 4d       	sbci	r31, 0xDE	; 222
    103c:	80 81       	ld	r24, Z
    103e:	81 50       	subi	r24, 0x01	; 1
    1040:	80 83       	st	Z, r24
    1042:	48 c0       	rjmp	.+144    	; 0x10d4 <process_sensor+0x57c>
    1044:	ed 81       	ldd	r30, Y+5	; 0x05
    1046:	82 e0       	ldi	r24, 0x02	; 2
    1048:	88 83       	st	Y, r24
    104a:	80 91 7c 21 	lds	r24, 0x217C
    104e:	90 91 7d 21 	lds	r25, 0x217D
    1052:	82 60       	ori	r24, 0x02	; 2
    1054:	80 93 7c 21 	sts	0x217C, r24
    1058:	90 93 7d 21 	sts	0x217D, r25
    105c:	1c 92       	st	X, r1
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	e2 56       	subi	r30, 0x62	; 98
    1062:	fe 4d       	sbci	r31, 0xDE	; 222
    1064:	80 e8       	ldi	r24, 0x80	; 128
    1066:	80 83       	st	Z, r24
    1068:	34 c0       	rjmp	.+104    	; 0x10d2 <process_sensor+0x57a>
    106a:	99 81       	ldd	r25, Y+1	; 0x01
    106c:	9f 5f       	subi	r25, 0xFF	; 255
    106e:	99 83       	std	Y+1, r25	; 0x01
    1070:	8c 81       	ldd	r24, Y+4	; 0x04
    1072:	82 fd       	sbrc	r24, 2
    1074:	17 c0       	rjmp	.+46     	; 0x10a4 <process_sensor+0x54c>
    1076:	ad 81       	ldd	r26, Y+5	; 0x05
    1078:	82 e0       	ldi	r24, 0x02	; 2
    107a:	88 83       	st	Y, r24
    107c:	80 91 7c 21 	lds	r24, 0x217C
    1080:	90 91 7d 21 	lds	r25, 0x217D
    1084:	82 60       	ori	r24, 0x02	; 2
    1086:	80 93 7c 21 	sts	0x217C, r24
    108a:	90 93 7d 21 	sts	0x217D, r25
    108e:	ee 0f       	add	r30, r30
    1090:	ff 1f       	adc	r31, r31
    1092:	ea 57       	subi	r30, 0x7A	; 122
    1094:	fe 4d       	sbci	r31, 0xDE	; 222
    1096:	10 82       	st	Z, r1
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	a2 56       	subi	r26, 0x62	; 98
    109c:	be 4d       	sbci	r27, 0xDE	; 222
    109e:	80 e8       	ldi	r24, 0x80	; 128
    10a0:	8c 93       	st	X, r24
    10a2:	17 c0       	rjmp	.+46     	; 0x10d2 <process_sensor+0x57a>
    10a4:	80 91 6a 21 	lds	r24, 0x216A
    10a8:	98 17       	cp	r25, r24
    10aa:	40 f0       	brcs	.+16     	; 0x10bc <process_sensor+0x564>
    10ac:	87 2d       	mov	r24, r7
    10ae:	13 dd       	rcall	.-1498   	; 0xad6 <start_cal_sensor>
    10b0:	80 91 7c 21 	lds	r24, 0x217C
    10b4:	90 91 7d 21 	lds	r25, 0x217D
    10b8:	90 61       	ori	r25, 0x10	; 16
    10ba:	05 c0       	rjmp	.+10     	; 0x10c6 <process_sensor+0x56e>
    10bc:	80 91 7c 21 	lds	r24, 0x217C
    10c0:	90 91 7d 21 	lds	r25, 0x217D
    10c4:	94 60       	ori	r25, 0x04	; 4
    10c6:	80 93 7c 21 	sts	0x217C, r24
    10ca:	90 93 7d 21 	sts	0x217D, r25
    10ce:	41 e0       	ldi	r20, 0x01	; 1
    10d0:	01 c0       	rjmp	.+2      	; 0x10d4 <process_sensor+0x57c>
    10d2:	40 e0       	ldi	r20, 0x00	; 0
    10d4:	84 2f       	mov	r24, r20
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	ee e0       	ldi	r30, 0x0E	; 14
    10dc:	0c 94 a2 26 	jmp	0x4d44	; 0x4d44 <__epilogue_restores__+0x8>

000010e0 <burst_init>:
    10e0:	fc 01       	movw	r30, r24
    10e2:	00 97       	sbiw	r24, 0x00	; 0
    10e4:	09 f0       	breq	.+2      	; 0x10e8 <burst_init+0x8>
    10e6:	19 95       	eicall
    10e8:	08 95       	ret

000010ea <burst_reset>:
    10ea:	10 92 a2 21 	sts	0x21A2, r1
    10ee:	10 92 a3 21 	sts	0x21A3, r1
    10f2:	10 92 a6 21 	sts	0x21A6, r1
    10f6:	10 92 a7 21 	sts	0x21A7, r1
    10fa:	10 92 a4 21 	sts	0x21A4, r1
    10fe:	10 92 a5 21 	sts	0x21A5, r1
    1102:	10 92 a8 21 	sts	0x21A8, r1
    1106:	10 92 a9 21 	sts	0x21A9, r1
    110a:	08 95       	ret

0000110c <burst>:
    110c:	80 91 a4 21 	lds	r24, 0x21A4
    1110:	90 91 a2 21 	lds	r25, 0x21A2
    1114:	89 2b       	or	r24, r25
    1116:	41 f0       	breq	.+16     	; 0x1128 <burst+0x1c>
    1118:	e0 91 62 21 	lds	r30, 0x2162
    111c:	f0 91 63 21 	lds	r31, 0x2163
    1120:	30 97       	sbiw	r30, 0x00	; 0
    1122:	11 f0       	breq	.+4      	; 0x1128 <burst+0x1c>
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	19 95       	eicall
    1128:	80 91 a5 21 	lds	r24, 0x21A5
    112c:	90 91 a3 21 	lds	r25, 0x21A3
    1130:	89 2b       	or	r24, r25
    1132:	41 f0       	breq	.+16     	; 0x1144 <burst+0x38>
    1134:	e0 91 62 21 	lds	r30, 0x2162
    1138:	f0 91 63 21 	lds	r31, 0x2163
    113c:	30 97       	sbiw	r30, 0x00	; 0
    113e:	11 f0       	breq	.+4      	; 0x1144 <burst+0x38>
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	19 95       	eicall
    1144:	08 95       	ret

00001146 <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
    1146:	cf 92       	push	r12
    1148:	df 92       	push	r13
    114a:	ef 92       	push	r14
    114c:	ff 92       	push	r15
    114e:	0f 93       	push	r16
    1150:	1f 93       	push	r17
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	1f 92       	push	r1
    1158:	1f 92       	push	r1
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
 */
static inline void st7565r_hard_reset(void)
{
	// us delay is given by cpu_cykl = CPU_Mhz * us_delay / while_loop_cycles
	uint8_t delay_start = (sysclk_get_cpu_hz() / 1000000) * 10 / 10;
	volatile uint8_t delay = delay_start;
    115e:	88 e1       	ldi	r24, 0x18	; 24
    1160:	8a 83       	std	Y+2, r24	; 0x02
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1162:	88 e0       	ldi	r24, 0x08	; 8
    1164:	e0 e0       	ldi	r30, 0x00	; 0
    1166:	f6 e0       	ldi	r31, 0x06	; 6
    1168:	86 83       	std	Z+6, r24	; 0x06
	gpio_set_pin_low(ST7565R_RESET_PIN);
	while (delay--) {
    116a:	8a 81       	ldd	r24, Y+2	; 0x02
    116c:	98 2f       	mov	r25, r24
    116e:	91 50       	subi	r25, 0x01	; 1
    1170:	9a 83       	std	Y+2, r25	; 0x02
    1172:	81 11       	cpse	r24, r1
    1174:	fa cf       	rjmp	.-12     	; 0x116a <st7565r_init+0x24>
		// Intentionally left blank
	}
	delay = delay_start;
    1176:	88 e1       	ldi	r24, 0x18	; 24
    1178:	8a 83       	std	Y+2, r24	; 0x02
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    117a:	88 e0       	ldi	r24, 0x08	; 8
    117c:	e0 e0       	ldi	r30, 0x00	; 0
    117e:	f6 e0       	ldi	r31, 0x06	; 6
    1180:	85 83       	std	Z+5, r24	; 0x05
	gpio_set_pin_high(ST7565R_RESET_PIN);
	while (delay--) {
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	98 2f       	mov	r25, r24
    1186:	91 50       	subi	r25, 0x01	; 1
    1188:	9a 83       	std	Y+2, r25	; 0x02
    118a:	81 11       	cpse	r24, r1
    118c:	fa cf       	rjmp	.-12     	; 0x1182 <st7565r_init+0x3c>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
    118e:	8b e2       	ldi	r24, 0x2B	; 43
    1190:	89 83       	std	Y+1, r24	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
    1192:	80 ea       	ldi	r24, 0xA0	; 160
    1194:	99 e0       	ldi	r25, 0x09	; 9
    1196:	ec d5       	rcall	.+3032   	; 0x1d70 <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
    1198:	c1 2c       	mov	r12, r1
    119a:	d1 2c       	mov	r13, r1
    119c:	76 01       	movw	r14, r12
    119e:	00 e0       	ldi	r16, 0x00	; 0
    11a0:	12 e1       	ldi	r17, 0x12	; 18
    11a2:	2a e7       	ldi	r18, 0x7A	; 122
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	43 e0       	ldi	r20, 0x03	; 3
    11a8:	be 01       	movw	r22, r28
    11aa:	6f 5f       	subi	r22, 0xFF	; 255
    11ac:	7f 4f       	sbci	r23, 0xFF	; 255
    11ae:	80 ea       	ldi	r24, 0xA0	; 160
    11b0:	99 e0       	ldi	r25, 0x09	; 9
    11b2:	08 d6       	rcall	.+3088   	; 0x1dc4 <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    11b4:	e0 e6       	ldi	r30, 0x60	; 96
    11b6:	f6 e0       	ldi	r31, 0x06	; 6
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	86 83       	std	Z+6, r24	; 0x06
    11bc:	98 e0       	ldi	r25, 0x08	; 8
    11be:	a0 ea       	ldi	r26, 0xA0	; 160
    11c0:	b6 e0       	ldi	r27, 0x06	; 6
    11c2:	16 96       	adiw	r26, 0x06	; 6
    11c4:	9c 93       	st	X, r25
    11c6:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    11c8:	e0 ea       	ldi	r30, 0xA0	; 160
    11ca:	f9 e0       	ldi	r31, 0x09	; 9
    11cc:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    11ce:	85 ff       	sbrs	r24, 5
    11d0:	fd cf       	rjmp	.-6      	; 0x11cc <st7565r_init+0x86>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    11d2:	80 ea       	ldi	r24, 0xA0	; 160
    11d4:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    11d8:	e0 ea       	ldi	r30, 0xA0	; 160
    11da:	f9 e0       	ldi	r31, 0x09	; 9
    11dc:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    11de:	86 ff       	sbrs	r24, 6
    11e0:	fd cf       	rjmp	.-6      	; 0x11dc <st7565r_init+0x96>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    11e2:	e0 ea       	ldi	r30, 0xA0	; 160
    11e4:	f9 e0       	ldi	r31, 0x09	; 9
    11e6:	80 e4       	ldi	r24, 0x40	; 64
    11e8:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    11ea:	80 81       	ld	r24, Z
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    11ec:	e0 ea       	ldi	r30, 0xA0	; 160
    11ee:	f6 e0       	ldi	r31, 0x06	; 6
    11f0:	88 e0       	ldi	r24, 0x08	; 8
    11f2:	85 83       	std	Z+5, r24	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    11f4:	86 83       	std	Z+6, r24	; 0x06
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	e0 e6       	ldi	r30, 0x60	; 96
    11fa:	f6 e0       	ldi	r31, 0x06	; 6
    11fc:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    11fe:	e0 ea       	ldi	r30, 0xA0	; 160
    1200:	f9 e0       	ldi	r31, 0x09	; 9
    1202:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    1204:	85 ff       	sbrs	r24, 5
    1206:	fd cf       	rjmp	.-6      	; 0x1202 <st7565r_init+0xbc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1208:	86 ea       	ldi	r24, 0xA6	; 166
    120a:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    120e:	e0 ea       	ldi	r30, 0xA0	; 160
    1210:	f9 e0       	ldi	r31, 0x09	; 9
    1212:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1214:	86 ff       	sbrs	r24, 6
    1216:	fd cf       	rjmp	.-6      	; 0x1212 <st7565r_init+0xcc>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    1218:	e0 ea       	ldi	r30, 0xA0	; 160
    121a:	f9 e0       	ldi	r31, 0x09	; 9
    121c:	80 e4       	ldi	r24, 0x40	; 64
    121e:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1220:	80 81       	ld	r24, Z
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1222:	e0 ea       	ldi	r30, 0xA0	; 160
    1224:	f6 e0       	ldi	r31, 0x06	; 6
    1226:	88 e0       	ldi	r24, 0x08	; 8
    1228:	85 83       	std	Z+5, r24	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    122a:	86 83       	std	Z+6, r24	; 0x06
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	e0 e6       	ldi	r30, 0x60	; 96
    1230:	f6 e0       	ldi	r31, 0x06	; 6
    1232:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    1234:	e0 ea       	ldi	r30, 0xA0	; 160
    1236:	f9 e0       	ldi	r31, 0x09	; 9
    1238:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    123a:	85 ff       	sbrs	r24, 5
    123c:	fd cf       	rjmp	.-6      	; 0x1238 <st7565r_init+0xf2>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    123e:	88 ec       	ldi	r24, 0xC8	; 200
    1240:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1244:	e0 ea       	ldi	r30, 0xA0	; 160
    1246:	f9 e0       	ldi	r31, 0x09	; 9
    1248:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    124a:	86 ff       	sbrs	r24, 6
    124c:	fd cf       	rjmp	.-6      	; 0x1248 <st7565r_init+0x102>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    124e:	e0 ea       	ldi	r30, 0xA0	; 160
    1250:	f9 e0       	ldi	r31, 0x09	; 9
    1252:	80 e4       	ldi	r24, 0x40	; 64
    1254:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1256:	80 81       	ld	r24, Z
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1258:	e0 ea       	ldi	r30, 0xA0	; 160
    125a:	f6 e0       	ldi	r31, 0x06	; 6
    125c:	88 e0       	ldi	r24, 0x08	; 8
    125e:	85 83       	std	Z+5, r24	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1260:	86 83       	std	Z+6, r24	; 0x06
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	e0 e6       	ldi	r30, 0x60	; 96
    1266:	f6 e0       	ldi	r31, 0x06	; 6
    1268:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    126a:	e0 ea       	ldi	r30, 0xA0	; 160
    126c:	f9 e0       	ldi	r31, 0x09	; 9
    126e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    1270:	85 ff       	sbrs	r24, 5
    1272:	fd cf       	rjmp	.-6      	; 0x126e <st7565r_init+0x128>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1274:	82 ea       	ldi	r24, 0xA2	; 162
    1276:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    127a:	e0 ea       	ldi	r30, 0xA0	; 160
    127c:	f9 e0       	ldi	r31, 0x09	; 9
    127e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1280:	86 ff       	sbrs	r24, 6
    1282:	fd cf       	rjmp	.-6      	; 0x127e <st7565r_init+0x138>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    1284:	e0 ea       	ldi	r30, 0xA0	; 160
    1286:	f9 e0       	ldi	r31, 0x09	; 9
    1288:	80 e4       	ldi	r24, 0x40	; 64
    128a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    128c:	80 81       	ld	r24, Z
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    128e:	e0 ea       	ldi	r30, 0xA0	; 160
    1290:	f6 e0       	ldi	r31, 0x06	; 6
    1292:	88 e0       	ldi	r24, 0x08	; 8
    1294:	85 83       	std	Z+5, r24	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1296:	86 83       	std	Z+6, r24	; 0x06
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	e0 e6       	ldi	r30, 0x60	; 96
    129c:	f6 e0       	ldi	r31, 0x06	; 6
    129e:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    12a0:	e0 ea       	ldi	r30, 0xA0	; 160
    12a2:	f9 e0       	ldi	r31, 0x09	; 9
    12a4:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    12a6:	85 ff       	sbrs	r24, 5
    12a8:	fd cf       	rjmp	.-6      	; 0x12a4 <st7565r_init+0x15e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    12aa:	8f e2       	ldi	r24, 0x2F	; 47
    12ac:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    12b0:	e0 ea       	ldi	r30, 0xA0	; 160
    12b2:	f9 e0       	ldi	r31, 0x09	; 9
    12b4:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    12b6:	86 ff       	sbrs	r24, 6
    12b8:	fd cf       	rjmp	.-6      	; 0x12b4 <st7565r_init+0x16e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    12ba:	e0 ea       	ldi	r30, 0xA0	; 160
    12bc:	f9 e0       	ldi	r31, 0x09	; 9
    12be:	80 e4       	ldi	r24, 0x40	; 64
    12c0:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    12c2:	80 81       	ld	r24, Z
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    12c4:	e0 ea       	ldi	r30, 0xA0	; 160
    12c6:	f6 e0       	ldi	r31, 0x06	; 6
    12c8:	88 e0       	ldi	r24, 0x08	; 8
    12ca:	85 83       	std	Z+5, r24	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    12cc:	86 83       	std	Z+6, r24	; 0x06
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	e0 e6       	ldi	r30, 0x60	; 96
    12d2:	f6 e0       	ldi	r31, 0x06	; 6
    12d4:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    12d6:	e0 ea       	ldi	r30, 0xA0	; 160
    12d8:	f9 e0       	ldi	r31, 0x09	; 9
    12da:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    12dc:	85 ff       	sbrs	r24, 5
    12de:	fd cf       	rjmp	.-6      	; 0x12da <st7565r_init+0x194>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    12e0:	88 ef       	ldi	r24, 0xF8	; 248
    12e2:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    12e6:	e0 ea       	ldi	r30, 0xA0	; 160
    12e8:	f9 e0       	ldi	r31, 0x09	; 9
    12ea:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    12ec:	86 ff       	sbrs	r24, 6
    12ee:	fd cf       	rjmp	.-6      	; 0x12ea <st7565r_init+0x1a4>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    12f0:	e0 ea       	ldi	r30, 0xA0	; 160
    12f2:	f9 e0       	ldi	r31, 0x09	; 9
    12f4:	80 e4       	ldi	r24, 0x40	; 64
    12f6:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    12f8:	80 81       	ld	r24, Z
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    12fa:	e0 ea       	ldi	r30, 0xA0	; 160
    12fc:	f6 e0       	ldi	r31, 0x06	; 6
    12fe:	88 e0       	ldi	r24, 0x08	; 8
    1300:	85 83       	std	Z+5, r24	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1302:	86 83       	std	Z+6, r24	; 0x06
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	e0 e6       	ldi	r30, 0x60	; 96
    1308:	f6 e0       	ldi	r31, 0x06	; 6
    130a:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    130c:	e0 ea       	ldi	r30, 0xA0	; 160
    130e:	f9 e0       	ldi	r31, 0x09	; 9
    1310:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    1312:	85 ff       	sbrs	r24, 5
    1314:	fd cf       	rjmp	.-6      	; 0x1310 <st7565r_init+0x1ca>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1316:	10 92 a0 09 	sts	0x09A0, r1
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    131a:	e0 ea       	ldi	r30, 0xA0	; 160
    131c:	f9 e0       	ldi	r31, 0x09	; 9
    131e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1320:	86 ff       	sbrs	r24, 6
    1322:	fd cf       	rjmp	.-6      	; 0x131e <st7565r_init+0x1d8>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    1324:	e0 ea       	ldi	r30, 0xA0	; 160
    1326:	f9 e0       	ldi	r31, 0x09	; 9
    1328:	80 e4       	ldi	r24, 0x40	; 64
    132a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    132c:	80 81       	ld	r24, Z
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    132e:	e0 ea       	ldi	r30, 0xA0	; 160
    1330:	f6 e0       	ldi	r31, 0x06	; 6
    1332:	88 e0       	ldi	r24, 0x08	; 8
    1334:	85 83       	std	Z+5, r24	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1336:	86 83       	std	Z+6, r24	; 0x06
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	e0 e6       	ldi	r30, 0x60	; 96
    133c:	f6 e0       	ldi	r31, 0x06	; 6
    133e:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    1340:	e0 ea       	ldi	r30, 0xA0	; 160
    1342:	f9 e0       	ldi	r31, 0x09	; 9
    1344:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    1346:	85 ff       	sbrs	r24, 5
    1348:	fd cf       	rjmp	.-6      	; 0x1344 <st7565r_init+0x1fe>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    134a:	81 e2       	ldi	r24, 0x21	; 33
    134c:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1350:	e0 ea       	ldi	r30, 0xA0	; 160
    1352:	f9 e0       	ldi	r31, 0x09	; 9
    1354:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1356:	86 ff       	sbrs	r24, 6
    1358:	fd cf       	rjmp	.-6      	; 0x1354 <st7565r_init+0x20e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    135a:	e0 ea       	ldi	r30, 0xA0	; 160
    135c:	f9 e0       	ldi	r31, 0x09	; 9
    135e:	80 e4       	ldi	r24, 0x40	; 64
    1360:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1362:	80 81       	ld	r24, Z
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1364:	e0 ea       	ldi	r30, 0xA0	; 160
    1366:	f6 e0       	ldi	r31, 0x06	; 6
    1368:	88 e0       	ldi	r24, 0x08	; 8
    136a:	85 83       	std	Z+5, r24	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    136c:	86 83       	std	Z+6, r24	; 0x06
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	e0 e6       	ldi	r30, 0x60	; 96
    1372:	f6 e0       	ldi	r31, 0x06	; 6
    1374:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    1376:	e0 ea       	ldi	r30, 0xA0	; 160
    1378:	f9 e0       	ldi	r31, 0x09	; 9
    137a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    137c:	85 ff       	sbrs	r24, 5
    137e:	fd cf       	rjmp	.-6      	; 0x137a <st7565r_init+0x234>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1380:	81 e8       	ldi	r24, 0x81	; 129
    1382:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1386:	e0 ea       	ldi	r30, 0xA0	; 160
    1388:	f9 e0       	ldi	r31, 0x09	; 9
    138a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    138c:	86 ff       	sbrs	r24, 6
    138e:	fd cf       	rjmp	.-6      	; 0x138a <st7565r_init+0x244>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    1390:	e0 ea       	ldi	r30, 0xA0	; 160
    1392:	f9 e0       	ldi	r31, 0x09	; 9
    1394:	80 e4       	ldi	r24, 0x40	; 64
    1396:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1398:	80 81       	ld	r24, Z
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    139a:	e0 ea       	ldi	r30, 0xA0	; 160
    139c:	f6 e0       	ldi	r31, 0x06	; 6
    139e:	88 e0       	ldi	r24, 0x08	; 8
    13a0:	85 83       	std	Z+5, r24	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    13a2:	86 83       	std	Z+6, r24	; 0x06
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	e0 e6       	ldi	r30, 0x60	; 96
    13a8:	f6 e0       	ldi	r31, 0x06	; 6
    13aa:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    13ac:	e0 ea       	ldi	r30, 0xA0	; 160
    13ae:	f9 e0       	ldi	r31, 0x09	; 9
    13b0:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    13b2:	85 ff       	sbrs	r24, 5
    13b4:	fd cf       	rjmp	.-6      	; 0x13b0 <st7565r_init+0x26a>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    13b6:	81 e2       	ldi	r24, 0x21	; 33
    13b8:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    13bc:	e0 ea       	ldi	r30, 0xA0	; 160
    13be:	f9 e0       	ldi	r31, 0x09	; 9
    13c0:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    13c2:	86 ff       	sbrs	r24, 6
    13c4:	fd cf       	rjmp	.-6      	; 0x13c0 <st7565r_init+0x27a>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    13c6:	e0 ea       	ldi	r30, 0xA0	; 160
    13c8:	f9 e0       	ldi	r31, 0x09	; 9
    13ca:	80 e4       	ldi	r24, 0x40	; 64
    13cc:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    13ce:	80 81       	ld	r24, Z
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    13d0:	e0 ea       	ldi	r30, 0xA0	; 160
    13d2:	f6 e0       	ldi	r31, 0x06	; 6
    13d4:	88 e0       	ldi	r24, 0x08	; 8
    13d6:	85 83       	std	Z+5, r24	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    13d8:	86 83       	std	Z+6, r24	; 0x06
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	e0 e6       	ldi	r30, 0x60	; 96
    13de:	f6 e0       	ldi	r31, 0x06	; 6
    13e0:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    13e2:	e0 ea       	ldi	r30, 0xA0	; 160
    13e4:	f9 e0       	ldi	r31, 0x09	; 9
    13e6:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    13e8:	85 ff       	sbrs	r24, 5
    13ea:	fd cf       	rjmp	.-6      	; 0x13e6 <st7565r_init+0x2a0>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    13ec:	8f ea       	ldi	r24, 0xAF	; 175
    13ee:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    13f2:	e0 ea       	ldi	r30, 0xA0	; 160
    13f4:	f9 e0       	ldi	r31, 0x09	; 9
    13f6:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    13f8:	86 ff       	sbrs	r24, 6
    13fa:	fd cf       	rjmp	.-6      	; 0x13f6 <st7565r_init+0x2b0>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    13fc:	e0 ea       	ldi	r30, 0xA0	; 160
    13fe:	f9 e0       	ldi	r31, 0x09	; 9
    1400:	80 e4       	ldi	r24, 0x40	; 64
    1402:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1404:	80 81       	ld	r24, Z
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1406:	88 e0       	ldi	r24, 0x08	; 8
    1408:	e0 ea       	ldi	r30, 0xA0	; 160
    140a:	f6 e0       	ldi	r31, 0x06	; 6
    140c:	85 83       	std	Z+5, r24	; 0x05
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	df 91       	pop	r29
    1414:	cf 91       	pop	r28
    1416:	1f 91       	pop	r17
    1418:	0f 91       	pop	r16
    141a:	ff 90       	pop	r15
    141c:	ef 90       	pop	r14
    141e:	df 90       	pop	r13
    1420:	cf 90       	pop	r12
    1422:	08 95       	ret

00001424 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    1424:	0f 93       	push	r16
    1426:	1f 93       	push	r17
    1428:	cf 93       	push	r28
    142a:	df 93       	push	r29
    142c:	00 d0       	rcall	.+0      	; 0x142e <sysclk_init+0xa>
    142e:	1f 92       	push	r1
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    1434:	8f ef       	ldi	r24, 0xFF	; 255
    1436:	80 93 70 00 	sts	0x0070, r24
    143a:	80 93 71 00 	sts	0x0071, r24
    143e:	80 93 72 00 	sts	0x0072, r24
    1442:	80 93 73 00 	sts	0x0073, r24
    1446:	80 93 74 00 	sts	0x0074, r24
    144a:	80 93 75 00 	sts	0x0075, r24
    144e:	80 93 76 00 	sts	0x0076, r24
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    1452:	64 e0       	ldi	r22, 0x04	; 4
    1454:	81 e4       	ldi	r24, 0x41	; 65
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	0e 94 c9 18 	call	0x3192	; 0x3192 <ccp_write_io>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    145c:	6c e1       	ldi	r22, 0x1C	; 28
    145e:	70 e0       	ldi	r23, 0x00	; 0
    1460:	82 e0       	ldi	r24, 0x02	; 2
    1462:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    1466:	8a 83       	std	Y+2, r24	; 0x02
    1468:	6d e1       	ldi	r22, 0x1D	; 29
    146a:	70 e0       	ldi	r23, 0x00	; 0
    146c:	82 e0       	ldi	r24, 0x02	; 2
    146e:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    1472:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	9a 81       	ldd	r25, Y+2	; 0x02
    1478:	01 96       	adiw	r24, 0x01	; 1
    147a:	21 f4       	brne	.+8      	; 0x1484 <sysclk_init+0x60>
		cal = 0x2340;
    147c:	80 e4       	ldi	r24, 0x40	; 64
    147e:	93 e2       	ldi	r25, 0x23	; 35
    1480:	89 83       	std	Y+1, r24	; 0x01
    1482:	9a 83       	std	Y+2, r25	; 0x02
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	9a 81       	ldd	r25, Y+2	; 0x02
    1488:	8b 83       	std	Y+3, r24	; 0x03
    148a:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALA=LSB(calib);
		DFLLRC2M.CALB=MSB(calib);
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    148c:	e0 e6       	ldi	r30, 0x60	; 96
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    1492:	8c 81       	ldd	r24, Y+4	; 0x04
    1494:	83 83       	std	Z+3, r24	; 0x03

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1496:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1498:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    149a:	e0 e5       	ldi	r30, 0x50	; 80
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	90 81       	ld	r25, Z
    14a0:	92 60       	ori	r25, 0x02	; 2
    14a2:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    14a4:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    14a6:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    14a8:	81 ff       	sbrs	r24, 1
    14aa:	fd cf       	rjmp	.-6      	; 0x14a6 <sysclk_init+0x82>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    14ac:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    14ae:	f8 94       	cli
#if XMEGA_AU || XMEGA_B || XMEGA_C
		Assert((ref_id == OSC_ID_RC32KHZ)
				|| (ref_id == OSC_ID_XOSC)
				|| (ref_id == OSC_ID_USBSOF));

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    14b0:	00 e5       	ldi	r16, 0x50	; 80
    14b2:	10 e0       	ldi	r17, 0x00	; 0
    14b4:	d8 01       	movw	r26, r16
    14b6:	16 96       	adiw	r26, 0x06	; 6
    14b8:	9c 91       	ld	r25, X
    14ba:	16 97       	sbiw	r26, 0x06	; 6
    14bc:	99 7f       	andi	r25, 0xF9	; 249
    14be:	16 96       	adiw	r26, 0x06	; 6
    14c0:	9c 93       	st	X, r25
    14c2:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    14c4:	e0 e6       	ldi	r30, 0x60	; 96
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	90 e8       	ldi	r25, 0x80	; 128
    14ca:	95 83       	std	Z+5, r25	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    14cc:	9b eb       	ldi	r25, 0xBB	; 187
    14ce:	96 83       	std	Z+6, r25	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    14d0:	16 96       	adiw	r26, 0x06	; 6
    14d2:	9c 91       	ld	r25, X
    14d4:	16 97       	sbiw	r26, 0x06	; 6
    14d6:	94 60       	ori	r25, 0x04	; 4
    14d8:	16 96       	adiw	r26, 0x06	; 6
    14da:	9c 93       	st	X, r25
		}
		else if (ref_id == OSC_ID_RC32KHZ) {
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
		}
#endif
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    14dc:	90 81       	ld	r25, Z
    14de:	91 60       	ori	r25, 0x01	; 1
    14e0:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    14e2:	8f bf       	out	0x3f, r24	; 63
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    14e4:	61 e0       	ldi	r22, 0x01	; 1
    14e6:	80 e4       	ldi	r24, 0x40	; 64
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	0e 94 c9 18 	call	0x3192	; 0x3192 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    14ee:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    14f0:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    14f2:	f8 01       	movw	r30, r16
    14f4:	90 81       	ld	r25, Z
    14f6:	9e 7f       	andi	r25, 0xFE	; 254
    14f8:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    14fa:	8f bf       	out	0x3f, r24	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    14fc:	24 96       	adiw	r28, 0x04	; 4
    14fe:	cd bf       	out	0x3d, r28	; 61
    1500:	de bf       	out	0x3e, r29	; 62
    1502:	df 91       	pop	r29
    1504:	cf 91       	pop	r28
    1506:	1f 91       	pop	r17
    1508:	0f 91       	pop	r16
    150a:	08 95       	ret

0000150c <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    150c:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    150e:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1510:	e8 2f       	mov	r30, r24
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	e0 59       	subi	r30, 0x90	; 144
    1516:	ff 4f       	sbci	r31, 0xFF	; 255
    1518:	60 95       	com	r22
    151a:	80 81       	ld	r24, Z
    151c:	68 23       	and	r22, r24
    151e:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1520:	9f bf       	out	0x3f, r25	; 63
    1522:	08 95       	ret

00001524 <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1524:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1526:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    1528:	e8 2f       	mov	r30, r24
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	e0 59       	subi	r30, 0x90	; 144
    152e:	ff 4f       	sbci	r31, 0xFF	; 255
    1530:	80 81       	ld	r24, Z
    1532:	68 2b       	or	r22, r24
    1534:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1536:	9f bf       	out	0x3f, r25	; 63
    1538:	08 95       	ret

0000153a <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    153a:	86 30       	cpi	r24, 0x06	; 6
    153c:	11 f4       	brne	.+4      	; 0x1542 <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
    153e:	68 e1       	ldi	r22, 0x18	; 24
    1540:	01 c0       	rjmp	.+2      	; 0x1544 <sysclk_enable_usb+0xa>
	}
	else {
		prescaler = 0;
    1542:	60 e0       	ldi	r22, 0x00	; 0

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1544:	e0 e5       	ldi	r30, 0x50	; 80
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	81 81       	ldd	r24, Z+1	; 0x01
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    154a:	81 fd       	sbrc	r24, 1
    154c:	24 c0       	rjmp	.+72     	; 0x1596 <sysclk_enable_usb+0x5c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    154e:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1550:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1552:	90 81       	ld	r25, Z
    1554:	92 60       	ori	r25, 0x02	; 2
    1556:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1558:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    155a:	81 81       	ldd	r24, Z+1	; 0x01
    155c:	81 ff       	sbrs	r24, 1
    155e:	fd cf       	rjmp	.-6      	; 0x155a <sysclk_enable_usb+0x20>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1560:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1562:	f8 94       	cli
#if XMEGA_AU || XMEGA_B || XMEGA_C
		Assert((ref_id == OSC_ID_RC32KHZ)
				|| (ref_id == OSC_ID_XOSC)
				|| (ref_id == OSC_ID_USBSOF));

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    1564:	a0 e5       	ldi	r26, 0x50	; 80
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	16 96       	adiw	r26, 0x06	; 6
    156a:	9c 91       	ld	r25, X
    156c:	16 97       	sbiw	r26, 0x06	; 6
    156e:	99 7f       	andi	r25, 0xF9	; 249
    1570:	16 96       	adiw	r26, 0x06	; 6
    1572:	9c 93       	st	X, r25
    1574:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    1576:	e0 e6       	ldi	r30, 0x60	; 96
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	90 e8       	ldi	r25, 0x80	; 128
    157c:	95 83       	std	Z+5, r25	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    157e:	9b eb       	ldi	r25, 0xBB	; 187
    1580:	96 83       	std	Z+6, r25	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    1582:	16 96       	adiw	r26, 0x06	; 6
    1584:	9c 91       	ld	r25, X
    1586:	16 97       	sbiw	r26, 0x06	; 6
    1588:	94 60       	ori	r25, 0x04	; 4
    158a:	16 96       	adiw	r26, 0x06	; 6
    158c:	9c 93       	st	X, r25
		}
		else if (ref_id == OSC_ID_RC32KHZ) {
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
		}
#endif
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    158e:	90 81       	ld	r25, Z
    1590:	91 60       	ori	r25, 0x01	; 1
    1592:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1594:	8f bf       	out	0x3f, r24	; 63
#ifdef CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    1596:	63 60       	ori	r22, 0x03	; 3
    1598:	84 e4       	ldi	r24, 0x44	; 68
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	0e 94 c9 18 	call	0x3192	; 0x3192 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    15a0:	60 e4       	ldi	r22, 0x40	; 64
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	b3 cf       	rjmp	.-154    	; 0x150c <sysclk_enable_module>

000015a6 <gfx_mono_st7565r_put_page>:

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
	pixel_mask = (1 << (y - (page * 8)));

	return gfx_mono_get_byte(page, x) & pixel_mask;
}
    15a6:	ef 92       	push	r14
    15a8:	ff 92       	push	r15
    15aa:	0f 93       	push	r16
    15ac:	1f 93       	push	r17
    15ae:	cf 93       	push	r28
    15b0:	df 93       	push	r29
    15b2:	ec 01       	movw	r28, r24
    15b4:	f6 2e       	mov	r15, r22
    15b6:	04 2f       	mov	r16, r20
    15b8:	12 2f       	mov	r17, r18
    15ba:	a2 d1       	rcall	.+836    	; 0x1900 <gfx_mono_framebuffer_put_page>
    15bc:	9f 2d       	mov	r25, r15
    15be:	9f 70       	andi	r25, 0x0F	; 15
    15c0:	90 6b       	ori	r25, 0xB0	; 176
    15c2:	88 e0       	ldi	r24, 0x08	; 8
    15c4:	e0 ea       	ldi	r30, 0xA0	; 160
    15c6:	f6 e0       	ldi	r31, 0x06	; 6
    15c8:	86 83       	std	Z+6, r24	; 0x06
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	e0 e6       	ldi	r30, 0x60	; 96
    15ce:	f6 e0       	ldi	r31, 0x06	; 6
    15d0:	86 83       	std	Z+6, r24	; 0x06
    15d2:	e0 ea       	ldi	r30, 0xA0	; 160
    15d4:	f9 e0       	ldi	r31, 0x09	; 9
    15d6:	81 81       	ldd	r24, Z+1	; 0x01
    15d8:	85 ff       	sbrs	r24, 5
    15da:	fd cf       	rjmp	.-6      	; 0x15d6 <gfx_mono_st7565r_put_page+0x30>
    15dc:	90 93 a0 09 	sts	0x09A0, r25
    15e0:	e0 ea       	ldi	r30, 0xA0	; 160
    15e2:	f9 e0       	ldi	r31, 0x09	; 9
    15e4:	81 81       	ldd	r24, Z+1	; 0x01
    15e6:	86 ff       	sbrs	r24, 6
    15e8:	fd cf       	rjmp	.-6      	; 0x15e4 <gfx_mono_st7565r_put_page+0x3e>
    15ea:	e0 ea       	ldi	r30, 0xA0	; 160
    15ec:	f9 e0       	ldi	r31, 0x09	; 9
    15ee:	80 e4       	ldi	r24, 0x40	; 64
    15f0:	81 83       	std	Z+1, r24	; 0x01
    15f2:	80 81       	ld	r24, Z
    15f4:	e0 ea       	ldi	r30, 0xA0	; 160
    15f6:	f6 e0       	ldi	r31, 0x06	; 6
    15f8:	88 e0       	ldi	r24, 0x08	; 8
    15fa:	85 83       	std	Z+5, r24	; 0x05
    15fc:	90 2f       	mov	r25, r16
    15fe:	9f 77       	andi	r25, 0x7F	; 127
    1600:	92 95       	swap	r25
    1602:	9f 70       	andi	r25, 0x0F	; 15
    1604:	90 61       	ori	r25, 0x10	; 16
    1606:	86 83       	std	Z+6, r24	; 0x06
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	e0 e6       	ldi	r30, 0x60	; 96
    160c:	f6 e0       	ldi	r31, 0x06	; 6
    160e:	86 83       	std	Z+6, r24	; 0x06
    1610:	e0 ea       	ldi	r30, 0xA0	; 160
    1612:	f9 e0       	ldi	r31, 0x09	; 9
    1614:	81 81       	ldd	r24, Z+1	; 0x01
    1616:	85 ff       	sbrs	r24, 5
    1618:	fd cf       	rjmp	.-6      	; 0x1614 <gfx_mono_st7565r_put_page+0x6e>
    161a:	90 93 a0 09 	sts	0x09A0, r25
    161e:	e0 ea       	ldi	r30, 0xA0	; 160
    1620:	f9 e0       	ldi	r31, 0x09	; 9
    1622:	81 81       	ldd	r24, Z+1	; 0x01
    1624:	86 ff       	sbrs	r24, 6
    1626:	fd cf       	rjmp	.-6      	; 0x1622 <gfx_mono_st7565r_put_page+0x7c>
    1628:	e0 ea       	ldi	r30, 0xA0	; 160
    162a:	f9 e0       	ldi	r31, 0x09	; 9
    162c:	80 e4       	ldi	r24, 0x40	; 64
    162e:	81 83       	std	Z+1, r24	; 0x01
    1630:	80 81       	ld	r24, Z
    1632:	e0 ea       	ldi	r30, 0xA0	; 160
    1634:	f6 e0       	ldi	r31, 0x06	; 6
    1636:	88 e0       	ldi	r24, 0x08	; 8
    1638:	85 83       	std	Z+5, r24	; 0x05
    163a:	0f 70       	andi	r16, 0x0F	; 15
    163c:	86 83       	std	Z+6, r24	; 0x06
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	e0 e6       	ldi	r30, 0x60	; 96
    1642:	f6 e0       	ldi	r31, 0x06	; 6
    1644:	86 83       	std	Z+6, r24	; 0x06
    1646:	e0 ea       	ldi	r30, 0xA0	; 160
    1648:	f9 e0       	ldi	r31, 0x09	; 9
    164a:	81 81       	ldd	r24, Z+1	; 0x01
    164c:	85 ff       	sbrs	r24, 5
    164e:	fd cf       	rjmp	.-6      	; 0x164a <gfx_mono_st7565r_put_page+0xa4>
    1650:	00 93 a0 09 	sts	0x09A0, r16
    1654:	e0 ea       	ldi	r30, 0xA0	; 160
    1656:	f9 e0       	ldi	r31, 0x09	; 9
    1658:	81 81       	ldd	r24, Z+1	; 0x01
    165a:	86 ff       	sbrs	r24, 6
    165c:	fd cf       	rjmp	.-6      	; 0x1658 <gfx_mono_st7565r_put_page+0xb2>
    165e:	e0 ea       	ldi	r30, 0xA0	; 160
    1660:	f9 e0       	ldi	r31, 0x09	; 9
    1662:	80 e4       	ldi	r24, 0x40	; 64
    1664:	81 83       	std	Z+1, r24	; 0x01
    1666:	80 81       	ld	r24, Z
    1668:	88 e0       	ldi	r24, 0x08	; 8
    166a:	e0 ea       	ldi	r30, 0xA0	; 160
    166c:	f6 e0       	ldi	r31, 0x06	; 6
    166e:	85 83       	std	Z+5, r24	; 0x05
    1670:	80 ea       	ldi	r24, 0xA0	; 160
    1672:	96 e0       	ldi	r25, 0x06	; 6
    1674:	48 e0       	ldi	r20, 0x08	; 8
    1676:	0f 2e       	mov	r0, r31
    1678:	f0 e6       	ldi	r31, 0x60	; 96
    167a:	ef 2e       	mov	r14, r31
    167c:	f6 e0       	ldi	r31, 0x06	; 6
    167e:	ff 2e       	mov	r15, r31
    1680:	f0 2d       	mov	r31, r0
    1682:	31 e0       	ldi	r19, 0x01	; 1
    1684:	e0 ea       	ldi	r30, 0xA0	; 160
    1686:	f9 e0       	ldi	r31, 0x09	; 9
    1688:	60 e4       	ldi	r22, 0x40	; 64
    168a:	59 91       	ld	r21, Y+
    168c:	dc 01       	movw	r26, r24
    168e:	16 96       	adiw	r26, 0x06	; 6
    1690:	4c 93       	st	X, r20
    1692:	d7 01       	movw	r26, r14
    1694:	15 96       	adiw	r26, 0x05	; 5
    1696:	3c 93       	st	X, r19
    1698:	21 81       	ldd	r18, Z+1	; 0x01
    169a:	25 ff       	sbrs	r18, 5
    169c:	fd cf       	rjmp	.-6      	; 0x1698 <gfx_mono_st7565r_put_page+0xf2>
    169e:	50 83       	st	Z, r21
    16a0:	21 81       	ldd	r18, Z+1	; 0x01
    16a2:	26 ff       	sbrs	r18, 6
    16a4:	fd cf       	rjmp	.-6      	; 0x16a0 <gfx_mono_st7565r_put_page+0xfa>
    16a6:	61 83       	std	Z+1, r22	; 0x01
    16a8:	20 81       	ld	r18, Z
    16aa:	d7 01       	movw	r26, r14
    16ac:	16 96       	adiw	r26, 0x06	; 6
    16ae:	3c 93       	st	X, r19
    16b0:	dc 01       	movw	r26, r24
    16b2:	15 96       	adiw	r26, 0x05	; 5
    16b4:	4c 93       	st	X, r20
    16b6:	11 50       	subi	r17, 0x01	; 1
    16b8:	41 f7       	brne	.-48     	; 0x168a <gfx_mono_st7565r_put_page+0xe4>
    16ba:	df 91       	pop	r29
    16bc:	cf 91       	pop	r28
    16be:	1f 91       	pop	r17
    16c0:	0f 91       	pop	r16
    16c2:	ff 90       	pop	r15
    16c4:	ef 90       	pop	r14
    16c6:	08 95       	ret

000016c8 <gfx_mono_st7565r_put_byte>:
    16c8:	1f 93       	push	r17
    16ca:	cf 93       	push	r28
    16cc:	df 93       	push	r29
    16ce:	18 2f       	mov	r17, r24
    16d0:	d6 2f       	mov	r29, r22
    16d2:	c4 2f       	mov	r28, r20
    16d4:	29 d1       	rcall	.+594    	; 0x1928 <gfx_mono_framebuffer_put_byte>
    16d6:	1f 70       	andi	r17, 0x0F	; 15
    16d8:	10 6b       	ori	r17, 0xB0	; 176
    16da:	88 e0       	ldi	r24, 0x08	; 8
    16dc:	e0 ea       	ldi	r30, 0xA0	; 160
    16de:	f6 e0       	ldi	r31, 0x06	; 6
    16e0:	86 83       	std	Z+6, r24	; 0x06
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	e0 e6       	ldi	r30, 0x60	; 96
    16e6:	f6 e0       	ldi	r31, 0x06	; 6
    16e8:	86 83       	std	Z+6, r24	; 0x06
    16ea:	e0 ea       	ldi	r30, 0xA0	; 160
    16ec:	f9 e0       	ldi	r31, 0x09	; 9
    16ee:	91 81       	ldd	r25, Z+1	; 0x01
    16f0:	95 ff       	sbrs	r25, 5
    16f2:	fd cf       	rjmp	.-6      	; 0x16ee <gfx_mono_st7565r_put_byte+0x26>
    16f4:	10 93 a0 09 	sts	0x09A0, r17
    16f8:	e0 ea       	ldi	r30, 0xA0	; 160
    16fa:	f9 e0       	ldi	r31, 0x09	; 9
    16fc:	81 81       	ldd	r24, Z+1	; 0x01
    16fe:	86 ff       	sbrs	r24, 6
    1700:	fd cf       	rjmp	.-6      	; 0x16fc <gfx_mono_st7565r_put_byte+0x34>
    1702:	e0 ea       	ldi	r30, 0xA0	; 160
    1704:	f9 e0       	ldi	r31, 0x09	; 9
    1706:	80 e4       	ldi	r24, 0x40	; 64
    1708:	81 83       	std	Z+1, r24	; 0x01
    170a:	80 81       	ld	r24, Z
    170c:	e0 ea       	ldi	r30, 0xA0	; 160
    170e:	f6 e0       	ldi	r31, 0x06	; 6
    1710:	88 e0       	ldi	r24, 0x08	; 8
    1712:	85 83       	std	Z+5, r24	; 0x05
    1714:	9d 2f       	mov	r25, r29
    1716:	9f 77       	andi	r25, 0x7F	; 127
    1718:	92 95       	swap	r25
    171a:	9f 70       	andi	r25, 0x0F	; 15
    171c:	90 61       	ori	r25, 0x10	; 16
    171e:	86 83       	std	Z+6, r24	; 0x06
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	e0 e6       	ldi	r30, 0x60	; 96
    1724:	f6 e0       	ldi	r31, 0x06	; 6
    1726:	86 83       	std	Z+6, r24	; 0x06
    1728:	e0 ea       	ldi	r30, 0xA0	; 160
    172a:	f9 e0       	ldi	r31, 0x09	; 9
    172c:	81 81       	ldd	r24, Z+1	; 0x01
    172e:	85 ff       	sbrs	r24, 5
    1730:	fd cf       	rjmp	.-6      	; 0x172c <gfx_mono_st7565r_put_byte+0x64>
    1732:	90 93 a0 09 	sts	0x09A0, r25
    1736:	e0 ea       	ldi	r30, 0xA0	; 160
    1738:	f9 e0       	ldi	r31, 0x09	; 9
    173a:	81 81       	ldd	r24, Z+1	; 0x01
    173c:	86 ff       	sbrs	r24, 6
    173e:	fd cf       	rjmp	.-6      	; 0x173a <gfx_mono_st7565r_put_byte+0x72>
    1740:	e0 ea       	ldi	r30, 0xA0	; 160
    1742:	f9 e0       	ldi	r31, 0x09	; 9
    1744:	80 e4       	ldi	r24, 0x40	; 64
    1746:	81 83       	std	Z+1, r24	; 0x01
    1748:	80 81       	ld	r24, Z
    174a:	e0 ea       	ldi	r30, 0xA0	; 160
    174c:	f6 e0       	ldi	r31, 0x06	; 6
    174e:	88 e0       	ldi	r24, 0x08	; 8
    1750:	85 83       	std	Z+5, r24	; 0x05
    1752:	df 70       	andi	r29, 0x0F	; 15
    1754:	86 83       	std	Z+6, r24	; 0x06
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	e0 e6       	ldi	r30, 0x60	; 96
    175a:	f6 e0       	ldi	r31, 0x06	; 6
    175c:	86 83       	std	Z+6, r24	; 0x06
    175e:	e0 ea       	ldi	r30, 0xA0	; 160
    1760:	f9 e0       	ldi	r31, 0x09	; 9
    1762:	81 81       	ldd	r24, Z+1	; 0x01
    1764:	85 ff       	sbrs	r24, 5
    1766:	fd cf       	rjmp	.-6      	; 0x1762 <gfx_mono_st7565r_put_byte+0x9a>
    1768:	d0 93 a0 09 	sts	0x09A0, r29
    176c:	e0 ea       	ldi	r30, 0xA0	; 160
    176e:	f9 e0       	ldi	r31, 0x09	; 9
    1770:	81 81       	ldd	r24, Z+1	; 0x01
    1772:	86 ff       	sbrs	r24, 6
    1774:	fd cf       	rjmp	.-6      	; 0x1770 <gfx_mono_st7565r_put_byte+0xa8>
    1776:	e0 ea       	ldi	r30, 0xA0	; 160
    1778:	f9 e0       	ldi	r31, 0x09	; 9
    177a:	80 e4       	ldi	r24, 0x40	; 64
    177c:	81 83       	std	Z+1, r24	; 0x01
    177e:	80 81       	ld	r24, Z
    1780:	e0 ea       	ldi	r30, 0xA0	; 160
    1782:	f6 e0       	ldi	r31, 0x06	; 6
    1784:	88 e0       	ldi	r24, 0x08	; 8
    1786:	85 83       	std	Z+5, r24	; 0x05
    1788:	86 83       	std	Z+6, r24	; 0x06
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	e0 e6       	ldi	r30, 0x60	; 96
    178e:	f6 e0       	ldi	r31, 0x06	; 6
    1790:	85 83       	std	Z+5, r24	; 0x05
    1792:	e0 ea       	ldi	r30, 0xA0	; 160
    1794:	f9 e0       	ldi	r31, 0x09	; 9
    1796:	81 81       	ldd	r24, Z+1	; 0x01
    1798:	85 ff       	sbrs	r24, 5
    179a:	fd cf       	rjmp	.-6      	; 0x1796 <gfx_mono_st7565r_put_byte+0xce>
    179c:	c0 93 a0 09 	sts	0x09A0, r28
    17a0:	e0 ea       	ldi	r30, 0xA0	; 160
    17a2:	f9 e0       	ldi	r31, 0x09	; 9
    17a4:	81 81       	ldd	r24, Z+1	; 0x01
    17a6:	86 ff       	sbrs	r24, 6
    17a8:	fd cf       	rjmp	.-6      	; 0x17a4 <gfx_mono_st7565r_put_byte+0xdc>
    17aa:	e0 ea       	ldi	r30, 0xA0	; 160
    17ac:	f9 e0       	ldi	r31, 0x09	; 9
    17ae:	80 e4       	ldi	r24, 0x40	; 64
    17b0:	81 83       	std	Z+1, r24	; 0x01
    17b2:	80 81       	ld	r24, Z
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	e0 e6       	ldi	r30, 0x60	; 96
    17b8:	f6 e0       	ldi	r31, 0x06	; 6
    17ba:	86 83       	std	Z+6, r24	; 0x06
    17bc:	88 e0       	ldi	r24, 0x08	; 8
    17be:	e0 ea       	ldi	r30, 0xA0	; 160
    17c0:	f6 e0       	ldi	r31, 0x06	; 6
    17c2:	85 83       	std	Z+5, r24	; 0x05
    17c4:	df 91       	pop	r29
    17c6:	cf 91       	pop	r28
    17c8:	1f 91       	pop	r17
    17ca:	08 95       	ret

000017cc <gfx_mono_st7565r_init>:
    17cc:	cf 93       	push	r28
    17ce:	df 93       	push	r29
    17d0:	8a ea       	ldi	r24, 0xAA	; 170
    17d2:	91 e2       	ldi	r25, 0x21	; 33
    17d4:	90 d0       	rcall	.+288    	; 0x18f6 <gfx_mono_set_framebuffer>
    17d6:	b7 dc       	rcall	.-1682   	; 0x1146 <st7565r_init>
    17d8:	88 e0       	ldi	r24, 0x08	; 8
    17da:	e0 ea       	ldi	r30, 0xA0	; 160
    17dc:	f6 e0       	ldi	r31, 0x06	; 6
    17de:	86 83       	std	Z+6, r24	; 0x06
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	e0 e6       	ldi	r30, 0x60	; 96
    17e4:	f6 e0       	ldi	r31, 0x06	; 6
    17e6:	86 83       	std	Z+6, r24	; 0x06
    17e8:	e0 ea       	ldi	r30, 0xA0	; 160
    17ea:	f9 e0       	ldi	r31, 0x09	; 9
    17ec:	81 81       	ldd	r24, Z+1	; 0x01
    17ee:	85 ff       	sbrs	r24, 5
    17f0:	fd cf       	rjmp	.-6      	; 0x17ec <gfx_mono_st7565r_init+0x20>
    17f2:	80 e4       	ldi	r24, 0x40	; 64
    17f4:	80 93 a0 09 	sts	0x09A0, r24
    17f8:	e0 ea       	ldi	r30, 0xA0	; 160
    17fa:	f9 e0       	ldi	r31, 0x09	; 9
    17fc:	81 81       	ldd	r24, Z+1	; 0x01
    17fe:	86 ff       	sbrs	r24, 6
    1800:	fd cf       	rjmp	.-6      	; 0x17fc <gfx_mono_st7565r_init+0x30>
    1802:	e0 ea       	ldi	r30, 0xA0	; 160
    1804:	f9 e0       	ldi	r31, 0x09	; 9
    1806:	80 e4       	ldi	r24, 0x40	; 64
    1808:	81 83       	std	Z+1, r24	; 0x01
    180a:	80 81       	ld	r24, Z
    180c:	88 e0       	ldi	r24, 0x08	; 8
    180e:	e0 ea       	ldi	r30, 0xA0	; 160
    1810:	f6 e0       	ldi	r31, 0x06	; 6
    1812:	85 83       	std	Z+5, r24	; 0x05
    1814:	d0 e0       	ldi	r29, 0x00	; 0
    1816:	0a c0       	rjmp	.+20     	; 0x182c <gfx_mono_st7565r_init+0x60>
    1818:	40 e0       	ldi	r20, 0x00	; 0
    181a:	6c 2f       	mov	r22, r28
    181c:	8d 2f       	mov	r24, r29
    181e:	54 df       	rcall	.-344    	; 0x16c8 <gfx_mono_st7565r_put_byte>
    1820:	cf 5f       	subi	r28, 0xFF	; 255
    1822:	c0 38       	cpi	r28, 0x80	; 128
    1824:	c9 f7       	brne	.-14     	; 0x1818 <gfx_mono_st7565r_init+0x4c>
    1826:	df 5f       	subi	r29, 0xFF	; 255
    1828:	d4 30       	cpi	r29, 0x04	; 4
    182a:	11 f0       	breq	.+4      	; 0x1830 <gfx_mono_st7565r_init+0x64>
    182c:	c0 e0       	ldi	r28, 0x00	; 0
    182e:	f4 cf       	rjmp	.-24     	; 0x1818 <gfx_mono_st7565r_init+0x4c>
    1830:	df 91       	pop	r29
    1832:	cf 91       	pop	r28
    1834:	08 95       	ret

00001836 <gfx_mono_st7565r_get_byte>:
    1836:	87 c0       	rjmp	.+270    	; 0x1946 <gfx_mono_framebuffer_get_byte>
    1838:	08 95       	ret

0000183a <gfx_mono_st7565r_draw_pixel>:
 * gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
 * \endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
    183a:	ef 92       	push	r14
    183c:	ff 92       	push	r15
    183e:	0f 93       	push	r16
    1840:	1f 93       	push	r17
    1842:	cf 93       	push	r28
    1844:	df 93       	push	r29
    1846:	18 2f       	mov	r17, r24
    1848:	04 2f       	mov	r16, r20
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
    184a:	88 23       	and	r24, r24
    184c:	7c f1       	brlt	.+94     	; 0x18ac <gfx_mono_st7565r_draw_pixel+0x72>
    184e:	60 32       	cpi	r22, 0x20	; 32
    1850:	68 f5       	brcc	.+90     	; 0x18ac <gfx_mono_st7565r_draw_pixel+0x72>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
    1852:	f6 2e       	mov	r15, r22
    1854:	f6 94       	lsr	r15
    1856:	f6 94       	lsr	r15
    1858:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
    185a:	cf 2d       	mov	r28, r15
    185c:	d0 e0       	ldi	r29, 0x00	; 0
    185e:	d1 95       	neg	r29
    1860:	c1 95       	neg	r28
    1862:	d1 09       	sbc	r29, r1
    1864:	cc 0f       	add	r28, r28
    1866:	dd 1f       	adc	r29, r29
    1868:	cc 0f       	add	r28, r28
    186a:	dd 1f       	adc	r29, r29
    186c:	cc 0f       	add	r28, r28
    186e:	dd 1f       	adc	r29, r29
    1870:	c6 0f       	add	r28, r22
    1872:	d1 1d       	adc	r29, r1
    1874:	21 e0       	ldi	r18, 0x01	; 1
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	c9 01       	movw	r24, r18
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <gfx_mono_st7565r_draw_pixel+0x46>
    187c:	88 0f       	add	r24, r24
    187e:	99 1f       	adc	r25, r25
    1880:	ca 95       	dec	r28
    1882:	e2 f7       	brpl	.-8      	; 0x187c <gfx_mono_st7565r_draw_pixel+0x42>
    1884:	ec 01       	movw	r28, r24
	/*
	 * Read the page containing the pixel in interest, then perform the
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);
    1886:	61 2f       	mov	r22, r17
    1888:	8f 2d       	mov	r24, r15
    188a:	d5 df       	rcall	.-86     	; 0x1836 <gfx_mono_st7565r_get_byte>

	switch (color) {
    188c:	01 30       	cpi	r16, 0x01	; 1
    188e:	21 f0       	breq	.+8      	; 0x1898 <gfx_mono_st7565r_draw_pixel+0x5e>
    1890:	28 f0       	brcs	.+10     	; 0x189c <gfx_mono_st7565r_draw_pixel+0x62>
    1892:	02 30       	cpi	r16, 0x02	; 2
    1894:	39 f4       	brne	.+14     	; 0x18a4 <gfx_mono_st7565r_draw_pixel+0x6a>
    1896:	05 c0       	rjmp	.+10     	; 0x18a2 <gfx_mono_st7565r_draw_pixel+0x68>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
    1898:	8c 2b       	or	r24, r28
		break;
    189a:	04 c0       	rjmp	.+8      	; 0x18a4 <gfx_mono_st7565r_draw_pixel+0x6a>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
    189c:	c0 95       	com	r28
    189e:	8c 23       	and	r24, r28
		break;
    18a0:	01 c0       	rjmp	.+2      	; 0x18a4 <gfx_mono_st7565r_draw_pixel+0x6a>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
    18a2:	8c 27       	eor	r24, r28

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
    18a4:	48 2f       	mov	r20, r24
    18a6:	61 2f       	mov	r22, r17
    18a8:	8f 2d       	mov	r24, r15
    18aa:	0e df       	rcall	.-484    	; 0x16c8 <gfx_mono_st7565r_put_byte>
}
    18ac:	df 91       	pop	r29
    18ae:	cf 91       	pop	r28
    18b0:	1f 91       	pop	r17
    18b2:	0f 91       	pop	r16
    18b4:	ff 90       	pop	r15
    18b6:	ef 90       	pop	r14
    18b8:	08 95       	ret

000018ba <gfx_mono_st7565r_mask_byte>:
 * gfx_mono_st7565r_mask_byte(0,0,0xAA,GFX_PIXEL_XOR);
 * \endcode
 */
void gfx_mono_st7565r_mask_byte(gfx_coord_t page, gfx_coord_t column,
		gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
    18ba:	0f 93       	push	r16
    18bc:	1f 93       	push	r17
    18be:	cf 93       	push	r28
    18c0:	df 93       	push	r29
    18c2:	d8 2f       	mov	r29, r24
    18c4:	16 2f       	mov	r17, r22
    18c6:	04 2f       	mov	r16, r20
    18c8:	c2 2f       	mov	r28, r18
	gfx_mono_color_t temp = gfx_mono_get_byte(page, column);
    18ca:	b5 df       	rcall	.-150    	; 0x1836 <gfx_mono_st7565r_get_byte>

	switch (color) {
    18cc:	c1 30       	cpi	r28, 0x01	; 1
    18ce:	21 f0       	breq	.+8      	; 0x18d8 <gfx_mono_st7565r_mask_byte+0x1e>
    18d0:	28 f0       	brcs	.+10     	; 0x18dc <gfx_mono_st7565r_mask_byte+0x22>
    18d2:	c2 30       	cpi	r28, 0x02	; 2
    18d4:	39 f4       	brne	.+14     	; 0x18e4 <gfx_mono_st7565r_mask_byte+0x2a>
    18d6:	05 c0       	rjmp	.+10     	; 0x18e2 <gfx_mono_st7565r_mask_byte+0x28>
	case GFX_PIXEL_SET:
		temp |= pixel_mask;
    18d8:	80 2b       	or	r24, r16
		break;
    18da:	04 c0       	rjmp	.+8      	; 0x18e4 <gfx_mono_st7565r_mask_byte+0x2a>

	case GFX_PIXEL_CLR:
		temp &= ~pixel_mask;
    18dc:	00 95       	com	r16
    18de:	80 23       	and	r24, r16
		break;
    18e0:	01 c0       	rjmp	.+2      	; 0x18e4 <gfx_mono_st7565r_mask_byte+0x2a>

	case GFX_PIXEL_XOR:
		temp ^= pixel_mask;
    18e2:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, column, temp);
    18e4:	48 2f       	mov	r20, r24
    18e6:	61 2f       	mov	r22, r17
    18e8:	8d 2f       	mov	r24, r29
    18ea:	ee de       	rcall	.-548    	; 0x16c8 <gfx_mono_st7565r_put_byte>
}
    18ec:	df 91       	pop	r29
    18ee:	cf 91       	pop	r28
    18f0:	1f 91       	pop	r17
    18f2:	0f 91       	pop	r16
    18f4:	08 95       	ret

000018f6 <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
    18f6:	80 93 aa 23 	sts	0x23AA, r24
    18fa:	90 93 ab 23 	sts	0x23AB, r25
    18fe:	08 95       	ret

00001900 <gfx_mono_framebuffer_put_page>:
    1900:	a4 2f       	mov	r26, r20
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	30 e8       	ldi	r19, 0x80	; 128
    1906:	63 9f       	mul	r22, r19
    1908:	a0 0d       	add	r26, r0
    190a:	b1 1d       	adc	r27, r1
    190c:	11 24       	eor	r1, r1
    190e:	40 91 aa 23 	lds	r20, 0x23AA
    1912:	50 91 ab 23 	lds	r21, 0x23AB
    1916:	a4 0f       	add	r26, r20
    1918:	b5 1f       	adc	r27, r21
    191a:	e8 2f       	mov	r30, r24
    191c:	f9 2f       	mov	r31, r25
    191e:	81 91       	ld	r24, Z+
    1920:	8d 93       	st	X+, r24
    1922:	21 50       	subi	r18, 0x01	; 1
    1924:	e1 f7       	brne	.-8      	; 0x191e <gfx_mono_framebuffer_put_page+0x1e>
    1926:	08 95       	ret

00001928 <gfx_mono_framebuffer_put_byte>:
 * \endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
    1928:	20 e8       	ldi	r18, 0x80	; 128
    192a:	82 9f       	mul	r24, r18
    192c:	c0 01       	movw	r24, r0
    192e:	11 24       	eor	r1, r1
    1930:	fc 01       	movw	r30, r24
    1932:	e6 0f       	add	r30, r22
    1934:	f1 1d       	adc	r31, r1
    1936:	80 91 aa 23 	lds	r24, 0x23AA
    193a:	90 91 ab 23 	lds	r25, 0x23AB
    193e:	e8 0f       	add	r30, r24
    1940:	f9 1f       	adc	r31, r25
    1942:	40 83       	st	Z, r20
    1944:	08 95       	ret

00001946 <gfx_mono_framebuffer_get_byte>:
 * data = gfx_mono_framebuffer_get_byte(0, 0);
 * \endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
    1946:	20 e8       	ldi	r18, 0x80	; 128
    1948:	82 9f       	mul	r24, r18
    194a:	c0 01       	movw	r24, r0
    194c:	11 24       	eor	r1, r1
    194e:	fc 01       	movw	r30, r24
    1950:	e6 0f       	add	r30, r22
    1952:	f1 1d       	adc	r31, r1
    1954:	80 91 aa 23 	lds	r24, 0x23AA
    1958:	90 91 ab 23 	lds	r25, 0x23AB
    195c:	e8 0f       	add	r30, r24
    195e:	f9 1f       	adc	r31, r25
}
    1960:	80 81       	ld	r24, Z
    1962:	08 95       	ret

00001964 <gfx_mono_generic_draw_horizontal_line>:
		}

		/* Next X. */
		++offset_x;
	}
}
    1964:	ff 92       	push	r15
    1966:	0f 93       	push	r16
    1968:	1f 93       	push	r17
    196a:	cf 93       	push	r28
    196c:	df 93       	push	r29
    196e:	c4 2f       	mov	r28, r20
    1970:	e4 2f       	mov	r30, r20
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	e8 0f       	add	r30, r24
    1976:	f1 1d       	adc	r31, r1
    1978:	e1 38       	cpi	r30, 0x81	; 129
    197a:	f1 05       	cpc	r31, r1
    197c:	14 f0       	brlt	.+4      	; 0x1982 <gfx_mono_generic_draw_horizontal_line+0x1e>
    197e:	c0 e8       	ldi	r28, 0x80	; 128
    1980:	c8 1b       	sub	r28, r24
    1982:	cc 23       	and	r28, r28
    1984:	09 f4       	brne	.+2      	; 0x1988 <gfx_mono_generic_draw_horizontal_line+0x24>
    1986:	50 c0       	rjmp	.+160    	; 0x1a28 <gfx_mono_generic_draw_horizontal_line+0xc4>
    1988:	d6 2f       	mov	r29, r22
    198a:	d6 95       	lsr	r29
    198c:	d6 95       	lsr	r29
    198e:	d6 95       	lsr	r29
    1990:	ed 2f       	mov	r30, r29
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	f1 95       	neg	r31
    1996:	e1 95       	neg	r30
    1998:	f1 09       	sbc	r31, r1
    199a:	ee 0f       	add	r30, r30
    199c:	ff 1f       	adc	r31, r31
    199e:	ee 0f       	add	r30, r30
    19a0:	ff 1f       	adc	r31, r31
    19a2:	ee 0f       	add	r30, r30
    19a4:	ff 1f       	adc	r31, r31
    19a6:	af 01       	movw	r20, r30
    19a8:	46 0f       	add	r20, r22
    19aa:	51 1d       	adc	r21, r1
    19ac:	ba 01       	movw	r22, r20
    19ae:	e1 e0       	ldi	r30, 0x01	; 1
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	af 01       	movw	r20, r30
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <gfx_mono_generic_draw_horizontal_line+0x56>
    19b6:	44 0f       	add	r20, r20
    19b8:	55 1f       	adc	r21, r21
    19ba:	6a 95       	dec	r22
    19bc:	e2 f7       	brpl	.-8      	; 0x19b6 <gfx_mono_generic_draw_horizontal_line+0x52>
    19be:	04 2f       	mov	r16, r20
    19c0:	21 30       	cpi	r18, 0x01	; 1
    19c2:	21 f0       	breq	.+8      	; 0x19cc <gfx_mono_generic_draw_horizontal_line+0x68>
    19c4:	90 f0       	brcs	.+36     	; 0x19ea <gfx_mono_generic_draw_horizontal_line+0x86>
    19c6:	22 30       	cpi	r18, 0x02	; 2
    19c8:	79 f5       	brne	.+94     	; 0x1a28 <gfx_mono_generic_draw_horizontal_line+0xc4>
    19ca:	20 c0       	rjmp	.+64     	; 0x1a0c <gfx_mono_generic_draw_horizontal_line+0xa8>
    19cc:	f8 2e       	mov	r15, r24
    19ce:	fa 94       	dec	r15
    19d0:	1f 2d       	mov	r17, r15
    19d2:	1c 0f       	add	r17, r28
    19d4:	61 2f       	mov	r22, r17
    19d6:	8d 2f       	mov	r24, r29
    19d8:	2e df       	rcall	.-420    	; 0x1836 <gfx_mono_st7565r_get_byte>
    19da:	48 2f       	mov	r20, r24
    19dc:	40 2b       	or	r20, r16
    19de:	61 2f       	mov	r22, r17
    19e0:	8d 2f       	mov	r24, r29
    19e2:	72 de       	rcall	.-796    	; 0x16c8 <gfx_mono_st7565r_put_byte>
    19e4:	c1 50       	subi	r28, 0x01	; 1
    19e6:	a1 f7       	brne	.-24     	; 0x19d0 <gfx_mono_generic_draw_horizontal_line+0x6c>
    19e8:	1f c0       	rjmp	.+62     	; 0x1a28 <gfx_mono_generic_draw_horizontal_line+0xc4>
    19ea:	f8 2e       	mov	r15, r24
    19ec:	fa 94       	dec	r15
    19ee:	04 2f       	mov	r16, r20
    19f0:	00 95       	com	r16
    19f2:	1f 2d       	mov	r17, r15
    19f4:	1c 0f       	add	r17, r28
    19f6:	61 2f       	mov	r22, r17
    19f8:	8d 2f       	mov	r24, r29
    19fa:	1d df       	rcall	.-454    	; 0x1836 <gfx_mono_st7565r_get_byte>
    19fc:	48 2f       	mov	r20, r24
    19fe:	40 23       	and	r20, r16
    1a00:	61 2f       	mov	r22, r17
    1a02:	8d 2f       	mov	r24, r29
    1a04:	61 de       	rcall	.-830    	; 0x16c8 <gfx_mono_st7565r_put_byte>
    1a06:	c1 50       	subi	r28, 0x01	; 1
    1a08:	a1 f7       	brne	.-24     	; 0x19f2 <gfx_mono_generic_draw_horizontal_line+0x8e>
    1a0a:	0e c0       	rjmp	.+28     	; 0x1a28 <gfx_mono_generic_draw_horizontal_line+0xc4>
    1a0c:	f8 2e       	mov	r15, r24
    1a0e:	fa 94       	dec	r15
    1a10:	1f 2d       	mov	r17, r15
    1a12:	1c 0f       	add	r17, r28
    1a14:	61 2f       	mov	r22, r17
    1a16:	8d 2f       	mov	r24, r29
    1a18:	0e df       	rcall	.-484    	; 0x1836 <gfx_mono_st7565r_get_byte>
    1a1a:	48 2f       	mov	r20, r24
    1a1c:	40 27       	eor	r20, r16
    1a1e:	61 2f       	mov	r22, r17
    1a20:	8d 2f       	mov	r24, r29
    1a22:	52 de       	rcall	.-860    	; 0x16c8 <gfx_mono_st7565r_put_byte>
    1a24:	c1 50       	subi	r28, 0x01	; 1
    1a26:	a1 f7       	brne	.-24     	; 0x1a10 <gfx_mono_generic_draw_horizontal_line+0xac>
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	1f 91       	pop	r17
    1a2e:	0f 91       	pop	r16
    1a30:	ff 90       	pop	r15
    1a32:	08 95       	ret

00001a34 <gfx_mono_generic_draw_vertical_line>:
    1a34:	ff 92       	push	r15
    1a36:	0f 93       	push	r16
    1a38:	1f 93       	push	r17
    1a3a:	cf 93       	push	r28
    1a3c:	df 93       	push	r29
    1a3e:	d8 2f       	mov	r29, r24
    1a40:	12 2f       	mov	r17, r18
    1a42:	44 23       	and	r20, r20
    1a44:	09 f4       	brne	.+2      	; 0x1a48 <gfx_mono_generic_draw_vertical_line+0x14>
    1a46:	42 c0       	rjmp	.+132    	; 0x1acc <gfx_mono_generic_draw_vertical_line+0x98>
    1a48:	96 2f       	mov	r25, r22
    1a4a:	91 50       	subi	r25, 0x01	; 1
    1a4c:	94 0f       	add	r25, r20
    1a4e:	69 13       	cpse	r22, r25
    1a50:	03 c0       	rjmp	.+6      	; 0x1a58 <gfx_mono_generic_draw_vertical_line+0x24>
    1a52:	42 2f       	mov	r20, r18
    1a54:	f2 de       	rcall	.-540    	; 0x183a <gfx_mono_st7565r_draw_pixel>
    1a56:	3a c0       	rjmp	.+116    	; 0x1acc <gfx_mono_generic_draw_vertical_line+0x98>
    1a58:	9f 31       	cpi	r25, 0x1F	; 31
    1a5a:	08 f0       	brcs	.+2      	; 0x1a5e <gfx_mono_generic_draw_vertical_line+0x2a>
    1a5c:	9f e1       	ldi	r25, 0x1F	; 31
    1a5e:	c6 2f       	mov	r28, r22
    1a60:	c6 95       	lsr	r28
    1a62:	c6 95       	lsr	r28
    1a64:	c6 95       	lsr	r28
    1a66:	09 2f       	mov	r16, r25
    1a68:	06 95       	lsr	r16
    1a6a:	06 95       	lsr	r16
    1a6c:	06 95       	lsr	r16
    1a6e:	67 70       	andi	r22, 0x07	; 7
    1a70:	ef ef       	ldi	r30, 0xFF	; 255
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	4e 2f       	mov	r20, r30
    1a76:	01 c0       	rjmp	.+2      	; 0x1a7a <gfx_mono_generic_draw_vertical_line+0x46>
    1a78:	44 0f       	add	r20, r20
    1a7a:	6a 95       	dec	r22
    1a7c:	ea f7       	brpl	.-6      	; 0x1a78 <gfx_mono_generic_draw_vertical_line+0x44>
    1a7e:	97 70       	andi	r25, 0x07	; 7
    1a80:	a7 e0       	ldi	r26, 0x07	; 7
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	a9 1b       	sub	r26, r25
    1a86:	b1 09       	sbc	r27, r1
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <gfx_mono_generic_draw_vertical_line+0x5a>
    1a8a:	f5 95       	asr	r31
    1a8c:	e7 95       	ror	r30
    1a8e:	aa 95       	dec	r26
    1a90:	e2 f7       	brpl	.-8      	; 0x1a8a <gfx_mono_generic_draw_vertical_line+0x56>
    1a92:	fe 2e       	mov	r15, r30
    1a94:	c0 13       	cpse	r28, r16
    1a96:	06 c0       	rjmp	.+12     	; 0x1aa4 <gfx_mono_generic_draw_vertical_line+0x70>
    1a98:	4e 23       	and	r20, r30
    1a9a:	21 2f       	mov	r18, r17
    1a9c:	6d 2f       	mov	r22, r29
    1a9e:	8c 2f       	mov	r24, r28
    1aa0:	0c df       	rcall	.-488    	; 0x18ba <gfx_mono_st7565r_mask_byte>
    1aa2:	14 c0       	rjmp	.+40     	; 0x1acc <gfx_mono_generic_draw_vertical_line+0x98>
    1aa4:	21 2f       	mov	r18, r17
    1aa6:	6d 2f       	mov	r22, r29
    1aa8:	8c 2f       	mov	r24, r28
    1aaa:	07 df       	rcall	.-498    	; 0x18ba <gfx_mono_st7565r_mask_byte>
    1aac:	cf 5f       	subi	r28, 0xFF	; 255
    1aae:	c0 17       	cp	r28, r16
    1ab0:	40 f4       	brcc	.+16     	; 0x1ac2 <gfx_mono_generic_draw_vertical_line+0x8e>
    1ab2:	21 2f       	mov	r18, r17
    1ab4:	4f ef       	ldi	r20, 0xFF	; 255
    1ab6:	6d 2f       	mov	r22, r29
    1ab8:	8c 2f       	mov	r24, r28
    1aba:	ff de       	rcall	.-514    	; 0x18ba <gfx_mono_st7565r_mask_byte>
    1abc:	cf 5f       	subi	r28, 0xFF	; 255
    1abe:	c0 17       	cp	r28, r16
    1ac0:	c0 f3       	brcs	.-16     	; 0x1ab2 <gfx_mono_generic_draw_vertical_line+0x7e>
    1ac2:	21 2f       	mov	r18, r17
    1ac4:	4f 2d       	mov	r20, r15
    1ac6:	6d 2f       	mov	r22, r29
    1ac8:	80 2f       	mov	r24, r16
    1aca:	f7 de       	rcall	.-530    	; 0x18ba <gfx_mono_st7565r_mask_byte>
    1acc:	df 91       	pop	r29
    1ace:	cf 91       	pop	r28
    1ad0:	1f 91       	pop	r17
    1ad2:	0f 91       	pop	r16
    1ad4:	ff 90       	pop	r15
    1ad6:	08 95       	ret

00001ad8 <gfx_mono_generic_draw_rect>:
    1ad8:	ff 92       	push	r15
    1ada:	0f 93       	push	r16
    1adc:	1f 93       	push	r17
    1ade:	cf 93       	push	r28
    1ae0:	df 93       	push	r29
    1ae2:	d8 2f       	mov	r29, r24
    1ae4:	c6 2f       	mov	r28, r22
    1ae6:	14 2f       	mov	r17, r20
    1ae8:	f2 2e       	mov	r15, r18
    1aea:	20 2f       	mov	r18, r16
    1aec:	3b df       	rcall	.-394    	; 0x1964 <gfx_mono_generic_draw_horizontal_line>
    1aee:	6c 2f       	mov	r22, r28
    1af0:	61 50       	subi	r22, 0x01	; 1
    1af2:	6f 0d       	add	r22, r15
    1af4:	20 2f       	mov	r18, r16
    1af6:	41 2f       	mov	r20, r17
    1af8:	8d 2f       	mov	r24, r29
    1afa:	34 df       	rcall	.-408    	; 0x1964 <gfx_mono_generic_draw_horizontal_line>
    1afc:	20 2f       	mov	r18, r16
    1afe:	4f 2d       	mov	r20, r15
    1b00:	6c 2f       	mov	r22, r28
    1b02:	8d 2f       	mov	r24, r29
    1b04:	97 df       	rcall	.-210    	; 0x1a34 <gfx_mono_generic_draw_vertical_line>
    1b06:	8d 2f       	mov	r24, r29
    1b08:	81 50       	subi	r24, 0x01	; 1
    1b0a:	20 2f       	mov	r18, r16
    1b0c:	4f 2d       	mov	r20, r15
    1b0e:	6c 2f       	mov	r22, r28
    1b10:	81 0f       	add	r24, r17
    1b12:	90 df       	rcall	.-224    	; 0x1a34 <gfx_mono_generic_draw_vertical_line>
    1b14:	df 91       	pop	r29
    1b16:	cf 91       	pop	r28
    1b18:	1f 91       	pop	r17
    1b1a:	0f 91       	pop	r16
    1b1c:	ff 90       	pop	r15
    1b1e:	08 95       	ret

00001b20 <gfx_mono_generic_draw_filled_rect>:
    1b20:	ff 92       	push	r15
    1b22:	0f 93       	push	r16
    1b24:	1f 93       	push	r17
    1b26:	cf 93       	push	r28
    1b28:	df 93       	push	r29
    1b2a:	d8 2f       	mov	r29, r24
    1b2c:	14 2f       	mov	r17, r20
    1b2e:	c2 2f       	mov	r28, r18
    1b30:	22 23       	and	r18, r18
    1b32:	51 f0       	breq	.+20     	; 0x1b48 <gfx_mono_generic_draw_filled_rect+0x28>
    1b34:	f6 2e       	mov	r15, r22
    1b36:	fa 94       	dec	r15
    1b38:	6f 2d       	mov	r22, r15
    1b3a:	6c 0f       	add	r22, r28
    1b3c:	20 2f       	mov	r18, r16
    1b3e:	41 2f       	mov	r20, r17
    1b40:	8d 2f       	mov	r24, r29
    1b42:	10 df       	rcall	.-480    	; 0x1964 <gfx_mono_generic_draw_horizontal_line>
    1b44:	c1 50       	subi	r28, 0x01	; 1
    1b46:	c1 f7       	brne	.-16     	; 0x1b38 <gfx_mono_generic_draw_filled_rect+0x18>
    1b48:	df 91       	pop	r29
    1b4a:	cf 91       	pop	r28
    1b4c:	1f 91       	pop	r17
    1b4e:	0f 91       	pop	r16
    1b50:	ff 90       	pop	r15
    1b52:	08 95       	ret

00001b54 <gfx_mono_generic_put_bitmap>:
 * placing a bitmap at x = 10, y = 10 will put the bitmap at x = 10, y = 8
 *
 */
void gfx_mono_generic_put_bitmap(struct gfx_mono_bitmap *bitmap, gfx_coord_t x,
		gfx_coord_t y)
{
    1b54:	bf 92       	push	r11
    1b56:	cf 92       	push	r12
    1b58:	df 92       	push	r13
    1b5a:	ef 92       	push	r14
    1b5c:	ff 92       	push	r15
    1b5e:	0f 93       	push	r16
    1b60:	1f 93       	push	r17
    1b62:	cf 93       	push	r28
    1b64:	df 93       	push	r29
    1b66:	ec 01       	movw	r28, r24
    1b68:	f6 2e       	mov	r15, r22
	gfx_coord_t num_pages = bitmap->height / 8;
    1b6a:	e9 80       	ldd	r14, Y+1	; 0x01
    1b6c:	e6 94       	lsr	r14
    1b6e:	e6 94       	lsr	r14
    1b70:	e6 94       	lsr	r14
	gfx_coord_t page = y / 8;
    1b72:	d4 2e       	mov	r13, r20
    1b74:	d6 94       	lsr	r13
    1b76:	d6 94       	lsr	r13
    1b78:	d6 94       	lsr	r13
	gfx_coord_t column;
	gfx_coord_t i;
	gfx_mono_color_t temp;

	switch (bitmap->type) {
    1b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7c:	88 23       	and	r24, r24
    1b7e:	31 f0       	breq	.+12     	; 0x1b8c <gfx_mono_generic_put_bitmap+0x38>
    1b80:	81 30       	cpi	r24, 0x01	; 1
    1b82:	09 f0       	breq	.+2      	; 0x1b86 <gfx_mono_generic_put_bitmap+0x32>
    1b84:	3c c0       	rjmp	.+120    	; 0x1bfe <gfx_mono_generic_put_bitmap+0xaa>
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
    1b86:	e1 10       	cpse	r14, r1
    1b88:	20 c0       	rjmp	.+64     	; 0x1bca <gfx_mono_generic_put_bitmap+0x76>
    1b8a:	39 c0       	rjmp	.+114    	; 0x1bfe <gfx_mono_generic_put_bitmap+0xaa>
			}
		}
		break;

	case GFX_MONO_BITMAP_RAM:
		for (i = 0; i < num_pages; i++) {
    1b8c:	e1 10       	cpse	r14, r1
    1b8e:	23 c0       	rjmp	.+70     	; 0x1bd6 <gfx_mono_generic_put_bitmap+0x82>
    1b90:	36 c0       	rjmp	.+108    	; 0x1bfe <gfx_mono_generic_put_bitmap+0xaa>
	gfx_mono_color_t temp;

	switch (bitmap->type) {
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
			for (column = 0; column < bitmap->width; column++) {
    1b92:	c1 2c       	mov	r12, r1
 * The bitmap y-coordinate will be aligned with display pages, rounded down.
 * Ie: placing a bitmap at x=10, y=5 will put the bitmap at x = 10,y = 0 and
 * placing a bitmap at x = 10, y = 10 will put the bitmap at x = 10, y = 8
 *
 */
void gfx_mono_generic_put_bitmap(struct gfx_mono_bitmap *bitmap, gfx_coord_t x,
    1b94:	bd 2c       	mov	r11, r13
    1b96:	b0 0e       	add	r11, r16

	switch (bitmap->type) {
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
			for (column = 0; column < bitmap->width; column++) {
				temp = PROGMEM_READ_BYTE(bitmap->data.progmem
    1b98:	90 9f       	mul	r25, r16
    1b9a:	f0 01       	movw	r30, r0
    1b9c:	91 9f       	mul	r25, r17
    1b9e:	f0 0d       	add	r31, r0
    1ba0:	11 24       	eor	r1, r1
    1ba2:	ec 0d       	add	r30, r12
    1ba4:	f1 1d       	adc	r31, r1
    1ba6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba8:	3c 81       	ldd	r19, Y+4	; 0x04
    1baa:	e2 0f       	add	r30, r18
    1bac:	f3 1f       	adc	r31, r19
    1bae:	44 91       	lpm	r20, Z
 * The bitmap y-coordinate will be aligned with display pages, rounded down.
 * Ie: placing a bitmap at x=10, y=5 will put the bitmap at x = 10,y = 0 and
 * placing a bitmap at x = 10, y = 10 will put the bitmap at x = 10, y = 8
 *
 */
void gfx_mono_generic_put_bitmap(struct gfx_mono_bitmap *bitmap, gfx_coord_t x,
    1bb0:	6c 2d       	mov	r22, r12
    1bb2:	6f 0d       	add	r22, r15
		for (i = 0; i < num_pages; i++) {
			for (column = 0; column < bitmap->width; column++) {
				temp = PROGMEM_READ_BYTE(bitmap->data.progmem
						+ (i * bitmap->width)
						+ column);
				gfx_mono_put_byte(i + page, column + x, temp);
    1bb4:	8b 2d       	mov	r24, r11
    1bb6:	88 dd       	rcall	.-1264   	; 0x16c8 <gfx_mono_st7565r_put_byte>
	gfx_mono_color_t temp;

	switch (bitmap->type) {
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
			for (column = 0; column < bitmap->width; column++) {
    1bb8:	c3 94       	inc	r12
    1bba:	98 81       	ld	r25, Y
    1bbc:	c9 16       	cp	r12, r25
    1bbe:	60 f3       	brcs	.-40     	; 0x1b98 <gfx_mono_generic_put_bitmap+0x44>
    1bc0:	0f 5f       	subi	r16, 0xFF	; 255
    1bc2:	1f 4f       	sbci	r17, 0xFF	; 255
	gfx_coord_t i;
	gfx_mono_color_t temp;

	switch (bitmap->type) {
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
    1bc4:	0e 15       	cp	r16, r14
    1bc6:	18 f0       	brcs	.+6      	; 0x1bce <gfx_mono_generic_put_bitmap+0x7a>
    1bc8:	1a c0       	rjmp	.+52     	; 0x1bfe <gfx_mono_generic_put_bitmap+0xaa>
    1bca:	00 e0       	ldi	r16, 0x00	; 0
    1bcc:	10 e0       	ldi	r17, 0x00	; 0
			for (column = 0; column < bitmap->width; column++) {
    1bce:	98 81       	ld	r25, Y
    1bd0:	91 11       	cpse	r25, r1
    1bd2:	df cf       	rjmp	.-66     	; 0x1b92 <gfx_mono_generic_put_bitmap+0x3e>
    1bd4:	f5 cf       	rjmp	.-22     	; 0x1bc0 <gfx_mono_generic_put_bitmap+0x6c>
			}
		}
		break;

	case GFX_MONO_BITMAP_RAM:
		for (i = 0; i < num_pages; i++) {
    1bd6:	00 e0       	ldi	r16, 0x00	; 0
    1bd8:	10 e0       	ldi	r17, 0x00	; 0
			gfx_mono_put_page(bitmap->data.pixmap
    1bda:	28 81       	ld	r18, Y
 * The bitmap y-coordinate will be aligned with display pages, rounded down.
 * Ie: placing a bitmap at x=10, y=5 will put the bitmap at x = 10,y = 0 and
 * placing a bitmap at x = 10, y = 10 will put the bitmap at x = 10, y = 8
 *
 */
void gfx_mono_generic_put_bitmap(struct gfx_mono_bitmap *bitmap, gfx_coord_t x,
    1bdc:	6d 2d       	mov	r22, r13
    1bde:	60 0f       	add	r22, r16
		}
		break;

	case GFX_MONO_BITMAP_RAM:
		for (i = 0; i < num_pages; i++) {
			gfx_mono_put_page(bitmap->data.pixmap
    1be0:	20 9f       	mul	r18, r16
    1be2:	c0 01       	movw	r24, r0
    1be4:	21 9f       	mul	r18, r17
    1be6:	90 0d       	add	r25, r0
    1be8:	11 24       	eor	r1, r1
    1bea:	eb 81       	ldd	r30, Y+3	; 0x03
    1bec:	fc 81       	ldd	r31, Y+4	; 0x04
    1bee:	4f 2d       	mov	r20, r15
    1bf0:	8e 0f       	add	r24, r30
    1bf2:	9f 1f       	adc	r25, r31
    1bf4:	d8 dc       	rcall	.-1616   	; 0x15a6 <gfx_mono_st7565r_put_page>
    1bf6:	0f 5f       	subi	r16, 0xFF	; 255
    1bf8:	1f 4f       	sbci	r17, 0xFF	; 255
			}
		}
		break;

	case GFX_MONO_BITMAP_RAM:
		for (i = 0; i < num_pages; i++) {
    1bfa:	0e 15       	cp	r16, r14
    1bfc:	70 f3       	brcs	.-36     	; 0x1bda <gfx_mono_generic_put_bitmap+0x86>
		break;

	default:
		break;
	}
}
    1bfe:	df 91       	pop	r29
    1c00:	cf 91       	pop	r28
    1c02:	1f 91       	pop	r17
    1c04:	0f 91       	pop	r16
    1c06:	ff 90       	pop	r15
    1c08:	ef 90       	pop	r14
    1c0a:	df 90       	pop	r13
    1c0c:	cf 90       	pop	r12
    1c0e:	bf 90       	pop	r11
    1c10:	08 95       	ret

00001c12 <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
    1c12:	af 92       	push	r10
    1c14:	bf 92       	push	r11
    1c16:	cf 92       	push	r12
    1c18:	df 92       	push	r13
    1c1a:	ef 92       	push	r14
    1c1c:	ff 92       	push	r15
    1c1e:	0f 93       	push	r16
    1c20:	1f 93       	push	r17
    1c22:	cf 93       	push	r28
    1c24:	df 93       	push	r29
    1c26:	c8 2f       	mov	r28, r24
    1c28:	d6 2e       	mov	r13, r22
    1c2a:	a4 2e       	mov	r10, r20
    1c2c:	79 01       	movw	r14, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
    1c2e:	00 e0       	ldi	r16, 0x00	; 0
    1c30:	f9 01       	movw	r30, r18
    1c32:	24 81       	ldd	r18, Z+4	; 0x04
    1c34:	43 81       	ldd	r20, Z+3	; 0x03
    1c36:	6a 2d       	mov	r22, r10
    1c38:	8d 2d       	mov	r24, r13
    1c3a:	72 df       	rcall	.-284    	; 0x1b20 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
    1c3c:	f7 01       	movw	r30, r14
    1c3e:	90 81       	ld	r25, Z
    1c40:	91 11       	cpse	r25, r1
    1c42:	39 c0       	rjmp	.+114    	; 0x1cb6 <gfx_mono_draw_char+0xa4>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    1c44:	83 81       	ldd	r24, Z+3	; 0x03
    1c46:	a8 2f       	mov	r26, r24
    1c48:	a6 95       	lsr	r26
    1c4a:	a6 95       	lsr	r26
    1c4c:	a6 95       	lsr	r26
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    1c4e:	87 70       	andi	r24, 0x07	; 7
    1c50:	09 f0       	breq	.+2      	; 0x1c54 <gfx_mono_draw_char+0x42>
		char_row_size++;
    1c52:	af 5f       	subi	r26, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
    1c54:	f7 01       	movw	r30, r14
    1c56:	c4 80       	ldd	r12, Z+4	; 0x04
    1c58:	ac 9d       	mul	r26, r12
    1c5a:	d0 01       	movw	r26, r0
    1c5c:	11 24       	eor	r1, r1
			((uint8_t)ch - font->first_char);
    1c5e:	ec 2f       	mov	r30, r28
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	e7 01       	movw	r28, r14
    1c64:	8d 81       	ldd	r24, Y+5	; 0x05
    1c66:	e8 1b       	sub	r30, r24
    1c68:	f1 09       	sbc	r31, r1
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
		char_row_size++;
	}

	glyph_data_offset = char_row_size * font->height *
    1c6a:	ae 9f       	mul	r26, r30
    1c6c:	90 01       	movw	r18, r0
    1c6e:	af 9f       	mul	r26, r31
    1c70:	30 0d       	add	r19, r0
    1c72:	be 9f       	mul	r27, r30
    1c74:	30 0d       	add	r19, r0
    1c76:	11 24       	eor	r1, r1
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
    1c78:	09 80       	ldd	r0, Y+1	; 0x01
    1c7a:	da 81       	ldd	r29, Y+2	; 0x02
    1c7c:	c0 2d       	mov	r28, r0
    1c7e:	c2 0f       	add	r28, r18
    1c80:	d3 1f       	adc	r29, r19
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
    1c82:	f7 01       	movw	r30, r14
    1c84:	b3 80       	ldd	r11, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
    1c86:	bb 20       	and	r11, r11
    1c88:	99 f0       	breq	.+38     	; 0x1cb0 <gfx_mono_draw_char+0x9e>
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
    1c8a:	00 e0       	ldi	r16, 0x00	; 0
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    1c8c:	10 e0       	ldi	r17, 0x00	; 0
 * \param c        Character to be drawn
 * \param x        X coordinate on screen.
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
    1c8e:	81 2f       	mov	r24, r17
    1c90:	8d 0d       	add	r24, r13
	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    1c92:	91 2f       	mov	r25, r17
    1c94:	97 70       	andi	r25, 0x07	; 7
    1c96:	19 f4       	brne	.+6      	; 0x1c9e <gfx_mono_draw_char+0x8c>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    1c98:	fe 01       	movw	r30, r28
    1c9a:	04 91       	lpm	r16, Z
				glyph_data++;
    1c9c:	21 96       	adiw	r28, 0x01	; 1
			}

			if ((glyph_byte & 0x80)) {
    1c9e:	00 23       	and	r16, r16
    1ca0:	1c f4       	brge	.+6      	; 0x1ca8 <gfx_mono_draw_char+0x96>
				gfx_mono_draw_pixel(inc_x, inc_y,
    1ca2:	41 e0       	ldi	r20, 0x01	; 1
    1ca4:	6a 2d       	mov	r22, r10
    1ca6:	c9 dd       	rcall	.-1134   	; 0x183a <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
    1ca8:	00 0f       	add	r16, r16

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    1caa:	1f 5f       	subi	r17, 0xFF	; 255
    1cac:	1b 11       	cpse	r17, r11
    1cae:	ef cf       	rjmp	.-34     	; 0x1c8e <gfx_mono_draw_char+0x7c>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
    1cb0:	a3 94       	inc	r10
		inc_x = x;
		rows_left--;
    1cb2:	ca 94       	dec	r12
	} while (rows_left > 0);
    1cb4:	31 f7       	brne	.-52     	; 0x1c82 <gfx_mono_draw_char+0x70>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    1cb6:	df 91       	pop	r29
    1cb8:	cf 91       	pop	r28
    1cba:	1f 91       	pop	r17
    1cbc:	0f 91       	pop	r16
    1cbe:	ff 90       	pop	r15
    1cc0:	ef 90       	pop	r14
    1cc2:	df 90       	pop	r13
    1cc4:	cf 90       	pop	r12
    1cc6:	bf 90       	pop	r11
    1cc8:	af 90       	pop	r10
    1cca:	08 95       	ret

00001ccc <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    1ccc:	df 92       	push	r13
    1cce:	ef 92       	push	r14
    1cd0:	ff 92       	push	r15
    1cd2:	0f 93       	push	r16
    1cd4:	1f 93       	push	r17
    1cd6:	cf 93       	push	r28
    1cd8:	df 93       	push	r29
    1cda:	e4 2e       	mov	r14, r20
    1cdc:	89 01       	movw	r16, r18
    1cde:	c8 2f       	mov	r28, r24
    1ce0:	d9 2f       	mov	r29, r25
    1ce2:	f6 2e       	mov	r15, r22

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    1ce4:	d6 2e       	mov	r13, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
    1ce6:	89 91       	ld	r24, Y+
    1ce8:	8a 30       	cpi	r24, 0x0A	; 10
    1cea:	31 f4       	brne	.+12     	; 0x1cf8 <gfx_mono_draw_string+0x2c>
			x = start_of_string_position_x;
			y += font->height + 1;
    1cec:	f8 01       	movw	r30, r16
    1cee:	84 81       	ldd	r24, Z+4	; 0x04
    1cf0:	8f 5f       	subi	r24, 0xFF	; 255
    1cf2:	e8 0e       	add	r14, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    1cf4:	fd 2c       	mov	r15, r13
    1cf6:	09 c0       	rjmp	.+18     	; 0x1d0a <gfx_mono_draw_string+0x3e>
			y += font->height + 1;
		} else if (*str == '\r') {
    1cf8:	8d 30       	cpi	r24, 0x0D	; 13
    1cfa:	39 f0       	breq	.+14     	; 0x1d0a <gfx_mono_draw_string+0x3e>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
    1cfc:	98 01       	movw	r18, r16
    1cfe:	4e 2d       	mov	r20, r14
    1d00:	6f 2d       	mov	r22, r15
    1d02:	87 df       	rcall	.-242    	; 0x1c12 <gfx_mono_draw_char>
			x += font->width;
    1d04:	f8 01       	movw	r30, r16
    1d06:	83 81       	ldd	r24, Z+3	; 0x03
    1d08:	f8 0e       	add	r15, r24
		}
	} while (*(++str));
    1d0a:	88 81       	ld	r24, Y
    1d0c:	81 11       	cpse	r24, r1
    1d0e:	eb cf       	rjmp	.-42     	; 0x1ce6 <gfx_mono_draw_string+0x1a>
}
    1d10:	df 91       	pop	r29
    1d12:	cf 91       	pop	r28
    1d14:	1f 91       	pop	r17
    1d16:	0f 91       	pop	r16
    1d18:	ff 90       	pop	r15
    1d1a:	ef 90       	pop	r14
    1d1c:	df 90       	pop	r13
    1d1e:	08 95       	ret

00001d20 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    1d20:	cf 93       	push	r28
    1d22:	df 93       	push	r29
 *
 */
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
    1d24:	fc 01       	movw	r30, r24
    1d26:	70 96       	adiw	r30, 0x10	; 16
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    1d2c:	c6 2f       	mov	r28, r22
    1d2e:	d0 e0       	ldi	r29, 0x00	; 0
    1d30:	de 01       	movw	r26, r28
    1d32:	02 2e       	mov	r0, r18
    1d34:	02 c0       	rjmp	.+4      	; 0x1d3a <ioport_configure_port_pin+0x1a>
    1d36:	b5 95       	asr	r27
    1d38:	a7 95       	ror	r26
    1d3a:	0a 94       	dec	r0
    1d3c:	e2 f7       	brpl	.-8      	; 0x1d36 <ioport_configure_port_pin+0x16>
    1d3e:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    1d40:	50 83       	st	Z, r21
    1d42:	2f 5f       	subi	r18, 0xFF	; 255
    1d44:	3f 4f       	sbci	r19, 0xFF	; 255
    1d46:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    1d48:	28 30       	cpi	r18, 0x08	; 8
    1d4a:	31 05       	cpc	r19, r1
    1d4c:	89 f7       	brne	.-30     	; 0x1d30 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    1d4e:	40 ff       	sbrs	r20, 0
    1d50:	0a c0       	rjmp	.+20     	; 0x1d66 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
    1d52:	41 ff       	sbrs	r20, 1
    1d54:	03 c0       	rjmp	.+6      	; 0x1d5c <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    1d56:	fc 01       	movw	r30, r24
    1d58:	65 83       	std	Z+5, r22	; 0x05
    1d5a:	02 c0       	rjmp	.+4      	; 0x1d60 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    1d60:	fc 01       	movw	r30, r24
    1d62:	61 83       	std	Z+1, r22	; 0x01
    1d64:	02 c0       	rjmp	.+4      	; 0x1d6a <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    1d66:	fc 01       	movw	r30, r24
    1d68:	62 83       	std	Z+2, r22	; 0x02
	}
}
    1d6a:	df 91       	pop	r29
    1d6c:	cf 91       	pop	r28
    1d6e:	08 95       	ret

00001d70 <usart_spi_init>:
#include "sysclk.h"

void usart_spi_init(USART_t *usart)
{
#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
    1d70:	80 3a       	cpi	r24, 0xA0	; 160
    1d72:	28 e0       	ldi	r18, 0x08	; 8
    1d74:	92 07       	cpc	r25, r18
    1d76:	19 f4       	brne	.+6      	; 0x1d7e <usart_spi_init+0xe>
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
    1d78:	60 e1       	ldi	r22, 0x10	; 16
    1d7a:	83 e0       	ldi	r24, 0x03	; 3
    1d7c:	c7 cb       	rjmp	.-2162   	; 0x150c <sysclk_enable_module>
	}
#endif
#ifdef USARTC1
	else
	if((uint16_t)usart == (uint16_t)&USARTC1) {
    1d7e:	80 3b       	cpi	r24, 0xB0	; 176
    1d80:	28 e0       	ldi	r18, 0x08	; 8
    1d82:	92 07       	cpc	r25, r18
    1d84:	19 f4       	brne	.+6      	; 0x1d8c <usart_spi_init+0x1c>
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART1_bm);
    1d86:	60 e2       	ldi	r22, 0x20	; 32
    1d88:	83 e0       	ldi	r24, 0x03	; 3
    1d8a:	c0 cb       	rjmp	.-2176   	; 0x150c <sysclk_enable_module>
	}
#endif
#ifdef USARTD0
	else
	if((uint16_t)usart == (uint16_t)&USARTD0) {
    1d8c:	80 3a       	cpi	r24, 0xA0	; 160
    1d8e:	29 e0       	ldi	r18, 0x09	; 9
    1d90:	92 07       	cpc	r25, r18
    1d92:	19 f4       	brne	.+6      	; 0x1d9a <usart_spi_init+0x2a>
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
    1d94:	60 e1       	ldi	r22, 0x10	; 16
    1d96:	84 e0       	ldi	r24, 0x04	; 4
    1d98:	b9 cb       	rjmp	.-2190   	; 0x150c <sysclk_enable_module>
	}
#endif
#ifdef USARTD1
	else
	if((uint16_t)usart == (uint16_t)&USARTD1) {
    1d9a:	80 3b       	cpi	r24, 0xB0	; 176
    1d9c:	29 e0       	ldi	r18, 0x09	; 9
    1d9e:	92 07       	cpc	r25, r18
    1da0:	19 f4       	brne	.+6      	; 0x1da8 <usart_spi_init+0x38>
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
    1da2:	60 e2       	ldi	r22, 0x20	; 32
    1da4:	84 e0       	ldi	r24, 0x04	; 4
    1da6:	b2 cb       	rjmp	.-2204   	; 0x150c <sysclk_enable_module>
	}
#endif
#ifdef USARTE0
	else
	if((uint16_t)usart == (uint16_t)&USARTE0) {
    1da8:	80 3a       	cpi	r24, 0xA0	; 160
    1daa:	2a e0       	ldi	r18, 0x0A	; 10
    1dac:	92 07       	cpc	r25, r18
    1dae:	19 f4       	brne	.+6      	; 0x1db6 <usart_spi_init+0x46>
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
    1db0:	60 e1       	ldi	r22, 0x10	; 16
    1db2:	85 e0       	ldi	r24, 0x05	; 5
    1db4:	ab cb       	rjmp	.-2218   	; 0x150c <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART1_bm);
	}
#endif
#ifdef USARTF0
	else
	if((uint16_t)usart == (uint16_t)&USARTF0) {
    1db6:	80 3a       	cpi	r24, 0xA0	; 160
    1db8:	9b 40       	sbci	r25, 0x0B	; 11
    1dba:	19 f4       	brne	.+6      	; 0x1dc2 <usart_spi_init+0x52>
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART0_bm);
    1dbc:	60 e1       	ldi	r22, 0x10	; 16
    1dbe:	86 e0       	ldi	r24, 0x06	; 6
    1dc0:	a5 cb       	rjmp	.-2230   	; 0x150c <sysclk_enable_module>
    1dc2:	08 95       	ret

00001dc4 <usart_spi_setup_device>:
}

void usart_spi_setup_device(USART_t *usart, struct usart_spi_device *device,
     spi_flags_t flags, unsigned long baud_rate,
     board_spi_select_id_t sel_id)
{
    1dc4:	0f 93       	push	r16
    1dc6:	1f 93       	push	r17
    1dc8:	cf 93       	push	r28
    1dca:	df 93       	push	r29
    1dcc:	00 d0       	rcall	.+0      	; 0x1dce <usart_spi_setup_device+0xa>
    1dce:	00 d0       	rcall	.+0      	; 0x1dd0 <usart_spi_setup_device+0xc>
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
	usart_spi_options_t opt;
	opt.baudrate=baud_rate;
    1dd4:	09 83       	std	Y+1, r16	; 0x01
    1dd6:	1a 83       	std	Y+2, r17	; 0x02
    1dd8:	2b 83       	std	Y+3, r18	; 0x03
    1dda:	3c 83       	std	Y+4, r19	; 0x04
	opt.spimode=flags;
    1ddc:	4d 83       	std	Y+5, r20	; 0x05
	opt.data_order=false;
    1dde:	1e 82       	std	Y+6, r1	; 0x06
	usart_init_spi(usart, &opt);
    1de0:	be 01       	movw	r22, r28
    1de2:	6f 5f       	subi	r22, 0xFF	; 255
    1de4:	7f 4f       	sbci	r23, 0xFF	; 255
    1de6:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <usart_init_spi>
}
    1dea:	26 96       	adiw	r28, 0x06	; 6
    1dec:	cd bf       	out	0x3d, r28	; 61
    1dee:	de bf       	out	0x3e, r29	; 62
    1df0:	df 91       	pop	r29
    1df2:	cf 91       	pop	r28
    1df4:	1f 91       	pop	r17
    1df6:	0f 91       	pop	r16
    1df8:	08 95       	ret

00001dfa <udi_cdc_comm_enable>:
}

bool udi_cdc_is_tx_ready(void)
{
	return udi_cdc_multi_is_tx_ready(0);
}
    1dfa:	10 92 b5 23 	sts	0x23B5, r1
    1dfe:	10 92 b6 23 	sts	0x23B6, r1
    1e02:	10 92 b7 23 	sts	0x23B7, r1
    1e06:	81 ea       	ldi	r24, 0xA1	; 161
    1e08:	80 93 b8 23 	sts	0x23B8, r24
    1e0c:	80 e2       	ldi	r24, 0x20	; 32
    1e0e:	80 93 b9 23 	sts	0x23B9, r24
    1e12:	10 92 ba 23 	sts	0x23BA, r1
    1e16:	10 92 bb 23 	sts	0x23BB, r1
    1e1a:	10 92 bc 23 	sts	0x23BC, r1
    1e1e:	10 92 bd 23 	sts	0x23BD, r1
    1e22:	82 e0       	ldi	r24, 0x02	; 2
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	80 93 be 23 	sts	0x23BE, r24
    1e2a:	90 93 bf 23 	sts	0x23BF, r25
    1e2e:	10 92 c0 23 	sts	0x23C0, r1
    1e32:	10 92 c1 23 	sts	0x23C1, r1
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	92 ec       	ldi	r25, 0xC2	; 194
    1e3a:	a1 e0       	ldi	r26, 0x01	; 1
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
    1e3e:	80 93 c2 23 	sts	0x23C2, r24
    1e42:	90 93 c3 23 	sts	0x23C3, r25
    1e46:	a0 93 c4 23 	sts	0x23C4, r26
    1e4a:	b0 93 c5 23 	sts	0x23C5, r27
    1e4e:	10 92 c6 23 	sts	0x23C6, r1
    1e52:	10 92 c7 23 	sts	0x23C7, r1
    1e56:	88 e0       	ldi	r24, 0x08	; 8
    1e58:	80 93 c8 23 	sts	0x23C8, r24
    1e5c:	80 91 b5 23 	lds	r24, 0x23B5
    1e60:	8f 5f       	subi	r24, 0xFF	; 255
    1e62:	80 93 b5 23 	sts	0x23B5, r24
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	08 95       	ret

00001e6a <udi_cdc_comm_disable>:
    1e6a:	80 91 b5 23 	lds	r24, 0x23B5
    1e6e:	81 50       	subi	r24, 0x01	; 1
    1e70:	80 93 b5 23 	sts	0x23B5, r24
    1e74:	08 95       	ret

00001e76 <udi_cdc_data_disable>:
    1e76:	80 91 b4 23 	lds	r24, 0x23B4
    1e7a:	81 50       	subi	r24, 0x01	; 1
    1e7c:	80 93 b4 23 	sts	0x23B4, r24
    1e80:	80 91 b4 23 	lds	r24, 0x23B4
    1e84:	10 92 b3 23 	sts	0x23B3, r1
    1e88:	08 95       	ret

00001e8a <udi_cdc_data_setup>:
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	08 95       	ret

00001e8e <udi_cdc_getsetting>:
    1e8e:	80 e0       	ldi	r24, 0x00	; 0
    1e90:	08 95       	ret

00001e92 <udi_cdc_line_coding_received>:
    1e92:	08 95       	ret

00001e94 <udi_cdc_tx_send>:
    1e94:	ff 92       	push	r15
    1e96:	0f 93       	push	r16
    1e98:	1f 93       	push	r17
    1e9a:	cf 93       	push	r28
    1e9c:	df 93       	push	r29
    1e9e:	80 91 ad 23 	lds	r24, 0x23AD
    1ea2:	81 11       	cpse	r24, r1
    1ea4:	6c c0       	rjmp	.+216    	; 0x1f7e <udi_cdc_tx_send+0xea>
    1ea6:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <udd_is_high_speed>
    1eaa:	88 23       	and	r24, r24
    1eac:	51 f0       	breq	.+20     	; 0x1ec2 <udi_cdc_tx_send+0x2e>
    1eae:	c0 91 cd 23 	lds	r28, 0x23CD
    1eb2:	d0 91 ce 23 	lds	r29, 0x23CE
    1eb6:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <udd_get_micro_frame_number>
    1eba:	c8 17       	cp	r28, r24
    1ebc:	d9 07       	cpc	r29, r25
    1ebe:	59 f4       	brne	.+22     	; 0x1ed6 <udi_cdc_tx_send+0x42>
    1ec0:	5e c0       	rjmp	.+188    	; 0x1f7e <udi_cdc_tx_send+0xea>
    1ec2:	c0 91 cd 23 	lds	r28, 0x23CD
    1ec6:	d0 91 ce 23 	lds	r29, 0x23CE
    1eca:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <udd_get_frame_number>
    1ece:	c8 17       	cp	r28, r24
    1ed0:	d9 07       	cpc	r29, r25
    1ed2:	09 f4       	brne	.+2      	; 0x1ed6 <udi_cdc_tx_send+0x42>
    1ed4:	54 c0       	rjmp	.+168    	; 0x1f7e <udi_cdc_tx_send+0xea>
    1ed6:	8f b7       	in	r24, 0x3f	; 63
    1ed8:	f8 94       	cli
    1eda:	c0 91 ae 23 	lds	r28, 0x23AE
    1ede:	90 91 ac 23 	lds	r25, 0x23AC
    1ee2:	91 11       	cpse	r25, r1
    1ee4:	06 c0       	rjmp	.+12     	; 0x1ef2 <udi_cdc_tx_send+0x5e>
    1ee6:	91 e0       	ldi	r25, 0x01	; 1
    1ee8:	c1 11       	cpse	r28, r1
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	90 93 ae 23 	sts	0x23AE, r25
    1ef0:	04 c0       	rjmp	.+8      	; 0x1efa <udi_cdc_tx_send+0x66>
    1ef2:	91 e0       	ldi	r25, 0x01	; 1
    1ef4:	c1 11       	cpse	r28, r1
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	c9 2f       	mov	r28, r25
    1efa:	91 e0       	ldi	r25, 0x01	; 1
    1efc:	90 93 ad 23 	sts	0x23AD, r25
    1f00:	8f bf       	out	0x3f, r24	; 63
    1f02:	d0 e0       	ldi	r29, 0x00	; 0
    1f04:	fe 01       	movw	r30, r28
    1f06:	ee 0f       	add	r30, r30
    1f08:	ff 1f       	adc	r31, r31
    1f0a:	e7 53       	subi	r30, 0x37	; 55
    1f0c:	fc 4d       	sbci	r31, 0xDC	; 220
    1f0e:	ff 24       	eor	r15, r15
    1f10:	f3 94       	inc	r15
    1f12:	80 81       	ld	r24, Z
    1f14:	91 81       	ldd	r25, Z+1	; 0x01
    1f16:	80 34       	cpi	r24, 0x40	; 64
    1f18:	91 40       	sbci	r25, 0x01	; 1
    1f1a:	09 f4       	brne	.+2      	; 0x1f1e <udi_cdc_tx_send+0x8a>
    1f1c:	f1 2c       	mov	r15, r1
    1f1e:	ff 20       	and	r15, r15
    1f20:	91 f0       	breq	.+36     	; 0x1f46 <udi_cdc_tx_send+0xb2>
    1f22:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <udd_is_high_speed>
    1f26:	88 23       	and	r24, r24
    1f28:	39 f0       	breq	.+14     	; 0x1f38 <udi_cdc_tx_send+0xa4>
    1f2a:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <udd_get_micro_frame_number>
    1f2e:	80 93 cd 23 	sts	0x23CD, r24
    1f32:	90 93 ce 23 	sts	0x23CE, r25
    1f36:	0b c0       	rjmp	.+22     	; 0x1f4e <udi_cdc_tx_send+0xba>
    1f38:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <udd_get_frame_number>
    1f3c:	80 93 cd 23 	sts	0x23CD, r24
    1f40:	90 93 ce 23 	sts	0x23CE, r25
    1f44:	04 c0       	rjmp	.+8      	; 0x1f4e <udi_cdc_tx_send+0xba>
    1f46:	10 92 cd 23 	sts	0x23CD, r1
    1f4a:	10 92 ce 23 	sts	0x23CE, r1
    1f4e:	fe 01       	movw	r30, r28
    1f50:	ee 0f       	add	r30, r30
    1f52:	ff 1f       	adc	r31, r31
    1f54:	e7 53       	subi	r30, 0x37	; 55
    1f56:	fc 4d       	sbci	r31, 0xDC	; 220
    1f58:	20 81       	ld	r18, Z
    1f5a:	31 81       	ldd	r19, Z+1	; 0x01
    1f5c:	80 e4       	ldi	r24, 0x40	; 64
    1f5e:	91 e0       	ldi	r25, 0x01	; 1
    1f60:	c8 9f       	mul	r28, r24
    1f62:	a0 01       	movw	r20, r0
    1f64:	c9 9f       	mul	r28, r25
    1f66:	50 0d       	add	r21, r0
    1f68:	d8 9f       	mul	r29, r24
    1f6a:	50 0d       	add	r21, r0
    1f6c:	11 24       	eor	r1, r1
    1f6e:	4c 52       	subi	r20, 0x2C	; 44
    1f70:	5c 4d       	sbci	r21, 0xDC	; 220
    1f72:	07 ec       	ldi	r16, 0xC7	; 199
    1f74:	1f e0       	ldi	r17, 0x0F	; 15
    1f76:	6f 2d       	mov	r22, r15
    1f78:	81 e8       	ldi	r24, 0x81	; 129
    1f7a:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <udd_ep_run>
    1f7e:	df 91       	pop	r29
    1f80:	cf 91       	pop	r28
    1f82:	1f 91       	pop	r17
    1f84:	0f 91       	pop	r16
    1f86:	ff 90       	pop	r15
    1f88:	08 95       	ret

00001f8a <udi_cdc_data_sof_notify>:
    1f8a:	80 e0       	ldi	r24, 0x00	; 0
    1f8c:	83 cf       	rjmp	.-250    	; 0x1e94 <udi_cdc_tx_send>

00001f8e <udi_cdc_data_sent>:
    1f8e:	81 11       	cpse	r24, r1
    1f90:	15 c0       	rjmp	.+42     	; 0x1fbc <udi_cdc_data_sent+0x2e>
    1f92:	20 91 ae 23 	lds	r18, 0x23AE
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	22 23       	and	r18, r18
    1f9c:	11 f0       	breq	.+4      	; 0x1fa2 <udi_cdc_data_sent+0x14>
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	ee 0f       	add	r30, r30
    1fa6:	ff 1f       	adc	r31, r31
    1fa8:	e7 53       	subi	r30, 0x37	; 55
    1faa:	fc 4d       	sbci	r31, 0xDC	; 220
    1fac:	10 82       	st	Z, r1
    1fae:	11 82       	std	Z+1, r1	; 0x01
    1fb0:	10 92 ac 23 	sts	0x23AC, r1
    1fb4:	10 92 ad 23 	sts	0x23AD, r1
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	6c cf       	rjmp	.-296    	; 0x1e94 <udi_cdc_tx_send>
    1fbc:	08 95       	ret

00001fbe <udi_cdc_comm_setup>:
    1fbe:	80 91 23 2a 	lds	r24, 0x2A23
    1fc2:	88 23       	and	r24, r24
    1fc4:	ec f4       	brge	.+58     	; 0x2000 <udi_cdc_comm_setup+0x42>
    1fc6:	80 76       	andi	r24, 0x60	; 96
    1fc8:	80 32       	cpi	r24, 0x20	; 32
    1fca:	09 f0       	breq	.+2      	; 0x1fce <udi_cdc_comm_setup+0x10>
    1fcc:	44 c0       	rjmp	.+136    	; 0x2056 <udi_cdc_comm_setup+0x98>
    1fce:	80 91 24 2a 	lds	r24, 0x2A24
    1fd2:	81 32       	cpi	r24, 0x21	; 33
    1fd4:	09 f0       	breq	.+2      	; 0x1fd8 <udi_cdc_comm_setup+0x1a>
    1fd6:	41 c0       	rjmp	.+130    	; 0x205a <udi_cdc_comm_setup+0x9c>
    1fd8:	80 91 29 2a 	lds	r24, 0x2A29
    1fdc:	90 91 2a 2a 	lds	r25, 0x2A2A
    1fe0:	07 97       	sbiw	r24, 0x07	; 7
    1fe2:	e9 f5       	brne	.+122    	; 0x205e <udi_cdc_comm_setup+0xa0>
    1fe4:	82 ec       	ldi	r24, 0xC2	; 194
    1fe6:	93 e2       	ldi	r25, 0x23	; 35
    1fe8:	80 93 2b 2a 	sts	0x2A2B, r24
    1fec:	90 93 2c 2a 	sts	0x2A2C, r25
    1ff0:	87 e0       	ldi	r24, 0x07	; 7
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	80 93 2d 2a 	sts	0x2A2D, r24
    1ff8:	90 93 2e 2a 	sts	0x2A2E, r25
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	08 95       	ret
    2000:	80 76       	andi	r24, 0x60	; 96
    2002:	80 32       	cpi	r24, 0x20	; 32
    2004:	71 f5       	brne	.+92     	; 0x2062 <udi_cdc_comm_setup+0xa4>
    2006:	80 91 24 2a 	lds	r24, 0x2A24
    200a:	80 32       	cpi	r24, 0x20	; 32
    200c:	19 f0       	breq	.+6      	; 0x2014 <udi_cdc_comm_setup+0x56>
    200e:	82 32       	cpi	r24, 0x22	; 34
    2010:	51 f5       	brne	.+84     	; 0x2066 <udi_cdc_comm_setup+0xa8>
    2012:	1a c0       	rjmp	.+52     	; 0x2048 <udi_cdc_comm_setup+0x8a>
    2014:	80 91 29 2a 	lds	r24, 0x2A29
    2018:	90 91 2a 2a 	lds	r25, 0x2A2A
    201c:	07 97       	sbiw	r24, 0x07	; 7
    201e:	29 f5       	brne	.+74     	; 0x206a <udi_cdc_comm_setup+0xac>
    2020:	89 e4       	ldi	r24, 0x49	; 73
    2022:	9f e0       	ldi	r25, 0x0F	; 15
    2024:	80 93 2f 2a 	sts	0x2A2F, r24
    2028:	90 93 30 2a 	sts	0x2A30, r25
    202c:	82 ec       	ldi	r24, 0xC2	; 194
    202e:	93 e2       	ldi	r25, 0x23	; 35
    2030:	80 93 2b 2a 	sts	0x2A2B, r24
    2034:	90 93 2c 2a 	sts	0x2A2C, r25
    2038:	87 e0       	ldi	r24, 0x07	; 7
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	80 93 2d 2a 	sts	0x2A2D, r24
    2040:	90 93 2e 2a 	sts	0x2A2E, r25
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	08 95       	ret
    2048:	80 91 25 2a 	lds	r24, 0x2A25
    204c:	81 70       	andi	r24, 0x01	; 1
    204e:	0e 94 17 21 	call	0x422e	; 0x422e <cdc_set_dtr>
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	08 95       	ret
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	08 95       	ret
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	08 95       	ret
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	08 95       	ret
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	08 95       	ret
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	08 95       	ret
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	08 95       	ret

0000206e <udi_cdc_multi_is_rx_ready>:
    206e:	20 91 b0 23 	lds	r18, 0x23B0
    2072:	30 91 b1 23 	lds	r19, 0x23B1
    2076:	e0 91 b2 23 	lds	r30, 0x23B2
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	ee 0f       	add	r30, r30
    207e:	ff 1f       	adc	r31, r31
    2080:	e1 53       	subi	r30, 0x31	; 49
    2082:	fc 4d       	sbci	r31, 0xDC	; 220
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	40 81       	ld	r20, Z
    2088:	51 81       	ldd	r21, Z+1	; 0x01
    208a:	24 17       	cp	r18, r20
    208c:	35 07       	cpc	r19, r21
    208e:	08 f0       	brcs	.+2      	; 0x2092 <udi_cdc_multi_is_rx_ready+0x24>
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	08 95       	ret

00002094 <udi_cdc_rx_start>:
    2094:	0f 93       	push	r16
    2096:	1f 93       	push	r17
    2098:	cf 93       	push	r28
    209a:	df 93       	push	r29
    209c:	4f b7       	in	r20, 0x3f	; 63
    209e:	f8 94       	cli
    20a0:	50 91 b2 23 	lds	r21, 0x23B2
    20a4:	80 91 af 23 	lds	r24, 0x23AF
    20a8:	81 11       	cpse	r24, r1
    20aa:	10 c0       	rjmp	.+32     	; 0x20cc <udi_cdc_rx_start+0x38>
    20ac:	20 91 b0 23 	lds	r18, 0x23B0
    20b0:	30 91 b1 23 	lds	r19, 0x23B1
    20b4:	c5 2f       	mov	r28, r21
    20b6:	d0 e0       	ldi	r29, 0x00	; 0
    20b8:	fe 01       	movw	r30, r28
    20ba:	ee 0f       	add	r30, r30
    20bc:	ff 1f       	adc	r31, r31
    20be:	e1 53       	subi	r30, 0x31	; 49
    20c0:	fc 4d       	sbci	r31, 0xDC	; 220
    20c2:	80 81       	ld	r24, Z
    20c4:	91 81       	ldd	r25, Z+1	; 0x01
    20c6:	28 17       	cp	r18, r24
    20c8:	39 07       	cpc	r19, r25
    20ca:	18 f4       	brcc	.+6      	; 0x20d2 <udi_cdc_rx_start+0x3e>
    20cc:	4f bf       	out	0x3f, r20	; 63
    20ce:	80 e0       	ldi	r24, 0x00	; 0
    20d0:	22 c0       	rjmp	.+68     	; 0x2116 <udi_cdc_rx_start+0x82>
    20d2:	10 92 b0 23 	sts	0x23B0, r1
    20d6:	10 92 b1 23 	sts	0x23B1, r1
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	51 11       	cpse	r21, r1
    20de:	80 e0       	ldi	r24, 0x00	; 0
    20e0:	80 93 b2 23 	sts	0x23B2, r24
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	80 93 af 23 	sts	0x23AF, r24
    20ea:	4f bf       	out	0x3f, r20	; 63
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	bf df       	rcall	.-130    	; 0x206e <udi_cdc_multi_is_rx_ready>
    20f0:	80 e4       	ldi	r24, 0x40	; 64
    20f2:	91 e0       	ldi	r25, 0x01	; 1
    20f4:	c8 9f       	mul	r28, r24
    20f6:	a0 01       	movw	r20, r0
    20f8:	c9 9f       	mul	r28, r25
    20fa:	50 0d       	add	r21, r0
    20fc:	d8 9f       	mul	r29, r24
    20fe:	50 0d       	add	r21, r0
    2100:	11 24       	eor	r1, r1
    2102:	4c 5a       	subi	r20, 0xAC	; 172
    2104:	59 4d       	sbci	r21, 0xD9	; 217
    2106:	00 e9       	ldi	r16, 0x90	; 144
    2108:	10 e1       	ldi	r17, 0x10	; 16
    210a:	20 e4       	ldi	r18, 0x40	; 64
    210c:	31 e0       	ldi	r19, 0x01	; 1
    210e:	61 e0       	ldi	r22, 0x01	; 1
    2110:	82 e0       	ldi	r24, 0x02	; 2
    2112:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <udd_ep_run>
    2116:	df 91       	pop	r29
    2118:	cf 91       	pop	r28
    211a:	1f 91       	pop	r17
    211c:	0f 91       	pop	r16
    211e:	08 95       	ret

00002120 <udi_cdc_data_received>:
    2120:	0f 93       	push	r16
    2122:	1f 93       	push	r17
    2124:	94 2f       	mov	r25, r20
    2126:	81 11       	cpse	r24, r1
    2128:	27 c0       	rjmp	.+78     	; 0x2178 <udi_cdc_data_received+0x58>
    212a:	80 91 b2 23 	lds	r24, 0x23B2
    212e:	e1 e0       	ldi	r30, 0x01	; 1
    2130:	81 11       	cpse	r24, r1
    2132:	e0 e0       	ldi	r30, 0x00	; 0
    2134:	61 15       	cp	r22, r1
    2136:	71 05       	cpc	r23, r1
    2138:	a1 f4       	brne	.+40     	; 0x2162 <udi_cdc_data_received+0x42>
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	20 e4       	ldi	r18, 0x40	; 64
    213e:	31 e0       	ldi	r19, 0x01	; 1
    2140:	e2 9f       	mul	r30, r18
    2142:	b0 01       	movw	r22, r0
    2144:	e3 9f       	mul	r30, r19
    2146:	70 0d       	add	r23, r0
    2148:	f2 9f       	mul	r31, r18
    214a:	70 0d       	add	r23, r0
    214c:	11 24       	eor	r1, r1
    214e:	ab 01       	movw	r20, r22
    2150:	4c 5a       	subi	r20, 0xAC	; 172
    2152:	59 4d       	sbci	r21, 0xD9	; 217
    2154:	00 e9       	ldi	r16, 0x90	; 144
    2156:	10 e1       	ldi	r17, 0x10	; 16
    2158:	61 e0       	ldi	r22, 0x01	; 1
    215a:	89 2f       	mov	r24, r25
    215c:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <udd_ep_run>
    2160:	0b c0       	rjmp	.+22     	; 0x2178 <udi_cdc_data_received+0x58>
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	ee 0f       	add	r30, r30
    2166:	ff 1f       	adc	r31, r31
    2168:	e1 53       	subi	r30, 0x31	; 49
    216a:	fc 4d       	sbci	r31, 0xDC	; 220
    216c:	60 83       	st	Z, r22
    216e:	71 83       	std	Z+1, r23	; 0x01
    2170:	10 92 af 23 	sts	0x23AF, r1
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	8e df       	rcall	.-228    	; 0x2094 <udi_cdc_rx_start>
    2178:	1f 91       	pop	r17
    217a:	0f 91       	pop	r16
    217c:	08 95       	ret

0000217e <udi_cdc_data_enable>:
    217e:	10 92 b4 23 	sts	0x23B4, r1
    2182:	10 92 ad 23 	sts	0x23AD, r1
    2186:	10 92 ac 23 	sts	0x23AC, r1
    218a:	10 92 ae 23 	sts	0x23AE, r1
    218e:	10 92 c9 23 	sts	0x23C9, r1
    2192:	10 92 ca 23 	sts	0x23CA, r1
    2196:	10 92 cb 23 	sts	0x23CB, r1
    219a:	10 92 cc 23 	sts	0x23CC, r1
    219e:	10 92 cd 23 	sts	0x23CD, r1
    21a2:	10 92 ce 23 	sts	0x23CE, r1
    21a6:	80 e0       	ldi	r24, 0x00	; 0
    21a8:	75 de       	rcall	.-790    	; 0x1e94 <udi_cdc_tx_send>
    21aa:	10 92 af 23 	sts	0x23AF, r1
    21ae:	10 92 b2 23 	sts	0x23B2, r1
    21b2:	10 92 cf 23 	sts	0x23CF, r1
    21b6:	10 92 d0 23 	sts	0x23D0, r1
    21ba:	10 92 b0 23 	sts	0x23B0, r1
    21be:	10 92 b1 23 	sts	0x23B1, r1
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	67 df       	rcall	.-306    	; 0x2094 <udi_cdc_rx_start>
    21c6:	88 23       	and	r24, r24
    21c8:	61 f0       	breq	.+24     	; 0x21e2 <udi_cdc_data_enable+0x64>
    21ca:	80 91 b4 23 	lds	r24, 0x23B4
    21ce:	8f 5f       	subi	r24, 0xFF	; 255
    21d0:	80 93 b4 23 	sts	0x23B4, r24
    21d4:	80 91 b4 23 	lds	r24, 0x23B4
    21d8:	81 30       	cpi	r24, 0x01	; 1
    21da:	29 f4       	brne	.+10     	; 0x21e6 <udi_cdc_data_enable+0x68>
    21dc:	80 93 b3 23 	sts	0x23B3, r24
    21e0:	08 95       	ret
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	08 95       	ret
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	08 95       	ret

000021ea <udi_cdc_is_rx_ready>:
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	40 cf       	rjmp	.-384    	; 0x206e <udi_cdc_multi_is_rx_ready>

000021ee <udi_cdc_multi_getc>:
    21ee:	ff 92       	push	r15
    21f0:	0f 93       	push	r16
    21f2:	1f 93       	push	r17
    21f4:	cf 93       	push	r28
    21f6:	df 93       	push	r29
    21f8:	ff 24       	eor	r15, r15
    21fa:	f3 94       	inc	r15
    21fc:	80 91 c8 23 	lds	r24, 0x23C8
    2200:	89 30       	cpi	r24, 0x09	; 9
    2202:	09 f0       	breq	.+2      	; 0x2206 <udi_cdc_multi_getc+0x18>
    2204:	f1 2c       	mov	r15, r1
    2206:	00 e0       	ldi	r16, 0x00	; 0
    2208:	10 e0       	ldi	r17, 0x00	; 0
    220a:	c0 e4       	ldi	r28, 0x40	; 64
    220c:	d1 e0       	ldi	r29, 0x01	; 1
    220e:	20 91 b0 23 	lds	r18, 0x23B0
    2212:	30 91 b1 23 	lds	r19, 0x23B1
    2216:	40 91 b2 23 	lds	r20, 0x23B2
    221a:	50 e0       	ldi	r21, 0x00	; 0
    221c:	fa 01       	movw	r30, r20
    221e:	ee 0f       	add	r30, r30
    2220:	ff 1f       	adc	r31, r31
    2222:	e1 53       	subi	r30, 0x31	; 49
    2224:	fc 4d       	sbci	r31, 0xDC	; 220
    2226:	60 81       	ld	r22, Z
    2228:	71 81       	ldd	r23, Z+1	; 0x01
    222a:	26 17       	cp	r18, r22
    222c:	37 07       	cpc	r19, r23
    222e:	38 f0       	brcs	.+14     	; 0x223e <udi_cdc_multi_getc+0x50>
    2230:	80 91 b3 23 	lds	r24, 0x23B3
    2234:	81 11       	cpse	r24, r1
    2236:	eb cf       	rjmp	.-42     	; 0x220e <udi_cdc_multi_getc+0x20>
    2238:	00 e0       	ldi	r16, 0x00	; 0
    223a:	10 e0       	ldi	r17, 0x00	; 0
    223c:	1b c0       	rjmp	.+54     	; 0x2274 <udi_cdc_multi_getc+0x86>
    223e:	4c 9f       	mul	r20, r28
    2240:	f0 01       	movw	r30, r0
    2242:	4d 9f       	mul	r20, r29
    2244:	f0 0d       	add	r31, r0
    2246:	5c 9f       	mul	r21, r28
    2248:	f0 0d       	add	r31, r0
    224a:	11 24       	eor	r1, r1
    224c:	e2 0f       	add	r30, r18
    224e:	f3 1f       	adc	r31, r19
    2250:	ec 5a       	subi	r30, 0xAC	; 172
    2252:	f9 4d       	sbci	r31, 0xD9	; 217
    2254:	80 81       	ld	r24, Z
    2256:	08 2b       	or	r16, r24
    2258:	2f 5f       	subi	r18, 0xFF	; 255
    225a:	3f 4f       	sbci	r19, 0xFF	; 255
    225c:	20 93 b0 23 	sts	0x23B0, r18
    2260:	30 93 b1 23 	sts	0x23B1, r19
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	16 df       	rcall	.-468    	; 0x2094 <udi_cdc_rx_start>
    2268:	ff 20       	and	r15, r15
    226a:	21 f0       	breq	.+8      	; 0x2274 <udi_cdc_multi_getc+0x86>
    226c:	10 2f       	mov	r17, r16
    226e:	00 27       	eor	r16, r16
    2270:	f1 2c       	mov	r15, r1
    2272:	cd cf       	rjmp	.-102    	; 0x220e <udi_cdc_multi_getc+0x20>
    2274:	80 2f       	mov	r24, r16
    2276:	91 2f       	mov	r25, r17
    2278:	df 91       	pop	r29
    227a:	cf 91       	pop	r28
    227c:	1f 91       	pop	r17
    227e:	0f 91       	pop	r16
    2280:	ff 90       	pop	r15
    2282:	08 95       	ret

00002284 <udi_cdc_getc>:
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	b3 cf       	rjmp	.-154    	; 0x21ee <udi_cdc_multi_getc>

00002288 <udi_cdc_multi_is_tx_ready>:
    2288:	e0 91 ae 23 	lds	r30, 0x23AE
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	ee 0f       	add	r30, r30
    2290:	ff 1f       	adc	r31, r31
    2292:	e7 53       	subi	r30, 0x37	; 55
    2294:	fc 4d       	sbci	r31, 0xDC	; 220
    2296:	80 81       	ld	r24, Z
    2298:	91 81       	ldd	r25, Z+1	; 0x01
    229a:	80 34       	cpi	r24, 0x40	; 64
    229c:	91 40       	sbci	r25, 0x01	; 1
    229e:	19 f5       	brne	.+70     	; 0x22e6 <udi_cdc_multi_is_tx_ready+0x5e>
    22a0:	80 91 ac 23 	lds	r24, 0x23AC
    22a4:	81 11       	cpse	r24, r1
    22a6:	10 c0       	rjmp	.+32     	; 0x22c8 <udi_cdc_multi_is_tx_ready+0x40>
    22a8:	8f b7       	in	r24, 0x3f	; 63
    22aa:	f8 94       	cli
    22ac:	90 91 ad 23 	lds	r25, 0x23AD
    22b0:	91 11       	cpse	r25, r1
    22b2:	09 c0       	rjmp	.+18     	; 0x22c6 <udi_cdc_multi_is_tx_ready+0x3e>
    22b4:	91 e0       	ldi	r25, 0x01	; 1
    22b6:	90 93 ac 23 	sts	0x23AC, r25
    22ba:	20 91 ae 23 	lds	r18, 0x23AE
    22be:	21 11       	cpse	r18, r1
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	90 93 ae 23 	sts	0x23AE, r25
    22c6:	8f bf       	out	0x3f, r24	; 63
    22c8:	e0 91 ae 23 	lds	r30, 0x23AE
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	ee 0f       	add	r30, r30
    22d0:	ff 1f       	adc	r31, r31
    22d2:	e7 53       	subi	r30, 0x37	; 55
    22d4:	fc 4d       	sbci	r31, 0xDC	; 220
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	20 81       	ld	r18, Z
    22da:	31 81       	ldd	r19, Z+1	; 0x01
    22dc:	20 34       	cpi	r18, 0x40	; 64
    22de:	31 40       	sbci	r19, 0x01	; 1
    22e0:	19 f4       	brne	.+6      	; 0x22e8 <udi_cdc_multi_is_tx_ready+0x60>
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	08 95       	ret
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	08 95       	ret

000022ea <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
    22ea:	ff 92       	push	r15
    22ec:	0f 93       	push	r16
    22ee:	1f 93       	push	r17
    22f0:	cf 93       	push	r28
    22f2:	df 93       	push	r29
    22f4:	eb 01       	movw	r28, r22

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    22f6:	ff 24       	eor	r15, r15
    22f8:	f3 94       	inc	r15
    22fa:	80 91 c8 23 	lds	r24, 0x23C8
    22fe:	89 30       	cpi	r24, 0x09	; 9
    2300:	09 f0       	breq	.+2      	; 0x2304 <udi_cdc_multi_putc+0x1a>
    2302:	f1 2c       	mov	r15, r1
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
    2304:	00 e4       	ldi	r16, 0x40	; 64
    2306:	11 e0       	ldi	r17, 0x01	; 1

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	be df       	rcall	.-132    	; 0x2288 <udi_cdc_multi_is_tx_ready>
    230c:	81 11       	cpse	r24, r1
    230e:	07 c0       	rjmp	.+14     	; 0x231e <udi_cdc_multi_putc+0x34>
		if (!udi_cdc_data_running) {
    2310:	80 91 b3 23 	lds	r24, 0x23B3
    2314:	81 11       	cpse	r24, r1
    2316:	f8 cf       	rjmp	.-16     	; 0x2308 <udi_cdc_multi_putc+0x1e>
			return false;
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	25 c0       	rjmp	.+74     	; 0x2368 <udi_cdc_multi_putc+0x7e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    231e:	4f b7       	in	r20, 0x3f	; 63
	cpu_irq_disable();
    2320:	f8 94       	cli
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
    2322:	20 91 ae 23 	lds	r18, 0x23AE
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	f9 01       	movw	r30, r18
    232a:	ee 0f       	add	r30, r30
    232c:	ff 1f       	adc	r31, r31
    232e:	e7 53       	subi	r30, 0x37	; 55
    2330:	fc 4d       	sbci	r31, 0xDC	; 220
    2332:	80 81       	ld	r24, Z
    2334:	91 81       	ldd	r25, Z+1	; 0x01
    2336:	20 9f       	mul	r18, r16
    2338:	d0 01       	movw	r26, r0
    233a:	21 9f       	mul	r18, r17
    233c:	b0 0d       	add	r27, r0
    233e:	30 9f       	mul	r19, r16
    2340:	b0 0d       	add	r27, r0
    2342:	11 24       	eor	r1, r1
    2344:	a8 0f       	add	r26, r24
    2346:	b9 1f       	adc	r27, r25
    2348:	ac 52       	subi	r26, 0x2C	; 44
    234a:	bc 4d       	sbci	r27, 0xDC	; 220
    234c:	cc 93       	st	X, r28
    234e:	01 96       	adiw	r24, 0x01	; 1
    2350:	80 83       	st	Z, r24
    2352:	91 83       	std	Z+1, r25	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2354:	4f bf       	out	0x3f, r20	; 63
	cpu_irq_restore(flags);

	if (b_databit_9) {
    2356:	ff 20       	and	r15, r15
    2358:	29 f0       	breq	.+10     	; 0x2364 <udi_cdc_multi_putc+0x7a>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
    235a:	cd 2f       	mov	r28, r29
    235c:	dd 0f       	add	r29, r29
    235e:	dd 0b       	sbc	r29, r29
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
    2360:	f1 2c       	mov	r15, r1
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
    2362:	d2 cf       	rjmp	.-92     	; 0x2308 <udi_cdc_multi_putc+0x1e>
	}
	return true;
    2364:	21 e0       	ldi	r18, 0x01	; 1
    2366:	30 e0       	ldi	r19, 0x00	; 0
}
    2368:	82 2f       	mov	r24, r18
    236a:	93 2f       	mov	r25, r19
    236c:	df 91       	pop	r29
    236e:	cf 91       	pop	r28
    2370:	1f 91       	pop	r17
    2372:	0f 91       	pop	r16
    2374:	ff 90       	pop	r15
    2376:	08 95       	ret

00002378 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
    2378:	bc 01       	movw	r22, r24
    237a:	80 e0       	ldi	r24, 0x00	; 0
}
    237c:	b6 cf       	rjmp	.-148    	; 0x22ea <udi_cdc_multi_putc>

0000237e <udc_get_eof_conf>:

/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
    237e:	e0 91 d7 28 	lds	r30, 0x28D7
    2382:	f0 91 d8 28 	lds	r31, 0x28D8
    2386:	01 90       	ld	r0, Z+
    2388:	f0 81       	ld	r31, Z
    238a:	e0 2d       	mov	r30, r0
    238c:	22 81       	ldd	r18, Z+2	; 0x02
    238e:	33 81       	ldd	r19, Z+3	; 0x03
    2390:	2e 0f       	add	r18, r30
    2392:	3f 1f       	adc	r19, r31
    2394:	82 2f       	mov	r24, r18
    2396:	93 2f       	mov	r25, r19
    2398:	08 95       	ret

0000239a <udc_next_desc_in_iface>:
    239a:	1f 93       	push	r17
    239c:	cf 93       	push	r28
    239e:	df 93       	push	r29
    23a0:	ec 01       	movw	r28, r24
    23a2:	16 2f       	mov	r17, r22
    23a4:	ec df       	rcall	.-40     	; 0x237e <udc_get_eof_conf>
    23a6:	28 81       	ld	r18, Y
    23a8:	fe 01       	movw	r30, r28
    23aa:	e2 0f       	add	r30, r18
    23ac:	f1 1d       	adc	r31, r1
    23ae:	e8 17       	cp	r30, r24
    23b0:	f9 07       	cpc	r31, r25
    23b2:	a0 f4       	brcc	.+40     	; 0x23dc <udc_next_desc_in_iface+0x42>
    23b4:	21 81       	ldd	r18, Z+1	; 0x01
    23b6:	24 30       	cpi	r18, 0x04	; 4
    23b8:	a1 f0       	breq	.+40     	; 0x23e2 <udc_next_desc_in_iface+0x48>
    23ba:	21 13       	cpse	r18, r17
    23bc:	06 c0       	rjmp	.+12     	; 0x23ca <udc_next_desc_in_iface+0x30>
    23be:	16 c0       	rjmp	.+44     	; 0x23ec <udc_next_desc_in_iface+0x52>
    23c0:	21 81       	ldd	r18, Z+1	; 0x01
    23c2:	24 30       	cpi	r18, 0x04	; 4
    23c4:	89 f0       	breq	.+34     	; 0x23e8 <udc_next_desc_in_iface+0x4e>
    23c6:	21 17       	cp	r18, r17
    23c8:	89 f0       	breq	.+34     	; 0x23ec <udc_next_desc_in_iface+0x52>
    23ca:	20 81       	ld	r18, Z
    23cc:	e2 0f       	add	r30, r18
    23ce:	f1 1d       	adc	r31, r1
    23d0:	e8 17       	cp	r30, r24
    23d2:	f9 07       	cpc	r31, r25
    23d4:	a8 f3       	brcs	.-22     	; 0x23c0 <udc_next_desc_in_iface+0x26>
    23d6:	e0 e0       	ldi	r30, 0x00	; 0
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	08 c0       	rjmp	.+16     	; 0x23ec <udc_next_desc_in_iface+0x52>
    23dc:	e0 e0       	ldi	r30, 0x00	; 0
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	05 c0       	rjmp	.+10     	; 0x23ec <udc_next_desc_in_iface+0x52>
    23e2:	e0 e0       	ldi	r30, 0x00	; 0
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	02 c0       	rjmp	.+4      	; 0x23ec <udc_next_desc_in_iface+0x52>
    23e8:	e0 e0       	ldi	r30, 0x00	; 0
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	8e 2f       	mov	r24, r30
    23ee:	9f 2f       	mov	r25, r31
    23f0:	df 91       	pop	r29
    23f2:	cf 91       	pop	r28
    23f4:	1f 91       	pop	r17
    23f6:	08 95       	ret

000023f8 <udc_update_iface_desc>:
    23f8:	0f 93       	push	r16
    23fa:	1f 93       	push	r17
    23fc:	cf 93       	push	r28
    23fe:	df 93       	push	r29
    2400:	18 2f       	mov	r17, r24
    2402:	06 2f       	mov	r16, r22
    2404:	80 91 d6 28 	lds	r24, 0x28D6
    2408:	88 23       	and	r24, r24
    240a:	69 f1       	breq	.+90     	; 0x2466 <udc_update_iface_desc+0x6e>
    240c:	e0 91 d7 28 	lds	r30, 0x28D7
    2410:	f0 91 d8 28 	lds	r31, 0x28D8
    2414:	c0 81       	ld	r28, Z
    2416:	d1 81       	ldd	r29, Z+1	; 0x01
    2418:	8c 81       	ldd	r24, Y+4	; 0x04
    241a:	18 17       	cp	r17, r24
    241c:	30 f5       	brcc	.+76     	; 0x246a <udc_update_iface_desc+0x72>
    241e:	c0 93 d4 28 	sts	0x28D4, r28
    2422:	d0 93 d5 28 	sts	0x28D5, r29
    2426:	ab df       	rcall	.-170    	; 0x237e <udc_get_eof_conf>
    2428:	9c 01       	movw	r18, r24
    242a:	c8 17       	cp	r28, r24
    242c:	d9 07       	cpc	r29, r25
    242e:	f8 f4       	brcc	.+62     	; 0x246e <udc_update_iface_desc+0x76>
    2430:	99 81       	ldd	r25, Y+1	; 0x01
    2432:	94 30       	cpi	r25, 0x04	; 4
    2434:	61 f4       	brne	.+24     	; 0x244e <udc_update_iface_desc+0x56>
    2436:	9a 81       	ldd	r25, Y+2	; 0x02
    2438:	91 13       	cpse	r25, r17
    243a:	09 c0       	rjmp	.+18     	; 0x244e <udc_update_iface_desc+0x56>
    243c:	8b 81       	ldd	r24, Y+3	; 0x03
    243e:	80 13       	cpse	r24, r16
    2440:	06 c0       	rjmp	.+12     	; 0x244e <udc_update_iface_desc+0x56>
    2442:	c0 93 d4 28 	sts	0x28D4, r28
    2446:	d0 93 d5 28 	sts	0x28D5, r29
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	11 c0       	rjmp	.+34     	; 0x2470 <udc_update_iface_desc+0x78>
    244e:	98 81       	ld	r25, Y
    2450:	c9 0f       	add	r28, r25
    2452:	d1 1d       	adc	r29, r1
    2454:	c2 17       	cp	r28, r18
    2456:	d3 07       	cpc	r29, r19
    2458:	58 f3       	brcs	.-42     	; 0x2430 <udc_update_iface_desc+0x38>
    245a:	c0 93 d4 28 	sts	0x28D4, r28
    245e:	d0 93 d5 28 	sts	0x28D5, r29
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	05 c0       	rjmp	.+10     	; 0x2470 <udc_update_iface_desc+0x78>
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	03 c0       	rjmp	.+6      	; 0x2470 <udc_update_iface_desc+0x78>
    246a:	80 e0       	ldi	r24, 0x00	; 0
    246c:	01 c0       	rjmp	.+2      	; 0x2470 <udc_update_iface_desc+0x78>
    246e:	80 e0       	ldi	r24, 0x00	; 0
    2470:	df 91       	pop	r29
    2472:	cf 91       	pop	r28
    2474:	1f 91       	pop	r17
    2476:	0f 91       	pop	r16
    2478:	08 95       	ret

0000247a <udc_valid_address>:
    247a:	80 91 25 2a 	lds	r24, 0x2A25
    247e:	8f 77       	andi	r24, 0x7F	; 127
    2480:	0c 94 24 1e 	jmp	0x3c48	; 0x3c48 <udd_set_address>

00002484 <udc_iface_enable>:
    2484:	1f 93       	push	r17
    2486:	cf 93       	push	r28
    2488:	df 93       	push	r29
    248a:	18 2f       	mov	r17, r24
    248c:	b5 df       	rcall	.-150    	; 0x23f8 <udc_update_iface_desc>
    248e:	88 23       	and	r24, r24
    2490:	49 f1       	breq	.+82     	; 0x24e4 <udc_iface_enable+0x60>
    2492:	c0 91 d4 28 	lds	r28, 0x28D4
    2496:	d0 91 d5 28 	lds	r29, 0x28D5
    249a:	65 e0       	ldi	r22, 0x05	; 5
    249c:	ce 01       	movw	r24, r28
    249e:	7d df       	rcall	.-262    	; 0x239a <udc_next_desc_in_iface>
    24a0:	ec 01       	movw	r28, r24
    24a2:	00 97       	sbiw	r24, 0x00	; 0
    24a4:	49 f0       	breq	.+18     	; 0x24b8 <udc_iface_enable+0x34>
    24a6:	4c 81       	ldd	r20, Y+4	; 0x04
    24a8:	5d 81       	ldd	r21, Y+5	; 0x05
    24aa:	6b 81       	ldd	r22, Y+3	; 0x03
    24ac:	8a 81       	ldd	r24, Y+2	; 0x02
    24ae:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <udd_ep_alloc>
    24b2:	81 11       	cpse	r24, r1
    24b4:	f2 cf       	rjmp	.-28     	; 0x249a <udc_iface_enable+0x16>
    24b6:	17 c0       	rjmp	.+46     	; 0x24e6 <udc_iface_enable+0x62>
    24b8:	a0 91 d7 28 	lds	r26, 0x28D7
    24bc:	b0 91 d8 28 	lds	r27, 0x28D8
    24c0:	81 2f       	mov	r24, r17
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	88 0f       	add	r24, r24
    24c6:	99 1f       	adc	r25, r25
    24c8:	12 96       	adiw	r26, 0x02	; 2
    24ca:	ed 91       	ld	r30, X+
    24cc:	fc 91       	ld	r31, X
    24ce:	13 97       	sbiw	r26, 0x03	; 3
    24d0:	e8 0f       	add	r30, r24
    24d2:	f9 1f       	adc	r31, r25
    24d4:	01 90       	ld	r0, Z+
    24d6:	f0 81       	ld	r31, Z
    24d8:	e0 2d       	mov	r30, r0
    24da:	01 90       	ld	r0, Z+
    24dc:	f0 81       	ld	r31, Z
    24de:	e0 2d       	mov	r30, r0
    24e0:	19 95       	eicall
    24e2:	01 c0       	rjmp	.+2      	; 0x24e6 <udc_iface_enable+0x62>
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	df 91       	pop	r29
    24e8:	cf 91       	pop	r28
    24ea:	1f 91       	pop	r17
    24ec:	08 95       	ret

000024ee <udc_iface_disable>:
    24ee:	0f 93       	push	r16
    24f0:	1f 93       	push	r17
    24f2:	cf 93       	push	r28
    24f4:	df 93       	push	r29
    24f6:	c8 2f       	mov	r28, r24
    24f8:	60 e0       	ldi	r22, 0x00	; 0
    24fa:	7e df       	rcall	.-260    	; 0x23f8 <udc_update_iface_desc>
    24fc:	88 23       	and	r24, r24
    24fe:	89 f1       	breq	.+98     	; 0x2562 <udc_iface_disable+0x74>
    2500:	a0 91 d7 28 	lds	r26, 0x28D7
    2504:	b0 91 d8 28 	lds	r27, 0x28D8
    2508:	ec 2f       	mov	r30, r28
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	ee 0f       	add	r30, r30
    250e:	ff 1f       	adc	r31, r31
    2510:	12 96       	adiw	r26, 0x02	; 2
    2512:	2d 91       	ld	r18, X+
    2514:	3c 91       	ld	r19, X
    2516:	13 97       	sbiw	r26, 0x03	; 3
    2518:	e2 0f       	add	r30, r18
    251a:	f3 1f       	adc	r31, r19
    251c:	00 81       	ld	r16, Z
    251e:	11 81       	ldd	r17, Z+1	; 0x01
    2520:	d8 01       	movw	r26, r16
    2522:	16 96       	adiw	r26, 0x06	; 6
    2524:	ed 91       	ld	r30, X+
    2526:	fc 91       	ld	r31, X
    2528:	17 97       	sbiw	r26, 0x07	; 7
    252a:	19 95       	eicall
    252c:	68 2f       	mov	r22, r24
    252e:	8c 2f       	mov	r24, r28
    2530:	63 df       	rcall	.-314    	; 0x23f8 <udc_update_iface_desc>
    2532:	88 23       	and	r24, r24
    2534:	c1 f0       	breq	.+48     	; 0x2566 <udc_iface_disable+0x78>
    2536:	c0 91 d4 28 	lds	r28, 0x28D4
    253a:	d0 91 d5 28 	lds	r29, 0x28D5
    253e:	65 e0       	ldi	r22, 0x05	; 5
    2540:	ce 01       	movw	r24, r28
    2542:	2b df       	rcall	.-426    	; 0x239a <udc_next_desc_in_iface>
    2544:	ec 01       	movw	r28, r24
    2546:	00 97       	sbiw	r24, 0x00	; 0
    2548:	21 f0       	breq	.+8      	; 0x2552 <udc_iface_disable+0x64>
    254a:	8a 81       	ldd	r24, Y+2	; 0x02
    254c:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <udd_ep_free>
    2550:	f6 cf       	rjmp	.-20     	; 0x253e <udc_iface_disable+0x50>
    2552:	d8 01       	movw	r26, r16
    2554:	12 96       	adiw	r26, 0x02	; 2
    2556:	ed 91       	ld	r30, X+
    2558:	fc 91       	ld	r31, X
    255a:	13 97       	sbiw	r26, 0x03	; 3
    255c:	19 95       	eicall
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	03 c0       	rjmp	.+6      	; 0x2568 <udc_iface_disable+0x7a>
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	01 c0       	rjmp	.+2      	; 0x2568 <udc_iface_disable+0x7a>
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	df 91       	pop	r29
    256a:	cf 91       	pop	r28
    256c:	1f 91       	pop	r17
    256e:	0f 91       	pop	r16
    2570:	08 95       	ret

00002572 <udc_start>:
    2572:	0c 94 8e 1d 	jmp	0x3b1c	; 0x3b1c <udd_enable>
    2576:	08 95       	ret

00002578 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
    2578:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    257a:	80 91 d6 28 	lds	r24, 0x28D6
    257e:	88 23       	and	r24, r24
    2580:	c1 f0       	breq	.+48     	; 0x25b2 <udc_reset+0x3a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2582:	e0 91 d7 28 	lds	r30, 0x28D7
    2586:	f0 91 d8 28 	lds	r31, 0x28D8
    258a:	01 90       	ld	r0, Z+
    258c:	f0 81       	ld	r31, Z
    258e:	e0 2d       	mov	r30, r0
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    2590:	84 81       	ldd	r24, Z+4	; 0x04
    2592:	88 23       	and	r24, r24
    2594:	71 f0       	breq	.+28     	; 0x25b2 <udc_reset+0x3a>
    2596:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
    2598:	8c 2f       	mov	r24, r28
    259a:	a9 df       	rcall	.-174    	; 0x24ee <udc_iface_disable>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    259c:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    259e:	e0 91 d7 28 	lds	r30, 0x28D7
    25a2:	f0 91 d8 28 	lds	r31, 0x28D8
    25a6:	01 90       	ld	r0, Z+
    25a8:	f0 81       	ld	r31, Z
    25aa:	e0 2d       	mov	r30, r0
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    25ac:	84 81       	ldd	r24, Z+4	; 0x04
    25ae:	c8 17       	cp	r28, r24
    25b0:	98 f3       	brcs	.-26     	; 0x2598 <udc_reset+0x20>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
    25b2:	10 92 d6 28 	sts	0x28D6, r1
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	80 93 d9 28 	sts	0x28D9, r24
    25be:	90 93 da 28 	sts	0x28DA, r25
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
    25c2:	cf 91       	pop	r28
    25c4:	08 95       	ret

000025c6 <udc_sof_notify>:

void udc_sof_notify(void)
{
    25c6:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    25c8:	80 91 d6 28 	lds	r24, 0x28D6
    25cc:	88 23       	and	r24, r24
    25ce:	41 f1       	breq	.+80     	; 0x2620 <udc_sof_notify+0x5a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    25d0:	e0 91 d7 28 	lds	r30, 0x28D7
    25d4:	f0 91 d8 28 	lds	r31, 0x28D8
    25d8:	a0 81       	ld	r26, Z
    25da:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    25dc:	14 96       	adiw	r26, 0x04	; 4
    25de:	8c 91       	ld	r24, X
    25e0:	88 23       	and	r24, r24
    25e2:	f1 f0       	breq	.+60     	; 0x2620 <udc_sof_notify+0x5a>
    25e4:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    25e6:	8c 2f       	mov	r24, r28
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	88 0f       	add	r24, r24
    25ec:	99 1f       	adc	r25, r25
    25ee:	02 80       	ldd	r0, Z+2	; 0x02
    25f0:	f3 81       	ldd	r31, Z+3	; 0x03
    25f2:	e0 2d       	mov	r30, r0
    25f4:	e8 0f       	add	r30, r24
    25f6:	f9 1f       	adc	r31, r25
    25f8:	01 90       	ld	r0, Z+
    25fa:	f0 81       	ld	r31, Z
    25fc:	e0 2d       	mov	r30, r0
    25fe:	00 84       	ldd	r0, Z+8	; 0x08
    2600:	f1 85       	ldd	r31, Z+9	; 0x09
    2602:	e0 2d       	mov	r30, r0
    2604:	30 97       	sbiw	r30, 0x00	; 0
    2606:	09 f0       	breq	.+2      	; 0x260a <udc_sof_notify+0x44>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    2608:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    260a:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    260c:	e0 91 d7 28 	lds	r30, 0x28D7
    2610:	f0 91 d8 28 	lds	r31, 0x28D8
    2614:	a0 81       	ld	r26, Z
    2616:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    2618:	14 96       	adiw	r26, 0x04	; 4
    261a:	8c 91       	ld	r24, X
    261c:	c8 17       	cp	r28, r24
    261e:	18 f3       	brcs	.-58     	; 0x25e6 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    2620:	cf 91       	pop	r28
    2622:	08 95       	ret

00002624 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    2624:	ff 92       	push	r15
    2626:	0f 93       	push	r16
    2628:	1f 93       	push	r17
    262a:	cf 93       	push	r28
    262c:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    262e:	10 92 2d 2a 	sts	0x2A2D, r1
    2632:	10 92 2e 2a 	sts	0x2A2E, r1
	udd_g_ctrlreq.callback = NULL;
    2636:	10 92 2f 2a 	sts	0x2A2F, r1
    263a:	10 92 30 2a 	sts	0x2A30, r1
	udd_g_ctrlreq.over_under_run = NULL;
    263e:	10 92 31 2a 	sts	0x2A31, r1
    2642:	10 92 32 2a 	sts	0x2A32, r1

	if (Udd_setup_is_in()) {
    2646:	20 91 23 2a 	lds	r18, 0x2A23
    264a:	22 23       	and	r18, r18
    264c:	0c f0       	brlt	.+2      	; 0x2650 <udc_process_setup+0x2c>
    264e:	43 c2       	rjmp	.+1158   	; 0x2ad6 <udc_process_setup+0x4b2>
		if (udd_g_ctrlreq.req.wLength == 0) {
    2650:	80 91 29 2a 	lds	r24, 0x2A29
    2654:	90 91 2a 2a 	lds	r25, 0x2A2A
    2658:	00 97       	sbiw	r24, 0x00	; 0
    265a:	09 f0       	breq	.+2      	; 0x265e <udc_process_setup+0x3a>
    265c:	41 c2       	rjmp	.+1154   	; 0x2ae0 <udc_process_setup+0x4bc>
    265e:	35 c2       	rjmp	.+1130   	; 0x2aca <udc_process_setup+0x4a6>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    2660:	2f 71       	andi	r18, 0x1F	; 31
    2662:	09 f0       	breq	.+2      	; 0x2666 <udc_process_setup+0x42>
    2664:	a3 c0       	rjmp	.+326    	; 0x27ac <udc_process_setup+0x188>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    2666:	30 91 24 2a 	lds	r19, 0x2A24
    266a:	36 30       	cpi	r19, 0x06	; 6
    266c:	89 f0       	breq	.+34     	; 0x2690 <udc_process_setup+0x6c>
    266e:	38 30       	cpi	r19, 0x08	; 8
    2670:	09 f4       	brne	.+2      	; 0x2674 <udc_process_setup+0x50>
    2672:	90 c0       	rjmp	.+288    	; 0x2794 <udc_process_setup+0x170>
    2674:	31 11       	cpse	r19, r1
    2676:	9a c0       	rjmp	.+308    	; 0x27ac <udc_process_setup+0x188>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    2678:	02 97       	sbiw	r24, 0x02	; 2
    267a:	41 f4       	brne	.+16     	; 0x268c <udc_process_setup+0x68>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    267c:	62 e0       	ldi	r22, 0x02	; 2
    267e:	70 e0       	ldi	r23, 0x00	; 0
    2680:	89 ed       	ldi	r24, 0xD9	; 217
    2682:	98 e2       	ldi	r25, 0x28	; 40
    2684:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <udd_set_setup_payload>
			sizeof(udc_device_status));
	return true;
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	e3 c1       	rjmp	.+966    	; 0x2a52 <udc_process_setup+0x42e>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	e1 c1       	rjmp	.+962    	; 0x2a52 <udc_process_setup+0x42e>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    2690:	20 91 25 2a 	lds	r18, 0x2A25
    2694:	30 91 26 2a 	lds	r19, 0x2A26
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    2698:	83 2f       	mov	r24, r19
    269a:	99 27       	eor	r25, r25
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    269c:	82 30       	cpi	r24, 0x02	; 2
    269e:	91 05       	cpc	r25, r1
    26a0:	81 f0       	breq	.+32     	; 0x26c2 <udc_process_setup+0x9e>
    26a2:	83 30       	cpi	r24, 0x03	; 3
    26a4:	91 05       	cpc	r25, r1
    26a6:	79 f1       	breq	.+94     	; 0x2706 <udc_process_setup+0xe2>
    26a8:	01 97       	sbiw	r24, 0x01	; 1
    26aa:	09 f0       	breq	.+2      	; 0x26ae <udc_process_setup+0x8a>
    26ac:	6b c0       	rjmp	.+214    	; 0x2784 <udc_process_setup+0x160>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    26ae:	80 91 22 20 	lds	r24, 0x2022
    26b2:	90 91 23 20 	lds	r25, 0x2023
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    26b6:	dc 01       	movw	r26, r24
    26b8:	6c 91       	ld	r22, X
    26ba:	70 e0       	ldi	r23, 0x00	; 0
    26bc:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <udd_set_setup_payload>
    26c0:	50 c0       	rjmp	.+160    	; 0x2762 <udc_process_setup+0x13e>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    26c2:	e0 91 22 20 	lds	r30, 0x2022
    26c6:	f0 91 23 20 	lds	r31, 0x2023
    26ca:	81 89       	ldd	r24, Z+17	; 0x11
    26cc:	28 17       	cp	r18, r24
    26ce:	08 f0       	brcs	.+2      	; 0x26d2 <udc_process_setup+0xae>
    26d0:	5b c0       	rjmp	.+182    	; 0x2788 <udc_process_setup+0x164>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    26d2:	c9 01       	movw	r24, r18
    26d4:	99 27       	eor	r25, r25
    26d6:	88 0f       	add	r24, r24
    26d8:	99 1f       	adc	r25, r25
    26da:	88 0f       	add	r24, r24
    26dc:	99 1f       	adc	r25, r25
    26de:	e0 91 24 20 	lds	r30, 0x2024
    26e2:	f0 91 25 20 	lds	r31, 0x2025
    26e6:	e8 0f       	add	r30, r24
    26e8:	f9 1f       	adc	r31, r25
    26ea:	80 81       	ld	r24, Z
    26ec:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    26ee:	fc 01       	movw	r30, r24
    26f0:	62 81       	ldd	r22, Z+2	; 0x02
    26f2:	73 81       	ldd	r23, Z+3	; 0x03
    26f4:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    26f8:	e0 91 2b 2a 	lds	r30, 0x2A2B
    26fc:	f0 91 2c 2a 	lds	r31, 0x2A2C
    2700:	82 e0       	ldi	r24, 0x02	; 2
    2702:	81 83       	std	Z+1, r24	; 0x01
    2704:	2e c0       	rjmp	.+92     	; 0x2762 <udc_process_setup+0x13e>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    2706:	33 27       	eor	r19, r19
    2708:	21 30       	cpi	r18, 0x01	; 1
    270a:	31 05       	cpc	r19, r1
    270c:	81 f0       	breq	.+32     	; 0x272e <udc_process_setup+0x10a>
    270e:	40 f0       	brcs	.+16     	; 0x2720 <udc_process_setup+0xfc>
    2710:	22 30       	cpi	r18, 0x02	; 2
    2712:	31 05       	cpc	r19, r1
    2714:	09 f4       	brne	.+2      	; 0x2718 <udc_process_setup+0xf4>
    2716:	e9 c1       	rjmp	.+978    	; 0x2aea <udc_process_setup+0x4c6>
    2718:	23 30       	cpi	r18, 0x03	; 3
    271a:	31 05       	cpc	r19, r1
    271c:	b9 f5       	brne	.+110    	; 0x278c <udc_process_setup+0x168>
    271e:	e9 c1       	rjmp	.+978    	; 0x2af2 <udc_process_setup+0x4ce>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    2720:	64 e0       	ldi	r22, 0x04	; 4
    2722:	70 e0       	ldi	r23, 0x00	; 0
    2724:	84 e8       	ldi	r24, 0x84	; 132
    2726:	90 e2       	ldi	r25, 0x20	; 32
    2728:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <udd_set_setup_payload>
    272c:	1a c0       	rjmp	.+52     	; 0x2762 <udc_process_setup+0x13e>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    272e:	88 e8       	ldi	r24, 0x88	; 136
    2730:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    2732:	29 e0       	ldi	r18, 0x09	; 9
    2734:	38 2f       	mov	r19, r24
    2736:	e4 ea       	ldi	r30, 0xA4	; 164
    2738:	f0 e2       	ldi	r31, 0x20	; 32
    273a:	a8 2f       	mov	r26, r24
    273c:	b9 2f       	mov	r27, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    273e:	8d 91       	ld	r24, X+
    2740:	80 83       	st	Z, r24
    2742:	11 82       	std	Z+1, r1	; 0x01
    2744:	32 96       	adiw	r30, 0x02	; 2
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    2746:	8a 2f       	mov	r24, r26
    2748:	83 1b       	sub	r24, r19
    274a:	82 17       	cp	r24, r18
    274c:	c0 f3       	brcs	.-16     	; 0x273e <udc_process_setup+0x11a>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    274e:	22 0f       	add	r18, r18
    2750:	62 2f       	mov	r22, r18
    2752:	6e 5f       	subi	r22, 0xFE	; 254
    2754:	60 93 a2 20 	sts	0x20A2, r22
		udd_set_setup_payload(
    2758:	70 e0       	ldi	r23, 0x00	; 0
    275a:	82 ea       	ldi	r24, 0xA2	; 162
    275c:	90 e2       	ldi	r25, 0x20	; 32
    275e:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    2762:	80 91 29 2a 	lds	r24, 0x2A29
    2766:	90 91 2a 2a 	lds	r25, 0x2A2A
    276a:	20 91 2d 2a 	lds	r18, 0x2A2D
    276e:	30 91 2e 2a 	lds	r19, 0x2A2E
    2772:	82 17       	cp	r24, r18
    2774:	93 07       	cpc	r25, r19
    2776:	60 f4       	brcc	.+24     	; 0x2790 <udc_process_setup+0x16c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    2778:	80 93 2d 2a 	sts	0x2A2D, r24
    277c:	90 93 2e 2a 	sts	0x2A2E, r25
	}
	return true;
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	67 c1       	rjmp	.+718    	; 0x2a52 <udc_process_setup+0x42e>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    2784:	80 e0       	ldi	r24, 0x00	; 0
    2786:	65 c1       	rjmp	.+714    	; 0x2a52 <udc_process_setup+0x42e>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
    2788:	80 e0       	ldi	r24, 0x00	; 0
    278a:	63 c1       	rjmp	.+710    	; 0x2a52 <udc_process_setup+0x42e>
#endif

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
    278c:	80 e0       	ldi	r24, 0x00	; 0
    278e:	61 c1       	rjmp	.+706    	; 0x2a52 <udc_process_setup+0x42e>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	5f c1       	rjmp	.+702    	; 0x2a52 <udc_process_setup+0x42e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    2794:	01 97       	sbiw	r24, 0x01	; 1
    2796:	41 f4       	brne	.+16     	; 0x27a8 <udc_process_setup+0x184>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    2798:	61 e0       	ldi	r22, 0x01	; 1
    279a:	70 e0       	ldi	r23, 0x00	; 0
    279c:	86 ed       	ldi	r24, 0xD6	; 214
    279e:	98 e2       	ldi	r25, 0x28	; 40
    27a0:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <udd_set_setup_payload>
	return true;
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	55 c1       	rjmp	.+682    	; 0x2a52 <udc_process_setup+0x42e>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
    27a8:	80 e0       	ldi	r24, 0x00	; 0
    27aa:	53 c1       	rjmp	.+678    	; 0x2a52 <udc_process_setup+0x42e>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    27ac:	21 30       	cpi	r18, 0x01	; 1
    27ae:	09 f0       	breq	.+2      	; 0x27b2 <udc_process_setup+0x18e>
    27b0:	41 c0       	rjmp	.+130    	; 0x2834 <udc_process_setup+0x210>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    27b2:	30 91 24 2a 	lds	r19, 0x2A24
    27b6:	3a 30       	cpi	r19, 0x0A	; 10
    27b8:	e9 f5       	brne	.+122    	; 0x2834 <udc_process_setup+0x210>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    27ba:	01 97       	sbiw	r24, 0x01	; 1
    27bc:	99 f5       	brne	.+102    	; 0x2824 <udc_process_setup+0x200>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    27be:	80 91 d6 28 	lds	r24, 0x28D6
    27c2:	88 23       	and	r24, r24
    27c4:	89 f1       	breq	.+98     	; 0x2828 <udc_process_setup+0x204>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    27c6:	c0 91 27 2a 	lds	r28, 0x2A27
    27ca:	d0 91 28 2a 	lds	r29, 0x2A28
    27ce:	8c 2f       	mov	r24, r28
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    27d0:	00 91 d7 28 	lds	r16, 0x28D7
    27d4:	10 91 d8 28 	lds	r17, 0x28D8
    27d8:	d8 01       	movw	r26, r16
    27da:	ed 91       	ld	r30, X+
    27dc:	fc 91       	ld	r31, X
    27de:	94 81       	ldd	r25, Z+4	; 0x04
    27e0:	c9 17       	cp	r28, r25
    27e2:	20 f5       	brcc	.+72     	; 0x282c <udc_process_setup+0x208>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    27e4:	60 e0       	ldi	r22, 0x00	; 0
    27e6:	08 de       	rcall	.-1008   	; 0x23f8 <udc_update_iface_desc>
    27e8:	88 23       	and	r24, r24
    27ea:	11 f1       	breq	.+68     	; 0x2830 <udc_process_setup+0x20c>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    27ec:	ce 01       	movw	r24, r28
    27ee:	99 27       	eor	r25, r25
    27f0:	88 0f       	add	r24, r24
    27f2:	99 1f       	adc	r25, r25
    27f4:	d8 01       	movw	r26, r16
    27f6:	12 96       	adiw	r26, 0x02	; 2
    27f8:	ed 91       	ld	r30, X+
    27fa:	fc 91       	ld	r31, X
    27fc:	13 97       	sbiw	r26, 0x03	; 3
    27fe:	e8 0f       	add	r30, r24
    2800:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    2802:	01 90       	ld	r0, Z+
    2804:	f0 81       	ld	r31, Z
    2806:	e0 2d       	mov	r30, r0
    2808:	86 81       	ldd	r24, Z+6	; 0x06
    280a:	97 81       	ldd	r25, Z+7	; 0x07
    280c:	fc 01       	movw	r30, r24
    280e:	19 95       	eicall
    2810:	80 93 db 28 	sts	0x28DB, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    2814:	61 e0       	ldi	r22, 0x01	; 1
    2816:	70 e0       	ldi	r23, 0x00	; 0
    2818:	8b ed       	ldi	r24, 0xDB	; 219
    281a:	98 e2       	ldi	r25, 0x28	; 40
    281c:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <udd_set_setup_payload>
	return true;
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	17 c1       	rjmp	.+558    	; 0x2a52 <udc_process_setup+0x42e>
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
    2824:	80 e0       	ldi	r24, 0x00	; 0
    2826:	15 c1       	rjmp	.+554    	; 0x2a52 <udc_process_setup+0x42e>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	13 c1       	rjmp	.+550    	; 0x2a52 <udc_process_setup+0x42e>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	11 c1       	rjmp	.+546    	; 0x2a52 <udc_process_setup+0x42e>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
    2830:	80 e0       	ldi	r24, 0x00	; 0
    2832:	0f c1       	rjmp	.+542    	; 0x2a52 <udc_process_setup+0x42e>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    2834:	22 30       	cpi	r18, 0x02	; 2
    2836:	09 f0       	breq	.+2      	; 0x283a <udc_process_setup+0x216>
    2838:	0e c1       	rjmp	.+540    	; 0x2a56 <udc_process_setup+0x432>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    283a:	20 91 24 2a 	lds	r18, 0x2A24
    283e:	21 11       	cpse	r18, r1
    2840:	03 c1       	rjmp	.+518    	; 0x2a48 <udc_process_setup+0x424>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    2842:	02 97       	sbiw	r24, 0x02	; 2
    2844:	81 f4       	brne	.+32     	; 0x2866 <udc_process_setup+0x242>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    2846:	80 91 27 2a 	lds	r24, 0x2A27
    284a:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <udd_ep_is_halted>
    284e:	80 93 dc 28 	sts	0x28DC, r24
    2852:	10 92 dd 28 	sts	0x28DD, r1
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    2856:	62 e0       	ldi	r22, 0x02	; 2
    2858:	70 e0       	ldi	r23, 0x00	; 0
    285a:	8c ed       	ldi	r24, 0xDC	; 220
    285c:	98 e2       	ldi	r25, 0x28	; 40
    285e:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <udd_set_setup_payload>
			sizeof(udc_ep_status));
	return true;
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	f6 c0       	rjmp	.+492    	; 0x2a52 <udc_process_setup+0x42e>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
    2866:	80 e0       	ldi	r24, 0x00	; 0
    2868:	f4 c0       	rjmp	.+488    	; 0x2a52 <udc_process_setup+0x42e>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    286a:	2f 71       	andi	r18, 0x1F	; 31
    286c:	09 f0       	breq	.+2      	; 0x2870 <udc_process_setup+0x24c>
    286e:	93 c0       	rjmp	.+294    	; 0x2996 <udc_process_setup+0x372>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    2870:	80 91 24 2a 	lds	r24, 0x2A24
    2874:	83 30       	cpi	r24, 0x03	; 3
    2876:	09 f4       	brne	.+2      	; 0x287a <udc_process_setup+0x256>
    2878:	e9 c0       	rjmp	.+466    	; 0x2a4c <udc_process_setup+0x428>
    287a:	20 f4       	brcc	.+8      	; 0x2884 <udc_process_setup+0x260>
    287c:	81 30       	cpi	r24, 0x01	; 1
    287e:	09 f0       	breq	.+2      	; 0x2882 <udc_process_setup+0x25e>
    2880:	8a c0       	rjmp	.+276    	; 0x2996 <udc_process_setup+0x372>
    2882:	16 c0       	rjmp	.+44     	; 0x28b0 <udc_process_setup+0x28c>
    2884:	85 30       	cpi	r24, 0x05	; 5
    2886:	21 f0       	breq	.+8      	; 0x2890 <udc_process_setup+0x26c>
    2888:	89 30       	cpi	r24, 0x09	; 9
    288a:	09 f0       	breq	.+2      	; 0x288e <udc_process_setup+0x26a>
    288c:	84 c0       	rjmp	.+264    	; 0x2996 <udc_process_setup+0x372>
    288e:	2b c0       	rjmp	.+86     	; 0x28e6 <udc_process_setup+0x2c2>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    2890:	80 91 29 2a 	lds	r24, 0x2A29
    2894:	90 91 2a 2a 	lds	r25, 0x2A2A
    2898:	89 2b       	or	r24, r25
    289a:	41 f4       	brne	.+16     	; 0x28ac <udc_process_setup+0x288>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    289c:	8d e3       	ldi	r24, 0x3D	; 61
    289e:	92 e1       	ldi	r25, 0x12	; 18
    28a0:	80 93 2f 2a 	sts	0x2A2F, r24
    28a4:	90 93 30 2a 	sts	0x2A30, r25
	return true;
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	d3 c0       	rjmp	.+422    	; 0x2a52 <udc_process_setup+0x42e>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	d1 c0       	rjmp	.+418    	; 0x2a52 <udc_process_setup+0x42e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    28b0:	80 91 29 2a 	lds	r24, 0x2A29
    28b4:	90 91 2a 2a 	lds	r25, 0x2A2A
    28b8:	89 2b       	or	r24, r25
    28ba:	89 f4       	brne	.+34     	; 0x28de <udc_process_setup+0x2ba>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    28bc:	80 91 25 2a 	lds	r24, 0x2A25
    28c0:	90 91 26 2a 	lds	r25, 0x2A26
    28c4:	01 97       	sbiw	r24, 0x01	; 1
    28c6:	69 f4       	brne	.+26     	; 0x28e2 <udc_process_setup+0x2be>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    28c8:	80 91 d9 28 	lds	r24, 0x28D9
    28cc:	90 91 da 28 	lds	r25, 0x28DA
    28d0:	8d 7f       	andi	r24, 0xFD	; 253
    28d2:	80 93 d9 28 	sts	0x28D9, r24
    28d6:	90 93 da 28 	sts	0x28DA, r25
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
    28da:	81 e0       	ldi	r24, 0x01	; 1
    28dc:	ba c0       	rjmp	.+372    	; 0x2a52 <udc_process_setup+0x42e>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    28de:	80 e0       	ldi	r24, 0x00	; 0
    28e0:	b8 c0       	rjmp	.+368    	; 0x2a52 <udc_process_setup+0x42e>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
    28e2:	80 e0       	ldi	r24, 0x00	; 0
    28e4:	b6 c0       	rjmp	.+364    	; 0x2a52 <udc_process_setup+0x42e>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    28e6:	80 91 29 2a 	lds	r24, 0x2A29
    28ea:	90 91 2a 2a 	lds	r25, 0x2A2A
    28ee:	89 2b       	or	r24, r25
    28f0:	09 f0       	breq	.+2      	; 0x28f4 <udc_process_setup+0x2d0>
    28f2:	45 c0       	rjmp	.+138    	; 0x297e <udc_process_setup+0x35a>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    28f4:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <udd_getaddress>
    28f8:	88 23       	and	r24, r24
    28fa:	09 f4       	brne	.+2      	; 0x28fe <udc_process_setup+0x2da>
    28fc:	42 c0       	rjmp	.+132    	; 0x2982 <udc_process_setup+0x35e>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    28fe:	20 91 25 2a 	lds	r18, 0x2A25
    2902:	30 91 26 2a 	lds	r19, 0x2A26
    2906:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    2908:	e0 91 22 20 	lds	r30, 0x2022
    290c:	f0 91 23 20 	lds	r31, 0x2023
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    2910:	81 89       	ldd	r24, Z+17	; 0x11
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	82 17       	cp	r24, r18
    2916:	93 07       	cpc	r25, r19
    2918:	b0 f1       	brcs	.+108    	; 0x2986 <udc_process_setup+0x362>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    291a:	2e de       	rcall	.-932    	; 0x2578 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    291c:	80 91 25 2a 	lds	r24, 0x2A25
    2920:	90 91 26 2a 	lds	r25, 0x2A26
    2924:	80 93 d6 28 	sts	0x28D6, r24
	if (udc_num_configuration == 0) {
    2928:	88 23       	and	r24, r24
    292a:	79 f1       	breq	.+94     	; 0x298a <udc_process_setup+0x366>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    292c:	99 27       	eor	r25, r25
    292e:	01 97       	sbiw	r24, 0x01	; 1
    2930:	88 0f       	add	r24, r24
    2932:	99 1f       	adc	r25, r25
    2934:	88 0f       	add	r24, r24
    2936:	99 1f       	adc	r25, r25
    2938:	e0 91 24 20 	lds	r30, 0x2024
    293c:	f0 91 25 20 	lds	r31, 0x2025
    2940:	e8 0f       	add	r30, r24
    2942:	f9 1f       	adc	r31, r25
    2944:	e0 93 d7 28 	sts	0x28D7, r30
    2948:	f0 93 d8 28 	sts	0x28D8, r31
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    294c:	01 90       	ld	r0, Z+
    294e:	f0 81       	ld	r31, Z
    2950:	e0 2d       	mov	r30, r0
    2952:	84 81       	ldd	r24, Z+4	; 0x04
    2954:	88 23       	and	r24, r24
    2956:	d9 f0       	breq	.+54     	; 0x298e <udc_process_setup+0x36a>
    2958:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    295a:	60 e0       	ldi	r22, 0x00	; 0
    295c:	8c 2f       	mov	r24, r28
    295e:	92 dd       	rcall	.-1244   	; 0x2484 <udc_iface_enable>
    2960:	88 23       	and	r24, r24
    2962:	b9 f0       	breq	.+46     	; 0x2992 <udc_process_setup+0x36e>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    2964:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2966:	e0 91 d7 28 	lds	r30, 0x28D7
    296a:	f0 91 d8 28 	lds	r31, 0x28D8
    296e:	01 90       	ld	r0, Z+
    2970:	f0 81       	ld	r31, Z
    2972:	e0 2d       	mov	r30, r0
    2974:	84 81       	ldd	r24, Z+4	; 0x04
    2976:	c8 17       	cp	r28, r24
    2978:	80 f3       	brcs	.-32     	; 0x295a <udc_process_setup+0x336>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	6a c0       	rjmp	.+212    	; 0x2a52 <udc_process_setup+0x42e>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    297e:	80 e0       	ldi	r24, 0x00	; 0
    2980:	68 c0       	rjmp	.+208    	; 0x2a52 <udc_process_setup+0x42e>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
    2982:	80 e0       	ldi	r24, 0x00	; 0
    2984:	66 c0       	rjmp	.+204    	; 0x2a52 <udc_process_setup+0x42e>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	64 c0       	rjmp	.+200    	; 0x2a52 <udc_process_setup+0x42e>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	62 c0       	rjmp	.+196    	; 0x2a52 <udc_process_setup+0x42e>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
    298e:	81 e0       	ldi	r24, 0x01	; 1
    2990:	60 c0       	rjmp	.+192    	; 0x2a52 <udc_process_setup+0x42e>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
    2992:	80 e0       	ldi	r24, 0x00	; 0
    2994:	5e c0       	rjmp	.+188    	; 0x2a52 <udc_process_setup+0x42e>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    2996:	21 30       	cpi	r18, 0x01	; 1
    2998:	01 f5       	brne	.+64     	; 0x29da <udc_process_setup+0x3b6>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    299a:	80 91 24 2a 	lds	r24, 0x2A24
    299e:	8b 30       	cpi	r24, 0x0B	; 11
    29a0:	e1 f4       	brne	.+56     	; 0x29da <udc_process_setup+0x3b6>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    29a2:	80 91 29 2a 	lds	r24, 0x2A29
    29a6:	90 91 2a 2a 	lds	r25, 0x2A2A
    29aa:	89 2b       	or	r24, r25
    29ac:	81 f4       	brne	.+32     	; 0x29ce <udc_process_setup+0x3aa>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    29ae:	80 91 d6 28 	lds	r24, 0x28D6
    29b2:	88 23       	and	r24, r24
    29b4:	71 f0       	breq	.+28     	; 0x29d2 <udc_process_setup+0x3ae>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    29b6:	c0 91 27 2a 	lds	r28, 0x2A27
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    29ba:	d0 91 25 2a 	lds	r29, 0x2A25

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    29be:	8c 2f       	mov	r24, r28
    29c0:	96 dd       	rcall	.-1236   	; 0x24ee <udc_iface_disable>
    29c2:	88 23       	and	r24, r24
    29c4:	41 f0       	breq	.+16     	; 0x29d6 <udc_process_setup+0x3b2>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    29c6:	6d 2f       	mov	r22, r29
    29c8:	8c 2f       	mov	r24, r28
    29ca:	5c dd       	rcall	.-1352   	; 0x2484 <udc_iface_enable>
    29cc:	42 c0       	rjmp	.+132    	; 0x2a52 <udc_process_setup+0x42e>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
    29ce:	80 e0       	ldi	r24, 0x00	; 0
    29d0:	40 c0       	rjmp	.+128    	; 0x2a52 <udc_process_setup+0x42e>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
    29d2:	80 e0       	ldi	r24, 0x00	; 0
    29d4:	3e c0       	rjmp	.+124    	; 0x2a52 <udc_process_setup+0x42e>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
		return false;
    29d6:	80 e0       	ldi	r24, 0x00	; 0
    29d8:	3c c0       	rjmp	.+120    	; 0x2a52 <udc_process_setup+0x42e>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    29da:	22 30       	cpi	r18, 0x02	; 2
    29dc:	e1 f5       	brne	.+120    	; 0x2a56 <udc_process_setup+0x432>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    29de:	80 91 24 2a 	lds	r24, 0x2A24
    29e2:	81 30       	cpi	r24, 0x01	; 1
    29e4:	19 f0       	breq	.+6      	; 0x29ec <udc_process_setup+0x3c8>
    29e6:	83 30       	cpi	r24, 0x03	; 3
    29e8:	99 f5       	brne	.+102    	; 0x2a50 <udc_process_setup+0x42c>
    29ea:	15 c0       	rjmp	.+42     	; 0x2a16 <udc_process_setup+0x3f2>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    29ec:	80 91 29 2a 	lds	r24, 0x2A29
    29f0:	90 91 2a 2a 	lds	r25, 0x2A2A
    29f4:	89 2b       	or	r24, r25
    29f6:	59 f4       	brne	.+22     	; 0x2a0e <udc_process_setup+0x3ea>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    29f8:	80 91 25 2a 	lds	r24, 0x2A25
    29fc:	90 91 26 2a 	lds	r25, 0x2A26
    2a00:	89 2b       	or	r24, r25
    2a02:	39 f4       	brne	.+14     	; 0x2a12 <udc_process_setup+0x3ee>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    2a04:	80 91 27 2a 	lds	r24, 0x2A27
    2a08:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <udd_ep_clear_halt>
    2a0c:	22 c0       	rjmp	.+68     	; 0x2a52 <udc_process_setup+0x42e>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    2a0e:	80 e0       	ldi	r24, 0x00	; 0
    2a10:	20 c0       	rjmp	.+64     	; 0x2a52 <udc_process_setup+0x42e>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
    2a12:	80 e0       	ldi	r24, 0x00	; 0
    2a14:	1e c0       	rjmp	.+60     	; 0x2a52 <udc_process_setup+0x42e>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    2a16:	80 91 29 2a 	lds	r24, 0x2A29
    2a1a:	90 91 2a 2a 	lds	r25, 0x2A2A
    2a1e:	89 2b       	or	r24, r25
    2a20:	79 f4       	brne	.+30     	; 0x2a40 <udc_process_setup+0x41c>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    2a22:	80 91 25 2a 	lds	r24, 0x2A25
    2a26:	90 91 26 2a 	lds	r25, 0x2A26
    2a2a:	89 2b       	or	r24, r25
    2a2c:	59 f4       	brne	.+22     	; 0x2a44 <udc_process_setup+0x420>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    2a2e:	c7 e2       	ldi	r28, 0x27	; 39
    2a30:	da e2       	ldi	r29, 0x2A	; 42
    2a32:	88 81       	ld	r24, Y
    2a34:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    2a38:	88 81       	ld	r24, Y
    2a3a:	0e 94 23 1f 	call	0x3e46	; 0x3e46 <udd_ep_set_halt>
    2a3e:	09 c0       	rjmp	.+18     	; 0x2a52 <udc_process_setup+0x42e>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    2a40:	80 e0       	ldi	r24, 0x00	; 0
    2a42:	07 c0       	rjmp	.+14     	; 0x2a52 <udc_process_setup+0x42e>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
    2a44:	80 e0       	ldi	r24, 0x00	; 0
    2a46:	05 c0       	rjmp	.+10     	; 0x2a52 <udc_process_setup+0x42e>
				break;
			}
		}
#endif
	}
	return false;
    2a48:	80 e0       	ldi	r24, 0x00	; 0
    2a4a:	03 c0       	rjmp	.+6      	; 0x2a52 <udc_process_setup+0x42e>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    2a4c:	80 e0       	ldi	r24, 0x00	; 0
    2a4e:	01 c0       	rjmp	.+2      	; 0x2a52 <udc_process_setup+0x42e>
				break;
			}
		}
#endif
	}
	return false;
    2a50:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    2a52:	81 11       	cpse	r24, r1
    2a54:	3c c0       	rjmp	.+120    	; 0x2ace <udc_process_setup+0x4aa>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    2a56:	80 91 23 2a 	lds	r24, 0x2A23
    2a5a:	8f 71       	andi	r24, 0x1F	; 31
    2a5c:	81 30       	cpi	r24, 0x01	; 1
    2a5e:	c9 f5       	brne	.+114    	; 0x2ad2 <udc_process_setup+0x4ae>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    2a60:	80 91 d6 28 	lds	r24, 0x28D6
    2a64:	88 23       	and	r24, r24
    2a66:	49 f1       	breq	.+82     	; 0x2aba <udc_process_setup+0x496>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    2a68:	00 91 27 2a 	lds	r16, 0x2A27
    2a6c:	10 91 28 2a 	lds	r17, 0x2A28
    2a70:	f0 2e       	mov	r15, r16
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    2a72:	c0 91 d7 28 	lds	r28, 0x28D7
    2a76:	d0 91 d8 28 	lds	r29, 0x28D8
    2a7a:	e8 81       	ld	r30, Y
    2a7c:	f9 81       	ldd	r31, Y+1	; 0x01
    2a7e:	84 81       	ldd	r24, Z+4	; 0x04
    2a80:	08 17       	cp	r16, r24
    2a82:	e8 f4       	brcc	.+58     	; 0x2abe <udc_process_setup+0x49a>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    2a84:	60 e0       	ldi	r22, 0x00	; 0
    2a86:	80 2f       	mov	r24, r16
    2a88:	b7 dc       	rcall	.-1682   	; 0x23f8 <udc_update_iface_desc>
    2a8a:	88 23       	and	r24, r24
    2a8c:	d1 f0       	breq	.+52     	; 0x2ac2 <udc_process_setup+0x49e>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    2a8e:	11 27       	eor	r17, r17
    2a90:	98 01       	movw	r18, r16
    2a92:	22 0f       	add	r18, r18
    2a94:	33 1f       	adc	r19, r19
    2a96:	ea 81       	ldd	r30, Y+2	; 0x02
    2a98:	fb 81       	ldd	r31, Y+3	; 0x03
    2a9a:	e2 0f       	add	r30, r18
    2a9c:	f3 1f       	adc	r31, r19
    2a9e:	c0 81       	ld	r28, Z
    2aa0:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    2aa2:	ee 81       	ldd	r30, Y+6	; 0x06
    2aa4:	ff 81       	ldd	r31, Y+7	; 0x07
    2aa6:	19 95       	eicall
    2aa8:	68 2f       	mov	r22, r24
    2aaa:	8f 2d       	mov	r24, r15
    2aac:	a5 dc       	rcall	.-1718   	; 0x23f8 <udc_update_iface_desc>
    2aae:	88 23       	and	r24, r24
    2ab0:	51 f0       	breq	.+20     	; 0x2ac6 <udc_process_setup+0x4a2>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    2ab2:	ec 81       	ldd	r30, Y+4	; 0x04
    2ab4:	fd 81       	ldd	r31, Y+5	; 0x05
    2ab6:	19 95       	eicall
    2ab8:	20 c0       	rjmp	.+64     	; 0x2afa <udc_process_setup+0x4d6>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    2aba:	80 e0       	ldi	r24, 0x00	; 0
    2abc:	1e c0       	rjmp	.+60     	; 0x2afa <udc_process_setup+0x4d6>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
    2abe:	80 e0       	ldi	r24, 0x00	; 0
    2ac0:	1c c0       	rjmp	.+56     	; 0x2afa <udc_process_setup+0x4d6>

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
    2ac2:	80 e0       	ldi	r24, 0x00	; 0
    2ac4:	1a c0       	rjmp	.+52     	; 0x2afa <udc_process_setup+0x4d6>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
		return false;
    2ac6:	80 e0       	ldi	r24, 0x00	; 0
    2ac8:	18 c0       	rjmp	.+48     	; 0x2afa <udc_process_setup+0x4d6>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    2aca:	80 e0       	ldi	r24, 0x00	; 0
    2acc:	16 c0       	rjmp	.+44     	; 0x2afa <udc_process_setup+0x4d6>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    2ace:	81 e0       	ldi	r24, 0x01	; 1
    2ad0:	14 c0       	rjmp	.+40     	; 0x2afa <udc_process_setup+0x4d6>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    2ad2:	80 e0       	ldi	r24, 0x00	; 0
    2ad4:	12 c0       	rjmp	.+36     	; 0x2afa <udc_process_setup+0x4d6>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    2ad6:	82 2f       	mov	r24, r18
    2ad8:	80 76       	andi	r24, 0x60	; 96
    2ada:	09 f0       	breq	.+2      	; 0x2ade <udc_process_setup+0x4ba>
    2adc:	bc cf       	rjmp	.-136    	; 0x2a56 <udc_process_setup+0x432>
    2ade:	c5 ce       	rjmp	.-630    	; 0x286a <udc_process_setup+0x246>
    2ae0:	32 2f       	mov	r19, r18
    2ae2:	30 76       	andi	r19, 0x60	; 96
    2ae4:	09 f0       	breq	.+2      	; 0x2ae8 <udc_process_setup+0x4c4>
    2ae6:	b7 cf       	rjmp	.-146    	; 0x2a56 <udc_process_setup+0x432>
    2ae8:	bb cd       	rjmp	.-1162   	; 0x2660 <udc_process_setup+0x3c>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    2aea:	2f e0       	ldi	r18, 0x0F	; 15
		str = udc_string_product_name;
    2aec:	82 e9       	ldi	r24, 0x92	; 146
    2aee:	90 e2       	ldi	r25, 0x20	; 32
    2af0:	21 ce       	rjmp	.-958    	; 0x2734 <udc_process_setup+0x110>
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    2af2:	2c e0       	ldi	r18, 0x0C	; 12
		str = udc_get_string_serial_name();
    2af4:	83 e3       	ldi	r24, 0x33	; 51
    2af6:	9a e2       	ldi	r25, 0x2A	; 42
    2af8:	1d ce       	rjmp	.-966    	; 0x2734 <udc_process_setup+0x110>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    2afa:	df 91       	pop	r29
    2afc:	cf 91       	pop	r28
    2afe:	1f 91       	pop	r17
    2b00:	0f 91       	pop	r16
    2b02:	ff 90       	pop	r15
    2b04:	08 95       	ret

00002b06 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    2b06:	43 e0       	ldi	r20, 0x03	; 3
    2b08:	50 e0       	ldi	r21, 0x00	; 0
    2b0a:	61 e0       	ldi	r22, 0x01	; 1
    2b0c:	80 ee       	ldi	r24, 0xE0	; 224
    2b0e:	97 e0       	ldi	r25, 0x07	; 7
    2b10:	07 d9       	rcall	.-3570   	; 0x1d20 <ioport_configure_port_pin>
    2b12:	43 e0       	ldi	r20, 0x03	; 3
    2b14:	50 e0       	ldi	r21, 0x00	; 0
    2b16:	62 e0       	ldi	r22, 0x02	; 2
    2b18:	80 ee       	ldi	r24, 0xE0	; 224
    2b1a:	97 e0       	ldi	r25, 0x07	; 7
    2b1c:	01 d9       	rcall	.-3582   	; 0x1d20 <ioport_configure_port_pin>
    2b1e:	43 e0       	ldi	r20, 0x03	; 3
    2b20:	50 e0       	ldi	r21, 0x00	; 0
    2b22:	60 e1       	ldi	r22, 0x10	; 16
    2b24:	80 e6       	ldi	r24, 0x60	; 96
    2b26:	96 e0       	ldi	r25, 0x06	; 6
    2b28:	fb d8       	rcall	.-3594   	; 0x1d20 <ioport_configure_port_pin>
    2b2a:	41 e0       	ldi	r20, 0x01	; 1
    2b2c:	50 e4       	ldi	r21, 0x40	; 64
    2b2e:	60 e2       	ldi	r22, 0x20	; 32
    2b30:	80 e6       	ldi	r24, 0x60	; 96
    2b32:	96 e0       	ldi	r25, 0x06	; 6
    2b34:	f5 d8       	rcall	.-3606   	; 0x1d20 <ioport_configure_port_pin>
    2b36:	40 e0       	ldi	r20, 0x00	; 0
    2b38:	5b e1       	ldi	r21, 0x1B	; 27
    2b3a:	60 e2       	ldi	r22, 0x20	; 32
    2b3c:	80 e8       	ldi	r24, 0x80	; 128
    2b3e:	96 e0       	ldi	r25, 0x06	; 6
    2b40:	ef d8       	rcall	.-3618   	; 0x1d20 <ioport_configure_port_pin>
    2b42:	40 e0       	ldi	r20, 0x00	; 0
    2b44:	5b e1       	ldi	r21, 0x1B	; 27
    2b46:	62 e0       	ldi	r22, 0x02	; 2
    2b48:	80 ea       	ldi	r24, 0xA0	; 160
    2b4a:	96 e0       	ldi	r25, 0x06	; 6
    2b4c:	e9 d8       	rcall	.-3630   	; 0x1d20 <ioport_configure_port_pin>
    2b4e:	40 e0       	ldi	r20, 0x00	; 0
    2b50:	5b e1       	ldi	r21, 0x1B	; 27
    2b52:	64 e0       	ldi	r22, 0x04	; 4
    2b54:	80 ea       	ldi	r24, 0xA0	; 160
    2b56:	96 e0       	ldi	r25, 0x06	; 6
    2b58:	e3 d8       	rcall	.-3642   	; 0x1d20 <ioport_configure_port_pin>
    2b5a:	43 e0       	ldi	r20, 0x03	; 3
    2b5c:	50 e0       	ldi	r21, 0x00	; 0
    2b5e:	62 e0       	ldi	r22, 0x02	; 2
    2b60:	80 e6       	ldi	r24, 0x60	; 96
    2b62:	96 e0       	ldi	r25, 0x06	; 6
    2b64:	dd d8       	rcall	.-3654   	; 0x1d20 <ioport_configure_port_pin>
    2b66:	43 e0       	ldi	r20, 0x03	; 3
    2b68:	50 e0       	ldi	r21, 0x00	; 0
    2b6a:	68 e0       	ldi	r22, 0x08	; 8
    2b6c:	80 e6       	ldi	r24, 0x60	; 96
    2b6e:	96 e0       	ldi	r25, 0x06	; 6
    2b70:	d7 d8       	rcall	.-3666   	; 0x1d20 <ioport_configure_port_pin>
    2b72:	43 e0       	ldi	r20, 0x03	; 3
    2b74:	50 e0       	ldi	r21, 0x00	; 0
    2b76:	68 e0       	ldi	r22, 0x08	; 8
    2b78:	80 ea       	ldi	r24, 0xA0	; 160
    2b7a:	96 e0       	ldi	r25, 0x06	; 6
    2b7c:	d1 d8       	rcall	.-3678   	; 0x1d20 <ioport_configure_port_pin>
    2b7e:	43 e0       	ldi	r20, 0x03	; 3
    2b80:	50 e0       	ldi	r21, 0x00	; 0
    2b82:	61 e0       	ldi	r22, 0x01	; 1
    2b84:	80 e6       	ldi	r24, 0x60	; 96
    2b86:	96 e0       	ldi	r25, 0x06	; 6
    2b88:	cb d8       	rcall	.-3690   	; 0x1d20 <ioport_configure_port_pin>
    2b8a:	43 e0       	ldi	r20, 0x03	; 3
    2b8c:	50 e0       	ldi	r21, 0x00	; 0
    2b8e:	68 e0       	ldi	r22, 0x08	; 8
    2b90:	80 e0       	ldi	r24, 0x00	; 0
    2b92:	96 e0       	ldi	r25, 0x06	; 6
    2b94:	c5 d8       	rcall	.-3702   	; 0x1d20 <ioport_configure_port_pin>
    2b96:	41 e0       	ldi	r20, 0x01	; 1
    2b98:	50 e0       	ldi	r21, 0x00	; 0
    2b9a:	60 e1       	ldi	r22, 0x10	; 16
    2b9c:	80 e8       	ldi	r24, 0x80	; 128
    2b9e:	96 e0       	ldi	r25, 0x06	; 6
    2ba0:	bf d8       	rcall	.-3714   	; 0x1d20 <ioport_configure_port_pin>
    2ba2:	43 e0       	ldi	r20, 0x03	; 3
    2ba4:	50 e0       	ldi	r21, 0x00	; 0
    2ba6:	62 e0       	ldi	r22, 0x02	; 2
    2ba8:	80 e6       	ldi	r24, 0x60	; 96
    2baa:	96 e0       	ldi	r25, 0x06	; 6
    2bac:	b9 d8       	rcall	.-3726   	; 0x1d20 <ioport_configure_port_pin>
    2bae:	43 e0       	ldi	r20, 0x03	; 3
    2bb0:	50 e0       	ldi	r21, 0x00	; 0
    2bb2:	68 e0       	ldi	r22, 0x08	; 8
    2bb4:	80 e6       	ldi	r24, 0x60	; 96
    2bb6:	96 e0       	ldi	r25, 0x06	; 6
    2bb8:	b3 d8       	rcall	.-3738   	; 0x1d20 <ioport_configure_port_pin>
    2bba:	40 e0       	ldi	r20, 0x00	; 0
    2bbc:	50 e0       	ldi	r21, 0x00	; 0
    2bbe:	64 e0       	ldi	r22, 0x04	; 4
    2bc0:	80 e6       	ldi	r24, 0x60	; 96
    2bc2:	96 e0       	ldi	r25, 0x06	; 6
    2bc4:	ad d8       	rcall	.-3750   	; 0x1d20 <ioport_configure_port_pin>
    2bc6:	43 e0       	ldi	r20, 0x03	; 3
    2bc8:	50 e0       	ldi	r21, 0x00	; 0
    2bca:	60 e1       	ldi	r22, 0x10	; 16
    2bcc:	80 ea       	ldi	r24, 0xA0	; 160
    2bce:	96 e0       	ldi	r25, 0x06	; 6
    2bd0:	a7 c8       	rjmp	.-3762   	; 0x1d20 <ioport_configure_port_pin>

00002bd2 <adc_set_callback>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2bd2:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
    2bd4:	f8 94       	cli
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    2bd6:	81 15       	cp	r24, r1
    2bd8:	32 e0       	ldi	r19, 0x02	; 2
    2bda:	93 07       	cpc	r25, r19
    2bdc:	29 f4       	brne	.+10     	; 0x2be8 <adc_set_callback+0x16>
		adca_callback = callback;
    2bde:	60 93 1f 2a 	sts	0x2A1F, r22
    2be2:	70 93 20 2a 	sts	0x2A20, r23
    2be6:	07 c0       	rjmp	.+14     	; 0x2bf6 <adc_set_callback+0x24>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    2be8:	80 34       	cpi	r24, 0x40	; 64
    2bea:	92 40       	sbci	r25, 0x02	; 2
    2bec:	21 f4       	brne	.+8      	; 0x2bf6 <adc_set_callback+0x24>
		adcb_callback = callback;
    2bee:	60 93 1d 2a 	sts	0x2A1D, r22
    2bf2:	70 93 1e 2a 	sts	0x2A1E, r23
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2bf6:	2f bf       	out	0x3f, r18	; 63
    2bf8:	08 95       	ret

00002bfa <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    2bfa:	81 15       	cp	r24, r1
    2bfc:	22 e0       	ldi	r18, 0x02	; 2
    2bfe:	92 07       	cpc	r25, r18
    2c00:	61 f4       	brne	.+24     	; 0x2c1a <adc_enable_clock+0x20>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    2c02:	80 91 de 28 	lds	r24, 0x28DE
    2c06:	98 2f       	mov	r25, r24
    2c08:	9f 5f       	subi	r25, 0xFF	; 255
    2c0a:	90 93 de 28 	sts	0x28DE, r25
    2c0e:	81 11       	cpse	r24, r1
    2c10:	13 c0       	rjmp	.+38     	; 0x2c38 <adc_enable_clock+0x3e>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2c12:	62 e0       	ldi	r22, 0x02	; 2
    2c14:	81 e0       	ldi	r24, 0x01	; 1
    2c16:	0c 94 86 0a 	jmp	0x150c	; 0x150c <sysclk_enable_module>
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    2c1a:	80 34       	cpi	r24, 0x40	; 64
    2c1c:	92 40       	sbci	r25, 0x02	; 2
    2c1e:	61 f4       	brne	.+24     	; 0x2c38 <adc_enable_clock+0x3e>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
    2c20:	80 91 df 28 	lds	r24, 0x28DF
    2c24:	98 2f       	mov	r25, r24
    2c26:	9f 5f       	subi	r25, 0xFF	; 255
    2c28:	90 93 df 28 	sts	0x28DF, r25
    2c2c:	81 11       	cpse	r24, r1
    2c2e:	04 c0       	rjmp	.+8      	; 0x2c38 <adc_enable_clock+0x3e>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    2c30:	62 e0       	ldi	r22, 0x02	; 2
    2c32:	82 e0       	ldi	r24, 0x02	; 2
    2c34:	0c 94 86 0a 	jmp	0x150c	; 0x150c <sysclk_enable_module>
    2c38:	08 95       	ret

00002c3a <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    2c3a:	81 15       	cp	r24, r1
    2c3c:	22 e0       	ldi	r18, 0x02	; 2
    2c3e:	92 07       	cpc	r25, r18
    2c40:	59 f4       	brne	.+22     	; 0x2c58 <adc_disable_clock+0x1e>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    2c42:	80 91 de 28 	lds	r24, 0x28DE
    2c46:	81 50       	subi	r24, 0x01	; 1
    2c48:	80 93 de 28 	sts	0x28DE, r24
    2c4c:	81 11       	cpse	r24, r1
    2c4e:	12 c0       	rjmp	.+36     	; 0x2c74 <adc_disable_clock+0x3a>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2c50:	62 e0       	ldi	r22, 0x02	; 2
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	0c 94 92 0a 	jmp	0x1524	; 0x1524 <sysclk_disable_module>
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    2c58:	80 34       	cpi	r24, 0x40	; 64
    2c5a:	92 40       	sbci	r25, 0x02	; 2
    2c5c:	59 f4       	brne	.+22     	; 0x2c74 <adc_disable_clock+0x3a>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
    2c5e:	80 91 df 28 	lds	r24, 0x28DF
    2c62:	81 50       	subi	r24, 0x01	; 1
    2c64:	80 93 df 28 	sts	0x28DF, r24
    2c68:	81 11       	cpse	r24, r1
    2c6a:	04 c0       	rjmp	.+8      	; 0x2c74 <adc_disable_clock+0x3a>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    2c6c:	62 e0       	ldi	r22, 0x02	; 2
    2c6e:	82 e0       	ldi	r24, 0x02	; 2
    2c70:	0c 94 92 0a 	jmp	0x1524	; 0x1524 <sysclk_disable_module>
    2c74:	08 95       	ret

00002c76 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    2c76:	1f 93       	push	r17
    2c78:	cf 93       	push	r28
    2c7a:	df 93       	push	r29
    2c7c:	ec 01       	movw	r28, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2c7e:	1f b7       	in	r17, 0x3f	; 63
	cpu_irq_disable();
    2c80:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    2c82:	bb df       	rcall	.-138    	; 0x2bfa <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    2c84:	88 81       	ld	r24, Y
    2c86:	81 60       	ori	r24, 0x01	; 1
    2c88:	88 83       	st	Y, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2c8a:	1f bf       	out	0x3f, r17	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2c8c:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    2c8e:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    2c90:	e8 e1       	ldi	r30, 0x18	; 24
    2c92:	fa e2       	ldi	r31, 0x2A	; 42
    2c94:	90 81       	ld	r25, Z
    2c96:	9f 5f       	subi	r25, 0xFF	; 255
    2c98:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2c9a:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    2c9c:	df 91       	pop	r29
    2c9e:	cf 91       	pop	r28
    2ca0:	1f 91       	pop	r17
    2ca2:	08 95       	ret

00002ca4 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    2ca4:	1f 92       	push	r1
    2ca6:	0f 92       	push	r0
    2ca8:	0f b6       	in	r0, 0x3f	; 63
    2caa:	0f 92       	push	r0
    2cac:	11 24       	eor	r1, r1
    2cae:	0b b6       	in	r0, 0x3b	; 59
    2cb0:	0f 92       	push	r0
    2cb2:	2f 93       	push	r18
    2cb4:	3f 93       	push	r19
    2cb6:	4f 93       	push	r20
    2cb8:	5f 93       	push	r21
    2cba:	6f 93       	push	r22
    2cbc:	7f 93       	push	r23
    2cbe:	8f 93       	push	r24
    2cc0:	9f 93       	push	r25
    2cc2:	af 93       	push	r26
    2cc4:	bf 93       	push	r27
    2cc6:	ef 93       	push	r30
    2cc8:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    2cca:	e0 e0       	ldi	r30, 0x00	; 0
    2ccc:	f2 e0       	ldi	r31, 0x02	; 2
    2cce:	44 a1       	ldd	r20, Z+36	; 0x24
    2cd0:	55 a1       	ldd	r21, Z+37	; 0x25
    2cd2:	e0 91 1f 2a 	lds	r30, 0x2A1F
    2cd6:	f0 91 20 2a 	lds	r31, 0x2A20
    2cda:	61 e0       	ldi	r22, 0x01	; 1
    2cdc:	80 e0       	ldi	r24, 0x00	; 0
    2cde:	92 e0       	ldi	r25, 0x02	; 2
    2ce0:	19 95       	eicall
}
    2ce2:	ff 91       	pop	r31
    2ce4:	ef 91       	pop	r30
    2ce6:	bf 91       	pop	r27
    2ce8:	af 91       	pop	r26
    2cea:	9f 91       	pop	r25
    2cec:	8f 91       	pop	r24
    2cee:	7f 91       	pop	r23
    2cf0:	6f 91       	pop	r22
    2cf2:	5f 91       	pop	r21
    2cf4:	4f 91       	pop	r20
    2cf6:	3f 91       	pop	r19
    2cf8:	2f 91       	pop	r18
    2cfa:	0f 90       	pop	r0
    2cfc:	0b be       	out	0x3b, r0	; 59
    2cfe:	0f 90       	pop	r0
    2d00:	0f be       	out	0x3f, r0	; 63
    2d02:	0f 90       	pop	r0
    2d04:	1f 90       	pop	r1
    2d06:	18 95       	reti

00002d08 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    2d08:	1f 92       	push	r1
    2d0a:	0f 92       	push	r0
    2d0c:	0f b6       	in	r0, 0x3f	; 63
    2d0e:	0f 92       	push	r0
    2d10:	11 24       	eor	r1, r1
    2d12:	0b b6       	in	r0, 0x3b	; 59
    2d14:	0f 92       	push	r0
    2d16:	2f 93       	push	r18
    2d18:	3f 93       	push	r19
    2d1a:	4f 93       	push	r20
    2d1c:	5f 93       	push	r21
    2d1e:	6f 93       	push	r22
    2d20:	7f 93       	push	r23
    2d22:	8f 93       	push	r24
    2d24:	9f 93       	push	r25
    2d26:	af 93       	push	r26
    2d28:	bf 93       	push	r27
    2d2a:	ef 93       	push	r30
    2d2c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    2d2e:	e0 e0       	ldi	r30, 0x00	; 0
    2d30:	f2 e0       	ldi	r31, 0x02	; 2
    2d32:	44 a5       	ldd	r20, Z+44	; 0x2c
    2d34:	55 a5       	ldd	r21, Z+45	; 0x2d
    2d36:	e0 91 1f 2a 	lds	r30, 0x2A1F
    2d3a:	f0 91 20 2a 	lds	r31, 0x2A20
    2d3e:	62 e0       	ldi	r22, 0x02	; 2
    2d40:	80 e0       	ldi	r24, 0x00	; 0
    2d42:	92 e0       	ldi	r25, 0x02	; 2
    2d44:	19 95       	eicall
}
    2d46:	ff 91       	pop	r31
    2d48:	ef 91       	pop	r30
    2d4a:	bf 91       	pop	r27
    2d4c:	af 91       	pop	r26
    2d4e:	9f 91       	pop	r25
    2d50:	8f 91       	pop	r24
    2d52:	7f 91       	pop	r23
    2d54:	6f 91       	pop	r22
    2d56:	5f 91       	pop	r21
    2d58:	4f 91       	pop	r20
    2d5a:	3f 91       	pop	r19
    2d5c:	2f 91       	pop	r18
    2d5e:	0f 90       	pop	r0
    2d60:	0b be       	out	0x3b, r0	; 59
    2d62:	0f 90       	pop	r0
    2d64:	0f be       	out	0x3f, r0	; 63
    2d66:	0f 90       	pop	r0
    2d68:	1f 90       	pop	r1
    2d6a:	18 95       	reti

00002d6c <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    2d6c:	1f 92       	push	r1
    2d6e:	0f 92       	push	r0
    2d70:	0f b6       	in	r0, 0x3f	; 63
    2d72:	0f 92       	push	r0
    2d74:	11 24       	eor	r1, r1
    2d76:	0b b6       	in	r0, 0x3b	; 59
    2d78:	0f 92       	push	r0
    2d7a:	2f 93       	push	r18
    2d7c:	3f 93       	push	r19
    2d7e:	4f 93       	push	r20
    2d80:	5f 93       	push	r21
    2d82:	6f 93       	push	r22
    2d84:	7f 93       	push	r23
    2d86:	8f 93       	push	r24
    2d88:	9f 93       	push	r25
    2d8a:	af 93       	push	r26
    2d8c:	bf 93       	push	r27
    2d8e:	ef 93       	push	r30
    2d90:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    2d92:	e0 e0       	ldi	r30, 0x00	; 0
    2d94:	f2 e0       	ldi	r31, 0x02	; 2
    2d96:	44 a9       	ldd	r20, Z+52	; 0x34
    2d98:	55 a9       	ldd	r21, Z+53	; 0x35
    2d9a:	e0 91 1f 2a 	lds	r30, 0x2A1F
    2d9e:	f0 91 20 2a 	lds	r31, 0x2A20
    2da2:	64 e0       	ldi	r22, 0x04	; 4
    2da4:	80 e0       	ldi	r24, 0x00	; 0
    2da6:	92 e0       	ldi	r25, 0x02	; 2
    2da8:	19 95       	eicall
}
    2daa:	ff 91       	pop	r31
    2dac:	ef 91       	pop	r30
    2dae:	bf 91       	pop	r27
    2db0:	af 91       	pop	r26
    2db2:	9f 91       	pop	r25
    2db4:	8f 91       	pop	r24
    2db6:	7f 91       	pop	r23
    2db8:	6f 91       	pop	r22
    2dba:	5f 91       	pop	r21
    2dbc:	4f 91       	pop	r20
    2dbe:	3f 91       	pop	r19
    2dc0:	2f 91       	pop	r18
    2dc2:	0f 90       	pop	r0
    2dc4:	0b be       	out	0x3b, r0	; 59
    2dc6:	0f 90       	pop	r0
    2dc8:	0f be       	out	0x3f, r0	; 63
    2dca:	0f 90       	pop	r0
    2dcc:	1f 90       	pop	r1
    2dce:	18 95       	reti

00002dd0 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    2dd0:	1f 92       	push	r1
    2dd2:	0f 92       	push	r0
    2dd4:	0f b6       	in	r0, 0x3f	; 63
    2dd6:	0f 92       	push	r0
    2dd8:	11 24       	eor	r1, r1
    2dda:	0b b6       	in	r0, 0x3b	; 59
    2ddc:	0f 92       	push	r0
    2dde:	2f 93       	push	r18
    2de0:	3f 93       	push	r19
    2de2:	4f 93       	push	r20
    2de4:	5f 93       	push	r21
    2de6:	6f 93       	push	r22
    2de8:	7f 93       	push	r23
    2dea:	8f 93       	push	r24
    2dec:	9f 93       	push	r25
    2dee:	af 93       	push	r26
    2df0:	bf 93       	push	r27
    2df2:	ef 93       	push	r30
    2df4:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    2df6:	e0 e0       	ldi	r30, 0x00	; 0
    2df8:	f2 e0       	ldi	r31, 0x02	; 2
    2dfa:	44 ad       	ldd	r20, Z+60	; 0x3c
    2dfc:	55 ad       	ldd	r21, Z+61	; 0x3d
    2dfe:	e0 91 1f 2a 	lds	r30, 0x2A1F
    2e02:	f0 91 20 2a 	lds	r31, 0x2A20
    2e06:	68 e0       	ldi	r22, 0x08	; 8
    2e08:	80 e0       	ldi	r24, 0x00	; 0
    2e0a:	92 e0       	ldi	r25, 0x02	; 2
    2e0c:	19 95       	eicall
}
    2e0e:	ff 91       	pop	r31
    2e10:	ef 91       	pop	r30
    2e12:	bf 91       	pop	r27
    2e14:	af 91       	pop	r26
    2e16:	9f 91       	pop	r25
    2e18:	8f 91       	pop	r24
    2e1a:	7f 91       	pop	r23
    2e1c:	6f 91       	pop	r22
    2e1e:	5f 91       	pop	r21
    2e20:	4f 91       	pop	r20
    2e22:	3f 91       	pop	r19
    2e24:	2f 91       	pop	r18
    2e26:	0f 90       	pop	r0
    2e28:	0b be       	out	0x3b, r0	; 59
    2e2a:	0f 90       	pop	r0
    2e2c:	0f be       	out	0x3f, r0	; 63
    2e2e:	0f 90       	pop	r0
    2e30:	1f 90       	pop	r1
    2e32:	18 95       	reti

00002e34 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    2e34:	1f 92       	push	r1
    2e36:	0f 92       	push	r0
    2e38:	0f b6       	in	r0, 0x3f	; 63
    2e3a:	0f 92       	push	r0
    2e3c:	11 24       	eor	r1, r1
    2e3e:	0b b6       	in	r0, 0x3b	; 59
    2e40:	0f 92       	push	r0
    2e42:	2f 93       	push	r18
    2e44:	3f 93       	push	r19
    2e46:	4f 93       	push	r20
    2e48:	5f 93       	push	r21
    2e4a:	6f 93       	push	r22
    2e4c:	7f 93       	push	r23
    2e4e:	8f 93       	push	r24
    2e50:	9f 93       	push	r25
    2e52:	af 93       	push	r26
    2e54:	bf 93       	push	r27
    2e56:	ef 93       	push	r30
    2e58:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    2e5a:	e0 e4       	ldi	r30, 0x40	; 64
    2e5c:	f2 e0       	ldi	r31, 0x02	; 2
    2e5e:	44 a1       	ldd	r20, Z+36	; 0x24
    2e60:	55 a1       	ldd	r21, Z+37	; 0x25
    2e62:	e0 91 1d 2a 	lds	r30, 0x2A1D
    2e66:	f0 91 1e 2a 	lds	r31, 0x2A1E
    2e6a:	61 e0       	ldi	r22, 0x01	; 1
    2e6c:	80 e4       	ldi	r24, 0x40	; 64
    2e6e:	92 e0       	ldi	r25, 0x02	; 2
    2e70:	19 95       	eicall
}
    2e72:	ff 91       	pop	r31
    2e74:	ef 91       	pop	r30
    2e76:	bf 91       	pop	r27
    2e78:	af 91       	pop	r26
    2e7a:	9f 91       	pop	r25
    2e7c:	8f 91       	pop	r24
    2e7e:	7f 91       	pop	r23
    2e80:	6f 91       	pop	r22
    2e82:	5f 91       	pop	r21
    2e84:	4f 91       	pop	r20
    2e86:	3f 91       	pop	r19
    2e88:	2f 91       	pop	r18
    2e8a:	0f 90       	pop	r0
    2e8c:	0b be       	out	0x3b, r0	; 59
    2e8e:	0f 90       	pop	r0
    2e90:	0f be       	out	0x3f, r0	; 63
    2e92:	0f 90       	pop	r0
    2e94:	1f 90       	pop	r1
    2e96:	18 95       	reti

00002e98 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    2e98:	1f 92       	push	r1
    2e9a:	0f 92       	push	r0
    2e9c:	0f b6       	in	r0, 0x3f	; 63
    2e9e:	0f 92       	push	r0
    2ea0:	11 24       	eor	r1, r1
    2ea2:	0b b6       	in	r0, 0x3b	; 59
    2ea4:	0f 92       	push	r0
    2ea6:	2f 93       	push	r18
    2ea8:	3f 93       	push	r19
    2eaa:	4f 93       	push	r20
    2eac:	5f 93       	push	r21
    2eae:	6f 93       	push	r22
    2eb0:	7f 93       	push	r23
    2eb2:	8f 93       	push	r24
    2eb4:	9f 93       	push	r25
    2eb6:	af 93       	push	r26
    2eb8:	bf 93       	push	r27
    2eba:	ef 93       	push	r30
    2ebc:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    2ebe:	e0 e4       	ldi	r30, 0x40	; 64
    2ec0:	f2 e0       	ldi	r31, 0x02	; 2
    2ec2:	44 a5       	ldd	r20, Z+44	; 0x2c
    2ec4:	55 a5       	ldd	r21, Z+45	; 0x2d
    2ec6:	e0 91 1d 2a 	lds	r30, 0x2A1D
    2eca:	f0 91 1e 2a 	lds	r31, 0x2A1E
    2ece:	62 e0       	ldi	r22, 0x02	; 2
    2ed0:	80 e4       	ldi	r24, 0x40	; 64
    2ed2:	92 e0       	ldi	r25, 0x02	; 2
    2ed4:	19 95       	eicall
}
    2ed6:	ff 91       	pop	r31
    2ed8:	ef 91       	pop	r30
    2eda:	bf 91       	pop	r27
    2edc:	af 91       	pop	r26
    2ede:	9f 91       	pop	r25
    2ee0:	8f 91       	pop	r24
    2ee2:	7f 91       	pop	r23
    2ee4:	6f 91       	pop	r22
    2ee6:	5f 91       	pop	r21
    2ee8:	4f 91       	pop	r20
    2eea:	3f 91       	pop	r19
    2eec:	2f 91       	pop	r18
    2eee:	0f 90       	pop	r0
    2ef0:	0b be       	out	0x3b, r0	; 59
    2ef2:	0f 90       	pop	r0
    2ef4:	0f be       	out	0x3f, r0	; 63
    2ef6:	0f 90       	pop	r0
    2ef8:	1f 90       	pop	r1
    2efa:	18 95       	reti

00002efc <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    2efc:	1f 92       	push	r1
    2efe:	0f 92       	push	r0
    2f00:	0f b6       	in	r0, 0x3f	; 63
    2f02:	0f 92       	push	r0
    2f04:	11 24       	eor	r1, r1
    2f06:	0b b6       	in	r0, 0x3b	; 59
    2f08:	0f 92       	push	r0
    2f0a:	2f 93       	push	r18
    2f0c:	3f 93       	push	r19
    2f0e:	4f 93       	push	r20
    2f10:	5f 93       	push	r21
    2f12:	6f 93       	push	r22
    2f14:	7f 93       	push	r23
    2f16:	8f 93       	push	r24
    2f18:	9f 93       	push	r25
    2f1a:	af 93       	push	r26
    2f1c:	bf 93       	push	r27
    2f1e:	ef 93       	push	r30
    2f20:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    2f22:	e0 e4       	ldi	r30, 0x40	; 64
    2f24:	f2 e0       	ldi	r31, 0x02	; 2
    2f26:	44 a9       	ldd	r20, Z+52	; 0x34
    2f28:	55 a9       	ldd	r21, Z+53	; 0x35
    2f2a:	e0 91 1d 2a 	lds	r30, 0x2A1D
    2f2e:	f0 91 1e 2a 	lds	r31, 0x2A1E
    2f32:	64 e0       	ldi	r22, 0x04	; 4
    2f34:	80 e4       	ldi	r24, 0x40	; 64
    2f36:	92 e0       	ldi	r25, 0x02	; 2
    2f38:	19 95       	eicall
}
    2f3a:	ff 91       	pop	r31
    2f3c:	ef 91       	pop	r30
    2f3e:	bf 91       	pop	r27
    2f40:	af 91       	pop	r26
    2f42:	9f 91       	pop	r25
    2f44:	8f 91       	pop	r24
    2f46:	7f 91       	pop	r23
    2f48:	6f 91       	pop	r22
    2f4a:	5f 91       	pop	r21
    2f4c:	4f 91       	pop	r20
    2f4e:	3f 91       	pop	r19
    2f50:	2f 91       	pop	r18
    2f52:	0f 90       	pop	r0
    2f54:	0b be       	out	0x3b, r0	; 59
    2f56:	0f 90       	pop	r0
    2f58:	0f be       	out	0x3f, r0	; 63
    2f5a:	0f 90       	pop	r0
    2f5c:	1f 90       	pop	r1
    2f5e:	18 95       	reti

00002f60 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    2f60:	1f 92       	push	r1
    2f62:	0f 92       	push	r0
    2f64:	0f b6       	in	r0, 0x3f	; 63
    2f66:	0f 92       	push	r0
    2f68:	11 24       	eor	r1, r1
    2f6a:	0b b6       	in	r0, 0x3b	; 59
    2f6c:	0f 92       	push	r0
    2f6e:	2f 93       	push	r18
    2f70:	3f 93       	push	r19
    2f72:	4f 93       	push	r20
    2f74:	5f 93       	push	r21
    2f76:	6f 93       	push	r22
    2f78:	7f 93       	push	r23
    2f7a:	8f 93       	push	r24
    2f7c:	9f 93       	push	r25
    2f7e:	af 93       	push	r26
    2f80:	bf 93       	push	r27
    2f82:	ef 93       	push	r30
    2f84:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    2f86:	e0 e4       	ldi	r30, 0x40	; 64
    2f88:	f2 e0       	ldi	r31, 0x02	; 2
    2f8a:	44 ad       	ldd	r20, Z+60	; 0x3c
    2f8c:	55 ad       	ldd	r21, Z+61	; 0x3d
    2f8e:	e0 91 1d 2a 	lds	r30, 0x2A1D
    2f92:	f0 91 1e 2a 	lds	r31, 0x2A1E
    2f96:	68 e0       	ldi	r22, 0x08	; 8
    2f98:	80 e4       	ldi	r24, 0x40	; 64
    2f9a:	92 e0       	ldi	r25, 0x02	; 2
    2f9c:	19 95       	eicall
}
    2f9e:	ff 91       	pop	r31
    2fa0:	ef 91       	pop	r30
    2fa2:	bf 91       	pop	r27
    2fa4:	af 91       	pop	r26
    2fa6:	9f 91       	pop	r25
    2fa8:	8f 91       	pop	r24
    2faa:	7f 91       	pop	r23
    2fac:	6f 91       	pop	r22
    2fae:	5f 91       	pop	r21
    2fb0:	4f 91       	pop	r20
    2fb2:	3f 91       	pop	r19
    2fb4:	2f 91       	pop	r18
    2fb6:	0f 90       	pop	r0
    2fb8:	0b be       	out	0x3b, r0	; 59
    2fba:	0f 90       	pop	r0
    2fbc:	0f be       	out	0x3f, r0	; 63
    2fbe:	0f 90       	pop	r0
    2fc0:	1f 90       	pop	r1
    2fc2:	18 95       	reti

00002fc4 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    2fc4:	df 92       	push	r13
    2fc6:	ef 92       	push	r14
    2fc8:	ff 92       	push	r15
    2fca:	0f 93       	push	r16
    2fcc:	1f 93       	push	r17
    2fce:	cf 93       	push	r28
    2fd0:	df 93       	push	r29
    2fd2:	ec 01       	movw	r28, r24
    2fd4:	8b 01       	movw	r16, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    2fd6:	c1 15       	cp	r28, r1
    2fd8:	82 e0       	ldi	r24, 0x02	; 2
    2fda:	d8 07       	cpc	r29, r24
    2fdc:	69 f4       	brne	.+26     	; 0x2ff8 <adc_write_configuration+0x34>
    2fde:	61 e2       	ldi	r22, 0x21	; 33
    2fe0:	70 e0       	ldi	r23, 0x00	; 0
    2fe2:	82 e0       	ldi	r24, 0x02	; 2
    2fe4:	f6 d0       	rcall	.+492    	; 0x31d2 <nvm_read_byte>
    2fe6:	d8 2e       	mov	r13, r24
    2fe8:	60 e2       	ldi	r22, 0x20	; 32
    2fea:	70 e0       	ldi	r23, 0x00	; 0
    2fec:	82 e0       	ldi	r24, 0x02	; 2
    2fee:	f1 d0       	rcall	.+482    	; 0x31d2 <nvm_read_byte>

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
		data <<= 8;
    2ff0:	fd 2c       	mov	r15, r13
    2ff2:	e1 2c       	mov	r14, r1
		data |= nvm_read_production_signature_row(ADCACAL0);
    2ff4:	e8 2a       	or	r14, r24
    2ff6:	11 c0       	rjmp	.+34     	; 0x301a <adc_write_configuration+0x56>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    2ff8:	c0 34       	cpi	r28, 0x40	; 64
    2ffa:	e2 e0       	ldi	r30, 0x02	; 2
    2ffc:	de 07       	cpc	r29, r30
    2ffe:	59 f5       	brne	.+86     	; 0x3056 <adc_write_configuration+0x92>
    3000:	65 e2       	ldi	r22, 0x25	; 37
    3002:	70 e0       	ldi	r23, 0x00	; 0
    3004:	82 e0       	ldi	r24, 0x02	; 2
    3006:	e5 d0       	rcall	.+458    	; 0x31d2 <nvm_read_byte>
    3008:	f8 2e       	mov	r15, r24
    300a:	64 e2       	ldi	r22, 0x24	; 36
    300c:	70 e0       	ldi	r23, 0x00	; 0
    300e:	82 e0       	ldi	r24, 0x02	; 2
    3010:	e0 d0       	rcall	.+448    	; 0x31d2 <nvm_read_byte>
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
		data <<= 8;
    3012:	3f 2d       	mov	r19, r15
    3014:	20 e0       	ldi	r18, 0x00	; 0
		data |= nvm_read_production_signature_row(ADCBCAL0);
    3016:	79 01       	movw	r14, r18
    3018:	e8 2a       	or	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    301a:	df b6       	in	r13, 0x3f	; 63
	cpu_irq_disable();
    301c:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    301e:	ce 01       	movw	r24, r28
    3020:	ec dd       	rcall	.-1064   	; 0x2bfa <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    3022:	28 81       	ld	r18, Y

	adc->CTRLA = ADC_FLUSH_bm;
    3024:	82 e0       	ldi	r24, 0x02	; 2
    3026:	88 83       	st	Y, r24
	adc->CAL = cal;
    3028:	ec 86       	std	Y+12, r14	; 0x0c
    302a:	fd 86       	std	Y+13, r15	; 0x0d
	adc->CMP = conf->cmp;
    302c:	f8 01       	movw	r30, r16
    302e:	85 81       	ldd	r24, Z+5	; 0x05
    3030:	96 81       	ldd	r25, Z+6	; 0x06
    3032:	88 8f       	std	Y+24, r24	; 0x18
    3034:	99 8f       	std	Y+25, r25	; 0x19
	adc->REFCTRL = conf->refctrl;
    3036:	82 81       	ldd	r24, Z+2	; 0x02
    3038:	8a 83       	std	Y+2, r24	; 0x02
	adc->PRESCALER = conf->prescaler;
    303a:	84 81       	ldd	r24, Z+4	; 0x04
    303c:	8c 83       	std	Y+4, r24	; 0x04
	adc->EVCTRL = conf->evctrl;
    303e:	83 81       	ldd	r24, Z+3	; 0x03
    3040:	8b 83       	std	Y+3, r24	; 0x03
	adc->CTRLB = conf->ctrlb;
    3042:	81 81       	ldd	r24, Z+1	; 0x01
    3044:	89 83       	std	Y+1, r24	; 0x01
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
	enable = adc->CTRLA & ADC_ENABLE_bm;
    3046:	82 2f       	mov	r24, r18
    3048:	81 70       	andi	r24, 0x01	; 1
	adc->REFCTRL = conf->refctrl;
	adc->PRESCALER = conf->prescaler;
	adc->EVCTRL = conf->evctrl;
	adc->CTRLB = conf->ctrlb;

	adc->CTRLA = enable | conf->ctrla;
    304a:	90 81       	ld	r25, Z
    304c:	89 2b       	or	r24, r25
    304e:	88 83       	st	Y, r24

	adc_disable_clock(adc);
    3050:	ce 01       	movw	r24, r28
    3052:	f3 dd       	rcall	.-1050   	; 0x2c3a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3054:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    3056:	df 91       	pop	r29
    3058:	cf 91       	pop	r28
    305a:	1f 91       	pop	r17
    305c:	0f 91       	pop	r16
    305e:	ff 90       	pop	r15
    3060:	ef 90       	pop	r14
    3062:	df 90       	pop	r13
    3064:	08 95       	ret

00003066 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    3066:	ff 92       	push	r15
    3068:	0f 93       	push	r16
    306a:	1f 93       	push	r17
    306c:	cf 93       	push	r28
    306e:	df 93       	push	r29
    3070:	ec 01       	movw	r28, r24
    3072:	8b 01       	movw	r16, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3074:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    3076:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    3078:	c0 dd       	rcall	.-1152   	; 0x2bfa <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    307a:	88 81       	ld	r24, Y
    307c:	80 7c       	andi	r24, 0xC0	; 192
    307e:	f8 01       	movw	r30, r16
    3080:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    3082:	88 8d       	ldd	r24, Y+24	; 0x18
    3084:	99 8d       	ldd	r25, Y+25	; 0x19
    3086:	85 83       	std	Z+5, r24	; 0x05
    3088:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    308a:	8a 81       	ldd	r24, Y+2	; 0x02
    308c:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    308e:	8c 81       	ldd	r24, Y+4	; 0x04
    3090:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    3092:	8b 81       	ldd	r24, Y+3	; 0x03
    3094:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    3096:	89 81       	ldd	r24, Y+1	; 0x01
    3098:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
    309a:	ce 01       	movw	r24, r28
    309c:	ce dd       	rcall	.-1124   	; 0x2c3a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    309e:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    30a0:	df 91       	pop	r29
    30a2:	cf 91       	pop	r28
    30a4:	1f 91       	pop	r17
    30a6:	0f 91       	pop	r16
    30a8:	ff 90       	pop	r15
    30aa:	08 95       	ret

000030ac <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    30ac:	cf 92       	push	r12
    30ae:	df 92       	push	r13
    30b0:	ef 92       	push	r14
    30b2:	ff 92       	push	r15
    30b4:	0f 93       	push	r16
    30b6:	1f 93       	push	r17
    30b8:	cf 93       	push	r28
    30ba:	df 93       	push	r29
    30bc:	7c 01       	movw	r14, r24
    30be:	d6 2e       	mov	r13, r22
    30c0:	8a 01       	movw	r16, r20
		ch_mask >>= 4;
	}

#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    30c2:	86 2f       	mov	r24, r22
    30c4:	83 70       	andi	r24, 0x03	; 3
    30c6:	29 f4       	brne	.+10     	; 0x30d2 <adcch_write_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
    30c8:	96 2f       	mov	r25, r22
    30ca:	96 95       	lsr	r25
    30cc:	96 95       	lsr	r25
	}

#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    30ce:	82 e0       	ldi	r24, 0x02	; 2
    30d0:	02 c0       	rjmp	.+4      	; 0x30d6 <adcch_write_configuration+0x2a>
		ch_mask >>= 4;
	}

#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    30d2:	96 2f       	mov	r25, r22
 */
__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask);

__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    30d4:	80 e0       	ldi	r24, 0x00	; 0
		ch_mask >>= 2;
	}

#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    30d6:	90 ff       	sbrs	r25, 0
		index++;
    30d8:	8f 5f       	subi	r24, 0xFF	; 255
	}

#endif

	return (ADC_CH_tmpfix_t *)(&adc->CH0 + index);
    30da:	e7 01       	movw	r28, r14
    30dc:	a0 96       	adiw	r28, 0x20	; 32
    30de:	98 e0       	ldi	r25, 0x08	; 8
    30e0:	89 9f       	mul	r24, r25
    30e2:	c0 0d       	add	r28, r0
    30e4:	d1 1d       	adc	r29, r1
    30e6:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    30e8:	cf b6       	in	r12, 0x3f	; 63
	cpu_irq_disable();
    30ea:	f8 94       	cli
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    30ec:	c7 01       	movw	r24, r14
    30ee:	85 dd       	rcall	.-1270   	; 0x2bfa <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    30f0:	f8 01       	movw	r30, r16
    30f2:	80 81       	ld	r24, Z
    30f4:	88 83       	st	Y, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    30f6:	82 81       	ldd	r24, Z+2	; 0x02
    30f8:	8a 83       	std	Y+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    30fa:	81 81       	ldd	r24, Z+1	; 0x01
    30fc:	89 83       	std	Y+1, r24	; 0x01
#if CONFIG_ADC_VERSION == 2
	if (ch_mask & ADC_CH0) {
    30fe:	d0 fe       	sbrs	r13, 0
    3100:	02 c0       	rjmp	.+4      	; 0x3106 <adcch_write_configuration+0x5a>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    3102:	83 81       	ldd	r24, Z+3	; 0x03
    3104:	8e 83       	std	Y+6, r24	; 0x06
	}
#endif
	adc_disable_clock(adc);
    3106:	c7 01       	movw	r24, r14
    3108:	98 dd       	rcall	.-1232   	; 0x2c3a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    310a:	cf be       	out	0x3f, r12	; 63

	cpu_irq_restore(flags);
}
    310c:	df 91       	pop	r29
    310e:	cf 91       	pop	r28
    3110:	1f 91       	pop	r17
    3112:	0f 91       	pop	r16
    3114:	ff 90       	pop	r15
    3116:	ef 90       	pop	r14
    3118:	df 90       	pop	r13
    311a:	cf 90       	pop	r12
    311c:	08 95       	ret

0000311e <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    311e:	cf 92       	push	r12
    3120:	df 92       	push	r13
    3122:	ef 92       	push	r14
    3124:	ff 92       	push	r15
    3126:	0f 93       	push	r16
    3128:	1f 93       	push	r17
    312a:	cf 93       	push	r28
    312c:	df 93       	push	r29
    312e:	7c 01       	movw	r14, r24
    3130:	d6 2e       	mov	r13, r22
    3132:	ea 01       	movw	r28, r20
		ch_mask >>= 4;
	}

#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    3134:	86 2f       	mov	r24, r22
    3136:	83 70       	andi	r24, 0x03	; 3
    3138:	29 f4       	brne	.+10     	; 0x3144 <adcch_read_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
    313a:	96 2f       	mov	r25, r22
    313c:	96 95       	lsr	r25
    313e:	96 95       	lsr	r25
	}

#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    3140:	82 e0       	ldi	r24, 0x02	; 2
    3142:	02 c0       	rjmp	.+4      	; 0x3148 <adcch_read_configuration+0x2a>
		ch_mask >>= 4;
	}

#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    3144:	96 2f       	mov	r25, r22
 */
__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask);

__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    3146:	80 e0       	ldi	r24, 0x00	; 0
		ch_mask >>= 2;
	}

#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    3148:	90 ff       	sbrs	r25, 0
		index++;
    314a:	8f 5f       	subi	r24, 0xFF	; 255
	}

#endif

	return (ADC_CH_tmpfix_t *)(&adc->CH0 + index);
    314c:	87 01       	movw	r16, r14
    314e:	00 5e       	subi	r16, 0xE0	; 224
    3150:	1f 4f       	sbci	r17, 0xFF	; 255
    3152:	98 e0       	ldi	r25, 0x08	; 8
    3154:	89 9f       	mul	r24, r25
    3156:	00 0d       	add	r16, r0
    3158:	11 1d       	adc	r17, r1
    315a:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    315c:	cf b6       	in	r12, 0x3f	; 63
	cpu_irq_disable();
    315e:	f8 94       	cli

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    3160:	c7 01       	movw	r24, r14
    3162:	4b dd       	rcall	.-1386   	; 0x2bfa <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    3164:	f8 01       	movw	r30, r16
    3166:	80 81       	ld	r24, Z
    3168:	88 83       	st	Y, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    316a:	82 81       	ldd	r24, Z+2	; 0x02
    316c:	8a 83       	std	Y+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    316e:	81 81       	ldd	r24, Z+1	; 0x01
    3170:	89 83       	std	Y+1, r24	; 0x01
#if CONFIG_ADC_VERSION == 2
	if (ch_mask & ADC_CH0) {
    3172:	d0 fe       	sbrs	r13, 0
    3174:	02 c0       	rjmp	.+4      	; 0x317a <adcch_read_configuration+0x5c>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    3176:	86 81       	ldd	r24, Z+6	; 0x06
    3178:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
	adc_disable_clock(adc);
    317a:	c7 01       	movw	r24, r14
    317c:	5e dd       	rcall	.-1348   	; 0x2c3a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    317e:	cf be       	out	0x3f, r12	; 63

	cpu_irq_restore(flags);
}
    3180:	df 91       	pop	r29
    3182:	cf 91       	pop	r28
    3184:	1f 91       	pop	r17
    3186:	0f 91       	pop	r16
    3188:	ff 90       	pop	r15
    318a:	ef 90       	pop	r14
    318c:	df 90       	pop	r13
    318e:	cf 90       	pop	r12
    3190:	08 95       	ret

00003192 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    3192:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    3194:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    3196:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    3198:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    319a:	60 83       	st	Z, r22
	ret                             // Return to caller
    319c:	08 95       	ret

0000319e <nvm_eeprom_read_byte>:
 * \param  addr       EEPROM address, between 0 and EEPROM_SIZE
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t nvm_eeprom_read_byte(eeprom_addr_t addr)
{
    319e:	1f 93       	push	r17
    31a0:	cf 93       	push	r28
    31a2:	df 93       	push	r29
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    31a4:	e0 ec       	ldi	r30, 0xC0	; 192
    31a6:	f1 e0       	ldi	r31, 0x01	; 1
    31a8:	27 85       	ldd	r18, Z+15	; 0x0f
    31aa:	22 23       	and	r18, r18
    31ac:	ec f3       	brlt	.-6      	; 0x31a8 <nvm_eeprom_read_byte+0xa>

	/* Wait until NVM is ready */
	nvm_wait_until_ready();

	/* Set address to read from */
	NVM.ADDR2 = 0x00;
    31ae:	c0 ec       	ldi	r28, 0xC0	; 192
    31b0:	d1 e0       	ldi	r29, 0x01	; 1
    31b2:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (addr >> 8) & 0xFF;
    31b4:	99 83       	std	Y+1, r25	; 0x01
	NVM.ADDR0 = addr & 0xFF;
    31b6:	88 83       	st	Y, r24
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
    31b8:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    31ba:	86 e0       	ldi	r24, 0x06	; 6
    31bc:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    31be:	61 e0       	ldi	r22, 0x01	; 1
    31c0:	8b ec       	ldi	r24, 0xCB	; 203
    31c2:	91 e0       	ldi	r25, 0x01	; 1
    31c4:	e6 df       	rcall	.-52     	; 0x3192 <ccp_write_io>
	NVM.CMD = old_cmd;
    31c6:	1a 87       	std	Y+10, r17	; 0x0a

	/* Issue EEPROM Read command */
	nvm_issue_command(NVM_CMD_READ_EEPROM_gc);

	return NVM.DATA0;
    31c8:	8c 81       	ldd	r24, Y+4	; 0x04
}
    31ca:	df 91       	pop	r29
    31cc:	cf 91       	pop	r28
    31ce:	1f 91       	pop	r17
    31d0:	08 95       	ret

000031d2 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    31d2:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    31d6:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    31d8:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    31da:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    31de:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    31e0:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    31e4:	08 95       	ret

000031e6 <rtc_set_time>:
 *
 * \param callback Callback function pointer
 */
void rtc_set_callback(rtc_callback_t callback)
{
	rtc_data.callback = callback;
    31e6:	10 92 20 04 	sts	0x0420, r1
    31ea:	e0 e2       	ldi	r30, 0x20	; 32
    31ec:	f4 e0       	ldi	r31, 0x04	; 4
    31ee:	21 81       	ldd	r18, Z+1	; 0x01
    31f0:	20 fd       	sbrc	r18, 0
    31f2:	fd cf       	rjmp	.-6      	; 0x31ee <rtc_set_time+0x8>
    31f4:	e0 e2       	ldi	r30, 0x20	; 32
    31f6:	f4 e0       	ldi	r31, 0x04	; 4
    31f8:	64 83       	std	Z+4, r22	; 0x04
    31fa:	75 83       	std	Z+5, r23	; 0x05
    31fc:	86 83       	std	Z+6, r24	; 0x06
    31fe:	97 83       	std	Z+7, r25	; 0x07
    3200:	81 e0       	ldi	r24, 0x01	; 1
    3202:	80 83       	st	Z, r24
    3204:	08 95       	ret

00003206 <rtc_get_time>:
    3206:	0f 93       	push	r16
    3208:	1f 93       	push	r17
    320a:	80 e1       	ldi	r24, 0x10	; 16
    320c:	e0 e2       	ldi	r30, 0x20	; 32
    320e:	f4 e0       	ldi	r31, 0x04	; 4
    3210:	81 83       	std	Z+1, r24	; 0x01
    3212:	81 81       	ldd	r24, Z+1	; 0x01
    3214:	84 fd       	sbrc	r24, 4
    3216:	fd cf       	rjmp	.-6      	; 0x3212 <rtc_get_time+0xc>
    3218:	e0 e2       	ldi	r30, 0x20	; 32
    321a:	f4 e0       	ldi	r31, 0x04	; 4
    321c:	04 81       	ldd	r16, Z+4	; 0x04
    321e:	15 81       	ldd	r17, Z+5	; 0x05
    3220:	26 81       	ldd	r18, Z+6	; 0x06
    3222:	37 81       	ldd	r19, Z+7	; 0x07
    3224:	60 2f       	mov	r22, r16
    3226:	71 2f       	mov	r23, r17
    3228:	82 2f       	mov	r24, r18
    322a:	93 2f       	mov	r25, r19
    322c:	1f 91       	pop	r17
    322e:	0f 91       	pop	r16
    3230:	08 95       	ret

00003232 <rtc_vbat_system_check>:
 * when main system power is lost.
 *
 * \returns Battery backup system status.
 */
enum vbat_status_code rtc_vbat_system_check(bool first_time_startup)
{
    3232:	cf 93       	push	r28
    3234:	df 93       	push	r29
    3236:	d8 2f       	mov	r29, r24
	enum vbat_status_code vbat_status;
	uint8_t flags = VBAT.STATUS;
    3238:	e0 ef       	ldi	r30, 0xF0	; 240
    323a:	f0 e0       	ldi	r31, 0x00	; 0
    323c:	c1 81       	ldd	r28, Z+1	; 0x01

	/* Ensure the module is clocked to be able to check the registers */
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    323e:	64 e0       	ldi	r22, 0x04	; 4
    3240:	80 e0       	ldi	r24, 0x00	; 0
    3242:	0e 94 86 0a 	call	0x150c	; 0x150c <sysclk_enable_module>
	/*
	 * Check if a sufficient voltage was detected on the VBAT input.
	 * The brown-out detector (BBBOD) will be sampled once when the
	 * device starts up and the result is visible as the BBPWR flag.
	 */
	if (flags & VBAT_BBPWR_bm) {
    3246:	cc 23       	and	r28, r28
    3248:	7c f0       	brlt	.+30     	; 0x3268 <rtc_vbat_system_check+0x36>
		/*
		 * We have sufficient power, now we check if a power-on-reset
		 * (BBPOR) was detected on VBAT. This is visible from the BBPORF
		 * flag which is also only updated once when the device starts.
		 */
		if (flags & VBAT_BBPORF_bm) {
    324a:	c0 ff       	sbrs	r28, 0
    324c:	04 c0       	rjmp	.+8      	; 0x3256 <rtc_vbat_system_check+0x24>
			if (first_time_startup) {
    324e:	dd 23       	and	r29, r29
    3250:	69 f0       	breq	.+26     	; 0x326c <rtc_vbat_system_check+0x3a>
				vbat_status = VBAT_STATUS_INIT;
    3252:	82 e0       	ldi	r24, 0x02	; 2
    3254:	10 c0       	rjmp	.+32     	; 0x3276 <rtc_vbat_system_check+0x44>
			} else {
				vbat_status = VBAT_STATUS_BBPOR;
			}
		} else if (flags & VBAT_BBBORF_bm) {
    3256:	c1 fd       	sbrc	r28, 1
    3258:	0b c0       	rjmp	.+22     	; 0x3270 <rtc_vbat_system_check+0x3e>
			vbat_status = VBAT_STATUS_BBBOD;
		} else {
			VBAT.CTRL = VBAT_ACCEN_bm;
    325a:	82 e0       	ldi	r24, 0x02	; 2
    325c:	80 93 f0 00 	sts	0x00F0, r24
			if (flags & VBAT_XOSCFAIL_bm) {
    3260:	c2 ff       	sbrs	r28, 2
    3262:	08 c0       	rjmp	.+16     	; 0x3274 <rtc_vbat_system_check+0x42>
				vbat_status = VBAT_STATUS_XOSCFAIL;
    3264:	85 e0       	ldi	r24, 0x05	; 5
    3266:	07 c0       	rjmp	.+14     	; 0x3276 <rtc_vbat_system_check+0x44>
	 * Check if a sufficient voltage was detected on the VBAT input.
	 * The brown-out detector (BBBOD) will be sampled once when the
	 * device starts up and the result is visible as the BBPWR flag.
	 */
	if (flags & VBAT_BBPWR_bm) {
		vbat_status = VBAT_STATUS_NO_POWER;
    3268:	81 e0       	ldi	r24, 0x01	; 1
    326a:	05 c0       	rjmp	.+10     	; 0x3276 <rtc_vbat_system_check+0x44>
		 */
		if (flags & VBAT_BBPORF_bm) {
			if (first_time_startup) {
				vbat_status = VBAT_STATUS_INIT;
			} else {
				vbat_status = VBAT_STATUS_BBPOR;
    326c:	83 e0       	ldi	r24, 0x03	; 3
    326e:	03 c0       	rjmp	.+6      	; 0x3276 <rtc_vbat_system_check+0x44>
			}
		} else if (flags & VBAT_BBBORF_bm) {
			vbat_status = VBAT_STATUS_BBBOD;
    3270:	84 e0       	ldi	r24, 0x04	; 4
    3272:	01 c0       	rjmp	.+2      	; 0x3276 <rtc_vbat_system_check+0x44>
		} else {
			VBAT.CTRL = VBAT_ACCEN_bm;
			if (flags & VBAT_XOSCFAIL_bm) {
				vbat_status = VBAT_STATUS_XOSCFAIL;
			} else {
				vbat_status = VBAT_STATUS_OK;
    3274:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
	return vbat_status;
}
    3276:	df 91       	pop	r29
    3278:	cf 91       	pop	r28
    327a:	08 95       	ret

0000327c <rtc_init>:
 * \note When the backup system is used, the function \ref
 * rtc_vbat_system_check should be called to determine if a re-initialization
 * must be done.
 */
void rtc_init(void)
{
    327c:	cf 93       	push	r28
    327e:	df 93       	push	r29
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    3280:	64 e0       	ldi	r22, 0x04	; 4
    3282:	80 e0       	ldi	r24, 0x00	; 0
    3284:	0e 94 86 0a 	call	0x150c	; 0x150c <sysclk_enable_module>
 * \ref CONFIG_RTC32_CLOCK_1024HZ.
 */
static void vbat_init(void)
{
	// Enable access to VBAT
	VBAT.CTRL |= VBAT_ACCEN_bm;
    3288:	c0 ef       	ldi	r28, 0xF0	; 240
    328a:	d0 e0       	ldi	r29, 0x00	; 0
    328c:	88 81       	ld	r24, Y
    328e:	82 60       	ori	r24, 0x02	; 2
    3290:	88 83       	st	Y, r24

	ccp_write_io((void *)&VBAT.CTRL, VBAT_RESET_bm);
    3292:	61 e0       	ldi	r22, 0x01	; 1
    3294:	80 ef       	ldi	r24, 0xF0	; 240
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	7c df       	rcall	.-264    	; 0x3192 <ccp_write_io>

	VBAT.CTRL |= VBAT_XOSCFDEN_bm;
    329a:	88 81       	ld	r24, Y
    329c:	84 60       	ori	r24, 0x04	; 4
    329e:	88 83       	st	Y, r24
    32a0:	80 e0       	ldi	r24, 0x00	; 0
    32a2:	90 e0       	ldi	r25, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    32a4:	01 96       	adiw	r24, 0x01	; 1
    32a6:	80 32       	cpi	r24, 0x20	; 32
    32a8:	23 e0       	ldi	r18, 0x03	; 3
    32aa:	92 07       	cpc	r25, r18
    32ac:	d9 f7       	brne	.-10     	; 0x32a4 <rtc_init+0x28>
	/* This delay is needed to give the voltage in the backup system some
	* time to stabilize before we turn on the oscillator. If we do not
	* have this delay we may get a failure detection.
	*/
	delay_us(200);
	VBAT.CTRL |= VBAT_XOSCEN_bm | RTC32_CLOCK;
    32ae:	e0 ef       	ldi	r30, 0xF0	; 240
    32b0:	f0 e0       	ldi	r31, 0x00	; 0
    32b2:	80 81       	ld	r24, Z
    32b4:	88 60       	ori	r24, 0x08	; 8
    32b6:	80 83       	st	Z, r24
	while (!(VBAT.STATUS & VBAT_XOSCRDY_bm));
    32b8:	81 81       	ldd	r24, Z+1	; 0x01
    32ba:	83 ff       	sbrs	r24, 3
    32bc:	fd cf       	rjmp	.-6      	; 0x32b8 <rtc_init+0x3c>
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	// Set up VBAT system and start oscillator
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;
    32be:	10 92 20 04 	sts	0x0420, r1
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    32c2:	e0 e2       	ldi	r30, 0x20	; 32
    32c4:	f4 e0       	ldi	r31, 0x04	; 4
    32c6:	81 81       	ldd	r24, Z+1	; 0x01
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;

	while (rtc_is_busy());
    32c8:	80 fd       	sbrc	r24, 0
    32ca:	fd cf       	rjmp	.-6      	; 0x32c6 <rtc_init+0x4a>

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
    32cc:	e0 e2       	ldi	r30, 0x20	; 32
    32ce:	f4 e0       	ldi	r31, 0x04	; 4
    32d0:	8f ef       	ldi	r24, 0xFF	; 255
    32d2:	9f ef       	ldi	r25, 0xFF	; 255
    32d4:	dc 01       	movw	r26, r24
    32d6:	80 87       	std	Z+8, r24	; 0x08
    32d8:	91 87       	std	Z+9, r25	; 0x09
    32da:	a2 87       	std	Z+10, r26	; 0x0a
    32dc:	b3 87       	std	Z+11, r27	; 0x0b
	RTC32.CNT = 0;
    32de:	14 82       	std	Z+4, r1	; 0x04
    32e0:	15 82       	std	Z+5, r1	; 0x05
    32e2:	16 82       	std	Z+6, r1	; 0x06
    32e4:	17 82       	std	Z+7, r1	; 0x07
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    32e6:	81 81       	ldd	r24, Z+1	; 0x01

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
	RTC32.CNT = 0;

	while (rtc_is_busy());
    32e8:	80 fd       	sbrc	r24, 0
    32ea:	fd cf       	rjmp	.-6      	; 0x32e6 <rtc_init+0x6a>

	RTC32.INTCTRL = 0;
    32ec:	e0 e2       	ldi	r30, 0x20	; 32
    32ee:	f4 e0       	ldi	r31, 0x04	; 4
    32f0:	12 82       	std	Z+2, r1	; 0x02
	RTC32.CTRL = RTC32_ENABLE_bm;
    32f2:	81 e0       	ldi	r24, 0x01	; 1
    32f4:	80 83       	st	Z, r24
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    32f6:	81 81       	ldd	r24, Z+1	; 0x01

	RTC32.INTCTRL = 0;
	RTC32.CTRL = RTC32_ENABLE_bm;

	// Make sure it's sync'ed before return
	while (rtc_is_busy());
    32f8:	80 fd       	sbrc	r24, 0
    32fa:	fd cf       	rjmp	.-6      	; 0x32f6 <rtc_init+0x7a>
}
    32fc:	df 91       	pop	r29
    32fe:	cf 91       	pop	r28
    3300:	08 95       	ret

00003302 <__vector_11>:
 *
 * Disables the RTC32 interrupts, then calls the alarm callback function if one
 * has been set.
 */
ISR(RTC32_COMP_vect)
{
    3302:	1f 92       	push	r1
    3304:	0f 92       	push	r0
    3306:	0f b6       	in	r0, 0x3f	; 63
    3308:	0f 92       	push	r0
    330a:	11 24       	eor	r1, r1
    330c:	0b b6       	in	r0, 0x3b	; 59
    330e:	0f 92       	push	r0
    3310:	2f 93       	push	r18
    3312:	3f 93       	push	r19
    3314:	4f 93       	push	r20
    3316:	5f 93       	push	r21
    3318:	6f 93       	push	r22
    331a:	7f 93       	push	r23
    331c:	8f 93       	push	r24
    331e:	9f 93       	push	r25
    3320:	af 93       	push	r26
    3322:	bf 93       	push	r27
    3324:	cf 93       	push	r28
    3326:	df 93       	push	r29
    3328:	ef 93       	push	r30
    332a:	ff 93       	push	r31
	RTC32.INTCTRL = 0;
    332c:	e0 e2       	ldi	r30, 0x20	; 32
    332e:	f4 e0       	ldi	r31, 0x04	; 4
    3330:	12 82       	std	Z+2, r1	; 0x02
	if (rtc_data.callback)
    3332:	c0 91 21 2a 	lds	r28, 0x2A21
    3336:	d0 91 22 2a 	lds	r29, 0x2A22
    333a:	20 97       	sbiw	r28, 0x00	; 0
    333c:	19 f0       	breq	.+6      	; 0x3344 <__vector_11+0x42>
		rtc_data.callback(rtc_get_time());
    333e:	63 df       	rcall	.-314    	; 0x3206 <rtc_get_time>
    3340:	fe 01       	movw	r30, r28
    3342:	19 95       	eicall
}
    3344:	ff 91       	pop	r31
    3346:	ef 91       	pop	r30
    3348:	df 91       	pop	r29
    334a:	cf 91       	pop	r28
    334c:	bf 91       	pop	r27
    334e:	af 91       	pop	r26
    3350:	9f 91       	pop	r25
    3352:	8f 91       	pop	r24
    3354:	7f 91       	pop	r23
    3356:	6f 91       	pop	r22
    3358:	5f 91       	pop	r21
    335a:	4f 91       	pop	r20
    335c:	3f 91       	pop	r19
    335e:	2f 91       	pop	r18
    3360:	0f 90       	pop	r0
    3362:	0b be       	out	0x3b, r0	; 59
    3364:	0f 90       	pop	r0
    3366:	0f be       	out	0x3f, r0	; 63
    3368:	0f 90       	pop	r0
    336a:	1f 90       	pop	r1
    336c:	18 95       	reti

0000336e <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    336e:	cf 92       	push	r12
    3370:	df 92       	push	r13
    3372:	ef 92       	push	r14
    3374:	ff 92       	push	r15
    3376:	0f 93       	push	r16
    3378:	1f 93       	push	r17
    337a:	cf 93       	push	r28
    337c:	df 93       	push	r29
    337e:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
    3380:	d9 01       	movw	r26, r18
    3382:	c8 01       	movw	r24, r16
    3384:	b6 95       	lsr	r27
    3386:	a7 95       	ror	r26
    3388:	97 95       	ror	r25
    338a:	87 95       	ror	r24
    338c:	48 17       	cp	r20, r24
    338e:	59 07       	cpc	r21, r25
    3390:	6a 07       	cpc	r22, r26
    3392:	7b 07       	cpc	r23, r27
    3394:	78 f4       	brcc	.+30     	; 0x33b4 <usart_spi_set_baudrate+0x46>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
    3396:	6a 01       	movw	r12, r20
    3398:	7b 01       	movw	r14, r22
    339a:	cc 0c       	add	r12, r12
    339c:	dd 1c       	adc	r13, r13
    339e:	ee 1c       	adc	r14, r14
    33a0:	ff 1c       	adc	r15, r15
    33a2:	c9 01       	movw	r24, r18
    33a4:	b8 01       	movw	r22, r16
    33a6:	a7 01       	movw	r20, r14
    33a8:	96 01       	movw	r18, r12
    33aa:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <__udivmodsi4>
    33ae:	21 50       	subi	r18, 0x01	; 1
    33b0:	31 09       	sbc	r19, r1
    33b2:	02 c0       	rjmp	.+4      	; 0x33b8 <usart_spi_set_baudrate+0x4a>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
    33b4:	20 e0       	ldi	r18, 0x00	; 0
    33b6:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
    33b8:	83 2f       	mov	r24, r19
    33ba:	99 27       	eor	r25, r25
    33bc:	8f 70       	andi	r24, 0x0F	; 15
    33be:	99 27       	eor	r25, r25
    33c0:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
    33c2:	2e 83       	std	Y+6, r18	; 0x06
}
    33c4:	df 91       	pop	r29
    33c6:	cf 91       	pop	r28
    33c8:	1f 91       	pop	r17
    33ca:	0f 91       	pop	r16
    33cc:	ff 90       	pop	r15
    33ce:	ef 90       	pop	r14
    33d0:	df 90       	pop	r13
    33d2:	cf 90       	pop	r12
    33d4:	08 95       	ret

000033d6 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    33d6:	0f 93       	push	r16
    33d8:	1f 93       	push	r17
    33da:	cf 93       	push	r28
    33dc:	df 93       	push	r29
    33de:	ec 01       	movw	r28, r24
    33e0:	8b 01       	movw	r16, r22
 * \brief usart Pointer to an USART module.
 */
static inline void usart_enable_module_clock(USART_t *usart)
{
#ifdef USARTC0
	if ((uintptr_t)usart == (uintptr_t)&USARTC0) {
    33e2:	c0 3a       	cpi	r28, 0xA0	; 160
    33e4:	88 e0       	ldi	r24, 0x08	; 8
    33e6:	d8 07       	cpc	r29, r24
    33e8:	29 f4       	brne	.+10     	; 0x33f4 <usart_init_spi+0x1e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    33ea:	60 e1       	ldi	r22, 0x10	; 16
    33ec:	83 e0       	ldi	r24, 0x03	; 3
    33ee:	0e 94 86 0a 	call	0x150c	; 0x150c <sysclk_enable_module>
    33f2:	12 c0       	rjmp	.+36     	; 0x3418 <usart_init_spi+0x42>
	}
#endif
#ifdef USARTC1
	if ((uintptr_t)usart == (uintptr_t)&USARTC1) {
    33f4:	c0 3b       	cpi	r28, 0xB0	; 176
    33f6:	e8 e0       	ldi	r30, 0x08	; 8
    33f8:	de 07       	cpc	r29, r30
    33fa:	29 f4       	brne	.+10     	; 0x3406 <usart_init_spi+0x30>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    33fc:	60 e2       	ldi	r22, 0x20	; 32
    33fe:	83 e0       	ldi	r24, 0x03	; 3
    3400:	0e 94 86 0a 	call	0x150c	; 0x150c <sysclk_enable_module>
    3404:	12 c0       	rjmp	.+36     	; 0x342a <usart_init_spi+0x54>
	}
#endif
#ifdef USARTD0
	if ((uintptr_t)usart == (uintptr_t)&USARTD0) {
    3406:	c0 3a       	cpi	r28, 0xA0	; 160
    3408:	f9 e0       	ldi	r31, 0x09	; 9
    340a:	df 07       	cpc	r29, r31
    340c:	29 f4       	brne	.+10     	; 0x3418 <usart_init_spi+0x42>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    340e:	60 e1       	ldi	r22, 0x10	; 16
    3410:	84 e0       	ldi	r24, 0x04	; 4
    3412:	0e 94 86 0a 	call	0x150c	; 0x150c <sysclk_enable_module>
    3416:	12 c0       	rjmp	.+36     	; 0x343c <usart_init_spi+0x66>
	}
#endif
#ifdef USARTD1
	if ((uintptr_t)usart == (uintptr_t)&USARTD1) {
    3418:	c0 3b       	cpi	r28, 0xB0	; 176
    341a:	89 e0       	ldi	r24, 0x09	; 9
    341c:	d8 07       	cpc	r29, r24
    341e:	29 f4       	brne	.+10     	; 0x342a <usart_init_spi+0x54>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    3420:	60 e2       	ldi	r22, 0x20	; 32
    3422:	84 e0       	ldi	r24, 0x04	; 4
    3424:	0e 94 86 0a 	call	0x150c	; 0x150c <sysclk_enable_module>
    3428:	11 c0       	rjmp	.+34     	; 0x344c <usart_init_spi+0x76>
	}
#endif
#ifdef USARTE0
	if ((uintptr_t)usart == (uintptr_t)&USARTE0) {
    342a:	c0 3a       	cpi	r28, 0xA0	; 160
    342c:	ea e0       	ldi	r30, 0x0A	; 10
    342e:	de 07       	cpc	r29, r30
    3430:	29 f4       	brne	.+10     	; 0x343c <usart_init_spi+0x66>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    3432:	60 e1       	ldi	r22, 0x10	; 16
    3434:	85 e0       	ldi	r24, 0x05	; 5
    3436:	0e 94 86 0a 	call	0x150c	; 0x150c <sysclk_enable_module>
    343a:	08 c0       	rjmp	.+16     	; 0x344c <usart_init_spi+0x76>
	if ((uintptr_t)usart == (uintptr_t)&USARTE1) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
	}
#endif
#ifdef USARTF0
	if ((uintptr_t)usart == (uintptr_t)&USARTF0) {
    343c:	c0 3a       	cpi	r28, 0xA0	; 160
    343e:	fb e0       	ldi	r31, 0x0B	; 11
    3440:	df 07       	cpc	r29, r31
    3442:	21 f4       	brne	.+8      	; 0x344c <usart_init_spi+0x76>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    3444:	60 e1       	ldi	r22, 0x10	; 16
    3446:	86 e0       	ldi	r24, 0x06	; 6
    3448:	0e 94 86 0a 	call	0x150c	; 0x150c <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    344c:	8d 81       	ldd	r24, Y+5	; 0x05
    344e:	80 6c       	ori	r24, 0xC0	; 192
    3450:	8d 83       	std	Y+5, r24	; 0x05
{
	usart_enable_module_clock(usart);
	usart_set_mode(usart, USART_CMODE_MSPI_gc);
	port_pin_t sck_pin;

	if (opt->spimode == 1 || opt->spimode == 3) {
    3452:	f8 01       	movw	r30, r16
    3454:	84 81       	ldd	r24, Z+4	; 0x04
    3456:	81 30       	cpi	r24, 0x01	; 1
    3458:	11 f0       	breq	.+4      	; 0x345e <usart_init_spi+0x88>
    345a:	83 30       	cpi	r24, 0x03	; 3
    345c:	21 f4       	brne	.+8      	; 0x3466 <usart_init_spi+0x90>
		/** \todo Fix when UCPHA_bm is added to header file. */
		usart->CTRLC |= 0x02;
    345e:	8d 81       	ldd	r24, Y+5	; 0x05
    3460:	82 60       	ori	r24, 0x02	; 2
    3462:	8d 83       	std	Y+5, r24	; 0x05
    3464:	03 c0       	rjmp	.+6      	; 0x346c <usart_init_spi+0x96>
	} else {
		/** \todo Fix when UCPHA_bm is added to header file. */
		usart->CTRLC &= ~0x02;
    3466:	8d 81       	ldd	r24, Y+5	; 0x05
    3468:	8d 7f       	andi	r24, 0xFD	; 253
    346a:	8d 83       	std	Y+5, r24	; 0x05
	}

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	if (opt->spimode == 2 || opt->spimode == 3) {
    346c:	f8 01       	movw	r30, r16
    346e:	84 81       	ldd	r24, Z+4	; 0x04
    3470:	82 50       	subi	r24, 0x02	; 2
    3472:	82 30       	cpi	r24, 0x02	; 2
    3474:	08 f0       	brcs	.+2      	; 0x3478 <usart_init_spi+0xa2>
    3476:	47 c0       	rjmp	.+142    	; 0x3506 <usart_init_spi+0x130>
#ifdef USARTC0
		if ((uint16_t)usart == (uint16_t)&USARTC0) {
    3478:	c0 3a       	cpi	r28, 0xA0	; 160
    347a:	f8 e0       	ldi	r31, 0x08	; 8
    347c:	df 07       	cpc	r29, r31
    347e:	41 f4       	brne	.+16     	; 0x3490 <usart_init_spi+0xba>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
			ioport_configure_port_pin(ioport_pin_to_port(sck_pin),
    3480:	43 e0       	ldi	r20, 0x03	; 3
    3482:	50 e4       	ldi	r21, 0x40	; 64
    3484:	62 e0       	ldi	r22, 0x02	; 2
    3486:	80 e4       	ldi	r24, 0x40	; 64
    3488:	96 e0       	ldi	r25, 0x06	; 6
    348a:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <ioport_configure_port_pin>
    348e:	18 c0       	rjmp	.+48     	; 0x34c0 <usart_init_spi+0xea>
					IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH |
					IOPORT_INV_ENABLED);
		}
#endif
#ifdef USARTC1
		if ((uint16_t)usart == (uint16_t)&USARTC1) {
    3490:	c0 3b       	cpi	r28, 0xB0	; 176
    3492:	88 e0       	ldi	r24, 0x08	; 8
    3494:	d8 07       	cpc	r29, r24
    3496:	41 f4       	brne	.+16     	; 0x34a8 <usart_init_spi+0xd2>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
			ioport_configure_port_pin(ioport_pin_to_port(sck_pin),
    3498:	43 e0       	ldi	r20, 0x03	; 3
    349a:	50 e4       	ldi	r21, 0x40	; 64
    349c:	60 e2       	ldi	r22, 0x20	; 32
    349e:	80 e4       	ldi	r24, 0x40	; 64
    34a0:	96 e0       	ldi	r25, 0x06	; 6
    34a2:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <ioport_configure_port_pin>
    34a6:	18 c0       	rjmp	.+48     	; 0x34d8 <usart_init_spi+0x102>
					IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH |
					IOPORT_INV_ENABLED);
		}
#endif
#ifdef USARTD0
		if ((uint16_t)usart == (uint16_t)&USARTD0) {
    34a8:	c0 3a       	cpi	r28, 0xA0	; 160
    34aa:	e9 e0       	ldi	r30, 0x09	; 9
    34ac:	de 07       	cpc	r29, r30
    34ae:	41 f4       	brne	.+16     	; 0x34c0 <usart_init_spi+0xea>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
			ioport_configure_port_pin(ioport_pin_to_port(sck_pin),
    34b0:	43 e0       	ldi	r20, 0x03	; 3
    34b2:	50 e4       	ldi	r21, 0x40	; 64
    34b4:	62 e0       	ldi	r22, 0x02	; 2
    34b6:	80 e6       	ldi	r24, 0x60	; 96
    34b8:	96 e0       	ldi	r25, 0x06	; 6
    34ba:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <ioport_configure_port_pin>
    34be:	18 c0       	rjmp	.+48     	; 0x34f0 <usart_init_spi+0x11a>
					IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH |
					IOPORT_INV_ENABLED);
		}
#endif
#ifdef USARTD1
		if ((uint16_t)usart == (uint16_t)&USARTD1) {
    34c0:	c0 3b       	cpi	r28, 0xB0	; 176
    34c2:	f9 e0       	ldi	r31, 0x09	; 9
    34c4:	df 07       	cpc	r29, r31
    34c6:	41 f4       	brne	.+16     	; 0x34d8 <usart_init_spi+0x102>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
			ioport_configure_port_pin(ioport_pin_to_port(sck_pin),
    34c8:	43 e0       	ldi	r20, 0x03	; 3
    34ca:	50 e4       	ldi	r21, 0x40	; 64
    34cc:	60 e2       	ldi	r22, 0x20	; 32
    34ce:	80 e6       	ldi	r24, 0x60	; 96
    34d0:	96 e0       	ldi	r25, 0x06	; 6
    34d2:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <ioport_configure_port_pin>
    34d6:	17 c0       	rjmp	.+46     	; 0x3506 <usart_init_spi+0x130>
					IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH |
					IOPORT_INV_ENABLED);
		}
#endif
#ifdef USARTE0
		if ((uint16_t)usart == (uint16_t)&USARTE0) {
    34d8:	c0 3a       	cpi	r28, 0xA0	; 160
    34da:	8a e0       	ldi	r24, 0x0A	; 10
    34dc:	d8 07       	cpc	r29, r24
    34de:	41 f4       	brne	.+16     	; 0x34f0 <usart_init_spi+0x11a>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
			ioport_configure_port_pin(ioport_pin_to_port(sck_pin),
    34e0:	43 e0       	ldi	r20, 0x03	; 3
    34e2:	50 e4       	ldi	r21, 0x40	; 64
    34e4:	62 e0       	ldi	r22, 0x02	; 2
    34e6:	80 e8       	ldi	r24, 0x80	; 128
    34e8:	96 e0       	ldi	r25, 0x06	; 6
    34ea:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <ioport_configure_port_pin>
    34ee:	0b c0       	rjmp	.+22     	; 0x3506 <usart_init_spi+0x130>
					IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH |
					IOPORT_INV_ENABLED);
		}
#endif
#ifdef USARTF0
		if ((uint16_t)usart == (uint16_t)&USARTF0) {
    34f0:	c0 3a       	cpi	r28, 0xA0	; 160
    34f2:	eb e0       	ldi	r30, 0x0B	; 11
    34f4:	de 07       	cpc	r29, r30
    34f6:	39 f4       	brne	.+14     	; 0x3506 <usart_init_spi+0x130>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
			ioport_configure_port_pin(ioport_pin_to_port(sck_pin),
    34f8:	43 e0       	ldi	r20, 0x03	; 3
    34fa:	50 e4       	ldi	r21, 0x40	; 64
    34fc:	62 e0       	ldi	r22, 0x02	; 2
    34fe:	80 ea       	ldi	r24, 0xA0	; 160
    3500:	96 e0       	ldi	r25, 0x06	; 6
    3502:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <ioport_configure_port_pin>
					IOPORT_INV_ENABLED);
		}
#endif
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    3506:	f8 01       	movw	r30, r16
    3508:	40 81       	ld	r20, Z
    350a:	51 81       	ldd	r21, Z+1	; 0x01
    350c:	62 81       	ldd	r22, Z+2	; 0x02
    350e:	73 81       	ldd	r23, Z+3	; 0x03
    3510:	00 e0       	ldi	r16, 0x00	; 0
    3512:	16 e3       	ldi	r17, 0x36	; 54
    3514:	2e e6       	ldi	r18, 0x6E	; 110
    3516:	31 e0       	ldi	r19, 0x01	; 1
    3518:	ce 01       	movw	r24, r28
    351a:	29 df       	rcall	.-430    	; 0x336e <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    351c:	8c 81       	ldd	r24, Y+4	; 0x04
    351e:	88 60       	ori	r24, 0x08	; 8
    3520:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    3522:	8c 81       	ldd	r24, Y+4	; 0x04
    3524:	80 61       	ori	r24, 0x10	; 16
    3526:	8c 83       	std	Y+4, r24	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    3528:	df 91       	pop	r29
    352a:	cf 91       	pop	r28
    352c:	1f 91       	pop	r17
    352e:	0f 91       	pop	r16
    3530:	08 95       	ret

00003532 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    3532:	81 11       	cpse	r24, r1
    3534:	18 c0       	rjmp	.+48     	; 0x3566 <udd_sleep_mode+0x34>
    3536:	90 91 44 29 	lds	r25, 0x2944
    353a:	99 23       	and	r25, r25
    353c:	89 f0       	breq	.+34     	; 0x3560 <udd_sleep_mode+0x2e>
    353e:	9f b7       	in	r25, 0x3f	; 63
    3540:	f8 94       	cli
    3542:	e8 e1       	ldi	r30, 0x18	; 24
    3544:	fa e2       	ldi	r31, 0x2A	; 42
    3546:	20 81       	ld	r18, Z
    3548:	21 50       	subi	r18, 0x01	; 1
    354a:	20 83       	st	Z, r18
    354c:	9f bf       	out	0x3f, r25	; 63
    354e:	08 c0       	rjmp	.+16     	; 0x3560 <udd_sleep_mode+0x2e>
    3550:	9f b7       	in	r25, 0x3f	; 63
    3552:	f8 94       	cli
    3554:	e8 e1       	ldi	r30, 0x18	; 24
    3556:	fa e2       	ldi	r31, 0x2A	; 42
    3558:	20 81       	ld	r18, Z
    355a:	2f 5f       	subi	r18, 0xFF	; 255
    355c:	20 83       	st	Z, r18
    355e:	9f bf       	out	0x3f, r25	; 63
    3560:	80 93 44 29 	sts	0x2944, r24
    3564:	08 95       	ret
    3566:	90 91 44 29 	lds	r25, 0x2944
    356a:	99 23       	and	r25, r25
    356c:	89 f3       	breq	.-30     	; 0x3550 <udd_sleep_mode+0x1e>
    356e:	f8 cf       	rjmp	.-16     	; 0x3560 <udd_sleep_mode+0x2e>

00003570 <udd_ep_get_ctrl>:
    3570:	28 2f       	mov	r18, r24
    3572:	2f 70       	andi	r18, 0x0F	; 15
    3574:	30 e0       	ldi	r19, 0x00	; 0
    3576:	22 0f       	add	r18, r18
    3578:	33 1f       	adc	r19, r19
    357a:	99 27       	eor	r25, r25
    357c:	87 fd       	sbrc	r24, 7
    357e:	90 95       	com	r25
    3580:	88 27       	eor	r24, r24
    3582:	99 0f       	add	r25, r25
    3584:	88 1f       	adc	r24, r24
    3586:	99 27       	eor	r25, r25
    3588:	28 0f       	add	r18, r24
    358a:	39 1f       	adc	r19, r25
    358c:	22 0f       	add	r18, r18
    358e:	33 1f       	adc	r19, r19
    3590:	22 0f       	add	r18, r18
    3592:	33 1f       	adc	r19, r19
    3594:	22 0f       	add	r18, r18
    3596:	33 1f       	adc	r19, r19
    3598:	24 51       	subi	r18, 0x14	; 20
    359a:	37 4d       	sbci	r19, 0xD7	; 215
    359c:	82 2f       	mov	r24, r18
    359e:	93 2f       	mov	r25, r19
    35a0:	08 95       	ret

000035a2 <udd_ep_init>:
    35a2:	cf 93       	push	r28
    35a4:	df 93       	push	r29
    35a6:	63 70       	andi	r22, 0x03	; 3
    35a8:	61 30       	cpi	r22, 0x01	; 1
    35aa:	11 f0       	breq	.+4      	; 0x35b0 <udd_ep_init+0xe>
    35ac:	28 f0       	brcs	.+10     	; 0x35b8 <udd_ep_init+0x16>
    35ae:	02 c0       	rjmp	.+4      	; 0x35b4 <udd_ep_init+0x12>
    35b0:	d0 ec       	ldi	r29, 0xC0	; 192
    35b2:	03 c0       	rjmp	.+6      	; 0x35ba <udd_ep_init+0x18>
    35b4:	d0 e8       	ldi	r29, 0x80	; 128
    35b6:	01 c0       	rjmp	.+2      	; 0x35ba <udd_ep_init+0x18>
    35b8:	d0 e4       	ldi	r29, 0x40	; 64
    35ba:	40 38       	cpi	r20, 0x80	; 128
    35bc:	51 05       	cpc	r21, r1
    35be:	e1 f0       	breq	.+56     	; 0x35f8 <udd_ep_init+0x56>
    35c0:	50 f4       	brcc	.+20     	; 0x35d6 <udd_ep_init+0x34>
    35c2:	40 32       	cpi	r20, 0x20	; 32
    35c4:	51 05       	cpc	r21, r1
    35c6:	a1 f0       	breq	.+40     	; 0x35f0 <udd_ep_init+0x4e>
    35c8:	40 34       	cpi	r20, 0x40	; 64
    35ca:	51 05       	cpc	r21, r1
    35cc:	99 f0       	breq	.+38     	; 0x35f4 <udd_ep_init+0x52>
    35ce:	40 31       	cpi	r20, 0x10	; 16
    35d0:	51 05       	cpc	r21, r1
    35d2:	61 f4       	brne	.+24     	; 0x35ec <udd_ep_init+0x4a>
    35d4:	19 c0       	rjmp	.+50     	; 0x3608 <udd_ep_init+0x66>
    35d6:	41 15       	cp	r20, r1
    35d8:	92 e0       	ldi	r25, 0x02	; 2
    35da:	59 07       	cpc	r21, r25
    35dc:	89 f0       	breq	.+34     	; 0x3600 <udd_ep_init+0x5e>
    35de:	4f 3f       	cpi	r20, 0xFF	; 255
    35e0:	93 e0       	ldi	r25, 0x03	; 3
    35e2:	59 07       	cpc	r21, r25
    35e4:	79 f0       	breq	.+30     	; 0x3604 <udd_ep_init+0x62>
    35e6:	41 15       	cp	r20, r1
    35e8:	51 40       	sbci	r21, 0x01	; 1
    35ea:	41 f0       	breq	.+16     	; 0x35fc <udd_ep_init+0x5a>
    35ec:	c0 e0       	ldi	r28, 0x00	; 0
    35ee:	0d c0       	rjmp	.+26     	; 0x360a <udd_ep_init+0x68>
    35f0:	c2 e0       	ldi	r28, 0x02	; 2
    35f2:	0b c0       	rjmp	.+22     	; 0x360a <udd_ep_init+0x68>
    35f4:	c3 e0       	ldi	r28, 0x03	; 3
    35f6:	09 c0       	rjmp	.+18     	; 0x360a <udd_ep_init+0x68>
    35f8:	c4 e0       	ldi	r28, 0x04	; 4
    35fa:	07 c0       	rjmp	.+14     	; 0x360a <udd_ep_init+0x68>
    35fc:	c5 e0       	ldi	r28, 0x05	; 5
    35fe:	05 c0       	rjmp	.+10     	; 0x360a <udd_ep_init+0x68>
    3600:	c6 e0       	ldi	r28, 0x06	; 6
    3602:	03 c0       	rjmp	.+6      	; 0x360a <udd_ep_init+0x68>
    3604:	c7 e0       	ldi	r28, 0x07	; 7
    3606:	01 c0       	rjmp	.+2      	; 0x360a <udd_ep_init+0x68>
    3608:	c1 e0       	ldi	r28, 0x01	; 1
    360a:	b2 df       	rcall	.-156    	; 0x3570 <udd_ep_get_ctrl>
    360c:	fc 01       	movw	r30, r24
    360e:	11 82       	std	Z+1, r1	; 0x01
    3610:	86 e0       	ldi	r24, 0x06	; 6
    3612:	80 83       	st	Z, r24
    3614:	cd 2b       	or	r28, r29
    3616:	c1 83       	std	Z+1, r28	; 0x01
    3618:	df 91       	pop	r29
    361a:	cf 91       	pop	r28
    361c:	08 95       	ret

0000361e <udd_ctrl_init>:
    361e:	0f 93       	push	r16
    3620:	e8 ec       	ldi	r30, 0xC8	; 200
    3622:	f4 e0       	ldi	r31, 0x04	; 4
    3624:	80 81       	ld	r24, Z
    3626:	8f 7d       	andi	r24, 0xDF	; 223
    3628:	80 83       	st	Z, r24
    362a:	80 81       	ld	r24, Z
    362c:	8f 7d       	andi	r24, 0xDF	; 223
    362e:	80 83       	st	Z, r24
    3630:	e4 ef       	ldi	r30, 0xF4	; 244
    3632:	f8 e2       	ldi	r31, 0x28	; 40
    3634:	02 e0       	ldi	r16, 0x02	; 2
    3636:	05 93       	las	Z, r16
    3638:	10 92 f6 28 	sts	0x28F6, r1
    363c:	10 92 f7 28 	sts	0x28F7, r1
    3640:	00 e2       	ldi	r16, 0x20	; 32
    3642:	06 93       	lac	Z, r16
    3644:	00 e4       	ldi	r16, 0x40	; 64
    3646:	06 93       	lac	Z, r16
    3648:	ec ee       	ldi	r30, 0xEC	; 236
    364a:	f8 e2       	ldi	r31, 0x28	; 40
    364c:	00 e2       	ldi	r16, 0x20	; 32
    364e:	06 93       	lac	Z, r16
    3650:	00 e4       	ldi	r16, 0x40	; 64
    3652:	06 93       	lac	Z, r16
    3654:	10 92 2f 2a 	sts	0x2A2F, r1
    3658:	10 92 30 2a 	sts	0x2A30, r1
    365c:	10 92 31 2a 	sts	0x2A31, r1
    3660:	10 92 32 2a 	sts	0x2A32, r1
    3664:	10 92 2d 2a 	sts	0x2A2D, r1
    3668:	10 92 2e 2a 	sts	0x2A2E, r1
    366c:	10 92 05 2a 	sts	0x2A05, r1
    3670:	0f 91       	pop	r16
    3672:	08 95       	ret

00003674 <udd_ctrl_stall_data>:
    3674:	0f 93       	push	r16
    3676:	85 e0       	ldi	r24, 0x05	; 5
    3678:	80 93 05 2a 	sts	0x2A05, r24
    367c:	e5 ef       	ldi	r30, 0xF5	; 245
    367e:	f8 e2       	ldi	r31, 0x28	; 40
    3680:	04 e0       	ldi	r16, 0x04	; 4
    3682:	05 93       	las	Z, r16
    3684:	ed ee       	ldi	r30, 0xED	; 237
    3686:	f8 e2       	ldi	r31, 0x28	; 40
    3688:	04 e0       	ldi	r16, 0x04	; 4
    368a:	05 93       	las	Z, r16
    368c:	0f 91       	pop	r16
    368e:	08 95       	ret

00003690 <udd_ctrl_send_zlp_in>:
    3690:	0f 93       	push	r16
    3692:	83 e0       	ldi	r24, 0x03	; 3
    3694:	80 93 05 2a 	sts	0x2A05, r24
    3698:	10 92 f6 28 	sts	0x28F6, r1
    369c:	10 92 f7 28 	sts	0x28F7, r1
    36a0:	e4 ef       	ldi	r30, 0xF4	; 244
    36a2:	f8 e2       	ldi	r31, 0x28	; 40
    36a4:	02 e0       	ldi	r16, 0x02	; 2
    36a6:	06 93       	lac	Z, r16
    36a8:	0f 91       	pop	r16
    36aa:	08 95       	ret

000036ac <udd_ctrl_send_zlp_out>:
    36ac:	0f 93       	push	r16
    36ae:	84 e0       	ldi	r24, 0x04	; 4
    36b0:	80 93 05 2a 	sts	0x2A05, r24
    36b4:	ec ee       	ldi	r30, 0xEC	; 236
    36b6:	f8 e2       	ldi	r31, 0x28	; 40
    36b8:	02 e0       	ldi	r16, 0x02	; 2
    36ba:	06 93       	lac	Z, r16
    36bc:	0f 91       	pop	r16
    36be:	08 95       	ret

000036c0 <udd_ctrl_endofrequest>:
    36c0:	e0 91 2f 2a 	lds	r30, 0x2A2F
    36c4:	f0 91 30 2a 	lds	r31, 0x2A30
    36c8:	30 97       	sbiw	r30, 0x00	; 0
    36ca:	09 f0       	breq	.+2      	; 0x36ce <udd_ctrl_endofrequest+0xe>
    36cc:	19 95       	eicall
    36ce:	08 95       	ret

000036d0 <udd_ctrl_in_sent>:
    36d0:	0f 93       	push	r16
    36d2:	cf 93       	push	r28
    36d4:	df 93       	push	r29
    36d6:	80 91 05 2a 	lds	r24, 0x2A05
    36da:	83 30       	cpi	r24, 0x03	; 3
    36dc:	19 f4       	brne	.+6      	; 0x36e4 <udd_ctrl_in_sent+0x14>
    36de:	f0 df       	rcall	.-32     	; 0x36c0 <udd_ctrl_endofrequest>
    36e0:	9e df       	rcall	.-196    	; 0x361e <udd_ctrl_init>
    36e2:	5a c0       	rjmp	.+180    	; 0x3798 <udd_ctrl_in_sent+0xc8>
    36e4:	80 91 08 2a 	lds	r24, 0x2A08
    36e8:	90 91 09 2a 	lds	r25, 0x2A09
    36ec:	c0 91 2d 2a 	lds	r28, 0x2A2D
    36f0:	d0 91 2e 2a 	lds	r29, 0x2A2E
    36f4:	c8 1b       	sub	r28, r24
    36f6:	d9 0b       	sbc	r29, r25
    36f8:	41 f5       	brne	.+80     	; 0x374a <udd_ctrl_in_sent+0x7a>
    36fa:	20 91 06 2a 	lds	r18, 0x2A06
    36fe:	30 91 07 2a 	lds	r19, 0x2A07
    3702:	82 0f       	add	r24, r18
    3704:	93 1f       	adc	r25, r19
    3706:	80 93 06 2a 	sts	0x2A06, r24
    370a:	90 93 07 2a 	sts	0x2A07, r25
    370e:	20 91 29 2a 	lds	r18, 0x2A29
    3712:	30 91 2a 2a 	lds	r19, 0x2A2A
    3716:	82 17       	cp	r24, r18
    3718:	93 07       	cpc	r25, r19
    371a:	21 f0       	breq	.+8      	; 0x3724 <udd_ctrl_in_sent+0x54>
    371c:	80 91 0a 2a 	lds	r24, 0x2A0A
    3720:	88 23       	and	r24, r24
    3722:	11 f0       	breq	.+4      	; 0x3728 <udd_ctrl_in_sent+0x58>
    3724:	c3 df       	rcall	.-122    	; 0x36ac <udd_ctrl_send_zlp_out>
    3726:	38 c0       	rjmp	.+112    	; 0x3798 <udd_ctrl_in_sent+0xc8>
    3728:	e0 91 31 2a 	lds	r30, 0x2A31
    372c:	f0 91 32 2a 	lds	r31, 0x2A32
    3730:	30 97       	sbiw	r30, 0x00	; 0
    3732:	99 f0       	breq	.+38     	; 0x375a <udd_ctrl_in_sent+0x8a>
    3734:	19 95       	eicall
    3736:	88 23       	and	r24, r24
    3738:	81 f0       	breq	.+32     	; 0x375a <udd_ctrl_in_sent+0x8a>
    373a:	10 92 08 2a 	sts	0x2A08, r1
    373e:	10 92 09 2a 	sts	0x2A09, r1
    3742:	c0 91 2d 2a 	lds	r28, 0x2A2D
    3746:	d0 91 2e 2a 	lds	r29, 0x2A2E
    374a:	c0 34       	cpi	r28, 0x40	; 64
    374c:	d1 05       	cpc	r29, r1
    374e:	28 f0       	brcs	.+10     	; 0x375a <udd_ctrl_in_sent+0x8a>
    3750:	10 92 0a 2a 	sts	0x2A0A, r1
    3754:	c0 e4       	ldi	r28, 0x40	; 64
    3756:	d0 e0       	ldi	r29, 0x00	; 0
    3758:	03 c0       	rjmp	.+6      	; 0x3760 <udd_ctrl_in_sent+0x90>
    375a:	81 e0       	ldi	r24, 0x01	; 1
    375c:	80 93 0a 2a 	sts	0x2A0A, r24
    3760:	c0 93 f6 28 	sts	0x28F6, r28
    3764:	d0 93 f7 28 	sts	0x28F7, r29
    3768:	80 91 08 2a 	lds	r24, 0x2A08
    376c:	90 91 09 2a 	lds	r25, 0x2A09
    3770:	20 91 2b 2a 	lds	r18, 0x2A2B
    3774:	30 91 2c 2a 	lds	r19, 0x2A2C
    3778:	28 0f       	add	r18, r24
    377a:	39 1f       	adc	r19, r25
    377c:	20 93 f8 28 	sts	0x28F8, r18
    3780:	30 93 f9 28 	sts	0x28F9, r19
    3784:	c8 0f       	add	r28, r24
    3786:	d9 1f       	adc	r29, r25
    3788:	c0 93 08 2a 	sts	0x2A08, r28
    378c:	d0 93 09 2a 	sts	0x2A09, r29
    3790:	e4 ef       	ldi	r30, 0xF4	; 244
    3792:	f8 e2       	ldi	r31, 0x28	; 40
    3794:	02 e0       	ldi	r16, 0x02	; 2
    3796:	06 93       	lac	Z, r16
    3798:	df 91       	pop	r29
    379a:	cf 91       	pop	r28
    379c:	0f 91       	pop	r16
    379e:	08 95       	ret

000037a0 <udd_ep_get_size>:
    37a0:	fc 01       	movw	r30, r24
    37a2:	81 81       	ldd	r24, Z+1	; 0x01
    37a4:	87 70       	andi	r24, 0x07	; 7
    37a6:	84 30       	cpi	r24, 0x04	; 4
    37a8:	a9 f0       	breq	.+42     	; 0x37d4 <udd_ep_get_size+0x34>
    37aa:	30 f4       	brcc	.+12     	; 0x37b8 <udd_ep_get_size+0x18>
    37ac:	82 30       	cpi	r24, 0x02	; 2
    37ae:	61 f0       	breq	.+24     	; 0x37c8 <udd_ep_get_size+0x28>
    37b0:	70 f4       	brcc	.+28     	; 0x37ce <udd_ep_get_size+0x2e>
    37b2:	81 30       	cpi	r24, 0x01	; 1
    37b4:	31 f4       	brne	.+12     	; 0x37c2 <udd_ep_get_size+0x22>
    37b6:	1a c0       	rjmp	.+52     	; 0x37ec <udd_ep_get_size+0x4c>
    37b8:	86 30       	cpi	r24, 0x06	; 6
    37ba:	91 f0       	breq	.+36     	; 0x37e0 <udd_ep_get_size+0x40>
    37bc:	70 f0       	brcs	.+28     	; 0x37da <udd_ep_get_size+0x3a>
    37be:	87 30       	cpi	r24, 0x07	; 7
    37c0:	91 f0       	breq	.+36     	; 0x37e6 <udd_ep_get_size+0x46>
    37c2:	28 e0       	ldi	r18, 0x08	; 8
    37c4:	30 e0       	ldi	r19, 0x00	; 0
    37c6:	14 c0       	rjmp	.+40     	; 0x37f0 <udd_ep_get_size+0x50>
    37c8:	20 e2       	ldi	r18, 0x20	; 32
    37ca:	30 e0       	ldi	r19, 0x00	; 0
    37cc:	11 c0       	rjmp	.+34     	; 0x37f0 <udd_ep_get_size+0x50>
    37ce:	20 e4       	ldi	r18, 0x40	; 64
    37d0:	30 e0       	ldi	r19, 0x00	; 0
    37d2:	0e c0       	rjmp	.+28     	; 0x37f0 <udd_ep_get_size+0x50>
    37d4:	20 e8       	ldi	r18, 0x80	; 128
    37d6:	30 e0       	ldi	r19, 0x00	; 0
    37d8:	0b c0       	rjmp	.+22     	; 0x37f0 <udd_ep_get_size+0x50>
    37da:	20 e0       	ldi	r18, 0x00	; 0
    37dc:	31 e0       	ldi	r19, 0x01	; 1
    37de:	08 c0       	rjmp	.+16     	; 0x37f0 <udd_ep_get_size+0x50>
    37e0:	20 e0       	ldi	r18, 0x00	; 0
    37e2:	32 e0       	ldi	r19, 0x02	; 2
    37e4:	05 c0       	rjmp	.+10     	; 0x37f0 <udd_ep_get_size+0x50>
    37e6:	2f ef       	ldi	r18, 0xFF	; 255
    37e8:	33 e0       	ldi	r19, 0x03	; 3
    37ea:	02 c0       	rjmp	.+4      	; 0x37f0 <udd_ep_get_size+0x50>
    37ec:	20 e1       	ldi	r18, 0x10	; 16
    37ee:	30 e0       	ldi	r19, 0x00	; 0
    37f0:	82 2f       	mov	r24, r18
    37f2:	93 2f       	mov	r25, r19
    37f4:	08 95       	ret

000037f6 <udd_ep_get_job>:
    37f6:	28 2f       	mov	r18, r24
    37f8:	2f 70       	andi	r18, 0x0F	; 15
    37fa:	30 e0       	ldi	r19, 0x00	; 0
    37fc:	22 0f       	add	r18, r18
    37fe:	33 1f       	adc	r19, r19
    3800:	99 27       	eor	r25, r25
    3802:	87 fd       	sbrc	r24, 7
    3804:	90 95       	com	r25
    3806:	88 27       	eor	r24, r24
    3808:	99 0f       	add	r25, r25
    380a:	88 1f       	adc	r24, r24
    380c:	99 27       	eor	r25, r25
    380e:	28 0f       	add	r18, r24
    3810:	39 1f       	adc	r19, r25
    3812:	22 50       	subi	r18, 0x02	; 2
    3814:	31 09       	sbc	r19, r1
    3816:	c9 01       	movw	r24, r18
    3818:	88 0f       	add	r24, r24
    381a:	99 1f       	adc	r25, r25
    381c:	88 0f       	add	r24, r24
    381e:	99 1f       	adc	r25, r25
    3820:	88 0f       	add	r24, r24
    3822:	99 1f       	adc	r25, r25
    3824:	28 0f       	add	r18, r24
    3826:	39 1f       	adc	r19, r25
    3828:	20 5e       	subi	r18, 0xE0	; 224
    382a:	36 4d       	sbci	r19, 0xD6	; 214
    382c:	82 2f       	mov	r24, r18
    382e:	93 2f       	mov	r25, r19
    3830:	08 95       	ret

00003832 <udd_ctrl_interrupt_tc_setup>:
    3832:	0f 93       	push	r16
    3834:	80 91 cc 04 	lds	r24, 0x04CC
    3838:	80 ff       	sbrs	r24, 0
    383a:	64 c0       	rjmp	.+200    	; 0x3904 <udd_ctrl_interrupt_tc_setup+0xd2>
    383c:	81 e0       	ldi	r24, 0x01	; 1
    383e:	80 93 cc 04 	sts	0x04CC, r24
    3842:	ec ee       	ldi	r30, 0xEC	; 236
    3844:	f8 e2       	ldi	r31, 0x28	; 40
    3846:	00 e8       	ldi	r16, 0x80	; 128
    3848:	06 93       	lac	Z, r16
    384a:	e4 ef       	ldi	r30, 0xF4	; 244
    384c:	f8 e2       	ldi	r31, 0x28	; 40
    384e:	00 e8       	ldi	r16, 0x80	; 128
    3850:	06 93       	lac	Z, r16
    3852:	80 93 ca 04 	sts	0x04CA, r24
    3856:	ec ee       	ldi	r30, 0xEC	; 236
    3858:	f8 e2       	ldi	r31, 0x28	; 40
    385a:	00 e1       	ldi	r16, 0x10	; 16
    385c:	06 93       	lac	Z, r16
    385e:	80 91 05 2a 	lds	r24, 0x2A05
    3862:	88 23       	and	r24, r24
    3864:	29 f0       	breq	.+10     	; 0x3870 <udd_ctrl_interrupt_tc_setup+0x3e>
    3866:	83 50       	subi	r24, 0x03	; 3
    3868:	82 30       	cpi	r24, 0x02	; 2
    386a:	08 f4       	brcc	.+2      	; 0x386e <udd_ctrl_interrupt_tc_setup+0x3c>
    386c:	29 df       	rcall	.-430    	; 0x36c0 <udd_ctrl_endofrequest>
    386e:	d7 de       	rcall	.-594    	; 0x361e <udd_ctrl_init>
    3870:	80 91 ee 28 	lds	r24, 0x28EE
    3874:	90 91 ef 28 	lds	r25, 0x28EF
    3878:	08 97       	sbiw	r24, 0x08	; 8
    387a:	09 f0       	breq	.+2      	; 0x387e <udd_ctrl_interrupt_tc_setup+0x4c>
    387c:	45 c0       	rjmp	.+138    	; 0x3908 <udd_ctrl_interrupt_tc_setup+0xd6>
    387e:	88 e0       	ldi	r24, 0x08	; 8
    3880:	e5 ec       	ldi	r30, 0xC5	; 197
    3882:	f9 e2       	ldi	r31, 0x29	; 41
    3884:	a3 e2       	ldi	r26, 0x23	; 35
    3886:	ba e2       	ldi	r27, 0x2A	; 42
    3888:	01 90       	ld	r0, Z+
    388a:	0d 92       	st	X+, r0
    388c:	8a 95       	dec	r24
    388e:	e1 f7       	brne	.-8      	; 0x3888 <udd_ctrl_interrupt_tc_setup+0x56>
    3890:	e8 ec       	ldi	r30, 0xC8	; 200
    3892:	f4 e0       	ldi	r31, 0x04	; 4
    3894:	80 81       	ld	r24, Z
    3896:	80 62       	ori	r24, 0x20	; 32
    3898:	80 83       	st	Z, r24
    389a:	80 81       	ld	r24, Z
    389c:	80 62       	ori	r24, 0x20	; 32
    389e:	80 83       	st	Z, r24
    38a0:	0e 94 12 13 	call	0x2624	; 0x2624 <udc_process_setup>
    38a4:	81 11       	cpse	r24, r1
    38a6:	03 c0       	rjmp	.+6      	; 0x38ae <udd_ctrl_interrupt_tc_setup+0x7c>
    38a8:	e5 de       	rcall	.-566    	; 0x3674 <udd_ctrl_stall_data>
    38aa:	81 e0       	ldi	r24, 0x01	; 1
    38ac:	2e c0       	rjmp	.+92     	; 0x390a <udd_ctrl_interrupt_tc_setup+0xd8>
    38ae:	80 91 23 2a 	lds	r24, 0x2A23
    38b2:	88 23       	and	r24, r24
    38b4:	74 f4       	brge	.+28     	; 0x38d2 <udd_ctrl_interrupt_tc_setup+0xa0>
    38b6:	10 92 06 2a 	sts	0x2A06, r1
    38ba:	10 92 07 2a 	sts	0x2A07, r1
    38be:	10 92 08 2a 	sts	0x2A08, r1
    38c2:	10 92 09 2a 	sts	0x2A09, r1
    38c6:	82 e0       	ldi	r24, 0x02	; 2
    38c8:	80 93 05 2a 	sts	0x2A05, r24
    38cc:	01 df       	rcall	.-510    	; 0x36d0 <udd_ctrl_in_sent>
    38ce:	81 e0       	ldi	r24, 0x01	; 1
    38d0:	1c c0       	rjmp	.+56     	; 0x390a <udd_ctrl_interrupt_tc_setup+0xd8>
    38d2:	80 91 29 2a 	lds	r24, 0x2A29
    38d6:	90 91 2a 2a 	lds	r25, 0x2A2A
    38da:	89 2b       	or	r24, r25
    38dc:	19 f4       	brne	.+6      	; 0x38e4 <udd_ctrl_interrupt_tc_setup+0xb2>
    38de:	d8 de       	rcall	.-592    	; 0x3690 <udd_ctrl_send_zlp_in>
    38e0:	81 e0       	ldi	r24, 0x01	; 1
    38e2:	13 c0       	rjmp	.+38     	; 0x390a <udd_ctrl_interrupt_tc_setup+0xd8>
    38e4:	10 92 06 2a 	sts	0x2A06, r1
    38e8:	10 92 07 2a 	sts	0x2A07, r1
    38ec:	10 92 08 2a 	sts	0x2A08, r1
    38f0:	10 92 09 2a 	sts	0x2A09, r1
    38f4:	81 e0       	ldi	r24, 0x01	; 1
    38f6:	80 93 05 2a 	sts	0x2A05, r24
    38fa:	ec ee       	ldi	r30, 0xEC	; 236
    38fc:	f8 e2       	ldi	r31, 0x28	; 40
    38fe:	02 e0       	ldi	r16, 0x02	; 2
    3900:	06 93       	lac	Z, r16
    3902:	03 c0       	rjmp	.+6      	; 0x390a <udd_ctrl_interrupt_tc_setup+0xd8>
    3904:	80 e0       	ldi	r24, 0x00	; 0
    3906:	01 c0       	rjmp	.+2      	; 0x390a <udd_ctrl_interrupt_tc_setup+0xd8>
    3908:	81 e0       	ldi	r24, 0x01	; 1
    390a:	0f 91       	pop	r16
    390c:	08 95       	ret

0000390e <udd_ep_trans_complet>:
    390e:	bf 92       	push	r11
    3910:	cf 92       	push	r12
    3912:	df 92       	push	r13
    3914:	ef 92       	push	r14
    3916:	ff 92       	push	r15
    3918:	0f 93       	push	r16
    391a:	1f 93       	push	r17
    391c:	cf 93       	push	r28
    391e:	df 93       	push	r29
    3920:	b8 2e       	mov	r11, r24
    3922:	69 df       	rcall	.-302    	; 0x37f6 <udd_ep_get_job>
    3924:	ec 01       	movw	r28, r24
    3926:	8b 2d       	mov	r24, r11
    3928:	23 de       	rcall	.-954    	; 0x3570 <udd_ep_get_ctrl>
    392a:	7c 01       	movw	r14, r24
    392c:	39 df       	rcall	.-398    	; 0x37a0 <udd_ep_get_size>
    392e:	6c 01       	movw	r12, r24
    3930:	bb 20       	and	r11, r11
    3932:	0c f0       	brlt	.+2      	; 0x3936 <udd_ep_trans_complet+0x28>
    3934:	5f c0       	rjmp	.+190    	; 0x39f4 <udd_ep_trans_complet+0xe6>
    3936:	d7 01       	movw	r26, r14
    3938:	16 96       	adiw	r26, 0x06	; 6
    393a:	2d 91       	ld	r18, X+
    393c:	3c 91       	ld	r19, X
    393e:	17 97       	sbiw	r26, 0x07	; 7
    3940:	8d 81       	ldd	r24, Y+5	; 0x05
    3942:	9e 81       	ldd	r25, Y+6	; 0x06
    3944:	28 0f       	add	r18, r24
    3946:	39 1f       	adc	r19, r25
    3948:	2d 83       	std	Y+5, r18	; 0x05
    394a:	3e 83       	std	Y+6, r19	; 0x06
    394c:	8b 81       	ldd	r24, Y+3	; 0x03
    394e:	9c 81       	ldd	r25, Y+4	; 0x04
    3950:	28 17       	cp	r18, r24
    3952:	39 07       	cpc	r19, r25
    3954:	09 f4       	brne	.+2      	; 0x3958 <udd_ep_trans_complet+0x4a>
    3956:	3c c0       	rjmp	.+120    	; 0x39d0 <udd_ep_trans_complet+0xc2>
    3958:	fc 01       	movw	r30, r24
    395a:	e2 1b       	sub	r30, r18
    395c:	f3 0b       	sbc	r31, r19
    395e:	9f 01       	movw	r18, r30
    3960:	21 15       	cp	r18, r1
    3962:	f4 e0       	ldi	r31, 0x04	; 4
    3964:	3f 07       	cpc	r19, r31
    3966:	40 f0       	brcs	.+16     	; 0x3978 <udd_ep_trans_complet+0x6a>
    3968:	2f ef       	ldi	r18, 0xFF	; 255
    396a:	33 e0       	ldi	r19, 0x03	; 3
    396c:	c9 01       	movw	r24, r18
    396e:	b6 01       	movw	r22, r12
    3970:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <__udivmodhi4>
    3974:	28 1b       	sub	r18, r24
    3976:	39 0b       	sbc	r19, r25
    3978:	88 81       	ld	r24, Y
    397a:	81 ff       	sbrs	r24, 1
    397c:	0c c0       	rjmp	.+24     	; 0x3996 <udd_ep_trans_complet+0x88>
    397e:	c9 01       	movw	r24, r18
    3980:	b6 01       	movw	r22, r12
    3982:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <__udivmodhi4>
    3986:	41 e0       	ldi	r20, 0x01	; 1
    3988:	50 e0       	ldi	r21, 0x00	; 0
    398a:	89 2b       	or	r24, r25
    398c:	11 f0       	breq	.+4      	; 0x3992 <udd_ep_trans_complet+0x84>
    398e:	40 e0       	ldi	r20, 0x00	; 0
    3990:	50 e0       	ldi	r21, 0x00	; 0
    3992:	ca 01       	movw	r24, r20
    3994:	02 c0       	rjmp	.+4      	; 0x399a <udd_ep_trans_complet+0x8c>
    3996:	80 e0       	ldi	r24, 0x00	; 0
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	98 81       	ld	r25, Y
    399c:	80 fb       	bst	r24, 0
    399e:	91 f9       	bld	r25, 1
    39a0:	98 83       	st	Y, r25
    39a2:	d7 01       	movw	r26, r14
    39a4:	16 96       	adiw	r26, 0x06	; 6
    39a6:	1d 92       	st	X+, r1
    39a8:	1c 92       	st	X, r1
    39aa:	17 97       	sbiw	r26, 0x07	; 7
    39ac:	12 96       	adiw	r26, 0x02	; 2
    39ae:	2d 93       	st	X+, r18
    39b0:	3c 93       	st	X, r19
    39b2:	13 97       	sbiw	r26, 0x03	; 3
    39b4:	29 81       	ldd	r18, Y+1	; 0x01
    39b6:	3a 81       	ldd	r19, Y+2	; 0x02
    39b8:	8d 81       	ldd	r24, Y+5	; 0x05
    39ba:	9e 81       	ldd	r25, Y+6	; 0x06
    39bc:	82 0f       	add	r24, r18
    39be:	93 1f       	adc	r25, r19
    39c0:	14 96       	adiw	r26, 0x04	; 4
    39c2:	8d 93       	st	X+, r24
    39c4:	9c 93       	st	X, r25
    39c6:	15 97       	sbiw	r26, 0x05	; 5
    39c8:	f7 01       	movw	r30, r14
    39ca:	02 e0       	ldi	r16, 0x02	; 2
    39cc:	06 93       	lac	Z, r16
    39ce:	9c c0       	rjmp	.+312    	; 0x3b08 <udd_ep_trans_complet+0x1fa>
    39d0:	88 81       	ld	r24, Y
    39d2:	81 ff       	sbrs	r24, 1
    39d4:	8b c0       	rjmp	.+278    	; 0x3aec <udd_ep_trans_complet+0x1de>
    39d6:	8d 7f       	andi	r24, 0xFD	; 253
    39d8:	88 83       	st	Y, r24
    39da:	d7 01       	movw	r26, r14
    39dc:	16 96       	adiw	r26, 0x06	; 6
    39de:	1d 92       	st	X+, r1
    39e0:	1c 92       	st	X, r1
    39e2:	17 97       	sbiw	r26, 0x07	; 7
    39e4:	12 96       	adiw	r26, 0x02	; 2
    39e6:	1d 92       	st	X+, r1
    39e8:	1c 92       	st	X, r1
    39ea:	13 97       	sbiw	r26, 0x03	; 3
    39ec:	f7 01       	movw	r30, r14
    39ee:	02 e0       	ldi	r16, 0x02	; 2
    39f0:	06 93       	lac	Z, r16
    39f2:	8a c0       	rjmp	.+276    	; 0x3b08 <udd_ep_trans_complet+0x1fa>
    39f4:	d7 01       	movw	r26, r14
    39f6:	12 96       	adiw	r26, 0x02	; 2
    39f8:	0d 91       	ld	r16, X+
    39fa:	1c 91       	ld	r17, X
    39fc:	13 97       	sbiw	r26, 0x03	; 3
    39fe:	88 81       	ld	r24, Y
    3a00:	82 ff       	sbrs	r24, 2
    3a02:	19 c0       	rjmp	.+50     	; 0x3a36 <udd_ep_trans_complet+0x128>
    3a04:	29 81       	ldd	r18, Y+1	; 0x01
    3a06:	3a 81       	ldd	r19, Y+2	; 0x02
    3a08:	8d 81       	ldd	r24, Y+5	; 0x05
    3a0a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a0c:	28 0f       	add	r18, r24
    3a0e:	39 1f       	adc	r19, r25
    3a10:	8b 81       	ldd	r24, Y+3	; 0x03
    3a12:	9c 81       	ldd	r25, Y+4	; 0x04
    3a14:	b6 01       	movw	r22, r12
    3a16:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <__udivmodhi4>
    3a1a:	b0 e4       	ldi	r27, 0x40	; 64
    3a1c:	bb 9e       	mul	r11, r27
    3a1e:	f0 01       	movw	r30, r0
    3a20:	11 24       	eor	r1, r1
    3a22:	eb 5f       	subi	r30, 0xFB	; 251
    3a24:	f6 4d       	sbci	r31, 0xD6	; 214
    3a26:	48 2f       	mov	r20, r24
    3a28:	59 2f       	mov	r21, r25
    3a2a:	6e 2f       	mov	r22, r30
    3a2c:	7f 2f       	mov	r23, r31
    3a2e:	82 2f       	mov	r24, r18
    3a30:	93 2f       	mov	r25, r19
    3a32:	0e 94 0c 28 	call	0x5018	; 0x5018 <memcpy>
    3a36:	2d 81       	ldd	r18, Y+5	; 0x05
    3a38:	3e 81       	ldd	r19, Y+6	; 0x06
    3a3a:	20 0f       	add	r18, r16
    3a3c:	31 1f       	adc	r19, r17
    3a3e:	2d 83       	std	Y+5, r18	; 0x05
    3a40:	3e 83       	std	Y+6, r19	; 0x06
    3a42:	eb 81       	ldd	r30, Y+3	; 0x03
    3a44:	fc 81       	ldd	r31, Y+4	; 0x04
    3a46:	e2 17       	cp	r30, r18
    3a48:	f3 07       	cpc	r31, r19
    3a4a:	10 f4       	brcc	.+4      	; 0x3a50 <udd_ep_trans_complet+0x142>
    3a4c:	ed 83       	std	Y+5, r30	; 0x05
    3a4e:	fe 83       	std	Y+6, r31	; 0x06
    3a50:	d7 01       	movw	r26, r14
    3a52:	16 96       	adiw	r26, 0x06	; 6
    3a54:	2d 91       	ld	r18, X+
    3a56:	3c 91       	ld	r19, X
    3a58:	17 97       	sbiw	r26, 0x07	; 7
    3a5a:	20 17       	cp	r18, r16
    3a5c:	31 07       	cpc	r19, r17
    3a5e:	09 f0       	breq	.+2      	; 0x3a62 <udd_ep_trans_complet+0x154>
    3a60:	45 c0       	rjmp	.+138    	; 0x3aec <udd_ep_trans_complet+0x1de>
    3a62:	8d 81       	ldd	r24, Y+5	; 0x05
    3a64:	9e 81       	ldd	r25, Y+6	; 0x06
    3a66:	e8 17       	cp	r30, r24
    3a68:	f9 07       	cpc	r31, r25
    3a6a:	09 f4       	brne	.+2      	; 0x3a6e <udd_ep_trans_complet+0x160>
    3a6c:	3f c0       	rjmp	.+126    	; 0x3aec <udd_ep_trans_complet+0x1de>
    3a6e:	e8 1b       	sub	r30, r24
    3a70:	f9 0b       	sbc	r31, r25
    3a72:	e1 15       	cp	r30, r1
    3a74:	b4 e0       	ldi	r27, 0x04	; 4
    3a76:	fb 07       	cpc	r31, r27
    3a78:	48 f0       	brcs	.+18     	; 0x3a8c <udd_ep_trans_complet+0x17e>
    3a7a:	ef ef       	ldi	r30, 0xFF	; 255
    3a7c:	f3 e0       	ldi	r31, 0x03	; 3
    3a7e:	cf 01       	movw	r24, r30
    3a80:	b6 01       	movw	r22, r12
    3a82:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <__udivmodhi4>
    3a86:	e8 1b       	sub	r30, r24
    3a88:	f9 0b       	sbc	r31, r25
    3a8a:	06 c0       	rjmp	.+12     	; 0x3a98 <udd_ep_trans_complet+0x18a>
    3a8c:	cf 01       	movw	r24, r30
    3a8e:	b6 01       	movw	r22, r12
    3a90:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <__udivmodhi4>
    3a94:	e8 1b       	sub	r30, r24
    3a96:	f9 0b       	sbc	r31, r25
    3a98:	d7 01       	movw	r26, r14
    3a9a:	12 96       	adiw	r26, 0x02	; 2
    3a9c:	1d 92       	st	X+, r1
    3a9e:	1c 92       	st	X, r1
    3aa0:	13 97       	sbiw	r26, 0x03	; 3
    3aa2:	ec 15       	cp	r30, r12
    3aa4:	fd 05       	cpc	r31, r13
    3aa6:	78 f4       	brcc	.+30     	; 0x3ac6 <udd_ep_trans_complet+0x1b8>
    3aa8:	88 81       	ld	r24, Y
    3aaa:	84 60       	ori	r24, 0x04	; 4
    3aac:	88 83       	st	Y, r24
    3aae:	b0 e4       	ldi	r27, 0x40	; 64
    3ab0:	bb 9e       	mul	r11, r27
    3ab2:	c0 01       	movw	r24, r0
    3ab4:	11 24       	eor	r1, r1
    3ab6:	8b 5f       	subi	r24, 0xFB	; 251
    3ab8:	96 4d       	sbci	r25, 0xD6	; 214
    3aba:	f7 01       	movw	r30, r14
    3abc:	84 83       	std	Z+4, r24	; 0x04
    3abe:	95 83       	std	Z+5, r25	; 0x05
    3ac0:	c6 82       	std	Z+6, r12	; 0x06
    3ac2:	d7 82       	std	Z+7, r13	; 0x07
    3ac4:	0f c0       	rjmp	.+30     	; 0x3ae4 <udd_ep_trans_complet+0x1d6>
    3ac6:	29 81       	ldd	r18, Y+1	; 0x01
    3ac8:	3a 81       	ldd	r19, Y+2	; 0x02
    3aca:	8d 81       	ldd	r24, Y+5	; 0x05
    3acc:	9e 81       	ldd	r25, Y+6	; 0x06
    3ace:	82 0f       	add	r24, r18
    3ad0:	93 1f       	adc	r25, r19
    3ad2:	d7 01       	movw	r26, r14
    3ad4:	14 96       	adiw	r26, 0x04	; 4
    3ad6:	8d 93       	st	X+, r24
    3ad8:	9c 93       	st	X, r25
    3ada:	15 97       	sbiw	r26, 0x05	; 5
    3adc:	16 96       	adiw	r26, 0x06	; 6
    3ade:	ed 93       	st	X+, r30
    3ae0:	fc 93       	st	X, r31
    3ae2:	17 97       	sbiw	r26, 0x07	; 7
    3ae4:	f7 01       	movw	r30, r14
    3ae6:	02 e0       	ldi	r16, 0x02	; 2
    3ae8:	06 93       	lac	Z, r16
    3aea:	0e c0       	rjmp	.+28     	; 0x3b08 <udd_ep_trans_complet+0x1fa>
    3aec:	88 81       	ld	r24, Y
    3aee:	80 ff       	sbrs	r24, 0
    3af0:	0b c0       	rjmp	.+22     	; 0x3b08 <udd_ep_trans_complet+0x1fa>
    3af2:	8e 7f       	andi	r24, 0xFE	; 254
    3af4:	88 83       	st	Y, r24
    3af6:	ef 81       	ldd	r30, Y+7	; 0x07
    3af8:	f8 85       	ldd	r31, Y+8	; 0x08
    3afa:	30 97       	sbiw	r30, 0x00	; 0
    3afc:	29 f0       	breq	.+10     	; 0x3b08 <udd_ep_trans_complet+0x1fa>
    3afe:	6d 81       	ldd	r22, Y+5	; 0x05
    3b00:	7e 81       	ldd	r23, Y+6	; 0x06
    3b02:	4b 2d       	mov	r20, r11
    3b04:	80 e0       	ldi	r24, 0x00	; 0
    3b06:	19 95       	eicall
    3b08:	df 91       	pop	r29
    3b0a:	cf 91       	pop	r28
    3b0c:	1f 91       	pop	r17
    3b0e:	0f 91       	pop	r16
    3b10:	ff 90       	pop	r15
    3b12:	ef 90       	pop	r14
    3b14:	df 90       	pop	r13
    3b16:	cf 90       	pop	r12
    3b18:	bf 90       	pop	r11
    3b1a:	08 95       	ret

00003b1c <udd_enable>:
    3b1c:	cf 93       	push	r28
    3b1e:	df 93       	push	r29
    3b20:	c0 e6       	ldi	r28, 0x60	; 96
    3b22:	d0 e0       	ldi	r29, 0x00	; 0
    3b24:	18 82       	st	Y, r1
    3b26:	80 e3       	ldi	r24, 0x30	; 48
    3b28:	0e 94 9d 0a 	call	0x153a	; 0x153a <sysclk_enable_usb>
    3b2c:	e0 ec       	ldi	r30, 0xC0	; 192
    3b2e:	f4 e0       	ldi	r31, 0x04	; 4
    3b30:	80 81       	ld	r24, Z
    3b32:	80 64       	ori	r24, 0x40	; 64
    3b34:	80 83       	st	Z, r24
    3b36:	81 e0       	ldi	r24, 0x01	; 1
    3b38:	88 83       	st	Y, r24
    3b3a:	cf b7       	in	r28, 0x3f	; 63
    3b3c:	f8 94       	cli
    3b3e:	10 92 ed 28 	sts	0x28ED, r1
    3b42:	10 92 f5 28 	sts	0x28F5, r1
    3b46:	10 92 fd 28 	sts	0x28FD, r1
    3b4a:	10 92 05 29 	sts	0x2905, r1
    3b4e:	10 92 0d 29 	sts	0x290D, r1
    3b52:	10 92 15 29 	sts	0x2915, r1
    3b56:	e0 e2       	ldi	r30, 0x20	; 32
    3b58:	f9 e2       	ldi	r31, 0x29	; 41
    3b5a:	80 81       	ld	r24, Z
    3b5c:	8e 7f       	andi	r24, 0xFE	; 254
    3b5e:	80 83       	st	Z, r24
    3b60:	e9 e2       	ldi	r30, 0x29	; 41
    3b62:	f9 e2       	ldi	r31, 0x29	; 41
    3b64:	80 81       	ld	r24, Z
    3b66:	8e 7f       	andi	r24, 0xFE	; 254
    3b68:	80 83       	st	Z, r24
    3b6a:	e2 e3       	ldi	r30, 0x32	; 50
    3b6c:	f9 e2       	ldi	r31, 0x29	; 41
    3b6e:	80 81       	ld	r24, Z
    3b70:	8e 7f       	andi	r24, 0xFE	; 254
    3b72:	80 83       	st	Z, r24
    3b74:	eb e3       	ldi	r30, 0x3B	; 59
    3b76:	f9 e2       	ldi	r31, 0x29	; 41
    3b78:	80 81       	ld	r24, Z
    3b7a:	8e 7f       	andi	r24, 0xFE	; 254
    3b7c:	80 83       	st	Z, r24
    3b7e:	6a e1       	ldi	r22, 0x1A	; 26
    3b80:	70 e0       	ldi	r23, 0x00	; 0
    3b82:	82 e0       	ldi	r24, 0x02	; 2
    3b84:	26 db       	rcall	.-2484   	; 0x31d2 <nvm_read_byte>
    3b86:	8f 3f       	cpi	r24, 0xFF	; 255
    3b88:	19 f0       	breq	.+6      	; 0x3b90 <udd_enable+0x74>
    3b8a:	80 93 fa 04 	sts	0x04FA, r24
    3b8e:	03 c0       	rjmp	.+6      	; 0x3b96 <udd_enable+0x7a>
    3b90:	8f e1       	ldi	r24, 0x1F	; 31
    3b92:	80 93 fa 04 	sts	0x04FA, r24
    3b96:	6b e1       	ldi	r22, 0x1B	; 27
    3b98:	70 e0       	ldi	r23, 0x00	; 0
    3b9a:	82 e0       	ldi	r24, 0x02	; 2
    3b9c:	1a db       	rcall	.-2508   	; 0x31d2 <nvm_read_byte>
    3b9e:	8f 3f       	cpi	r24, 0xFF	; 255
    3ba0:	19 f0       	breq	.+6      	; 0x3ba8 <udd_enable+0x8c>
    3ba2:	80 93 fb 04 	sts	0x04FB, r24
    3ba6:	03 c0       	rjmp	.+6      	; 0x3bae <udd_enable+0x92>
    3ba8:	8f e1       	ldi	r24, 0x1F	; 31
    3baa:	80 93 fb 04 	sts	0x04FB, r24
    3bae:	e0 ec       	ldi	r30, 0xC0	; 192
    3bb0:	f4 e0       	ldi	r31, 0x04	; 4
    3bb2:	80 81       	ld	r24, Z
    3bb4:	82 60       	ori	r24, 0x02	; 2
    3bb6:	80 83       	st	Z, r24
    3bb8:	80 81       	ld	r24, Z
    3bba:	80 68       	ori	r24, 0x80	; 128
    3bbc:	80 83       	st	Z, r24
    3bbe:	80 81       	ld	r24, Z
    3bc0:	80 61       	ori	r24, 0x10	; 16
    3bc2:	80 83       	st	Z, r24
    3bc4:	8c ee       	ldi	r24, 0xEC	; 236
    3bc6:	98 e2       	ldi	r25, 0x28	; 40
    3bc8:	86 83       	std	Z+6, r24	; 0x06
    3bca:	97 83       	std	Z+7, r25	; 0x07
    3bcc:	80 81       	ld	r24, Z
    3bce:	80 62       	ori	r24, 0x20	; 32
    3bd0:	80 83       	st	Z, r24
    3bd2:	8f ef       	ldi	r24, 0xFF	; 255
    3bd4:	80 93 c5 04 	sts	0x04C5, r24
    3bd8:	e8 ec       	ldi	r30, 0xC8	; 200
    3bda:	f4 e0       	ldi	r31, 0x04	; 4
    3bdc:	80 81       	ld	r24, Z
    3bde:	81 60       	ori	r24, 0x01	; 1
    3be0:	80 83       	st	Z, r24
    3be2:	10 92 44 29 	sts	0x2944, r1
    3be6:	8f b7       	in	r24, 0x3f	; 63
    3be8:	f8 94       	cli
    3bea:	ec e1       	ldi	r30, 0x1C	; 28
    3bec:	fa e2       	ldi	r31, 0x2A	; 42
    3bee:	90 81       	ld	r25, Z
    3bf0:	9f 5f       	subi	r25, 0xFF	; 255
    3bf2:	90 83       	st	Z, r25
    3bf4:	8f bf       	out	0x3f, r24	; 63
    3bf6:	cf bf       	out	0x3f, r28	; 63
    3bf8:	df 91       	pop	r29
    3bfa:	cf 91       	pop	r28
    3bfc:	08 95       	ret

00003bfe <udd_attach>:
    3bfe:	cf 93       	push	r28
    3c00:	cf b7       	in	r28, 0x3f	; 63
    3c02:	f8 94       	cli
    3c04:	81 e0       	ldi	r24, 0x01	; 1
    3c06:	95 dc       	rcall	.-1750   	; 0x3532 <udd_sleep_mode>
    3c08:	ea ec       	ldi	r30, 0xCA	; 202
    3c0a:	f4 e0       	ldi	r31, 0x04	; 4
    3c0c:	80 e4       	ldi	r24, 0x40	; 64
    3c0e:	80 83       	st	Z, r24
    3c10:	80 e2       	ldi	r24, 0x20	; 32
    3c12:	80 83       	st	Z, r24
    3c14:	e1 ec       	ldi	r30, 0xC1	; 193
    3c16:	f4 e0       	ldi	r31, 0x04	; 4
    3c18:	80 81       	ld	r24, Z
    3c1a:	81 60       	ori	r24, 0x01	; 1
    3c1c:	80 83       	st	Z, r24
    3c1e:	a9 ec       	ldi	r26, 0xC9	; 201
    3c20:	b4 e0       	ldi	r27, 0x04	; 4
    3c22:	8c 91       	ld	r24, X
    3c24:	82 60       	ori	r24, 0x02	; 2
    3c26:	8c 93       	st	X, r24
    3c28:	e8 ec       	ldi	r30, 0xC8	; 200
    3c2a:	f4 e0       	ldi	r31, 0x04	; 4
    3c2c:	80 81       	ld	r24, Z
    3c2e:	80 64       	ori	r24, 0x40	; 64
    3c30:	80 83       	st	Z, r24
    3c32:	8c 91       	ld	r24, X
    3c34:	81 60       	ori	r24, 0x01	; 1
    3c36:	8c 93       	st	X, r24
    3c38:	80 81       	ld	r24, Z
    3c3a:	80 68       	ori	r24, 0x80	; 128
    3c3c:	80 83       	st	Z, r24
    3c3e:	cf bf       	out	0x3f, r28	; 63
    3c40:	cf 91       	pop	r28
    3c42:	08 95       	ret

00003c44 <udd_is_high_speed>:
    3c44:	80 e0       	ldi	r24, 0x00	; 0
    3c46:	08 95       	ret

00003c48 <udd_set_address>:
    3c48:	80 93 c3 04 	sts	0x04C3, r24
    3c4c:	08 95       	ret

00003c4e <udd_getaddress>:
    3c4e:	80 91 c3 04 	lds	r24, 0x04C3
    3c52:	08 95       	ret

00003c54 <udd_get_frame_number>:
    3c54:	20 91 1c 29 	lds	r18, 0x291C
    3c58:	30 91 1d 29 	lds	r19, 0x291D
    3c5c:	82 2f       	mov	r24, r18
    3c5e:	93 2f       	mov	r25, r19
    3c60:	08 95       	ret

00003c62 <udd_get_micro_frame_number>:
    3c62:	80 e0       	ldi	r24, 0x00	; 0
    3c64:	90 e0       	ldi	r25, 0x00	; 0
    3c66:	08 95       	ret

00003c68 <udd_set_setup_payload>:
    3c68:	80 93 2b 2a 	sts	0x2A2B, r24
    3c6c:	90 93 2c 2a 	sts	0x2A2C, r25
    3c70:	60 93 2d 2a 	sts	0x2A2D, r22
    3c74:	70 93 2e 2a 	sts	0x2A2E, r23
    3c78:	08 95       	ret

00003c7a <udd_ep_alloc>:
    3c7a:	ef 92       	push	r14
    3c7c:	ff 92       	push	r15
    3c7e:	0f 93       	push	r16
    3c80:	1f 93       	push	r17
    3c82:	cf 93       	push	r28
    3c84:	df 93       	push	r29
    3c86:	f8 2e       	mov	r15, r24
    3c88:	e6 2e       	mov	r14, r22
    3c8a:	8a 01       	movw	r16, r20
    3c8c:	71 dc       	rcall	.-1822   	; 0x3570 <udd_ep_get_ctrl>
    3c8e:	ec 01       	movw	r28, r24
    3c90:	89 81       	ldd	r24, Y+1	; 0x01
    3c92:	80 7c       	andi	r24, 0xC0	; 192
    3c94:	89 f4       	brne	.+34     	; 0x3cb8 <udd_ep_alloc+0x3e>
    3c96:	a8 01       	movw	r20, r16
    3c98:	6e 2d       	mov	r22, r14
    3c9a:	8f 2d       	mov	r24, r15
    3c9c:	82 dc       	rcall	.-1788   	; 0x35a2 <udd_ep_init>
    3c9e:	89 81       	ldd	r24, Y+1	; 0x01
    3ca0:	80 7c       	andi	r24, 0xC0	; 192
    3ca2:	80 3c       	cpi	r24, 0xC0	; 192
    3ca4:	21 f4       	brne	.+8      	; 0x3cae <udd_ep_alloc+0x34>
    3ca6:	89 81       	ldd	r24, Y+1	; 0x01
    3ca8:	87 70       	andi	r24, 0x07	; 7
    3caa:	87 30       	cpi	r24, 0x07	; 7
    3cac:	39 f0       	breq	.+14     	; 0x3cbc <udd_ep_alloc+0x42>
    3cae:	89 81       	ldd	r24, Y+1	; 0x01
    3cb0:	80 62       	ori	r24, 0x20	; 32
    3cb2:	89 83       	std	Y+1, r24	; 0x01
    3cb4:	81 e0       	ldi	r24, 0x01	; 1
    3cb6:	03 c0       	rjmp	.+6      	; 0x3cbe <udd_ep_alloc+0x44>
    3cb8:	80 e0       	ldi	r24, 0x00	; 0
    3cba:	01 c0       	rjmp	.+2      	; 0x3cbe <udd_ep_alloc+0x44>
    3cbc:	81 e0       	ldi	r24, 0x01	; 1
    3cbe:	df 91       	pop	r29
    3cc0:	cf 91       	pop	r28
    3cc2:	1f 91       	pop	r17
    3cc4:	0f 91       	pop	r16
    3cc6:	ff 90       	pop	r15
    3cc8:	ef 90       	pop	r14
    3cca:	08 95       	ret

00003ccc <udd_ep_is_halted>:
    3ccc:	51 dc       	rcall	.-1886   	; 0x3570 <udd_ep_get_ctrl>
    3cce:	fc 01       	movw	r30, r24
    3cd0:	81 81       	ldd	r24, Z+1	; 0x01
    3cd2:	82 fb       	bst	r24, 2
    3cd4:	88 27       	eor	r24, r24
    3cd6:	80 f9       	bld	r24, 0
    3cd8:	08 95       	ret

00003cda <udd_ep_clear_halt>:
    3cda:	cf 93       	push	r28
    3cdc:	c8 2f       	mov	r28, r24
    3cde:	48 dc       	rcall	.-1904   	; 0x3570 <udd_ep_get_ctrl>
    3ce0:	fc 01       	movw	r30, r24
    3ce2:	81 81       	ldd	r24, Z+1	; 0x01
    3ce4:	82 ff       	sbrs	r24, 2
    3ce6:	0f c0       	rjmp	.+30     	; 0x3d06 <udd_ep_clear_halt+0x2c>
    3ce8:	81 81       	ldd	r24, Z+1	; 0x01
    3cea:	8b 7f       	andi	r24, 0xFB	; 251
    3cec:	81 83       	std	Z+1, r24	; 0x01
    3cee:	8c 2f       	mov	r24, r28
    3cf0:	82 dd       	rcall	.-1276   	; 0x37f6 <udd_ep_get_job>
    3cf2:	fc 01       	movw	r30, r24
    3cf4:	80 81       	ld	r24, Z
    3cf6:	80 ff       	sbrs	r24, 0
    3cf8:	06 c0       	rjmp	.+12     	; 0x3d06 <udd_ep_clear_halt+0x2c>
    3cfa:	8e 7f       	andi	r24, 0xFE	; 254
    3cfc:	80 83       	st	Z, r24
    3cfe:	07 80       	ldd	r0, Z+7	; 0x07
    3d00:	f0 85       	ldd	r31, Z+8	; 0x08
    3d02:	e0 2d       	mov	r30, r0
    3d04:	19 95       	eicall
    3d06:	81 e0       	ldi	r24, 0x01	; 1
    3d08:	cf 91       	pop	r28
    3d0a:	08 95       	ret

00003d0c <udd_ep_run>:
    3d0c:	8f 92       	push	r8
    3d0e:	9f 92       	push	r9
    3d10:	af 92       	push	r10
    3d12:	bf 92       	push	r11
    3d14:	cf 92       	push	r12
    3d16:	df 92       	push	r13
    3d18:	ef 92       	push	r14
    3d1a:	ff 92       	push	r15
    3d1c:	0f 93       	push	r16
    3d1e:	1f 93       	push	r17
    3d20:	cf 93       	push	r28
    3d22:	df 93       	push	r29
    3d24:	98 2e       	mov	r9, r24
    3d26:	86 2e       	mov	r8, r22
    3d28:	5a 01       	movw	r10, r20
    3d2a:	69 01       	movw	r12, r18
    3d2c:	64 dd       	rcall	.-1336   	; 0x37f6 <udd_ep_get_job>
    3d2e:	7c 01       	movw	r14, r24
    3d30:	89 2d       	mov	r24, r9
    3d32:	1e dc       	rcall	.-1988   	; 0x3570 <udd_ep_get_ctrl>
    3d34:	ec 01       	movw	r28, r24
    3d36:	89 81       	ldd	r24, Y+1	; 0x01
    3d38:	80 7c       	andi	r24, 0xC0	; 192
    3d3a:	09 f4       	brne	.+2      	; 0x3d3e <udd_ep_run+0x32>
    3d3c:	4d c0       	rjmp	.+154    	; 0x3dd8 <udd_ep_run+0xcc>
    3d3e:	89 81       	ldd	r24, Y+1	; 0x01
    3d40:	80 7c       	andi	r24, 0xC0	; 192
    3d42:	80 3c       	cpi	r24, 0xC0	; 192
    3d44:	19 f0       	breq	.+6      	; 0x3d4c <udd_ep_run+0x40>
    3d46:	89 81       	ldd	r24, Y+1	; 0x01
    3d48:	82 fd       	sbrc	r24, 2
    3d4a:	48 c0       	rjmp	.+144    	; 0x3ddc <udd_ep_run+0xd0>
    3d4c:	8f b7       	in	r24, 0x3f	; 63
    3d4e:	f8 94       	cli
    3d50:	f7 01       	movw	r30, r14
    3d52:	90 81       	ld	r25, Z
    3d54:	90 ff       	sbrs	r25, 0
    3d56:	03 c0       	rjmp	.+6      	; 0x3d5e <udd_ep_run+0x52>
    3d58:	8f bf       	out	0x3f, r24	; 63
    3d5a:	80 e0       	ldi	r24, 0x00	; 0
    3d5c:	40 c0       	rjmp	.+128    	; 0x3dde <udd_ep_run+0xd2>
    3d5e:	f7 01       	movw	r30, r14
    3d60:	90 81       	ld	r25, Z
    3d62:	91 60       	ori	r25, 0x01	; 1
    3d64:	90 83       	st	Z, r25
    3d66:	8f bf       	out	0x3f, r24	; 63
    3d68:	a1 82       	std	Z+1, r10	; 0x01
    3d6a:	b2 82       	std	Z+2, r11	; 0x02
    3d6c:	c3 82       	std	Z+3, r12	; 0x03
    3d6e:	d4 82       	std	Z+4, r13	; 0x04
    3d70:	15 82       	std	Z+5, r1	; 0x05
    3d72:	16 82       	std	Z+6, r1	; 0x06
    3d74:	07 83       	std	Z+7, r16	; 0x07
    3d76:	10 87       	std	Z+8, r17	; 0x08
    3d78:	81 10       	cpse	r8, r1
    3d7a:	08 c0       	rjmp	.+16     	; 0x3d8c <udd_ep_run+0x80>
    3d7c:	21 e0       	ldi	r18, 0x01	; 1
    3d7e:	30 e0       	ldi	r19, 0x00	; 0
    3d80:	c1 14       	cp	r12, r1
    3d82:	d1 04       	cpc	r13, r1
    3d84:	29 f0       	breq	.+10     	; 0x3d90 <udd_ep_run+0x84>
    3d86:	20 e0       	ldi	r18, 0x00	; 0
    3d88:	30 e0       	ldi	r19, 0x00	; 0
    3d8a:	02 c0       	rjmp	.+4      	; 0x3d90 <udd_ep_run+0x84>
    3d8c:	21 e0       	ldi	r18, 0x01	; 1
    3d8e:	30 e0       	ldi	r19, 0x00	; 0
    3d90:	f7 01       	movw	r30, r14
    3d92:	80 81       	ld	r24, Z
    3d94:	20 fb       	bst	r18, 0
    3d96:	81 f9       	bld	r24, 1
    3d98:	8b 7f       	andi	r24, 0xFB	; 251
    3d9a:	80 83       	st	Z, r24
    3d9c:	99 20       	and	r9, r9
    3d9e:	1c f4       	brge	.+6      	; 0x3da6 <udd_ep_run+0x9a>
    3da0:	1e 82       	std	Y+6, r1	; 0x06
    3da2:	1f 82       	std	Y+7, r1	; 0x07
    3da4:	15 c0       	rjmp	.+42     	; 0x3dd0 <udd_ep_run+0xc4>
    3da6:	89 81       	ldd	r24, Y+1	; 0x01
    3da8:	80 7c       	andi	r24, 0xC0	; 192
    3daa:	80 3c       	cpi	r24, 0xC0	; 192
    3dac:	69 f4       	brne	.+26     	; 0x3dc8 <udd_ep_run+0xbc>
    3dae:	ce 01       	movw	r24, r28
    3db0:	f7 dc       	rcall	.-1554   	; 0x37a0 <udd_ep_get_size>
    3db2:	bc 01       	movw	r22, r24
    3db4:	c6 01       	movw	r24, r12
    3db6:	73 d7       	rcall	.+3814   	; 0x4c9e <__udivmodhi4>
    3db8:	89 2b       	or	r24, r25
    3dba:	31 f0       	breq	.+12     	; 0x3dc8 <udd_ep_run+0xbc>
    3dbc:	f7 01       	movw	r30, r14
    3dbe:	80 81       	ld	r24, Z
    3dc0:	8e 7f       	andi	r24, 0xFE	; 254
    3dc2:	80 83       	st	Z, r24
    3dc4:	80 e0       	ldi	r24, 0x00	; 0
    3dc6:	0b c0       	rjmp	.+22     	; 0x3dde <udd_ep_run+0xd2>
    3dc8:	1a 82       	std	Y+2, r1	; 0x02
    3dca:	1b 82       	std	Y+3, r1	; 0x03
    3dcc:	1e 82       	std	Y+6, r1	; 0x06
    3dce:	1f 82       	std	Y+7, r1	; 0x07
    3dd0:	89 2d       	mov	r24, r9
    3dd2:	9d dd       	rcall	.-1222   	; 0x390e <udd_ep_trans_complet>
    3dd4:	81 e0       	ldi	r24, 0x01	; 1
    3dd6:	03 c0       	rjmp	.+6      	; 0x3dde <udd_ep_run+0xd2>
    3dd8:	80 e0       	ldi	r24, 0x00	; 0
    3dda:	01 c0       	rjmp	.+2      	; 0x3dde <udd_ep_run+0xd2>
    3ddc:	80 e0       	ldi	r24, 0x00	; 0
    3dde:	df 91       	pop	r29
    3de0:	cf 91       	pop	r28
    3de2:	1f 91       	pop	r17
    3de4:	0f 91       	pop	r16
    3de6:	ff 90       	pop	r15
    3de8:	ef 90       	pop	r14
    3dea:	df 90       	pop	r13
    3dec:	cf 90       	pop	r12
    3dee:	bf 90       	pop	r11
    3df0:	af 90       	pop	r10
    3df2:	9f 90       	pop	r9
    3df4:	8f 90       	pop	r8
    3df6:	08 95       	ret

00003df8 <udd_ep_abort>:
    3df8:	0f 93       	push	r16
    3dfa:	1f 93       	push	r17
    3dfc:	cf 93       	push	r28
    3dfe:	df 93       	push	r29
    3e00:	18 2f       	mov	r17, r24
    3e02:	b6 db       	rcall	.-2196   	; 0x3570 <udd_ep_get_ctrl>
    3e04:	ec 01       	movw	r28, r24
    3e06:	81 2f       	mov	r24, r17
    3e08:	f6 dc       	rcall	.-1556   	; 0x37f6 <udd_ep_get_job>
    3e0a:	dc 01       	movw	r26, r24
    3e0c:	fe 01       	movw	r30, r28
    3e0e:	02 e0       	ldi	r16, 0x02	; 2
    3e10:	05 93       	las	Z, r16
    3e12:	8c 91       	ld	r24, X
    3e14:	80 ff       	sbrs	r24, 0
    3e16:	12 c0       	rjmp	.+36     	; 0x3e3c <udd_ep_abort+0x44>
    3e18:	8e 7f       	andi	r24, 0xFE	; 254
    3e1a:	8c 93       	st	X, r24
    3e1c:	17 96       	adiw	r26, 0x07	; 7
    3e1e:	ed 91       	ld	r30, X+
    3e20:	fc 91       	ld	r31, X
    3e22:	18 97       	sbiw	r26, 0x08	; 8
    3e24:	30 97       	sbiw	r30, 0x00	; 0
    3e26:	51 f0       	breq	.+20     	; 0x3e3c <udd_ep_abort+0x44>
    3e28:	11 23       	and	r17, r17
    3e2a:	1c f4       	brge	.+6      	; 0x3e32 <udd_ep_abort+0x3a>
    3e2c:	6e 81       	ldd	r22, Y+6	; 0x06
    3e2e:	7f 81       	ldd	r23, Y+7	; 0x07
    3e30:	02 c0       	rjmp	.+4      	; 0x3e36 <udd_ep_abort+0x3e>
    3e32:	6a 81       	ldd	r22, Y+2	; 0x02
    3e34:	7b 81       	ldd	r23, Y+3	; 0x03
    3e36:	41 2f       	mov	r20, r17
    3e38:	81 e0       	ldi	r24, 0x01	; 1
    3e3a:	19 95       	eicall
    3e3c:	df 91       	pop	r29
    3e3e:	cf 91       	pop	r28
    3e40:	1f 91       	pop	r17
    3e42:	0f 91       	pop	r16
    3e44:	08 95       	ret

00003e46 <udd_ep_set_halt>:
    3e46:	0f 93       	push	r16
    3e48:	cf 93       	push	r28
    3e4a:	c8 2f       	mov	r28, r24
    3e4c:	91 db       	rcall	.-2270   	; 0x3570 <udd_ep_get_ctrl>
    3e4e:	fc 01       	movw	r30, r24
    3e50:	81 81       	ldd	r24, Z+1	; 0x01
    3e52:	84 60       	ori	r24, 0x04	; 4
    3e54:	81 83       	std	Z+1, r24	; 0x01
    3e56:	01 e0       	ldi	r16, 0x01	; 1
    3e58:	06 93       	lac	Z, r16
    3e5a:	8c 2f       	mov	r24, r28
    3e5c:	cd df       	rcall	.-102    	; 0x3df8 <udd_ep_abort>
    3e5e:	81 e0       	ldi	r24, 0x01	; 1
    3e60:	cf 91       	pop	r28
    3e62:	0f 91       	pop	r16
    3e64:	08 95       	ret

00003e66 <udd_ep_free>:
    3e66:	cf 93       	push	r28
    3e68:	c8 2f       	mov	r28, r24
    3e6a:	c6 df       	rcall	.-116    	; 0x3df8 <udd_ep_abort>
    3e6c:	8c 2f       	mov	r24, r28
    3e6e:	80 db       	rcall	.-2304   	; 0x3570 <udd_ep_get_ctrl>
    3e70:	fc 01       	movw	r30, r24
    3e72:	11 82       	std	Z+1, r1	; 0x01
    3e74:	cf 91       	pop	r28
    3e76:	08 95       	ret

00003e78 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    3e78:	1f 92       	push	r1
    3e7a:	0f 92       	push	r0
    3e7c:	0f b6       	in	r0, 0x3f	; 63
    3e7e:	0f 92       	push	r0
    3e80:	11 24       	eor	r1, r1
    3e82:	0b b6       	in	r0, 0x3b	; 59
    3e84:	0f 92       	push	r0
    3e86:	0f 93       	push	r16
    3e88:	2f 93       	push	r18
    3e8a:	3f 93       	push	r19
    3e8c:	4f 93       	push	r20
    3e8e:	5f 93       	push	r21
    3e90:	6f 93       	push	r22
    3e92:	7f 93       	push	r23
    3e94:	8f 93       	push	r24
    3e96:	9f 93       	push	r25
    3e98:	af 93       	push	r26
    3e9a:	bf 93       	push	r27
    3e9c:	ef 93       	push	r30
    3e9e:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    3ea0:	80 91 cb 04 	lds	r24, 0x04CB
    3ea4:	88 23       	and	r24, r24
    3ea6:	34 f4       	brge	.+12     	; 0x3eb4 <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    3ea8:	80 e8       	ldi	r24, 0x80	; 128
    3eaa:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    3eae:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    3eb2:	7e c0       	rjmp	.+252    	; 0x3fb0 <__vector_125+0x138>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    3eb4:	80 91 cb 04 	lds	r24, 0x04CB
    3eb8:	82 ff       	sbrs	r24, 2
    3eba:	20 c0       	rjmp	.+64     	; 0x3efc <__vector_125+0x84>
		udd_ack_underflow_event();
    3ebc:	84 e0       	ldi	r24, 0x04	; 4
    3ebe:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    3ec2:	80 91 f4 28 	lds	r24, 0x28F4
    3ec6:	86 ff       	sbrs	r24, 6
    3ec8:	73 c0       	rjmp	.+230    	; 0x3fb0 <__vector_125+0x138>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    3eca:	80 91 cc 04 	lds	r24, 0x04CC
    3ece:	81 fd       	sbrc	r24, 1
    3ed0:	6f c0       	rjmp	.+222    	; 0x3fb0 <__vector_125+0x138>
    3ed2:	af dc       	rcall	.-1698   	; 0x3832 <udd_ctrl_interrupt_tc_setup>
    3ed4:	81 11       	cpse	r24, r1
    3ed6:	6c c0       	rjmp	.+216    	; 0x3fb0 <__vector_125+0x138>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    3ed8:	80 91 05 2a 	lds	r24, 0x2A05
    3edc:	81 30       	cpi	r24, 0x01	; 1
    3ede:	11 f4       	brne	.+4      	; 0x3ee4 <__vector_125+0x6c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    3ee0:	d7 db       	rcall	.-2130   	; 0x3690 <udd_ctrl_send_zlp_in>
    3ee2:	66 c0       	rjmp	.+204    	; 0x3fb0 <__vector_125+0x138>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    3ee4:	84 30       	cpi	r24, 0x04	; 4
    3ee6:	09 f0       	breq	.+2      	; 0x3eea <__vector_125+0x72>
    3ee8:	63 c0       	rjmp	.+198    	; 0x3fb0 <__vector_125+0x138>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    3eea:	e5 ef       	ldi	r30, 0xF5	; 245
    3eec:	f8 e2       	ldi	r31, 0x28	; 40
    3eee:	04 e0       	ldi	r16, 0x04	; 4
    3ef0:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    3ef2:	ed ee       	ldi	r30, 0xED	; 237
    3ef4:	f8 e2       	ldi	r31, 0x28	; 40
    3ef6:	04 e0       	ldi	r16, 0x04	; 4
    3ef8:	05 93       	las	Z, r16
    3efa:	5a c0       	rjmp	.+180    	; 0x3fb0 <__vector_125+0x138>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    3efc:	80 91 cb 04 	lds	r24, 0x04CB
    3f00:	81 ff       	sbrs	r24, 1
    3f02:	51 c0       	rjmp	.+162    	; 0x3fa6 <__vector_125+0x12e>
		udd_ack_overflow_event();
    3f04:	82 e0       	ldi	r24, 0x02	; 2
    3f06:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    3f0a:	80 91 ec 28 	lds	r24, 0x28EC
    3f0e:	86 ff       	sbrs	r24, 6
    3f10:	4f c0       	rjmp	.+158    	; 0x3fb0 <__vector_125+0x138>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    3f12:	80 91 cc 04 	lds	r24, 0x04CC
    3f16:	81 fd       	sbrc	r24, 1
    3f18:	4b c0       	rjmp	.+150    	; 0x3fb0 <__vector_125+0x138>
    3f1a:	8b dc       	rcall	.-1770   	; 0x3832 <udd_ctrl_interrupt_tc_setup>
    3f1c:	81 11       	cpse	r24, r1
    3f1e:	48 c0       	rjmp	.+144    	; 0x3fb0 <__vector_125+0x138>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    3f20:	80 91 05 2a 	lds	r24, 0x2A05
    3f24:	82 30       	cpi	r24, 0x02	; 2
    3f26:	11 f4       	brne	.+4      	; 0x3f2c <__vector_125+0xb4>
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
    3f28:	c1 db       	rcall	.-2174   	; 0x36ac <udd_ctrl_send_zlp_out>
    3f2a:	42 c0       	rjmp	.+132    	; 0x3fb0 <__vector_125+0x138>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    3f2c:	83 30       	cpi	r24, 0x03	; 3
    3f2e:	09 f0       	breq	.+2      	; 0x3f32 <__vector_125+0xba>
    3f30:	3f c0       	rjmp	.+126    	; 0x3fb0 <__vector_125+0x138>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    3f32:	e5 ef       	ldi	r30, 0xF5	; 245
    3f34:	f8 e2       	ldi	r31, 0x28	; 40
    3f36:	04 e0       	ldi	r16, 0x04	; 4
    3f38:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    3f3a:	ed ee       	ldi	r30, 0xED	; 237
    3f3c:	f8 e2       	ldi	r31, 0x28	; 40
    3f3e:	04 e0       	ldi	r16, 0x04	; 4
    3f40:	05 93       	las	Z, r16
    3f42:	36 c0       	rjmp	.+108    	; 0x3fb0 <__vector_125+0x138>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    3f44:	80 e1       	ldi	r24, 0x10	; 16
    3f46:	80 93 ca 04 	sts	0x04CA, r24
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    3f4a:	81 e0       	ldi	r24, 0x01	; 1
    3f4c:	55 df       	rcall	.-342    	; 0x3df8 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    3f4e:	81 e8       	ldi	r24, 0x81	; 129
    3f50:	53 df       	rcall	.-346    	; 0x3df8 <udd_ep_abort>
		}
#endif
		udc_reset();
    3f52:	0e 94 bc 12 	call	0x2578	; 0x2578 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    3f56:	10 92 c3 04 	sts	0x04C3, r1
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
    3f5a:	40 e4       	ldi	r20, 0x40	; 64
    3f5c:	50 e0       	ldi	r21, 0x00	; 0
    3f5e:	60 e0       	ldi	r22, 0x00	; 0
    3f60:	80 e0       	ldi	r24, 0x00	; 0
    3f62:	1f db       	rcall	.-2498   	; 0x35a2 <udd_ep_init>
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
    3f64:	40 e4       	ldi	r20, 0x40	; 64
    3f66:	50 e0       	ldi	r21, 0x00	; 0
    3f68:	60 e0       	ldi	r22, 0x00	; 0
    3f6a:	80 e8       	ldi	r24, 0x80	; 128
    3f6c:	1a db       	rcall	.-2508   	; 0x35a2 <udd_ep_init>
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    3f6e:	85 ec       	ldi	r24, 0xC5	; 197
    3f70:	99 e2       	ldi	r25, 0x29	; 41
    3f72:	80 93 f0 28 	sts	0x28F0, r24
    3f76:	90 93 f1 28 	sts	0x28F1, r25
		// Reset endpoint control management
		udd_ctrl_init();
    3f7a:	51 db       	rcall	.-2398   	; 0x361e <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    3f7c:	19 c0       	rjmp	.+50     	; 0x3fb0 <__vector_125+0x138>
	}

	if (udd_is_suspend_event()) {
    3f7e:	80 91 cb 04 	lds	r24, 0x04CB
    3f82:	86 ff       	sbrs	r24, 6
    3f84:	06 c0       	rjmp	.+12     	; 0x3f92 <__vector_125+0x11a>
		udd_ack_suspend_event();
    3f86:	80 e4       	ldi	r24, 0x40	; 64
    3f88:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    3f8c:	80 e0       	ldi	r24, 0x00	; 0
    3f8e:	d1 da       	rcall	.-2654   	; 0x3532 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    3f90:	0f c0       	rjmp	.+30     	; 0x3fb0 <__vector_125+0x138>
	}

	if (udd_is_resume_event()) {
    3f92:	80 91 cb 04 	lds	r24, 0x04CB
    3f96:	85 ff       	sbrs	r24, 5
    3f98:	0b c0       	rjmp	.+22     	; 0x3fb0 <__vector_125+0x138>
		udd_ack_resume_event();
    3f9a:	80 e2       	ldi	r24, 0x20	; 32
    3f9c:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    3fa0:	81 e0       	ldi	r24, 0x01	; 1
    3fa2:	c7 da       	rcall	.-2674   	; 0x3532 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    3fa4:	05 c0       	rjmp	.+10     	; 0x3fb0 <__vector_125+0x138>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    3fa6:	80 91 cb 04 	lds	r24, 0x04CB
    3faa:	84 fd       	sbrc	r24, 4
    3fac:	cb cf       	rjmp	.-106    	; 0x3f44 <__vector_125+0xcc>
    3fae:	e7 cf       	rjmp	.-50     	; 0x3f7e <__vector_125+0x106>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    3fb0:	ff 91       	pop	r31
    3fb2:	ef 91       	pop	r30
    3fb4:	bf 91       	pop	r27
    3fb6:	af 91       	pop	r26
    3fb8:	9f 91       	pop	r25
    3fba:	8f 91       	pop	r24
    3fbc:	7f 91       	pop	r23
    3fbe:	6f 91       	pop	r22
    3fc0:	5f 91       	pop	r21
    3fc2:	4f 91       	pop	r20
    3fc4:	3f 91       	pop	r19
    3fc6:	2f 91       	pop	r18
    3fc8:	0f 91       	pop	r16
    3fca:	0f 90       	pop	r0
    3fcc:	0b be       	out	0x3b, r0	; 59
    3fce:	0f 90       	pop	r0
    3fd0:	0f be       	out	0x3f, r0	; 63
    3fd2:	0f 90       	pop	r0
    3fd4:	1f 90       	pop	r1
    3fd6:	18 95       	reti

00003fd8 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    3fd8:	1f 92       	push	r1
    3fda:	0f 92       	push	r0
    3fdc:	0f b6       	in	r0, 0x3f	; 63
    3fde:	0f 92       	push	r0
    3fe0:	11 24       	eor	r1, r1
    3fe2:	0b b6       	in	r0, 0x3b	; 59
    3fe4:	0f 92       	push	r0
    3fe6:	0f 93       	push	r16
    3fe8:	1f 93       	push	r17
    3fea:	2f 93       	push	r18
    3fec:	3f 93       	push	r19
    3fee:	4f 93       	push	r20
    3ff0:	5f 93       	push	r21
    3ff2:	6f 93       	push	r22
    3ff4:	7f 93       	push	r23
    3ff6:	8f 93       	push	r24
    3ff8:	9f 93       	push	r25
    3ffa:	af 93       	push	r26
    3ffc:	bf 93       	push	r27
    3ffe:	cf 93       	push	r28
    4000:	df 93       	push	r29
    4002:	ef 93       	push	r30
    4004:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    4006:	80 91 cc 04 	lds	r24, 0x04CC
    400a:	81 fd       	sbrc	r24, 1
    400c:	03 c0       	rjmp	.+6      	; 0x4014 <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    400e:	11 dc       	rcall	.-2014   	; 0x3832 <udd_ctrl_interrupt_tc_setup>
    4010:	81 11       	cpse	r24, r1
    4012:	aa c0       	rjmp	.+340    	; 0x4168 <__vector_126+0x190>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    4014:	82 e0       	ldi	r24, 0x02	; 2
    4016:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    401a:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    401e:	81 95       	neg	r24
    4020:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    4022:	ec ee       	ldi	r30, 0xEC	; 236
    4024:	f8 e2       	ldi	r31, 0x28	; 40
    4026:	e8 1b       	sub	r30, r24
    4028:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    402a:	20 81       	ld	r18, Z
    402c:	31 81       	ldd	r19, Z+1	; 0x01
    402e:	2c 5e       	subi	r18, 0xEC	; 236
    4030:	38 42       	sbci	r19, 0x28	; 40
    4032:	36 95       	lsr	r19
    4034:	27 95       	ror	r18
    4036:	36 95       	lsr	r19
    4038:	27 95       	ror	r18
    403a:	36 95       	lsr	r19
    403c:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    403e:	82 2f       	mov	r24, r18
    4040:	86 95       	lsr	r24
    4042:	20 ff       	sbrs	r18, 0
    4044:	02 c0       	rjmp	.+4      	; 0x404a <__vector_126+0x72>
    4046:	c0 e8       	ldi	r28, 0x80	; 128
    4048:	01 c0       	rjmp	.+2      	; 0x404c <__vector_126+0x74>
    404a:	c0 e0       	ldi	r28, 0x00	; 0
    404c:	c8 0f       	add	r28, r24
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    404e:	8c 2f       	mov	r24, r28
    4050:	8f da       	rcall	.-2786   	; 0x3570 <udd_ep_get_ctrl>
    4052:	fc 01       	movw	r30, r24
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    4054:	80 81       	ld	r24, Z
    4056:	85 ff       	sbrs	r24, 5
    4058:	87 c0       	rjmp	.+270    	; 0x4168 <__vector_126+0x190>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    405a:	00 e2       	ldi	r16, 0x20	; 32
    405c:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    405e:	c1 11       	cpse	r28, r1
    4060:	7d c0       	rjmp	.+250    	; 0x415c <__vector_126+0x184>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    4062:	80 91 05 2a 	lds	r24, 0x2A05
    4066:	84 30       	cpi	r24, 0x04	; 4
    4068:	19 f4       	brne	.+6      	; 0x4070 <__vector_126+0x98>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    406a:	2a db       	rcall	.-2476   	; 0x36c0 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    406c:	d8 da       	rcall	.-2640   	; 0x361e <udd_ctrl_init>
    406e:	7c c0       	rjmp	.+248    	; 0x4168 <__vector_126+0x190>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    4070:	c0 91 ee 28 	lds	r28, 0x28EE
    4074:	d0 91 ef 28 	lds	r29, 0x28EF

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    4078:	80 91 2d 2a 	lds	r24, 0x2A2D
    407c:	90 91 2e 2a 	lds	r25, 0x2A2E
    4080:	00 91 08 2a 	lds	r16, 0x2A08
    4084:	10 91 09 2a 	lds	r17, 0x2A09
    4088:	98 01       	movw	r18, r16
    408a:	2c 0f       	add	r18, r28
    408c:	3d 1f       	adc	r19, r29
    408e:	82 17       	cp	r24, r18
    4090:	93 07       	cpc	r25, r19
    4092:	18 f4       	brcc	.+6      	; 0x409a <__vector_126+0xc2>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    4094:	ec 01       	movw	r28, r24
    4096:	c0 1b       	sub	r28, r16
    4098:	d1 0b       	sbc	r29, r17
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    409a:	20 91 2b 2a 	lds	r18, 0x2A2B
    409e:	30 91 2c 2a 	lds	r19, 0x2A2C
    40a2:	20 0f       	add	r18, r16
    40a4:	31 1f       	adc	r19, r17
    40a6:	85 ec       	ldi	r24, 0xC5	; 197
    40a8:	99 e2       	ldi	r25, 0x29	; 41
    40aa:	4c 2f       	mov	r20, r28
    40ac:	5d 2f       	mov	r21, r29
    40ae:	68 2f       	mov	r22, r24
    40b0:	79 2f       	mov	r23, r25
    40b2:	82 2f       	mov	r24, r18
    40b4:	93 2f       	mov	r25, r19
    40b6:	b0 d7       	rcall	.+3936   	; 0x5018 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    40b8:	0c 0f       	add	r16, r28
    40ba:	1d 1f       	adc	r17, r29
    40bc:	00 93 08 2a 	sts	0x2A08, r16
    40c0:	10 93 09 2a 	sts	0x2A09, r17

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    40c4:	c0 34       	cpi	r28, 0x40	; 64
    40c6:	d1 05       	cpc	r29, r1
    40c8:	69 f4       	brne	.+26     	; 0x40e4 <__vector_126+0x10c>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    40ca:	80 91 06 2a 	lds	r24, 0x2A06
    40ce:	90 91 07 2a 	lds	r25, 0x2A07
    40d2:	80 0f       	add	r24, r16
    40d4:	91 1f       	adc	r25, r17

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    40d6:	20 91 29 2a 	lds	r18, 0x2A29
    40da:	30 91 2a 2a 	lds	r19, 0x2A2A
    40de:	82 17       	cp	r24, r18
    40e0:	93 07       	cpc	r25, r19
    40e2:	88 f0       	brcs	.+34     	; 0x4106 <__vector_126+0x12e>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    40e4:	00 93 2d 2a 	sts	0x2A2D, r16
    40e8:	10 93 2e 2a 	sts	0x2A2E, r17
		if (NULL != udd_g_ctrlreq.over_under_run) {
    40ec:	e0 91 31 2a 	lds	r30, 0x2A31
    40f0:	f0 91 32 2a 	lds	r31, 0x2A32
    40f4:	30 97       	sbiw	r30, 0x00	; 0
    40f6:	29 f0       	breq	.+10     	; 0x4102 <__vector_126+0x12a>
			if (!udd_g_ctrlreq.over_under_run()) {
    40f8:	19 95       	eicall
    40fa:	81 11       	cpse	r24, r1
    40fc:	02 c0       	rjmp	.+4      	; 0x4102 <__vector_126+0x12a>
				// Stall ZLP
				udd_ctrl_stall_data();
    40fe:	ba da       	rcall	.-2700   	; 0x3674 <udd_ctrl_stall_data>
    4100:	33 c0       	rjmp	.+102    	; 0x4168 <__vector_126+0x190>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    4102:	c6 da       	rcall	.-2676   	; 0x3690 <udd_ctrl_send_zlp_in>
    4104:	31 c0       	rjmp	.+98     	; 0x4168 <__vector_126+0x190>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    4106:	80 91 2d 2a 	lds	r24, 0x2A2D
    410a:	90 91 2e 2a 	lds	r25, 0x2A2E
    410e:	08 17       	cp	r16, r24
    4110:	19 07       	cpc	r17, r25
    4112:	f9 f4       	brne	.+62     	; 0x4152 <__vector_126+0x17a>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    4114:	e0 91 31 2a 	lds	r30, 0x2A31
    4118:	f0 91 32 2a 	lds	r31, 0x2A32
    411c:	30 97       	sbiw	r30, 0x00	; 0
    411e:	11 f4       	brne	.+4      	; 0x4124 <__vector_126+0x14c>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    4120:	a9 da       	rcall	.-2734   	; 0x3674 <udd_ctrl_stall_data>
    4122:	22 c0       	rjmp	.+68     	; 0x4168 <__vector_126+0x190>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    4124:	19 95       	eicall
    4126:	81 11       	cpse	r24, r1
    4128:	02 c0       	rjmp	.+4      	; 0x412e <__vector_126+0x156>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    412a:	a4 da       	rcall	.-2744   	; 0x3674 <udd_ctrl_stall_data>
    412c:	1d c0       	rjmp	.+58     	; 0x4168 <__vector_126+0x190>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    412e:	20 91 06 2a 	lds	r18, 0x2A06
    4132:	30 91 07 2a 	lds	r19, 0x2A07
    4136:	80 91 08 2a 	lds	r24, 0x2A08
    413a:	90 91 09 2a 	lds	r25, 0x2A09
    413e:	82 0f       	add	r24, r18
    4140:	93 1f       	adc	r25, r19
    4142:	80 93 06 2a 	sts	0x2A06, r24
    4146:	90 93 07 2a 	sts	0x2A07, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    414a:	10 92 08 2a 	sts	0x2A08, r1
    414e:	10 92 09 2a 	sts	0x2A09, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    4152:	ec ee       	ldi	r30, 0xEC	; 236
    4154:	f8 e2       	ldi	r31, 0x28	; 40
    4156:	02 e0       	ldi	r16, 0x02	; 2
    4158:	06 93       	lac	Z, r16
    415a:	06 c0       	rjmp	.+12     	; 0x4168 <__vector_126+0x190>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    415c:	c0 38       	cpi	r28, 0x80	; 128
    415e:	11 f4       	brne	.+4      	; 0x4164 <__vector_126+0x18c>
		udd_ctrl_in_sent();
    4160:	b7 da       	rcall	.-2706   	; 0x36d0 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    4162:	02 c0       	rjmp	.+4      	; 0x4168 <__vector_126+0x190>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    4164:	8c 2f       	mov	r24, r28
    4166:	d3 db       	rcall	.-2138   	; 0x390e <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    4168:	ff 91       	pop	r31
    416a:	ef 91       	pop	r30
    416c:	df 91       	pop	r29
    416e:	cf 91       	pop	r28
    4170:	bf 91       	pop	r27
    4172:	af 91       	pop	r26
    4174:	9f 91       	pop	r25
    4176:	8f 91       	pop	r24
    4178:	7f 91       	pop	r23
    417a:	6f 91       	pop	r22
    417c:	5f 91       	pop	r21
    417e:	4f 91       	pop	r20
    4180:	3f 91       	pop	r19
    4182:	2f 91       	pop	r18
    4184:	1f 91       	pop	r17
    4186:	0f 91       	pop	r16
    4188:	0f 90       	pop	r0
    418a:	0b be       	out	0x3b, r0	; 59
    418c:	0f 90       	pop	r0
    418e:	0f be       	out	0x3f, r0	; 63
    4190:	0f 90       	pop	r0
    4192:	1f 90       	pop	r1
    4194:	18 95       	reti

00004196 <cdc_start>:
		help++;
	}
}

void cdc_start(void)
{
    4196:	ef 92       	push	r14
    4198:	ff 92       	push	r15
    419a:	0f 93       	push	r16
    419c:	1f 93       	push	r17
    419e:	cf 93       	push	r28
    41a0:	df 93       	push	r29
    41a2:	cd b7       	in	r28, 0x3d	; 61
    41a4:	de b7       	in	r29, 0x3e	; 62
    41a6:	60 97       	sbiw	r28, 0x10	; 16
    41a8:	cd bf       	out	0x3d, r28	; 61
    41aa:	de bf       	out	0x3e, r29	; 62
	uint8_t i;
	uint8_t temp;
	uint8_t nibble_to_ascii[16] = "0123456789ABCDEF";
    41ac:	80 e1       	ldi	r24, 0x10	; 16
    41ae:	e4 e2       	ldi	r30, 0x24	; 36
    41b0:	f1 e2       	ldi	r31, 0x21	; 33
    41b2:	de 01       	movw	r26, r28
    41b4:	11 96       	adiw	r26, 0x01	; 1
    41b6:	01 90       	ld	r0, Z+
    41b8:	0d 92       	st	X+, r0
    41ba:	8a 95       	dec	r24
    41bc:	e1 f7       	brne	.-8      	; 0x41b6 <cdc_start+0x20>
    41be:	0f 2e       	mov	r0, r31
    41c0:	f4 e3       	ldi	r31, 0x34	; 52
    41c2:	ef 2e       	mov	r14, r31
    41c4:	fa e2       	ldi	r31, 0x2A	; 42
    41c6:	ff 2e       	mov	r15, r31
    41c8:	f0 2d       	mov	r31, r0
    41ca:	08 e0       	ldi	r16, 0x08	; 8
    41cc:	10 e0       	ldi	r17, 0x00	; 0
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_user_signature_row(uint16_t address)
{
	return nvm_read_byte(NVM_CMD_READ_USER_SIG_ROW_gc, address);
    41ce:	b8 01       	movw	r22, r16
    41d0:	81 e0       	ldi	r24, 0x01	; 1
    41d2:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <nvm_read_byte>
		udi_cdc_putc(val);
		help++;
	}
}

void cdc_start(void)
    41d6:	f7 01       	movw	r30, r14
    41d8:	31 97       	sbiw	r30, 0x01	; 1
	 */
	for (i = 0; i < USER_SIGNATURE_USBID_SIZE / 2; i++) {
		temp = nvm_read_user_signature_row(
				i + USER_SIGNATURE_USBID_POS);
		// Upper nibble
		cdc_serial_number[i * 2] = nibble_to_ascii[(temp & 0xF0) >> 4];
    41da:	98 2f       	mov	r25, r24
    41dc:	92 95       	swap	r25
    41de:	9f 70       	andi	r25, 0x0F	; 15
    41e0:	a1 e0       	ldi	r26, 0x01	; 1
    41e2:	b0 e0       	ldi	r27, 0x00	; 0
    41e4:	ac 0f       	add	r26, r28
    41e6:	bd 1f       	adc	r27, r29
    41e8:	a9 0f       	add	r26, r25
    41ea:	b1 1d       	adc	r27, r1
    41ec:	9c 91       	ld	r25, X
    41ee:	90 83       	st	Z, r25
		// Lower nibble
		cdc_serial_number[(i * 2) + 1] = nibble_to_ascii[temp & 0x0F];
    41f0:	8f 70       	andi	r24, 0x0F	; 15
    41f2:	e1 e0       	ldi	r30, 0x01	; 1
    41f4:	f0 e0       	ldi	r31, 0x00	; 0
    41f6:	ec 0f       	add	r30, r28
    41f8:	fd 1f       	adc	r31, r29
    41fa:	e8 0f       	add	r30, r24
    41fc:	f1 1d       	adc	r31, r1
    41fe:	80 81       	ld	r24, Z
    4200:	f7 01       	movw	r30, r14
    4202:	80 83       	st	Z, r24
    4204:	0f 5f       	subi	r16, 0xFF	; 255
    4206:	1f 4f       	sbci	r17, 0xFF	; 255
    4208:	f2 e0       	ldi	r31, 0x02	; 2
    420a:	ef 0e       	add	r14, r31
    420c:	f1 1c       	adc	r15, r1
	uint8_t nibble_to_ascii[16] = "0123456789ABCDEF";

	/* Copy serial number from user signature row and convert to ASCII
	 * The 6 byte id results in a 12 byte string (1 character per nibble)
	 */
	for (i = 0; i < USER_SIGNATURE_USBID_SIZE / 2; i++) {
    420e:	0e 30       	cpi	r16, 0x0E	; 14
    4210:	11 05       	cpc	r17, r1
    4212:	e9 f6       	brne	.-70     	; 0x41ce <cdc_start+0x38>
		cdc_serial_number[i * 2] = nibble_to_ascii[(temp & 0xF0) >> 4];
		// Lower nibble
		cdc_serial_number[(i * 2) + 1] = nibble_to_ascii[temp & 0x0F];
	}

	udc_start();
    4214:	0e 94 b9 12 	call	0x2572	; 0x2572 <udc_start>
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
    4218:	f2 dc       	rcall	.-1564   	; 0x3bfe <udd_attach>
	udc_attach();
}
    421a:	60 96       	adiw	r28, 0x10	; 16
    421c:	cd bf       	out	0x3d, r28	; 61
    421e:	de bf       	out	0x3e, r29	; 62
    4220:	df 91       	pop	r29
    4222:	cf 91       	pop	r28
    4224:	1f 91       	pop	r17
    4226:	0f 91       	pop	r16
    4228:	ff 90       	pop	r15
    422a:	ef 90       	pop	r14
    422c:	08 95       	ret

0000422e <cdc_set_dtr>:

void cdc_set_dtr(bool enable)
{
	cdc_opened = enable;
    422e:	80 93 0b 2a 	sts	0x2A0B, r24
    4232:	08 95       	ret

00004234 <cdc_getkey>:
{
	char key;
	static uint8_t esc_state = 0;

	// If the cdc was opened, print out the help
	if (cdc_opened) {
    4234:	80 91 0b 2a 	lds	r24, 0x2A0B
    4238:	81 11       	cpse	r24, r1
		cdc_opened = false;
    423a:	10 92 0b 2a 	sts	0x2A0B, r1
		//cdc_put_help();
	}

	if (!udi_cdc_is_rx_ready()) {
    423e:	0e 94 f5 10 	call	0x21ea	; 0x21ea <udi_cdc_is_rx_ready>
    4242:	88 23       	and	r24, r24
    4244:	f1 f0       	breq	.+60     	; 0x4282 <cdc_getkey+0x4e>
		return KEYBOARD_NO_KEY;
	}

	key = udi_cdc_getc();
    4246:	0e 94 42 11 	call	0x2284	; 0x2284 <udi_cdc_getc>

	if (esc_state == 1) {
    424a:	90 91 0c 2a 	lds	r25, 0x2A0C
    424e:	91 30       	cpi	r25, 0x01	; 1
    4250:	49 f4       	brne	.+18     	; 0x4264 <cdc_getkey+0x30>
		if (key == 0x5b) {
    4252:	8b 35       	cpi	r24, 0x5B	; 91
    4254:	21 f4       	brne	.+8      	; 0x425e <cdc_getkey+0x2a>
			esc_state = 2;
    4256:	92 e0       	ldi	r25, 0x02	; 2
    4258:	90 93 0c 2a 	sts	0x2A0C, r25
    425c:	08 95       	ret
		} else {
			esc_state = 0;
    425e:	10 92 0c 2a 	sts	0x2A0C, r1
    4262:	08 c0       	rjmp	.+16     	; 0x4274 <cdc_getkey+0x40>
		}
	} else if (esc_state == 2) {
    4264:	92 30       	cpi	r25, 0x02	; 2
    4266:	31 f4       	brne	.+12     	; 0x4274 <cdc_getkey+0x40>
		esc_state = 0;
    4268:	10 92 0c 2a 	sts	0x2A0C, r1
		// Translate up/down arrow keys to keycodes
		switch (key) {
    426c:	81 34       	cpi	r24, 0x41	; 65
    426e:	59 f0       	breq	.+22     	; 0x4286 <cdc_getkey+0x52>
    4270:	82 34       	cpi	r24, 0x42	; 66
    4272:	59 f0       	breq	.+22     	; 0x428a <cdc_getkey+0x56>
			break;
		}
	}

	// Check for escape sequence
	if (key == 0x1b) {
    4274:	8b 31       	cpi	r24, 0x1B	; 27
    4276:	51 f4       	brne	.+20     	; 0x428c <cdc_getkey+0x58>
		esc_state = 1;
    4278:	81 e0       	ldi	r24, 0x01	; 1
    427a:	80 93 0c 2a 	sts	0x2A0C, r24
		return KEYBOARD_NO_KEY;
    427e:	80 e0       	ldi	r24, 0x00	; 0
    4280:	08 95       	ret
		cdc_opened = false;
		//cdc_put_help();
	}

	if (!udi_cdc_is_rx_ready()) {
		return KEYBOARD_NO_KEY;
    4282:	80 e0       	ldi	r24, 0x00	; 0
    4284:	08 95       	ret
	} else if (esc_state == 2) {
		esc_state = 0;
		// Translate up/down arrow keys to keycodes
		switch (key) {
		case 'A':
			key = KEYBOARD_UP;
    4286:	86 e2       	ldi	r24, 0x26	; 38
    4288:	08 95       	ret
			break;
		case 'B':
			key = KEYBOARD_DOWN;
    428a:	88 e2       	ldi	r24, 0x28	; 40
		return KEYBOARD_NO_KEY;
	}

	// Just return any other key directly
	return key;
}
    428c:	08 95       	ret

0000428e <keyboard_get_key_state>:
 * \brief Check the status of the keyboard
 *
 * \param keybuffer  a keyboard_event struct to store keyboard status
 */
void keyboard_get_key_state(struct keyboard_event *keybuffer)
{
    428e:	cf 93       	push	r28
    4290:	df 93       	push	r29
    4292:	ec 01       	movw	r28, r24

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    4294:	e0 e8       	ldi	r30, 0x80	; 128
    4296:	f6 e0       	ldi	r31, 0x06	; 6
    4298:	80 85       	ldd	r24, Z+8	; 0x08
	// Variable to hold the key mask
	static uint8_t key_state;
	char key;

	if ((gpio_pin_is_low(GPIO_PUSH_BUTTON_0)) &&
    429a:	85 fd       	sbrc	r24, 5
    429c:	0c c0       	rjmp	.+24     	; 0x42b6 <keyboard_get_key_state+0x28>
			!(key_state & KEYBOARD_ENTER_MASK)) {
    429e:	80 91 0d 2a 	lds	r24, 0x2A0D
{
	// Variable to hold the key mask
	static uint8_t key_state;
	char key;

	if ((gpio_pin_is_low(GPIO_PUSH_BUTTON_0)) &&
    42a2:	80 fd       	sbrc	r24, 0
    42a4:	08 c0       	rjmp	.+16     	; 0x42b6 <keyboard_get_key_state+0x28>
			!(key_state & KEYBOARD_ENTER_MASK)) {
		// Key pressed
		key_state |= KEYBOARD_ENTER_MASK;
    42a6:	81 60       	ori	r24, 0x01	; 1
    42a8:	80 93 0d 2a 	sts	0x2A0D, r24
		keybuffer->keycode = KEYBOARD_ENTER;
    42ac:	8d e0       	ldi	r24, 0x0D	; 13
    42ae:	88 83       	st	Y, r24
		keybuffer->type = KEYBOARD_PRESS;
    42b0:	81 e0       	ldi	r24, 0x01	; 1
    42b2:	89 83       	std	Y+1, r24	; 0x01
    42b4:	7c c0       	rjmp	.+248    	; 0x43ae <keyboard_get_key_state+0x120>
    42b6:	e0 e8       	ldi	r30, 0x80	; 128
    42b8:	f6 e0       	ldi	r31, 0x06	; 6
    42ba:	80 85       	ldd	r24, Z+8	; 0x08
	} else if ((gpio_pin_is_high(GPIO_PUSH_BUTTON_0))
    42bc:	85 ff       	sbrs	r24, 5
    42be:	0c c0       	rjmp	.+24     	; 0x42d8 <keyboard_get_key_state+0x4a>
			&& (key_state & KEYBOARD_ENTER_MASK)) {
    42c0:	80 91 0d 2a 	lds	r24, 0x2A0D
    42c4:	80 ff       	sbrs	r24, 0
    42c6:	08 c0       	rjmp	.+16     	; 0x42d8 <keyboard_get_key_state+0x4a>
		// Key released
		key_state &= ~KEYBOARD_ENTER_MASK;
    42c8:	8e 7f       	andi	r24, 0xFE	; 254
    42ca:	80 93 0d 2a 	sts	0x2A0D, r24
		keybuffer->keycode = KEYBOARD_ENTER;
    42ce:	8d e0       	ldi	r24, 0x0D	; 13
    42d0:	88 83       	st	Y, r24
		keybuffer->type = KEYBOARD_RELEASE;
    42d2:	82 e0       	ldi	r24, 0x02	; 2
    42d4:	89 83       	std	Y+1, r24	; 0x01
    42d6:	6b c0       	rjmp	.+214    	; 0x43ae <keyboard_get_key_state+0x120>
    42d8:	e0 ea       	ldi	r30, 0xA0	; 160
    42da:	f6 e0       	ldi	r31, 0x06	; 6
    42dc:	80 85       	ldd	r24, Z+8	; 0x08
	} else if ((gpio_pin_is_low(GPIO_PUSH_BUTTON_1)) &&
    42de:	81 fd       	sbrc	r24, 1
    42e0:	0c c0       	rjmp	.+24     	; 0x42fa <keyboard_get_key_state+0x6c>
			!(key_state & KEYBOARD_UP_MASK)) {
    42e2:	80 91 0d 2a 	lds	r24, 0x2A0D
			&& (key_state & KEYBOARD_ENTER_MASK)) {
		// Key released
		key_state &= ~KEYBOARD_ENTER_MASK;
		keybuffer->keycode = KEYBOARD_ENTER;
		keybuffer->type = KEYBOARD_RELEASE;
	} else if ((gpio_pin_is_low(GPIO_PUSH_BUTTON_1)) &&
    42e6:	81 fd       	sbrc	r24, 1
    42e8:	08 c0       	rjmp	.+16     	; 0x42fa <keyboard_get_key_state+0x6c>
			!(key_state & KEYBOARD_UP_MASK)) {
		// Key pressed
		key_state |= KEYBOARD_UP_MASK;
    42ea:	82 60       	ori	r24, 0x02	; 2
    42ec:	80 93 0d 2a 	sts	0x2A0D, r24
		keybuffer->keycode = KEYBOARD_UP;
    42f0:	86 e2       	ldi	r24, 0x26	; 38
    42f2:	88 83       	st	Y, r24
		keybuffer->type = KEYBOARD_PRESS;
    42f4:	81 e0       	ldi	r24, 0x01	; 1
    42f6:	89 83       	std	Y+1, r24	; 0x01
    42f8:	5a c0       	rjmp	.+180    	; 0x43ae <keyboard_get_key_state+0x120>
    42fa:	e0 ea       	ldi	r30, 0xA0	; 160
    42fc:	f6 e0       	ldi	r31, 0x06	; 6
    42fe:	80 85       	ldd	r24, Z+8	; 0x08
	} else if ((gpio_pin_is_high(GPIO_PUSH_BUTTON_1))
    4300:	81 ff       	sbrs	r24, 1
    4302:	0c c0       	rjmp	.+24     	; 0x431c <keyboard_get_key_state+0x8e>
			&& (key_state & KEYBOARD_UP_MASK)) {
    4304:	80 91 0d 2a 	lds	r24, 0x2A0D
    4308:	81 ff       	sbrs	r24, 1
    430a:	08 c0       	rjmp	.+16     	; 0x431c <keyboard_get_key_state+0x8e>
		// Key released
		key_state &= ~KEYBOARD_UP_MASK;
    430c:	8d 7f       	andi	r24, 0xFD	; 253
    430e:	80 93 0d 2a 	sts	0x2A0D, r24
		keybuffer->keycode = KEYBOARD_UP;
    4312:	86 e2       	ldi	r24, 0x26	; 38
    4314:	88 83       	st	Y, r24
		keybuffer->type = KEYBOARD_RELEASE;
    4316:	82 e0       	ldi	r24, 0x02	; 2
    4318:	89 83       	std	Y+1, r24	; 0x01
    431a:	49 c0       	rjmp	.+146    	; 0x43ae <keyboard_get_key_state+0x120>
    431c:	e0 ea       	ldi	r30, 0xA0	; 160
    431e:	f6 e0       	ldi	r31, 0x06	; 6
    4320:	80 85       	ldd	r24, Z+8	; 0x08
	} else if ((gpio_pin_is_low(GPIO_PUSH_BUTTON_2)) &&
    4322:	82 fd       	sbrc	r24, 2
    4324:	0c c0       	rjmp	.+24     	; 0x433e <keyboard_get_key_state+0xb0>
			!(key_state & KEYBOARD_DOWN_MASK)) {
    4326:	80 91 0d 2a 	lds	r24, 0x2A0D
			&& (key_state & KEYBOARD_UP_MASK)) {
		// Key released
		key_state &= ~KEYBOARD_UP_MASK;
		keybuffer->keycode = KEYBOARD_UP;
		keybuffer->type = KEYBOARD_RELEASE;
	} else if ((gpio_pin_is_low(GPIO_PUSH_BUTTON_2)) &&
    432a:	82 fd       	sbrc	r24, 2
    432c:	08 c0       	rjmp	.+16     	; 0x433e <keyboard_get_key_state+0xb0>
			!(key_state & KEYBOARD_DOWN_MASK)) {
		// Key pressed
		key_state |= KEYBOARD_DOWN_MASK;
    432e:	84 60       	ori	r24, 0x04	; 4
    4330:	80 93 0d 2a 	sts	0x2A0D, r24
		keybuffer->keycode = KEYBOARD_DOWN;
    4334:	88 e2       	ldi	r24, 0x28	; 40
    4336:	88 83       	st	Y, r24
		keybuffer->type = KEYBOARD_PRESS;
    4338:	81 e0       	ldi	r24, 0x01	; 1
    433a:	89 83       	std	Y+1, r24	; 0x01
    433c:	38 c0       	rjmp	.+112    	; 0x43ae <keyboard_get_key_state+0x120>
    433e:	e0 ea       	ldi	r30, 0xA0	; 160
    4340:	f6 e0       	ldi	r31, 0x06	; 6
    4342:	80 85       	ldd	r24, Z+8	; 0x08
	} else if ((gpio_pin_is_high(GPIO_PUSH_BUTTON_2))
    4344:	82 ff       	sbrs	r24, 2
    4346:	0c c0       	rjmp	.+24     	; 0x4360 <keyboard_get_key_state+0xd2>
			&& (key_state & KEYBOARD_DOWN_MASK)) {
    4348:	80 91 0d 2a 	lds	r24, 0x2A0D
    434c:	82 ff       	sbrs	r24, 2
    434e:	08 c0       	rjmp	.+16     	; 0x4360 <keyboard_get_key_state+0xd2>
		// Key released
		key_state &= ~KEYBOARD_DOWN_MASK;
    4350:	8b 7f       	andi	r24, 0xFB	; 251
    4352:	80 93 0d 2a 	sts	0x2A0D, r24
		keybuffer->keycode = KEYBOARD_DOWN;
    4356:	88 e2       	ldi	r24, 0x28	; 40
    4358:	88 83       	st	Y, r24
		keybuffer->type = KEYBOARD_RELEASE;
    435a:	82 e0       	ldi	r24, 0x02	; 2
    435c:	89 83       	std	Y+1, r24	; 0x01
    435e:	27 c0       	rjmp	.+78     	; 0x43ae <keyboard_get_key_state+0x120>

	// touch key
	} else if ((check_touch_key_pressed()) &&
    4360:	cc d2       	rcall	.+1432   	; 0x48fa <check_touch_key_pressed>
    4362:	88 23       	and	r24, r24
    4364:	61 f0       	breq	.+24     	; 0x437e <keyboard_get_key_state+0xf0>
			!(key_state & KEYBOARD_BACK_MASK)) {
    4366:	80 91 0d 2a 	lds	r24, 0x2A0D
		key_state &= ~KEYBOARD_DOWN_MASK;
		keybuffer->keycode = KEYBOARD_DOWN;
		keybuffer->type = KEYBOARD_RELEASE;

	// touch key
	} else if ((check_touch_key_pressed()) &&
    436a:	83 fd       	sbrc	r24, 3
    436c:	08 c0       	rjmp	.+16     	; 0x437e <keyboard_get_key_state+0xf0>
			!(key_state & KEYBOARD_BACK_MASK)) {
		// Touch key pressed
		key_state |= KEYBOARD_BACK_MASK;
    436e:	88 60       	ori	r24, 0x08	; 8
    4370:	80 93 0d 2a 	sts	0x2A0D, r24
		keybuffer->keycode = KEYBOARD_BACK;
    4374:	88 e0       	ldi	r24, 0x08	; 8
    4376:	88 83       	st	Y, r24
		keybuffer->type = KEYBOARD_PRESS;
    4378:	81 e0       	ldi	r24, 0x01	; 1
    437a:	89 83       	std	Y+1, r24	; 0x01
    437c:	18 c0       	rjmp	.+48     	; 0x43ae <keyboard_get_key_state+0x120>
	} else if ((!check_touch_key_pressed()) &&
    437e:	bd d2       	rcall	.+1402   	; 0x48fa <check_touch_key_pressed>
    4380:	81 11       	cpse	r24, r1
    4382:	0c c0       	rjmp	.+24     	; 0x439c <keyboard_get_key_state+0x10e>
			(key_state & KEYBOARD_BACK_MASK)) {
    4384:	80 91 0d 2a 	lds	r24, 0x2A0D
			!(key_state & KEYBOARD_BACK_MASK)) {
		// Touch key pressed
		key_state |= KEYBOARD_BACK_MASK;
		keybuffer->keycode = KEYBOARD_BACK;
		keybuffer->type = KEYBOARD_PRESS;
	} else if ((!check_touch_key_pressed()) &&
    4388:	83 ff       	sbrs	r24, 3
    438a:	08 c0       	rjmp	.+16     	; 0x439c <keyboard_get_key_state+0x10e>
			(key_state & KEYBOARD_BACK_MASK)) {
		// Touch key released
		key_state &= ~KEYBOARD_BACK_MASK;
    438c:	87 7f       	andi	r24, 0xF7	; 247
    438e:	80 93 0d 2a 	sts	0x2A0D, r24
		keybuffer->keycode = KEYBOARD_BACK;
    4392:	88 e0       	ldi	r24, 0x08	; 8
    4394:	88 83       	st	Y, r24
		keybuffer->type = KEYBOARD_RELEASE;
    4396:	82 e0       	ldi	r24, 0x02	; 2
    4398:	89 83       	std	Y+1, r24	; 0x01
    439a:	09 c0       	rjmp	.+18     	; 0x43ae <keyboard_get_key_state+0x120>
	} else if ((key = cdc_getkey()) != KEYBOARD_NO_KEY) {
    439c:	4b df       	rcall	.-362    	; 0x4234 <cdc_getkey>
    439e:	88 23       	and	r24, r24
    43a0:	21 f0       	breq	.+8      	; 0x43aa <keyboard_get_key_state+0x11c>
		keybuffer->keycode = key;
    43a2:	88 83       	st	Y, r24
		keybuffer->type = KEYBOARD_RELEASE;
    43a4:	82 e0       	ldi	r24, 0x02	; 2
    43a6:	89 83       	std	Y+1, r24	; 0x01
    43a8:	02 c0       	rjmp	.+4      	; 0x43ae <keyboard_get_key_state+0x120>
	} else {
		keybuffer->keycode = KEYBOARD_NO_KEY;
    43aa:	18 82       	st	Y, r1
		keybuffer->type = KEYBOARD_NO_EVENT;
    43ac:	19 82       	std	Y+1, r1	; 0x01
	}
}
    43ae:	df 91       	pop	r29
    43b0:	cf 91       	pop	r28
    43b2:	08 95       	ret

000043b4 <adcb_handler>:
		keyboard_get_key_state(&input);
		if (input.type == KEYBOARD_RELEASE) {
			break;
		}
	}
}
    43b4:	61 30       	cpi	r22, 0x01	; 1
    43b6:	61 f5       	brne	.+88     	; 0x4410 <adcb_handler+0x5c>
    43b8:	80 91 11 2a 	lds	r24, 0x2A11
    43bc:	8f 5f       	subi	r24, 0xFF	; 255
    43be:	80 93 11 2a 	sts	0x2A11, r24
    43c2:	81 30       	cpi	r24, 0x01	; 1
    43c4:	39 f4       	brne	.+14     	; 0x43d4 <adcb_handler+0x20>
    43c6:	40 93 0e 2a 	sts	0x2A0E, r20
    43ca:	50 93 0f 2a 	sts	0x2A0F, r21
    43ce:	10 92 10 2a 	sts	0x2A10, r1
    43d2:	0c c0       	rjmp	.+24     	; 0x43ec <adcb_handler+0x38>
    43d4:	80 91 0e 2a 	lds	r24, 0x2A0E
    43d8:	90 91 0f 2a 	lds	r25, 0x2A0F
    43dc:	48 0f       	add	r20, r24
    43de:	59 1f       	adc	r21, r25
    43e0:	56 95       	lsr	r21
    43e2:	47 95       	ror	r20
    43e4:	40 93 0e 2a 	sts	0x2A0E, r20
    43e8:	50 93 0f 2a 	sts	0x2A0F, r21
    43ec:	80 91 11 2a 	lds	r24, 0x2A11
    43f0:	84 30       	cpi	r24, 0x04	; 4
    43f2:	31 f4       	brne	.+12     	; 0x4400 <adcb_handler+0x4c>
    43f4:	10 92 11 2a 	sts	0x2A11, r1
    43f8:	81 e0       	ldi	r24, 0x01	; 1
    43fa:	80 93 10 2a 	sts	0x2A10, r24
    43fe:	08 95       	ret
    4400:	8f b7       	in	r24, 0x3f	; 63
    4402:	f8 94       	cli
    4404:	e0 e4       	ldi	r30, 0x40	; 64
    4406:	f2 e0       	ldi	r31, 0x02	; 2
    4408:	90 81       	ld	r25, Z
    440a:	94 60       	ori	r25, 0x04	; 4
    440c:	90 83       	st	Z, r25
    440e:	8f bf       	out	0x3f, r24	; 63
    4410:	08 95       	ret

00004412 <cdc_putstr>:
    4412:	cf 93       	push	r28
    4414:	df 93       	push	r29
    4416:	ec 01       	movw	r28, r24
    4418:	88 81       	ld	r24, Y
    441a:	88 23       	and	r24, r24
    441c:	49 f0       	breq	.+18     	; 0x4430 <cdc_putstr+0x1e>
    441e:	21 96       	adiw	r28, 0x01	; 1
    4420:	99 27       	eor	r25, r25
    4422:	87 fd       	sbrc	r24, 7
    4424:	90 95       	com	r25
    4426:	0e 94 bc 11 	call	0x2378	; 0x2378 <udi_cdc_putc>
    442a:	89 91       	ld	r24, Y+
    442c:	81 11       	cpse	r24, r1
    442e:	f8 cf       	rjmp	.-16     	; 0x4420 <cdc_putstr+0xe>
    4430:	df 91       	pop	r29
    4432:	cf 91       	pop	r28
    4434:	08 95       	ret

00004436 <adcb_ch0_get_raw_value>:
#define ADCB_CH0_MAX_SAMPLES 4

int16_t adcb_ch0_get_raw_value(void)
{
	return adc_sensor_sample;
}
    4436:	80 91 0e 2a 	lds	r24, 0x2A0E
    443a:	90 91 0f 2a 	lds	r25, 0x2A0F
    443e:	08 95       	ret

00004440 <adcb_data_is_ready>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    4440:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    4442:	f8 94       	cli
	irqflags_t irqflags;
	/* We will need to save and turn of global interrupts to make sure that we
	read the latest adcb value and not the next one if a conversation finish
	before one have time read the data. */
	irqflags = cpu_irq_save();
	if (adc_sensor_data_ready) {
    4444:	90 91 10 2a 	lds	r25, 0x2A10
    4448:	99 23       	and	r25, r25
    444a:	29 f0       	breq	.+10     	; 0x4456 <adcb_data_is_ready+0x16>
		adc_sensor_data_ready = false;
    444c:	10 92 10 2a 	sts	0x2A10, r1
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4450:	8f bf       	out	0x3f, r24	; 63
		cpu_irq_restore(irqflags);
		return true;
    4452:	81 e0       	ldi	r24, 0x01	; 1
    4454:	08 95       	ret
    4456:	8f bf       	out	0x3f, r24	; 63
	} else {
		cpu_irq_restore(irqflags);
		return false;
    4458:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    445a:	08 95       	ret

0000445c <temp_disp_init>:
/************************************************************************/
/*  Temperature display function. Applies to ADCA as well as this test  */
/************************************************************************/

void temp_disp_init()
{	
    445c:	0f 93       	push	r16

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    445e:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    4460:	f8 94       	cli
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
    4462:	e0 e4       	ldi	r30, 0x40	; 64
    4464:	f2 e0       	ldi	r31, 0x02	; 2
    4466:	90 81       	ld	r25, Z
    4468:	94 60       	ori	r25, 0x04	; 4
    446a:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    446c:	8f bf       	out	0x3f, r24	; 63
	*/
	// Initiate a ADCB reading
	adcb_ch0_measure();
	
	// Struct for holding the temperature scale background
	tempscale.type = GFX_MONO_BITMAP_RAM;
    446e:	10 92 45 2a 	sts	0x2A45, r1
	tempscale.width = 6;
    4472:	86 e0       	ldi	r24, 0x06	; 6
    4474:	80 93 43 2a 	sts	0x2A43, r24
	tempscale.height = 32;
    4478:	80 e2       	ldi	r24, 0x20	; 32
    447a:	80 93 44 2a 	sts	0x2A44, r24
	tempscale.data.pixmap = tempscale_img;
    447e:	82 ec       	ldi	r24, 0xC2	; 194
    4480:	90 e2       	ldi	r25, 0x20	; 32
    4482:	80 93 46 2a 	sts	0x2A46, r24
    4486:	90 93 47 2a 	sts	0x2A47, r25

	// Screen border
	gfx_mono_draw_rect(0, 0, 128, 32, GFX_PIXEL_SET);
    448a:	01 e0       	ldi	r16, 0x01	; 1
    448c:	20 e2       	ldi	r18, 0x20	; 32
    448e:	40 e8       	ldi	r20, 0x80	; 128
    4490:	60 e0       	ldi	r22, 0x00	; 0
    4492:	80 e0       	ldi	r24, 0x00	; 0
    4494:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <gfx_mono_generic_draw_rect>
	// Clear screen
	gfx_mono_draw_filled_rect(1, 1, 126, 30, GFX_PIXEL_CLR);
    4498:	00 e0       	ldi	r16, 0x00	; 0
    449a:	2e e1       	ldi	r18, 0x1E	; 30
    449c:	4e e7       	ldi	r20, 0x7E	; 126
    449e:	61 e0       	ldi	r22, 0x01	; 1
    44a0:	81 e0       	ldi	r24, 0x01	; 1
    44a2:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <gfx_mono_generic_draw_filled_rect>
	
	//Paint thermometer on screen
	gfx_mono_put_bitmap(&tempscale, 10, 0);
    44a6:	40 e0       	ldi	r20, 0x00	; 0
    44a8:	6a e0       	ldi	r22, 0x0A	; 10
    44aa:	83 e4       	ldi	r24, 0x43	; 67
    44ac:	9a e2       	ldi	r25, 0x2A	; 42
    44ae:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <gfx_mono_generic_put_bitmap>
	while (!ntc_data_is_ready());
	// Read the temperature once the ADC reading is done
	temperature = ntc_get_temperature();
	*/
	// Wait for ADCB date to ready
	while (!adcb_data_is_ready());
    44b2:	c6 df       	rcall	.-116    	; 0x4440 <adcb_data_is_ready>
    44b4:	88 23       	and	r24, r24
    44b6:	e9 f3       	breq	.-6      	; 0x44b2 <temp_disp_init+0x56>
	temperature = adcb_ch0_get_raw_value();
    44b8:	be df       	rcall	.-132    	; 0x4436 <adcb_ch0_get_raw_value>
    44ba:	80 93 40 2a 	sts	0x2A40, r24
    44be:	90 93 41 2a 	sts	0x2A41, r25
	
	
	// Convert the temperature into the thermometer scale
	temp_scale = -0.36 * temperature + 20.25;
    44c2:	bc 01       	movw	r22, r24
    44c4:	88 27       	eor	r24, r24
    44c6:	77 fd       	sbrc	r23, 7
    44c8:	80 95       	com	r24
    44ca:	98 2f       	mov	r25, r24
    44cc:	f9 d2       	rcall	.+1522   	; 0x4ac0 <__floatsisf>
    44ce:	2c ee       	ldi	r18, 0xEC	; 236
    44d0:	31 e5       	ldi	r19, 0x51	; 81
    44d2:	48 eb       	ldi	r20, 0xB8	; 184
    44d4:	5e eb       	ldi	r21, 0xBE	; 190
    44d6:	80 d3       	rcall	.+1792   	; 0x4bd8 <__mulsf3>
    44d8:	20 e0       	ldi	r18, 0x00	; 0
    44da:	30 e0       	ldi	r19, 0x00	; 0
    44dc:	42 ea       	ldi	r20, 0xA2	; 162
    44de:	51 e4       	ldi	r21, 0x41	; 65
    44e0:	5d d2       	rcall	.+1210   	; 0x499c <__addsf3>
    44e2:	c0 d2       	rcall	.+1408   	; 0x4a64 <__fixunssfsi>
    44e4:	26 2f       	mov	r18, r22
    44e6:	60 93 42 2a 	sts	0x2A42, r22
	if (temp_scale <= 0) {
		temp_scale = 0;
	}
	
	// Draw the scale element on top of the background temperature image
	gfx_mono_draw_filled_rect(12, 3, 2, temp_scale,
    44ea:	00 e0       	ldi	r16, 0x00	; 0
    44ec:	42 e0       	ldi	r20, 0x02	; 2
    44ee:	63 e0       	ldi	r22, 0x03	; 3
    44f0:	8c e0       	ldi	r24, 0x0C	; 12
    44f2:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <gfx_mono_generic_draw_filled_rect>
	GFX_PIXEL_CLR);
	
	snprintf(temperature_string, sizeof(temperature_string), "%3i Celsius",
    44f6:	80 91 41 2a 	lds	r24, 0x2A41
    44fa:	8f 93       	push	r24
    44fc:	80 91 40 2a 	lds	r24, 0x2A40
    4500:	8f 93       	push	r24
    4502:	88 e4       	ldi	r24, 0x48	; 72
    4504:	91 e2       	ldi	r25, 0x21	; 33
    4506:	9f 93       	push	r25
    4508:	8f 93       	push	r24
    450a:	1f 92       	push	r1
    450c:	8f e0       	ldi	r24, 0x0F	; 15
    450e:	8f 93       	push	r24
    4510:	88 e4       	ldi	r24, 0x48	; 72
    4512:	9a e2       	ldi	r25, 0x2A	; 42
    4514:	9f 93       	push	r25
    4516:	8f 93       	push	r24
    4518:	ae d5       	rcall	.+2908   	; 0x5076 <snprintf>
	temperature);

	// Draw the Celsius string
	gfx_mono_draw_string(temperature_string, 22, 13, &sysfont);
    451a:	27 e0       	ldi	r18, 0x07	; 7
    451c:	30 e2       	ldi	r19, 0x20	; 32
    451e:	4d e0       	ldi	r20, 0x0D	; 13
    4520:	66 e1       	ldi	r22, 0x16	; 22
    4522:	88 e4       	ldi	r24, 0x48	; 72
    4524:	9a e2       	ldi	r25, 0x2A	; 42
    4526:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <gfx_mono_draw_string>
    452a:	8d b7       	in	r24, 0x3d	; 61
    452c:	9e b7       	in	r25, 0x3e	; 62
    452e:	08 96       	adiw	r24, 0x08	; 8
    4530:	8d bf       	out	0x3d, r24	; 61
    4532:	9e bf       	out	0x3e, r25	; 62
}
    4534:	0f 91       	pop	r16
    4536:	08 95       	ret

00004538 <adc_b_sensors_init>:
/* Initializes the adc_b for reading external sensors.
   Should be moved to own file with headers etc. when completed and tested
                                                                        */
/************************************************************************/
void adc_b_sensors_init()
{
    4538:	cf 93       	push	r28
    453a:	df 93       	push	r29
    453c:	cd b7       	in	r28, 0x3d	; 61
    453e:	de b7       	in	r29, 0x3e	; 62
    4540:	2b 97       	sbiw	r28, 0x0b	; 11
    4542:	cd bf       	out	0x3d, r28	; 61
    4544:	de bf       	out	0x3e, r29	; 62
	struct adc_config adc_conf;
	struct adc_channel_config adc_ch_conf;

	/* Clear the ADC configuration structs */
	adc_read_configuration(&ADCB, &adc_conf);
    4546:	be 01       	movw	r22, r28
    4548:	6f 5f       	subi	r22, 0xFF	; 255
    454a:	7f 4f       	sbci	r23, 0xFF	; 255
    454c:	80 e4       	ldi	r24, 0x40	; 64
    454e:	92 e0       	ldi	r25, 0x02	; 2
    4550:	0e 94 33 18 	call	0x3066	; 0x3066 <adc_read_configuration>
	adcch_read_configuration(&ADCB, ADC_CH0, &adc_ch_conf);
    4554:	ae 01       	movw	r20, r28
    4556:	48 5f       	subi	r20, 0xF8	; 248
    4558:	5f 4f       	sbci	r21, 0xFF	; 255
    455a:	61 e0       	ldi	r22, 0x01	; 1
    455c:	80 e4       	ldi	r24, 0x40	; 64
    455e:	92 e0       	ldi	r25, 0x02	; 2
    4560:	0e 94 8f 18 	call	0x311e	; 0x311e <adcch_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    4564:	8a 81       	ldd	r24, Y+2	; 0x02
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    4566:	9b 81       	ldd	r25, Y+3	; 0x03
    4568:	9f 78       	andi	r25, 0x8F	; 143
	conf->refctrl |= ref;
    456a:	90 63       	ori	r25, 0x30	; 48
    456c:	9b 83       	std	Y+3, r25	; 0x03
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    456e:	96 e0       	ldi	r25, 0x06	; 6
    4570:	9d 83       	std	Y+5, r25	; 0x05
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    4572:	81 7e       	andi	r24, 0xE1	; 225
    4574:	8a 83       	std	Y+2, r24	; 0x02
		conf->evctrl = ADC_EVACT_NONE_gc;
    4576:	1c 82       	std	Y+4, r1	; 0x04
	*/
	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_OFF, ADC_RES_12,
			ADC_REF_AREFB);	// Reference voltage might have to be set to ..._AREFB_gc instead
	adc_set_clock_rate(&adc_conf, 125000UL);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 0, 0);
	adc_write_configuration(&ADCB, &adc_conf);
    4578:	be 01       	movw	r22, r28
    457a:	6f 5f       	subi	r22, 0xFF	; 255
    457c:	7f 4f       	sbci	r23, 0xFF	; 255
    457e:	80 e4       	ldi	r24, 0x40	; 64
    4580:	92 e0       	ldi	r25, 0x02	; 2
    4582:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <adc_write_configuration>
	adc_set_callback(&ADCB, &adcb_handler);
    4586:	6a ed       	ldi	r22, 0xDA	; 218
    4588:	71 e2       	ldi	r23, 0x21	; 33
    458a:	80 e4       	ldi	r24, 0x40	; 64
    458c:	92 e0       	ldi	r25, 0x02	; 2
    458e:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <adc_set_callback>

	/* Configure for single-ended measurement. */
	if (neg == ADCCH_NEG_NONE) {
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    4592:	81 e0       	ldi	r24, 0x01	; 1
    4594:	88 87       	std	Y+8, r24	; 0x08
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    4596:	88 e0       	ldi	r24, 0x08	; 8
    4598:	89 87       	std	Y+9, r24	; 0x09
 *
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_enable_interrupt(struct adc_channel_config *ch_conf)
{
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
    459a:	8a 85       	ldd	r24, Y+10	; 0x0a
    459c:	80 7f       	andi	r24, 0xF0	; 240
	ch_conf->intctrl |= CONFIG_ADC_INTLVL;
    459e:	81 60       	ori	r24, 0x01	; 1
    45a0:	8a 87       	std	Y+10, r24	; 0x0a
	 * - interrupts enabled
	 */
	adcch_set_input(&adc_ch_conf, ADCCH_POS_PIN1, ADCCH_NEG_NONE, 1);
	adcch_set_interrupt_mode(&adc_ch_conf, ADCCH_MODE_COMPLETE);
	adcch_enable_interrupt(&adc_ch_conf);
	adcch_write_configuration(&ADCB, ADC_CH0, &adc_ch_conf);
    45a2:	ae 01       	movw	r20, r28
    45a4:	48 5f       	subi	r20, 0xF8	; 248
    45a6:	5f 4f       	sbci	r21, 0xFF	; 255
    45a8:	61 e0       	ldi	r22, 0x01	; 1
    45aa:	80 e4       	ldi	r24, 0x40	; 64
    45ac:	92 e0       	ldi	r25, 0x02	; 2
    45ae:	0e 94 56 18 	call	0x30ac	; 0x30ac <adcch_write_configuration>
	
	// Enable ADC
	adc_enable(&ADCB);
    45b2:	80 e4       	ldi	r24, 0x40	; 64
    45b4:	92 e0       	ldi	r25, 0x02	; 2
    45b6:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <adc_enable>
}
    45ba:	2b 96       	adiw	r28, 0x0b	; 11
    45bc:	cd bf       	out	0x3d, r28	; 61
    45be:	de bf       	out	0x3e, r29	; 62
    45c0:	df 91       	pop	r29
    45c2:	cf 91       	pop	r28
    45c4:	08 95       	ret

000045c6 <main>:
 * set timezone from EEPROM if it is set. If it is not set it will open the
 * timezone selector to select the local timezone. It then runs the menu system
 * in an infinite while loop.
 */
int main(void)
{
    45c6:	cf 93       	push	r28
    45c8:	df 93       	push	r29
    45ca:	1f 92       	push	r1
    45cc:	1f 92       	push	r1
    45ce:	cd b7       	in	r28, 0x3d	; 61
    45d0:	de b7       	in	r29, 0x3e	; 62
	uint8_t menu_status;
	struct keyboard_event input;
	uint32_t rtc_timestamp;

	sysclk_init();
    45d2:	0e 94 12 0a 	call	0x1424	; 0x1424 <sysclk_init>
	board_init();
    45d6:	0e 94 83 15 	call	0x2b06	; 0x2b06 <board_init>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    45da:	87 e0       	ldi	r24, 0x07	; 7
    45dc:	e0 ea       	ldi	r30, 0xA0	; 160
    45de:	f0 e0       	ldi	r31, 0x00	; 0
    45e0:	82 83       	std	Z+2, r24	; 0x02
	pmic_init();
	gfx_mono_init();
    45e2:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <gfx_mono_st7565r_init>
	touch_init();
    45e6:	3a d1       	rcall	.+628    	; 0x485c <touch_init>
	//adc_sensors_init();
	
	//TODO: Evaluate initialization
	adc_b_sensors_init();	//Initialize ADCB
    45e8:	a7 df       	rcall	.-178    	; 0x4538 <adc_b_sensors_init>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    45ea:	80 e1       	ldi	r24, 0x10	; 16
    45ec:	e0 e8       	ldi	r30, 0x80	; 128
    45ee:	f6 e0       	ldi	r31, 0x06	; 6
    45f0:	85 83       	std	Z+5, r24	; 0x05

	// Enable display backlight
	gpio_set_pin_high(NHD_C12832A1Z_BACKLIGHT);

	// Workaround for known issue: Enable RTC32 sysclk
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    45f2:	64 e0       	ldi	r22, 0x04	; 4
    45f4:	80 e0       	ldi	r24, 0x00	; 0
    45f6:	0e 94 86 0a 	call	0x150c	; 0x150c <sysclk_enable_module>
	while (RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm) {
    45fa:	e0 e2       	ldi	r30, 0x20	; 32
    45fc:	f4 e0       	ldi	r31, 0x04	; 4
    45fe:	81 81       	ldd	r24, Z+1	; 0x01
    4600:	80 fd       	sbrc	r24, 0
    4602:	fd cf       	rjmp	.-6      	; 0x45fe <main+0x38>
		// Wait for RTC32 sysclk to become stable
	}

	// If we have battery power and RTC is running, don't initialize RTC32
	if (rtc_vbat_system_check(false) != VBAT_STATUS_OK) {
    4604:	80 e0       	ldi	r24, 0x00	; 0
    4606:	0e 94 19 19 	call	0x3232	; 0x3232 <rtc_vbat_system_check>
    460a:	88 23       	and	r24, r24
    460c:	49 f0       	breq	.+18     	; 0x4620 <main+0x5a>
		rtc_init();
    460e:	0e 94 3e 19 	call	0x327c	; 0x327c <rtc_init>

		// Set current time to after production date
		rtc_timestamp = production_date_get_timestamp() + 1;
    4612:	c5 d0       	rcall	.+394    	; 0x479e <production_date_get_timestamp>
    4614:	6f 5f       	subi	r22, 0xFF	; 255
    4616:	7f 4f       	sbci	r23, 0xFF	; 255
    4618:	8f 4f       	sbci	r24, 0xFF	; 255
    461a:	9f 4f       	sbci	r25, 0xFF	; 255
		rtc_set_time(rtc_timestamp);
    461c:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <rtc_set_time>
	}

	// Get current time
	rtc_timestamp = rtc_get_time();
    4620:	0e 94 03 19 	call	0x3206	; 0x3206 <rtc_get_time>
	// Make sure RTC has not been set to a too early date .
	if (rtc_timestamp < FIRST_POSSIBLE_TIMESTAMP) {
    4624:	60 38       	cpi	r22, 0x80	; 128
    4626:	7e 46       	sbci	r23, 0x6E	; 110
    4628:	8e 41       	sbci	r24, 0x1E	; 30
    462a:	9d 44       	sbci	r25, 0x4D	; 77
    462c:	30 f4       	brcc	.+12     	; 0x463a <main+0x74>
		// Set time to 01.01.2011 00:00:00
		rtc_set_time(FIRST_POSSIBLE_TIMESTAMP);
    462e:	60 e8       	ldi	r22, 0x80	; 128
    4630:	7e e6       	ldi	r23, 0x6E	; 110
    4632:	8e e1       	ldi	r24, 0x1E	; 30
    4634:	9d e4       	ldi	r25, 0x4D	; 77
    4636:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <rtc_set_time>
	}

	// Initialize USB CDC class
	cdc_start();
    463a:	ad dd       	rcall	.-1190   	; 0x4196 <cdc_start>

	cpu_irq_enable();
    463c:	78 94       	sei

	// Display a splash screen showing button functions
	//button_splash();

	// Set timezone from EEPROM or to a default value
	timezone_init();
    463e:	7e d1       	rcall	.+764    	; 0x493c <timezone_init>
	
	
	// ADDED: Initializing temperature display 
	temp_disp_init();
    4640:	0d df       	rcall	.-486    	; 0x445c <temp_disp_init>
	}
}

static void cdc_putuint32(uint32_t value) {
	char* buffer = (char*)calloc(10,sizeof(char));
	sprintf(buffer,"%u", value);
    4642:	0f 2e       	mov	r0, r31
    4644:	fb e5       	ldi	r31, 0x5B	; 91
    4646:	8f 2e       	mov	r8, r31
    4648:	f1 e2       	ldi	r31, 0x21	; 33
    464a:	9f 2e       	mov	r9, r31
    464c:	f0 2d       	mov	r31, r0
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
    464e:	68 94       	set
    4650:	ee 24       	eor	r14, r14
    4652:	e6 f8       	bld	r14, 6
    4654:	ff 24       	eor	r15, r15
    4656:	f1 f8       	bld	r15, 1
				
				// Draw the scale element on top of the background temperature image
				gfx_mono_draw_filled_rect(12, 3, 2, temp_scale,
				GFX_PIXEL_CLR);
				
				snprintf(temperature_string, sizeof(temperature_string), "%3i Celsius",
    4658:	0f 2e       	mov	r0, r31
    465a:	f8 e4       	ldi	r31, 0x48	; 72
    465c:	af 2e       	mov	r10, r31
    465e:	f1 e2       	ldi	r31, 0x21	; 33
    4660:	bf 2e       	mov	r11, r31
    4662:	f0 2d       	mov	r31, r0
    4664:	1f e0       	ldi	r17, 0x0F	; 15
    4666:	0f 2e       	mov	r0, r31
    4668:	f8 e4       	ldi	r31, 0x48	; 72
    466a:	cf 2e       	mov	r12, r31
    466c:	fa e2       	ldi	r31, 0x2A	; 42
    466e:	df 2e       	mov	r13, r31
    4670:	f0 2d       	mov	r31, r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4672:	8f e7       	ldi	r24, 0x7F	; 127
    4674:	94 e8       	ldi	r25, 0x84	; 132
    4676:	ee e1       	ldi	r30, 0x1E	; 30
    4678:	81 50       	subi	r24, 0x01	; 1
    467a:	90 40       	sbci	r25, 0x00	; 0
    467c:	e0 40       	sbci	r30, 0x00	; 0
    467e:	e1 f7       	brne	.-8      	; 0x4678 <main+0xb2>
    4680:	00 c0       	rjmp	.+0      	; 0x4682 <main+0xbc>
    4682:	00 00       	nop

		do {			
			do {
				//START TEMP PRINT
				_delay_ms(10000);
				rtc_timestamp = rtc_get_time();
    4684:	0e 94 03 19 	call	0x3206	; 0x3206 <rtc_get_time>
    4688:	06 2f       	mov	r16, r22
    468a:	57 2e       	mov	r5, r23
    468c:	48 2e       	mov	r4, r24
    468e:	39 2e       	mov	r3, r25
				{
					//TEST: Print temperature to udi_cdc
					
					//ID
					char * logid = "NTC_OC";
					cdc_putstr(logid);	//Identify sample as on-chip NTC temp.
    4690:	84 e5       	ldi	r24, 0x54	; 84
    4692:	91 e2       	ldi	r25, 0x21	; 33
    4694:	be de       	rcall	.-644    	; 0x4412 <cdc_putstr>
					
					//Data separator character
					udi_cdc_putc(',');
    4696:	8c e2       	ldi	r24, 0x2C	; 44
    4698:	90 e0       	ldi	r25, 0x00	; 0
    469a:	0e 94 bc 11 	call	0x2378	; 0x2378 <udi_cdc_putc>
		i++;
	}
}

static void cdc_putuint32(uint32_t value) {
	char* buffer = (char*)calloc(10,sizeof(char));
    469e:	61 e0       	ldi	r22, 0x01	; 1
    46a0:	70 e0       	ldi	r23, 0x00	; 0
    46a2:	8a e0       	ldi	r24, 0x0A	; 10
    46a4:	90 e0       	ldi	r25, 0x00	; 0
    46a6:	62 d3       	rcall	.+1732   	; 0x4d6c <calloc>
    46a8:	68 2e       	mov	r6, r24
    46aa:	79 2e       	mov	r7, r25
	sprintf(buffer,"%u", value);
    46ac:	3f 92       	push	r3
    46ae:	4f 92       	push	r4
    46b0:	5f 92       	push	r5
    46b2:	0f 93       	push	r16
    46b4:	9f 92       	push	r9
    46b6:	8f 92       	push	r8
    46b8:	9f 93       	push	r25
    46ba:	8f 93       	push	r24
    46bc:	12 d5       	rcall	.+2596   	; 0x50e2 <sprintf>
	cdc_putstr(buffer);
    46be:	86 2d       	mov	r24, r6
    46c0:	97 2d       	mov	r25, r7
    46c2:	a7 de       	rcall	.-690    	; 0x4412 <cdc_putstr>
	free(buffer);
    46c4:	86 2d       	mov	r24, r6
    46c6:	97 2d       	mov	r25, r7
    46c8:	08 d4       	rcall	.+2064   	; 0x4eda <free>
					
					//Timestamp
					cdc_putuint32(rtc_timestamp);
					
					//Data separator character
					udi_cdc_putc(',');
    46ca:	8c e2       	ldi	r24, 0x2C	; 44
    46cc:	90 e0       	ldi	r25, 0x00	; 0
    46ce:	0e 94 bc 11 	call	0x2378	; 0x2378 <udi_cdc_putc>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    46d2:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    46d4:	f8 94       	cli
    46d6:	f7 01       	movw	r30, r14
    46d8:	90 81       	ld	r25, Z
    46da:	94 60       	ori	r25, 0x04	; 4
    46dc:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    46de:	8f bf       	out	0x3f, r24	; 63
    46e0:	cd bf       	out	0x3d, r28	; 61
    46e2:	de bf       	out	0x3e, r29	; 62
					//Temperature
					//ntc_measure();
					// Testing
					adcb_ch0_measure();
					//int8_t temp = ntc_get_temperature();
					while (!adcb_data_is_ready());
    46e4:	ad de       	rcall	.-678    	; 0x4440 <adcb_data_is_ready>
    46e6:	88 23       	and	r24, r24
    46e8:	e9 f3       	breq	.-6      	; 0x46e4 <main+0x11e>
					int16_t temp = adcb_ch0_get_raw_value();
    46ea:	a5 de       	rcall	.-694    	; 0x4436 <adcb_ch0_get_raw_value>
	return char_int;	
}

static char * cdc_putint16(int16_t intval) {
	char * char_int;
	itoa(intval, char_int, 10);
    46ec:	4a e0       	ldi	r20, 0x0A	; 10
    46ee:	50 e0       	ldi	r21, 0x00	; 0
    46f0:	61 2c       	mov	r6, r1
    46f2:	71 2c       	mov	r7, r1
    46f4:	b3 01       	movw	r22, r6
    46f6:	a0 d4       	rcall	.+2368   	; 0x5038 <itoa>
					adcb_ch0_measure();
					//int8_t temp = ntc_get_temperature();
					while (!adcb_data_is_ready());
					int16_t temp = adcb_ch0_get_raw_value();
					char * temp_s = cdc_putint16(temp);
					cdc_putstr(temp_s);	//temperature in string form
    46f8:	c3 01       	movw	r24, r6
    46fa:	8b de       	rcall	.-746    	; 0x4412 <cdc_putstr>
					udi_cdc_putc('\r');	//return
    46fc:	8d e0       	ldi	r24, 0x0D	; 13
    46fe:	90 e0       	ldi	r25, 0x00	; 0
    4700:	0e 94 bc 11 	call	0x2378	; 0x2378 <udi_cdc_putc>
					udi_cdc_putc('\n');	//newline
    4704:	8a e0       	ldi	r24, 0x0A	; 10
    4706:	90 e0       	ldi	r25, 0x00	; 0
    4708:	0e 94 bc 11 	call	0x2378	; 0x2378 <udi_cdc_putc>
				//END TEMP PRINT
				
				//START Drawing Temperature:
				
				//Paint thermometer on screen
				gfx_mono_put_bitmap(&tempscale, 10, 0);
    470c:	40 e0       	ldi	r20, 0x00	; 0
    470e:	6a e0       	ldi	r22, 0x0A	; 10
    4710:	83 e4       	ldi	r24, 0x43	; 67
    4712:	9a e2       	ldi	r25, 0x2A	; 42
    4714:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <gfx_mono_generic_put_bitmap>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    4718:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    471a:	f8 94       	cli
    471c:	f7 01       	movw	r30, r14
    471e:	90 81       	ld	r25, Z
    4720:	94 60       	ori	r25, 0x04	; 4
    4722:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4724:	8f bf       	out	0x3f, r24	; 63
				// Read the temperature once the ADC reading is done
				temperature = ntc_get_temperature();
				*/
				// ADCB-Testing
				adcb_ch0_measure();
				while (!adcb_data_is_ready());
    4726:	8c de       	rcall	.-744    	; 0x4440 <adcb_data_is_ready>
    4728:	88 23       	and	r24, r24
    472a:	e9 f3       	breq	.-6      	; 0x4726 <main+0x160>
				int16_t temp = adcb_ch0_get_raw_value();
    472c:	84 de       	rcall	.-760    	; 0x4436 <adcb_ch0_get_raw_value>
				
				temperature = temp;
    472e:	80 93 40 2a 	sts	0x2A40, r24
    4732:	90 93 41 2a 	sts	0x2A41, r25
				// Convert the temperature into the thermometer scale
				temp_scale = -0.36 * temperature + 20.25;
    4736:	bc 01       	movw	r22, r24
    4738:	88 27       	eor	r24, r24
    473a:	77 fd       	sbrc	r23, 7
    473c:	80 95       	com	r24
    473e:	98 2f       	mov	r25, r24
    4740:	bf d1       	rcall	.+894    	; 0x4ac0 <__floatsisf>
    4742:	2c ee       	ldi	r18, 0xEC	; 236
    4744:	31 e5       	ldi	r19, 0x51	; 81
    4746:	48 eb       	ldi	r20, 0xB8	; 184
    4748:	5e eb       	ldi	r21, 0xBE	; 190
    474a:	46 d2       	rcall	.+1164   	; 0x4bd8 <__mulsf3>
    474c:	20 e0       	ldi	r18, 0x00	; 0
    474e:	30 e0       	ldi	r19, 0x00	; 0
    4750:	42 ea       	ldi	r20, 0xA2	; 162
    4752:	51 e4       	ldi	r21, 0x41	; 65
    4754:	23 d1       	rcall	.+582    	; 0x499c <__addsf3>
    4756:	86 d1       	rcall	.+780    	; 0x4a64 <__fixunssfsi>
    4758:	26 2f       	mov	r18, r22
    475a:	60 93 42 2a 	sts	0x2A42, r22
				if (temp_scale <= 0) {
					temp_scale = 0;
				}
				
				// Draw the scale element on top of the background temperature image
				gfx_mono_draw_filled_rect(12, 3, 2, temp_scale,
    475e:	00 e0       	ldi	r16, 0x00	; 0
    4760:	42 e0       	ldi	r20, 0x02	; 2
    4762:	63 e0       	ldi	r22, 0x03	; 3
    4764:	8c e0       	ldi	r24, 0x0C	; 12
    4766:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <gfx_mono_generic_draw_filled_rect>
				GFX_PIXEL_CLR);
				
				snprintf(temperature_string, sizeof(temperature_string), "%3i Celsius",
    476a:	80 91 41 2a 	lds	r24, 0x2A41
    476e:	8f 93       	push	r24
    4770:	80 91 40 2a 	lds	r24, 0x2A40
    4774:	8f 93       	push	r24
    4776:	bf 92       	push	r11
    4778:	af 92       	push	r10
    477a:	1f 92       	push	r1
    477c:	1f 93       	push	r17
    477e:	df 92       	push	r13
    4780:	cf 92       	push	r12
    4782:	79 d4       	rcall	.+2290   	; 0x5076 <snprintf>
				temperature);

				// Draw the Celsius string
				gfx_mono_draw_string(temperature_string, 22, 13, &sysfont);
    4784:	27 e0       	ldi	r18, 0x07	; 7
    4786:	30 e2       	ldi	r19, 0x20	; 32
    4788:	4d e0       	ldi	r20, 0x0D	; 13
    478a:	66 e1       	ldi	r22, 0x16	; 22
    478c:	c6 01       	movw	r24, r12
    478e:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <gfx_mono_draw_string>
				//END Draw temperature
				
				keyboard_get_key_state(&input);
    4792:	ce 01       	movw	r24, r28
    4794:	01 96       	adiw	r24, 0x01	; 1
    4796:	7b dd       	rcall	.-1290   	; 0x428e <keyboard_get_key_state>
    4798:	cd bf       	out	0x3d, r28	; 61
    479a:	de bf       	out	0x3e, r29	; 62
    479c:	6a cf       	rjmp	.-300    	; 0x4672 <main+0xac>

0000479e <production_date_get_timestamp>:
 * UNIX time format.
 *
 * \return Production date timestamp
 */
uint32_t production_date_get_timestamp(void)
{
    479e:	0f 93       	push	r16
    47a0:	1f 93       	push	r17
    47a2:	cf 93       	push	r28
    47a4:	df 93       	push	r29
    47a6:	60 e1       	ldi	r22, 0x10	; 16
    47a8:	70 e0       	ldi	r23, 0x00	; 0
    47aa:	81 e0       	ldi	r24, 0x01	; 1
    47ac:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <nvm_read_byte>
    47b0:	d8 2f       	mov	r29, r24
    47b2:	61 e1       	ldi	r22, 0x11	; 17
    47b4:	70 e0       	ldi	r23, 0x00	; 0
    47b6:	81 e0       	ldi	r24, 0x01	; 1
    47b8:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <nvm_read_byte>
    47bc:	08 2f       	mov	r16, r24
    47be:	62 e1       	ldi	r22, 0x12	; 18
    47c0:	70 e0       	ldi	r23, 0x00	; 0
    47c2:	81 e0       	ldi	r24, 0x01	; 1
    47c4:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <nvm_read_byte>
    47c8:	c8 2f       	mov	r28, r24
    47ca:	63 e1       	ldi	r22, 0x13	; 19
    47cc:	70 e0       	ldi	r23, 0x00	; 0
    47ce:	81 e0       	ldi	r24, 0x01	; 1
    47d0:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <nvm_read_byte>
	// Read timestamp from signature
	uint32_t production_date_timestamp =                             \
		(uint32_t) nvm_read_user_signature_row(                      \
				PRODUCTION_DATE_ADDRESS)          << 24 |            \
		(uint32_t) nvm_read_user_signature_row(                      \
    47d4:	10 e0       	ldi	r17, 0x00	; 0
    47d6:	20 e0       	ldi	r18, 0x00	; 0
    47d8:	30 e0       	ldi	r19, 0x00	; 0
				PRODUCTION_DATE_ADDRESS + 1)      << 16 |            \
    47da:	98 01       	movw	r18, r16
    47dc:	11 27       	eor	r17, r17
    47de:	00 27       	eor	r16, r16
uint32_t production_date_get_timestamp(void)
{
	// Read timestamp from signature
	uint32_t production_date_timestamp =                             \
		(uint32_t) nvm_read_user_signature_row(                      \
				PRODUCTION_DATE_ADDRESS)          << 24 |            \
    47e0:	3d 2b       	or	r19, r29
		(uint32_t) nvm_read_user_signature_row(                      \
				PRODUCTION_DATE_ADDRESS + 1)      << 16 |            \
    47e2:	08 2b       	or	r16, r24
 * \return Production date timestamp
 */
uint32_t production_date_get_timestamp(void)
{
	// Read timestamp from signature
	uint32_t production_date_timestamp =                             \
    47e4:	1c 2b       	or	r17, r28
				PRODUCTION_DATE_ADDRESS + 2)      <<  8 |            \
		(uint32_t) nvm_read_user_signature_row(                      \
				PRODUCTION_DATE_ADDRESS + 3);

	// Check if timestamp is invalid
	if ((production_date_timestamp == 0xFFFFFFFF) ||
    47e6:	d9 01       	movw	r26, r18
    47e8:	c8 01       	movw	r24, r16
    47ea:	80 58       	subi	r24, 0x80	; 128
    47ec:	9e 46       	sbci	r25, 0x6E	; 110
    47ee:	ae 41       	sbci	r26, 0x1E	; 30
    47f0:	bd 44       	sbci	r27, 0x4D	; 77
    47f2:	8f 37       	cpi	r24, 0x7F	; 127
    47f4:	91 49       	sbci	r25, 0x91	; 145
    47f6:	a1 4e       	sbci	r26, 0xE1	; 225
    47f8:	b2 4b       	sbci	r27, 0xB2	; 178
    47fa:	20 f0       	brcs	.+8      	; 0x4804 <production_date_get_timestamp+0x66>
			(production_date_timestamp < FIRST_POSSIBLE_TIMESTAMP)) {
		production_date_timestamp = FIRST_POSSIBLE_TIMESTAMP;
    47fc:	00 e8       	ldi	r16, 0x80	; 128
    47fe:	1e e6       	ldi	r17, 0x6E	; 110
    4800:	2e e1       	ldi	r18, 0x1E	; 30
    4802:	3d e4       	ldi	r19, 0x4D	; 77
	}

	return production_date_timestamp;
}
    4804:	60 2f       	mov	r22, r16
    4806:	71 2f       	mov	r23, r17
    4808:	82 2f       	mov	r24, r18
    480a:	93 2f       	mov	r25, r19
    480c:	df 91       	pop	r29
    480e:	cf 91       	pop	r28
    4810:	1f 91       	pop	r17
    4812:	0f 91       	pop	r16
    4814:	08 95       	ret

00004816 <__vector_22>:
	/*  Set Compare A interrupt to low level   */
	TCC1.INTCTRLB = 1;
}

ISR(TCC1_CCA_vect)
{
    4816:	1f 92       	push	r1
    4818:	0f 92       	push	r0
    481a:	0f b6       	in	r0, 0x3f	; 63
    481c:	0f 92       	push	r0
    481e:	11 24       	eor	r1, r1
    4820:	2f 93       	push	r18
    4822:	3f 93       	push	r19
    4824:	8f 93       	push	r24
    4826:	9f 93       	push	r25
    time_to_measure_touch = true;
    4828:	81 e0       	ldi	r24, 0x01	; 1
    482a:	80 93 14 2a 	sts	0x2A14, r24
    current_time_ms_touch += qt_measurement_period_msec;
    482e:	20 91 12 2a 	lds	r18, 0x2A12
    4832:	30 91 13 2a 	lds	r19, 0x2A13
    4836:	80 91 da 20 	lds	r24, 0x20DA
    483a:	90 91 db 20 	lds	r25, 0x20DB
    483e:	82 0f       	add	r24, r18
    4840:	93 1f       	adc	r25, r19
    4842:	80 93 12 2a 	sts	0x2A12, r24
    4846:	90 93 13 2a 	sts	0x2A13, r25
}
    484a:	9f 91       	pop	r25
    484c:	8f 91       	pop	r24
    484e:	3f 91       	pop	r19
    4850:	2f 91       	pop	r18
    4852:	0f 90       	pop	r0
    4854:	0f be       	out	0x3f, r0	; 63
    4856:	0f 90       	pop	r0
    4858:	1f 90       	pop	r1
    485a:	18 95       	reti

0000485c <touch_init>:
 */
void touch_init(void)
{

#ifdef QTOUCH_STUDIO_MASKS
	SNS_array[0][0]= 0x40;
    485c:	80 e4       	ldi	r24, 0x40	; 64
    485e:	80 93 a2 21 	sts	0x21A2, r24
	SNS_array[0][1]= 0x0;
    4862:	10 92 a3 21 	sts	0x21A3, r1
	SNS_array[1][0]= 0x0;
    4866:	10 92 a4 21 	sts	0x21A4, r1
	SNS_array[1][1]= 0x0;
    486a:	10 92 a5 21 	sts	0x21A5, r1

	SNSK_array[0][0]= 0x80;
    486e:	80 e8       	ldi	r24, 0x80	; 128
    4870:	80 93 a6 21 	sts	0x21A6, r24
	SNSK_array[0][1]= 0x0;
    4874:	10 92 a7 21 	sts	0x21A7, r1
	SNSK_array[1][0]= 0x0;
    4878:	10 92 a8 21 	sts	0x21A8, r1
	SNSK_array[1][1]= 0x0;
    487c:	10 92 a9 21 	sts	0x21A9, r1
	 * When using "pin configurability" this will result in channel 0
	 * because it is the first and only channel that is used.
	 * For the standard qtouch library setup we would need to use
	 * channel 3 since we are using the last two pins on the port.
	 */
	 qt_enable_key(CHANNEL_0, NO_AKS_GROUP, 10, HYST_6_25);
    4880:	23 e0       	ldi	r18, 0x03	; 3
    4882:	4a e0       	ldi	r20, 0x0A	; 10
    4884:	60 e0       	ldi	r22, 0x00	; 0
    4886:	80 e0       	ldi	r24, 0x00	; 0
    4888:	0e 94 3a 04 	call	0x874	; 0x874 <qt_enable_key>
	SNSK_array[1][0]= 0x0;
	SNSK_array[1][1]= 0x0;
#endif

	config_sensor();
	qt_init_sensing();
    488c:	60 e0       	ldi	r22, 0x00	; 0
    488e:	70 e0       	ldi	r23, 0x00	; 0
    4890:	87 e5       	ldi	r24, 0x57	; 87
    4892:	93 e0       	ldi	r25, 0x03	; 3
    4894:	0e 94 4b 05 	call	0xa96	; 0xa96 <qt_init_sensing_with_burst>

/** \brief Passes default parameters from config file to touch library
 */
static void qt_set_parameters( void )
{
    qt_config_data.qt_di              = DEF_QT_DI;
    4898:	84 e0       	ldi	r24, 0x04	; 4
    489a:	80 93 65 21 	sts	0x2165, r24
    qt_config_data.qt_neg_drift_rate  = DEF_QT_NEG_DRIFT_RATE;
    489e:	84 e1       	ldi	r24, 0x14	; 20
    48a0:	80 93 68 21 	sts	0x2168, r24
    qt_config_data.qt_pos_drift_rate  = DEF_QT_POS_DRIFT_RATE;
    48a4:	95 e0       	ldi	r25, 0x05	; 5
    48a6:	90 93 69 21 	sts	0x2169, r25
    qt_config_data.qt_max_on_duration = DEF_QT_MAX_ON_DURATION;
    48aa:	10 92 67 21 	sts	0x2167, r1
    qt_config_data.qt_drift_hold_time = DEF_QT_DRIFT_HOLD_TIME;
    48ae:	80 93 66 21 	sts	0x2166, r24
    qt_config_data.qt_recal_threshold = DEF_QT_RECAL_THRESHOLD;
    48b2:	61 e0       	ldi	r22, 0x01	; 1
    48b4:	60 93 64 21 	sts	0x2164, r22
    qt_config_data.qt_pos_recal_delay = DEF_QT_POS_RECAL_DELAY;
    48b8:	83 e0       	ldi	r24, 0x03	; 3
    48ba:	80 93 6a 21 	sts	0x216A, r24
	 qt_enable_key(CHANNEL_0, NO_AKS_GROUP, 10, HYST_6_25);
}

static void init_timer_isr( void )
{
	PR.PRPC &= ~(0x02);
    48be:	e0 e7       	ldi	r30, 0x70	; 112
    48c0:	f0 e0       	ldi	r31, 0x00	; 0
    48c2:	83 81       	ldd	r24, Z+3	; 0x03
    48c4:	8d 7f       	andi	r24, 0xFD	; 253
    48c6:	83 83       	std	Z+3, r24	; 0x03
	/* We divide the peripheral 2MHz clock by 2 to get 1MHz*/
	TCC1.CTRLA = 2;
    48c8:	e0 e4       	ldi	r30, 0x40	; 64
    48ca:	f8 e0       	ldi	r31, 0x08	; 8
    48cc:	82 e0       	ldi	r24, 0x02	; 2
    48ce:	80 83       	st	Z, r24
	/* 1000 counts is 1ms at 1MHz input clock */
	TCC1.PER = 1000 * qt_measurement_period_msec;
    48d0:	40 91 da 20 	lds	r20, 0x20DA
    48d4:	50 91 db 20 	lds	r21, 0x20DB
    48d8:	28 ee       	ldi	r18, 0xE8	; 232
    48da:	33 e0       	ldi	r19, 0x03	; 3
    48dc:	42 9f       	mul	r20, r18
    48de:	c0 01       	movw	r24, r0
    48e0:	43 9f       	mul	r20, r19
    48e2:	90 0d       	add	r25, r0
    48e4:	52 9f       	mul	r21, r18
    48e6:	90 0d       	add	r25, r0
    48e8:	11 24       	eor	r1, r1
    48ea:	86 a3       	std	Z+38, r24	; 0x26
    48ec:	97 a3       	std	Z+39, r25	; 0x27
	/*  Set Compare A interrupt to low level   */
	TCC1.INTCTRLB = 1;
    48ee:	67 83       	std	Z+7, r22	; 0x07
	/* Set up callback function. This function is called after the library
	 * has made capacitive measurements, but before it has processed them.
	 * The user can use this hook to apply filter functions to the measured
	 * signal values.(Possibly to fix sensor layout faults)
	 */
	qt_filter_callback = 0;
    48f0:	10 92 7e 21 	sts	0x217E, r1
    48f4:	10 92 7f 21 	sts	0x217F, r1
    48f8:	08 95       	ret

000048fa <check_touch_key_pressed>:
#ifdef _DEBUG_INTERFACE_
    /* Process commands from PC */
    QDebug_ProcessCommands();
#endif

	if (time_to_measure_touch)
    48fa:	80 91 14 2a 	lds	r24, 0x2A14
    48fe:	88 23       	and	r24, r24
    4900:	51 f0       	breq	.+20     	; 0x4916 <check_touch_key_pressed+0x1c>
	{
		time_to_measure_touch = false;
    4902:	10 92 14 2a 	sts	0x2A14, r1

		do {
			status_flag = qt_measure_sensors( current_time_ms_touch );
    4906:	80 91 12 2a 	lds	r24, 0x2A12
    490a:	90 91 13 2a 	lds	r25, 0x2A13
    490e:	0e 94 aa 04 	call	0x954	; 0x954 <qt_measure_sensors>
#endif
		/* Time-critical host application code should be placed here since
		 * a full burst cycle may delay critical task in the main application
		 */

		}while (burst_flag) ;
    4912:	90 fd       	sbrc	r25, 0
    4914:	f8 cf       	rjmp	.-16     	; 0x4906 <check_touch_key_pressed+0xc>
#ifdef _DEBUG_INTERFACE_
		/* Process commands from PC */
		QDebug_ProcessCommands();
#endif
	}
	if(GET_SENSOR_STATE(0))
    4916:	80 91 7b 21 	lds	r24, 0x217B
    491a:	80 95       	com	r24
		return 0;
	else
		return 1;
}
    491c:	81 70       	andi	r24, 0x01	; 1
    491e:	08 95       	ret

00004920 <tz_index_to_minutes>:
 * \retval timezone offset (minutes)
 */
int8_t timezone_get_minutes(void)
{
	return tz_minutes;
}
    4920:	82 30       	cpi	r24, 0x02	; 2
    4922:	31 f0       	breq	.+12     	; 0x4930 <tz_index_to_minutes+0x10>
    4924:	83 30       	cpi	r24, 0x03	; 3
    4926:	31 f0       	breq	.+12     	; 0x4934 <tz_index_to_minutes+0x14>
    4928:	81 30       	cpi	r24, 0x01	; 1
    492a:	31 f0       	breq	.+12     	; 0x4938 <tz_index_to_minutes+0x18>
    492c:	80 e0       	ldi	r24, 0x00	; 0
    492e:	08 95       	ret
    4930:	8e e1       	ldi	r24, 0x1E	; 30
    4932:	08 95       	ret
    4934:	8d e2       	ldi	r24, 0x2D	; 45
    4936:	08 95       	ret
    4938:	8f e0       	ldi	r24, 0x0F	; 15
    493a:	08 95       	ret

0000493c <timezone_init>:
 * If this is the case it will be set, and used by the date&time application.
 * If it is not set, the "select timezone" application will be started to set
 * it
 */
void timezone_init(void)
{
    493c:	cf 93       	push	r28
    493e:	df 93       	push	r29
	uint8_t temp;
	uint8_t invalid_tz = false;

	// Read timezone (hours) from EEPROM
	temp = nvm_eeprom_read_byte(TZ_HOURS_EEPROM_ADDR);
    4940:	84 e0       	ldi	r24, 0x04	; 4
    4942:	90 e0       	ldi	r25, 0x00	; 0
    4944:	0e 94 cf 18 	call	0x319e	; 0x319e <nvm_eeprom_read_byte>

	// convert tz_hours_menu index to actual timezone offset
	tz_hours = ((int8_t)temp) - 12;
    4948:	98 2f       	mov	r25, r24
    494a:	9c 50       	subi	r25, 0x0C	; 12
    494c:	90 93 15 2a 	sts	0x2A15, r25
	
	// Check if the timezone is valid
	if((tz_hours <= 12) && (tz_hours >= -12)) {
    4950:	89 31       	cpi	r24, 0x19	; 25
    4952:	20 f4       	brcc	.+8      	; 0x495c <timezone_init+0x20>
		// Set timezone menu selection to the selected timezone
		tz_hours_menu.current_selection = temp;
    4954:	80 93 f0 20 	sts	0x20F0, r24
 * it
 */
void timezone_init(void)
{
	uint8_t temp;
	uint8_t invalid_tz = false;
    4958:	d0 e0       	ldi	r29, 0x00	; 0
    495a:	06 c0       	rjmp	.+12     	; 0x4968 <timezone_init+0x2c>
	} else {
		/*
		 * Timezone is outside the range; reset to default and set
		 * invalid.
		 */
		tz_hours = 0;
    495c:	10 92 15 2a 	sts	0x2A15, r1
		tz_hours_menu.current_selection = 12;
    4960:	8c e0       	ldi	r24, 0x0C	; 12
    4962:	80 93 f0 20 	sts	0x20F0, r24
		invalid_tz = true;
    4966:	d1 e0       	ldi	r29, 0x01	; 1
	}

	temp = nvm_eeprom_read_byte(TZ_MINUTES_EEPROM_ADDR);
    4968:	85 e0       	ldi	r24, 0x05	; 5
    496a:	90 e0       	ldi	r25, 0x00	; 0
    496c:	0e 94 cf 18 	call	0x319e	; 0x319e <nvm_eeprom_read_byte>
    4970:	c8 2f       	mov	r28, r24

	// Check if we have a valid timezone_minutes_menu index
	if(temp < 4) {
    4972:	84 30       	cpi	r24, 0x04	; 4
    4974:	40 f4       	brcc	.+16     	; 0x4986 <timezone_init+0x4a>
		// Convert to actual minutes from stored menu index
		tz_minutes = tz_index_to_minutes(temp);
    4976:	d4 df       	rcall	.-88     	; 0x4920 <tz_index_to_minutes>
    4978:	80 93 16 2a 	sts	0x2A16, r24
		// Set the selection in tz_minutes_menu to selected timezone
		tz_minutes_menu.current_selection = temp;
    497c:	c0 93 e1 20 	sts	0x20E1, r28
		tz_minutes_menu.current_selection = 0;
		invalid_tz = true;
	}

	// If hours or minutes timezone offset was invalid
	if(invalid_tz == true) {
    4980:	d1 30       	cpi	r29, 0x01	; 1
    4982:	41 f4       	brne	.+16     	; 0x4994 <timezone_init+0x58>
    4984:	02 c0       	rjmp	.+4      	; 0x498a <timezone_init+0x4e>
		// Set the selection in tz_minutes_menu to selected timezone
		tz_minutes_menu.current_selection = temp;
	} else {
		// Outside the range, reset to default and set invalid
		tz_minutes = 0;
		tz_minutes_menu.current_selection = 0;
    4986:	10 92 e1 20 	sts	0x20E1, r1
		 * timezone selection.
		 */
		//timezone_select_application();
		
		//Setting Timezone to GMT +1, +0 minutes
		tz_hours = 1;
    498a:	81 e0       	ldi	r24, 0x01	; 1
    498c:	80 93 15 2a 	sts	0x2A15, r24
		tz_minutes = 0;
    4990:	10 92 16 2a 	sts	0x2A16, r1
	}
}
    4994:	df 91       	pop	r29
    4996:	cf 91       	pop	r28
    4998:	08 95       	ret

0000499a <__subsf3>:
    499a:	50 58       	subi	r21, 0x80	; 128

0000499c <__addsf3>:
    499c:	bb 27       	eor	r27, r27
    499e:	aa 27       	eor	r26, r26
    49a0:	0e d0       	rcall	.+28     	; 0x49be <__addsf3x>
    49a2:	e0 c0       	rjmp	.+448    	; 0x4b64 <__fp_round>
    49a4:	d1 d0       	rcall	.+418    	; 0x4b48 <__fp_pscA>
    49a6:	30 f0       	brcs	.+12     	; 0x49b4 <__addsf3+0x18>
    49a8:	d6 d0       	rcall	.+428    	; 0x4b56 <__fp_pscB>
    49aa:	20 f0       	brcs	.+8      	; 0x49b4 <__addsf3+0x18>
    49ac:	31 f4       	brne	.+12     	; 0x49ba <__addsf3+0x1e>
    49ae:	9f 3f       	cpi	r25, 0xFF	; 255
    49b0:	11 f4       	brne	.+4      	; 0x49b6 <__addsf3+0x1a>
    49b2:	1e f4       	brtc	.+6      	; 0x49ba <__addsf3+0x1e>
    49b4:	c6 c0       	rjmp	.+396    	; 0x4b42 <__fp_nan>
    49b6:	0e f4       	brtc	.+2      	; 0x49ba <__addsf3+0x1e>
    49b8:	e0 95       	com	r30
    49ba:	e7 fb       	bst	r30, 7
    49bc:	bc c0       	rjmp	.+376    	; 0x4b36 <__fp_inf>

000049be <__addsf3x>:
    49be:	e9 2f       	mov	r30, r25
    49c0:	e2 d0       	rcall	.+452    	; 0x4b86 <__fp_split3>
    49c2:	80 f3       	brcs	.-32     	; 0x49a4 <__addsf3+0x8>
    49c4:	ba 17       	cp	r27, r26
    49c6:	62 07       	cpc	r22, r18
    49c8:	73 07       	cpc	r23, r19
    49ca:	84 07       	cpc	r24, r20
    49cc:	95 07       	cpc	r25, r21
    49ce:	18 f0       	brcs	.+6      	; 0x49d6 <__addsf3x+0x18>
    49d0:	71 f4       	brne	.+28     	; 0x49ee <__addsf3x+0x30>
    49d2:	9e f5       	brtc	.+102    	; 0x4a3a <__addsf3x+0x7c>
    49d4:	fa c0       	rjmp	.+500    	; 0x4bca <__fp_zero>
    49d6:	0e f4       	brtc	.+2      	; 0x49da <__addsf3x+0x1c>
    49d8:	e0 95       	com	r30
    49da:	0b 2e       	mov	r0, r27
    49dc:	ba 2f       	mov	r27, r26
    49de:	a0 2d       	mov	r26, r0
    49e0:	0b 01       	movw	r0, r22
    49e2:	b9 01       	movw	r22, r18
    49e4:	90 01       	movw	r18, r0
    49e6:	0c 01       	movw	r0, r24
    49e8:	ca 01       	movw	r24, r20
    49ea:	a0 01       	movw	r20, r0
    49ec:	11 24       	eor	r1, r1
    49ee:	ff 27       	eor	r31, r31
    49f0:	59 1b       	sub	r21, r25
    49f2:	99 f0       	breq	.+38     	; 0x4a1a <__addsf3x+0x5c>
    49f4:	59 3f       	cpi	r21, 0xF9	; 249
    49f6:	50 f4       	brcc	.+20     	; 0x4a0c <__addsf3x+0x4e>
    49f8:	50 3e       	cpi	r21, 0xE0	; 224
    49fa:	68 f1       	brcs	.+90     	; 0x4a56 <__addsf3x+0x98>
    49fc:	1a 16       	cp	r1, r26
    49fe:	f0 40       	sbci	r31, 0x00	; 0
    4a00:	a2 2f       	mov	r26, r18
    4a02:	23 2f       	mov	r18, r19
    4a04:	34 2f       	mov	r19, r20
    4a06:	44 27       	eor	r20, r20
    4a08:	58 5f       	subi	r21, 0xF8	; 248
    4a0a:	f3 cf       	rjmp	.-26     	; 0x49f2 <__addsf3x+0x34>
    4a0c:	46 95       	lsr	r20
    4a0e:	37 95       	ror	r19
    4a10:	27 95       	ror	r18
    4a12:	a7 95       	ror	r26
    4a14:	f0 40       	sbci	r31, 0x00	; 0
    4a16:	53 95       	inc	r21
    4a18:	c9 f7       	brne	.-14     	; 0x4a0c <__addsf3x+0x4e>
    4a1a:	7e f4       	brtc	.+30     	; 0x4a3a <__addsf3x+0x7c>
    4a1c:	1f 16       	cp	r1, r31
    4a1e:	ba 0b       	sbc	r27, r26
    4a20:	62 0b       	sbc	r22, r18
    4a22:	73 0b       	sbc	r23, r19
    4a24:	84 0b       	sbc	r24, r20
    4a26:	ba f0       	brmi	.+46     	; 0x4a56 <__addsf3x+0x98>
    4a28:	91 50       	subi	r25, 0x01	; 1
    4a2a:	a1 f0       	breq	.+40     	; 0x4a54 <__addsf3x+0x96>
    4a2c:	ff 0f       	add	r31, r31
    4a2e:	bb 1f       	adc	r27, r27
    4a30:	66 1f       	adc	r22, r22
    4a32:	77 1f       	adc	r23, r23
    4a34:	88 1f       	adc	r24, r24
    4a36:	c2 f7       	brpl	.-16     	; 0x4a28 <__addsf3x+0x6a>
    4a38:	0e c0       	rjmp	.+28     	; 0x4a56 <__addsf3x+0x98>
    4a3a:	ba 0f       	add	r27, r26
    4a3c:	62 1f       	adc	r22, r18
    4a3e:	73 1f       	adc	r23, r19
    4a40:	84 1f       	adc	r24, r20
    4a42:	48 f4       	brcc	.+18     	; 0x4a56 <__addsf3x+0x98>
    4a44:	87 95       	ror	r24
    4a46:	77 95       	ror	r23
    4a48:	67 95       	ror	r22
    4a4a:	b7 95       	ror	r27
    4a4c:	f7 95       	ror	r31
    4a4e:	9e 3f       	cpi	r25, 0xFE	; 254
    4a50:	08 f0       	brcs	.+2      	; 0x4a54 <__addsf3x+0x96>
    4a52:	b3 cf       	rjmp	.-154    	; 0x49ba <__addsf3+0x1e>
    4a54:	93 95       	inc	r25
    4a56:	88 0f       	add	r24, r24
    4a58:	08 f0       	brcs	.+2      	; 0x4a5c <__addsf3x+0x9e>
    4a5a:	99 27       	eor	r25, r25
    4a5c:	ee 0f       	add	r30, r30
    4a5e:	97 95       	ror	r25
    4a60:	87 95       	ror	r24
    4a62:	08 95       	ret

00004a64 <__fixunssfsi>:
    4a64:	98 d0       	rcall	.+304    	; 0x4b96 <__fp_splitA>
    4a66:	88 f0       	brcs	.+34     	; 0x4a8a <__fixunssfsi+0x26>
    4a68:	9f 57       	subi	r25, 0x7F	; 127
    4a6a:	90 f0       	brcs	.+36     	; 0x4a90 <__fixunssfsi+0x2c>
    4a6c:	b9 2f       	mov	r27, r25
    4a6e:	99 27       	eor	r25, r25
    4a70:	b7 51       	subi	r27, 0x17	; 23
    4a72:	a0 f0       	brcs	.+40     	; 0x4a9c <__fixunssfsi+0x38>
    4a74:	d1 f0       	breq	.+52     	; 0x4aaa <__fixunssfsi+0x46>
    4a76:	66 0f       	add	r22, r22
    4a78:	77 1f       	adc	r23, r23
    4a7a:	88 1f       	adc	r24, r24
    4a7c:	99 1f       	adc	r25, r25
    4a7e:	1a f0       	brmi	.+6      	; 0x4a86 <__fixunssfsi+0x22>
    4a80:	ba 95       	dec	r27
    4a82:	c9 f7       	brne	.-14     	; 0x4a76 <__fixunssfsi+0x12>
    4a84:	12 c0       	rjmp	.+36     	; 0x4aaa <__fixunssfsi+0x46>
    4a86:	b1 30       	cpi	r27, 0x01	; 1
    4a88:	81 f0       	breq	.+32     	; 0x4aaa <__fixunssfsi+0x46>
    4a8a:	9f d0       	rcall	.+318    	; 0x4bca <__fp_zero>
    4a8c:	b1 e0       	ldi	r27, 0x01	; 1
    4a8e:	08 95       	ret
    4a90:	9c c0       	rjmp	.+312    	; 0x4bca <__fp_zero>
    4a92:	67 2f       	mov	r22, r23
    4a94:	78 2f       	mov	r23, r24
    4a96:	88 27       	eor	r24, r24
    4a98:	b8 5f       	subi	r27, 0xF8	; 248
    4a9a:	39 f0       	breq	.+14     	; 0x4aaa <__fixunssfsi+0x46>
    4a9c:	b9 3f       	cpi	r27, 0xF9	; 249
    4a9e:	cc f3       	brlt	.-14     	; 0x4a92 <__fixunssfsi+0x2e>
    4aa0:	86 95       	lsr	r24
    4aa2:	77 95       	ror	r23
    4aa4:	67 95       	ror	r22
    4aa6:	b3 95       	inc	r27
    4aa8:	d9 f7       	brne	.-10     	; 0x4aa0 <__fixunssfsi+0x3c>
    4aaa:	3e f4       	brtc	.+14     	; 0x4aba <__fixunssfsi+0x56>
    4aac:	90 95       	com	r25
    4aae:	80 95       	com	r24
    4ab0:	70 95       	com	r23
    4ab2:	61 95       	neg	r22
    4ab4:	7f 4f       	sbci	r23, 0xFF	; 255
    4ab6:	8f 4f       	sbci	r24, 0xFF	; 255
    4ab8:	9f 4f       	sbci	r25, 0xFF	; 255
    4aba:	08 95       	ret

00004abc <__floatunsisf>:
    4abc:	e8 94       	clt
    4abe:	09 c0       	rjmp	.+18     	; 0x4ad2 <__floatsisf+0x12>

00004ac0 <__floatsisf>:
    4ac0:	97 fb       	bst	r25, 7
    4ac2:	3e f4       	brtc	.+14     	; 0x4ad2 <__floatsisf+0x12>
    4ac4:	90 95       	com	r25
    4ac6:	80 95       	com	r24
    4ac8:	70 95       	com	r23
    4aca:	61 95       	neg	r22
    4acc:	7f 4f       	sbci	r23, 0xFF	; 255
    4ace:	8f 4f       	sbci	r24, 0xFF	; 255
    4ad0:	9f 4f       	sbci	r25, 0xFF	; 255
    4ad2:	99 23       	and	r25, r25
    4ad4:	a9 f0       	breq	.+42     	; 0x4b00 <__floatsisf+0x40>
    4ad6:	f9 2f       	mov	r31, r25
    4ad8:	96 e9       	ldi	r25, 0x96	; 150
    4ada:	bb 27       	eor	r27, r27
    4adc:	93 95       	inc	r25
    4ade:	f6 95       	lsr	r31
    4ae0:	87 95       	ror	r24
    4ae2:	77 95       	ror	r23
    4ae4:	67 95       	ror	r22
    4ae6:	b7 95       	ror	r27
    4ae8:	f1 11       	cpse	r31, r1
    4aea:	f8 cf       	rjmp	.-16     	; 0x4adc <__floatsisf+0x1c>
    4aec:	fa f4       	brpl	.+62     	; 0x4b2c <__floatsisf+0x6c>
    4aee:	bb 0f       	add	r27, r27
    4af0:	11 f4       	brne	.+4      	; 0x4af6 <__floatsisf+0x36>
    4af2:	60 ff       	sbrs	r22, 0
    4af4:	1b c0       	rjmp	.+54     	; 0x4b2c <__floatsisf+0x6c>
    4af6:	6f 5f       	subi	r22, 0xFF	; 255
    4af8:	7f 4f       	sbci	r23, 0xFF	; 255
    4afa:	8f 4f       	sbci	r24, 0xFF	; 255
    4afc:	9f 4f       	sbci	r25, 0xFF	; 255
    4afe:	16 c0       	rjmp	.+44     	; 0x4b2c <__floatsisf+0x6c>
    4b00:	88 23       	and	r24, r24
    4b02:	11 f0       	breq	.+4      	; 0x4b08 <__floatsisf+0x48>
    4b04:	96 e9       	ldi	r25, 0x96	; 150
    4b06:	11 c0       	rjmp	.+34     	; 0x4b2a <__floatsisf+0x6a>
    4b08:	77 23       	and	r23, r23
    4b0a:	21 f0       	breq	.+8      	; 0x4b14 <__floatsisf+0x54>
    4b0c:	9e e8       	ldi	r25, 0x8E	; 142
    4b0e:	87 2f       	mov	r24, r23
    4b10:	76 2f       	mov	r23, r22
    4b12:	05 c0       	rjmp	.+10     	; 0x4b1e <__floatsisf+0x5e>
    4b14:	66 23       	and	r22, r22
    4b16:	71 f0       	breq	.+28     	; 0x4b34 <__floatsisf+0x74>
    4b18:	96 e8       	ldi	r25, 0x86	; 134
    4b1a:	86 2f       	mov	r24, r22
    4b1c:	70 e0       	ldi	r23, 0x00	; 0
    4b1e:	60 e0       	ldi	r22, 0x00	; 0
    4b20:	2a f0       	brmi	.+10     	; 0x4b2c <__floatsisf+0x6c>
    4b22:	9a 95       	dec	r25
    4b24:	66 0f       	add	r22, r22
    4b26:	77 1f       	adc	r23, r23
    4b28:	88 1f       	adc	r24, r24
    4b2a:	da f7       	brpl	.-10     	; 0x4b22 <__floatsisf+0x62>
    4b2c:	88 0f       	add	r24, r24
    4b2e:	96 95       	lsr	r25
    4b30:	87 95       	ror	r24
    4b32:	97 f9       	bld	r25, 7
    4b34:	08 95       	ret

00004b36 <__fp_inf>:
    4b36:	97 f9       	bld	r25, 7
    4b38:	9f 67       	ori	r25, 0x7F	; 127
    4b3a:	80 e8       	ldi	r24, 0x80	; 128
    4b3c:	70 e0       	ldi	r23, 0x00	; 0
    4b3e:	60 e0       	ldi	r22, 0x00	; 0
    4b40:	08 95       	ret

00004b42 <__fp_nan>:
    4b42:	9f ef       	ldi	r25, 0xFF	; 255
    4b44:	80 ec       	ldi	r24, 0xC0	; 192
    4b46:	08 95       	ret

00004b48 <__fp_pscA>:
    4b48:	00 24       	eor	r0, r0
    4b4a:	0a 94       	dec	r0
    4b4c:	16 16       	cp	r1, r22
    4b4e:	17 06       	cpc	r1, r23
    4b50:	18 06       	cpc	r1, r24
    4b52:	09 06       	cpc	r0, r25
    4b54:	08 95       	ret

00004b56 <__fp_pscB>:
    4b56:	00 24       	eor	r0, r0
    4b58:	0a 94       	dec	r0
    4b5a:	12 16       	cp	r1, r18
    4b5c:	13 06       	cpc	r1, r19
    4b5e:	14 06       	cpc	r1, r20
    4b60:	05 06       	cpc	r0, r21
    4b62:	08 95       	ret

00004b64 <__fp_round>:
    4b64:	09 2e       	mov	r0, r25
    4b66:	03 94       	inc	r0
    4b68:	00 0c       	add	r0, r0
    4b6a:	11 f4       	brne	.+4      	; 0x4b70 <__fp_round+0xc>
    4b6c:	88 23       	and	r24, r24
    4b6e:	52 f0       	brmi	.+20     	; 0x4b84 <__fp_round+0x20>
    4b70:	bb 0f       	add	r27, r27
    4b72:	40 f4       	brcc	.+16     	; 0x4b84 <__fp_round+0x20>
    4b74:	bf 2b       	or	r27, r31
    4b76:	11 f4       	brne	.+4      	; 0x4b7c <__fp_round+0x18>
    4b78:	60 ff       	sbrs	r22, 0
    4b7a:	04 c0       	rjmp	.+8      	; 0x4b84 <__fp_round+0x20>
    4b7c:	6f 5f       	subi	r22, 0xFF	; 255
    4b7e:	7f 4f       	sbci	r23, 0xFF	; 255
    4b80:	8f 4f       	sbci	r24, 0xFF	; 255
    4b82:	9f 4f       	sbci	r25, 0xFF	; 255
    4b84:	08 95       	ret

00004b86 <__fp_split3>:
    4b86:	57 fd       	sbrc	r21, 7
    4b88:	90 58       	subi	r25, 0x80	; 128
    4b8a:	44 0f       	add	r20, r20
    4b8c:	55 1f       	adc	r21, r21
    4b8e:	59 f0       	breq	.+22     	; 0x4ba6 <__fp_splitA+0x10>
    4b90:	5f 3f       	cpi	r21, 0xFF	; 255
    4b92:	71 f0       	breq	.+28     	; 0x4bb0 <__fp_splitA+0x1a>
    4b94:	47 95       	ror	r20

00004b96 <__fp_splitA>:
    4b96:	88 0f       	add	r24, r24
    4b98:	97 fb       	bst	r25, 7
    4b9a:	99 1f       	adc	r25, r25
    4b9c:	61 f0       	breq	.+24     	; 0x4bb6 <__fp_splitA+0x20>
    4b9e:	9f 3f       	cpi	r25, 0xFF	; 255
    4ba0:	79 f0       	breq	.+30     	; 0x4bc0 <__fp_splitA+0x2a>
    4ba2:	87 95       	ror	r24
    4ba4:	08 95       	ret
    4ba6:	12 16       	cp	r1, r18
    4ba8:	13 06       	cpc	r1, r19
    4baa:	14 06       	cpc	r1, r20
    4bac:	55 1f       	adc	r21, r21
    4bae:	f2 cf       	rjmp	.-28     	; 0x4b94 <__fp_split3+0xe>
    4bb0:	46 95       	lsr	r20
    4bb2:	f1 df       	rcall	.-30     	; 0x4b96 <__fp_splitA>
    4bb4:	08 c0       	rjmp	.+16     	; 0x4bc6 <__fp_splitA+0x30>
    4bb6:	16 16       	cp	r1, r22
    4bb8:	17 06       	cpc	r1, r23
    4bba:	18 06       	cpc	r1, r24
    4bbc:	99 1f       	adc	r25, r25
    4bbe:	f1 cf       	rjmp	.-30     	; 0x4ba2 <__fp_splitA+0xc>
    4bc0:	86 95       	lsr	r24
    4bc2:	71 05       	cpc	r23, r1
    4bc4:	61 05       	cpc	r22, r1
    4bc6:	08 94       	sec
    4bc8:	08 95       	ret

00004bca <__fp_zero>:
    4bca:	e8 94       	clt

00004bcc <__fp_szero>:
    4bcc:	bb 27       	eor	r27, r27
    4bce:	66 27       	eor	r22, r22
    4bd0:	77 27       	eor	r23, r23
    4bd2:	cb 01       	movw	r24, r22
    4bd4:	97 f9       	bld	r25, 7
    4bd6:	08 95       	ret

00004bd8 <__mulsf3>:
    4bd8:	0b d0       	rcall	.+22     	; 0x4bf0 <__mulsf3x>
    4bda:	c4 cf       	rjmp	.-120    	; 0x4b64 <__fp_round>
    4bdc:	b5 df       	rcall	.-150    	; 0x4b48 <__fp_pscA>
    4bde:	28 f0       	brcs	.+10     	; 0x4bea <__mulsf3+0x12>
    4be0:	ba df       	rcall	.-140    	; 0x4b56 <__fp_pscB>
    4be2:	18 f0       	brcs	.+6      	; 0x4bea <__mulsf3+0x12>
    4be4:	95 23       	and	r25, r21
    4be6:	09 f0       	breq	.+2      	; 0x4bea <__mulsf3+0x12>
    4be8:	a6 cf       	rjmp	.-180    	; 0x4b36 <__fp_inf>
    4bea:	ab cf       	rjmp	.-170    	; 0x4b42 <__fp_nan>
    4bec:	11 24       	eor	r1, r1
    4bee:	ee cf       	rjmp	.-36     	; 0x4bcc <__fp_szero>

00004bf0 <__mulsf3x>:
    4bf0:	ca df       	rcall	.-108    	; 0x4b86 <__fp_split3>
    4bf2:	a0 f3       	brcs	.-24     	; 0x4bdc <__mulsf3+0x4>

00004bf4 <__mulsf3_pse>:
    4bf4:	95 9f       	mul	r25, r21
    4bf6:	d1 f3       	breq	.-12     	; 0x4bec <__mulsf3+0x14>
    4bf8:	95 0f       	add	r25, r21
    4bfa:	50 e0       	ldi	r21, 0x00	; 0
    4bfc:	55 1f       	adc	r21, r21
    4bfe:	62 9f       	mul	r22, r18
    4c00:	f0 01       	movw	r30, r0
    4c02:	72 9f       	mul	r23, r18
    4c04:	bb 27       	eor	r27, r27
    4c06:	f0 0d       	add	r31, r0
    4c08:	b1 1d       	adc	r27, r1
    4c0a:	63 9f       	mul	r22, r19
    4c0c:	aa 27       	eor	r26, r26
    4c0e:	f0 0d       	add	r31, r0
    4c10:	b1 1d       	adc	r27, r1
    4c12:	aa 1f       	adc	r26, r26
    4c14:	64 9f       	mul	r22, r20
    4c16:	66 27       	eor	r22, r22
    4c18:	b0 0d       	add	r27, r0
    4c1a:	a1 1d       	adc	r26, r1
    4c1c:	66 1f       	adc	r22, r22
    4c1e:	82 9f       	mul	r24, r18
    4c20:	22 27       	eor	r18, r18
    4c22:	b0 0d       	add	r27, r0
    4c24:	a1 1d       	adc	r26, r1
    4c26:	62 1f       	adc	r22, r18
    4c28:	73 9f       	mul	r23, r19
    4c2a:	b0 0d       	add	r27, r0
    4c2c:	a1 1d       	adc	r26, r1
    4c2e:	62 1f       	adc	r22, r18
    4c30:	83 9f       	mul	r24, r19
    4c32:	a0 0d       	add	r26, r0
    4c34:	61 1d       	adc	r22, r1
    4c36:	22 1f       	adc	r18, r18
    4c38:	74 9f       	mul	r23, r20
    4c3a:	33 27       	eor	r19, r19
    4c3c:	a0 0d       	add	r26, r0
    4c3e:	61 1d       	adc	r22, r1
    4c40:	23 1f       	adc	r18, r19
    4c42:	84 9f       	mul	r24, r20
    4c44:	60 0d       	add	r22, r0
    4c46:	21 1d       	adc	r18, r1
    4c48:	82 2f       	mov	r24, r18
    4c4a:	76 2f       	mov	r23, r22
    4c4c:	6a 2f       	mov	r22, r26
    4c4e:	11 24       	eor	r1, r1
    4c50:	9f 57       	subi	r25, 0x7F	; 127
    4c52:	50 40       	sbci	r21, 0x00	; 0
    4c54:	8a f0       	brmi	.+34     	; 0x4c78 <__mulsf3_pse+0x84>
    4c56:	e1 f0       	breq	.+56     	; 0x4c90 <__mulsf3_pse+0x9c>
    4c58:	88 23       	and	r24, r24
    4c5a:	4a f0       	brmi	.+18     	; 0x4c6e <__mulsf3_pse+0x7a>
    4c5c:	ee 0f       	add	r30, r30
    4c5e:	ff 1f       	adc	r31, r31
    4c60:	bb 1f       	adc	r27, r27
    4c62:	66 1f       	adc	r22, r22
    4c64:	77 1f       	adc	r23, r23
    4c66:	88 1f       	adc	r24, r24
    4c68:	91 50       	subi	r25, 0x01	; 1
    4c6a:	50 40       	sbci	r21, 0x00	; 0
    4c6c:	a9 f7       	brne	.-22     	; 0x4c58 <__mulsf3_pse+0x64>
    4c6e:	9e 3f       	cpi	r25, 0xFE	; 254
    4c70:	51 05       	cpc	r21, r1
    4c72:	70 f0       	brcs	.+28     	; 0x4c90 <__mulsf3_pse+0x9c>
    4c74:	60 cf       	rjmp	.-320    	; 0x4b36 <__fp_inf>
    4c76:	aa cf       	rjmp	.-172    	; 0x4bcc <__fp_szero>
    4c78:	5f 3f       	cpi	r21, 0xFF	; 255
    4c7a:	ec f3       	brlt	.-6      	; 0x4c76 <__mulsf3_pse+0x82>
    4c7c:	98 3e       	cpi	r25, 0xE8	; 232
    4c7e:	dc f3       	brlt	.-10     	; 0x4c76 <__mulsf3_pse+0x82>
    4c80:	86 95       	lsr	r24
    4c82:	77 95       	ror	r23
    4c84:	67 95       	ror	r22
    4c86:	b7 95       	ror	r27
    4c88:	f7 95       	ror	r31
    4c8a:	e7 95       	ror	r30
    4c8c:	9f 5f       	subi	r25, 0xFF	; 255
    4c8e:	c1 f7       	brne	.-16     	; 0x4c80 <__mulsf3_pse+0x8c>
    4c90:	fe 2b       	or	r31, r30
    4c92:	88 0f       	add	r24, r24
    4c94:	91 1d       	adc	r25, r1
    4c96:	96 95       	lsr	r25
    4c98:	87 95       	ror	r24
    4c9a:	97 f9       	bld	r25, 7
    4c9c:	08 95       	ret

00004c9e <__udivmodhi4>:
    4c9e:	aa 1b       	sub	r26, r26
    4ca0:	bb 1b       	sub	r27, r27
    4ca2:	51 e1       	ldi	r21, 0x11	; 17
    4ca4:	07 c0       	rjmp	.+14     	; 0x4cb4 <__udivmodhi4_ep>

00004ca6 <__udivmodhi4_loop>:
    4ca6:	aa 1f       	adc	r26, r26
    4ca8:	bb 1f       	adc	r27, r27
    4caa:	a6 17       	cp	r26, r22
    4cac:	b7 07       	cpc	r27, r23
    4cae:	10 f0       	brcs	.+4      	; 0x4cb4 <__udivmodhi4_ep>
    4cb0:	a6 1b       	sub	r26, r22
    4cb2:	b7 0b       	sbc	r27, r23

00004cb4 <__udivmodhi4_ep>:
    4cb4:	88 1f       	adc	r24, r24
    4cb6:	99 1f       	adc	r25, r25
    4cb8:	5a 95       	dec	r21
    4cba:	a9 f7       	brne	.-22     	; 0x4ca6 <__udivmodhi4_loop>
    4cbc:	80 95       	com	r24
    4cbe:	90 95       	com	r25
    4cc0:	bc 01       	movw	r22, r24
    4cc2:	cd 01       	movw	r24, r26
    4cc4:	08 95       	ret

00004cc6 <__udivmodsi4>:
    4cc6:	a1 e2       	ldi	r26, 0x21	; 33
    4cc8:	1a 2e       	mov	r1, r26
    4cca:	aa 1b       	sub	r26, r26
    4ccc:	bb 1b       	sub	r27, r27
    4cce:	fd 01       	movw	r30, r26
    4cd0:	0d c0       	rjmp	.+26     	; 0x4cec <__udivmodsi4_ep>

00004cd2 <__udivmodsi4_loop>:
    4cd2:	aa 1f       	adc	r26, r26
    4cd4:	bb 1f       	adc	r27, r27
    4cd6:	ee 1f       	adc	r30, r30
    4cd8:	ff 1f       	adc	r31, r31
    4cda:	a2 17       	cp	r26, r18
    4cdc:	b3 07       	cpc	r27, r19
    4cde:	e4 07       	cpc	r30, r20
    4ce0:	f5 07       	cpc	r31, r21
    4ce2:	20 f0       	brcs	.+8      	; 0x4cec <__udivmodsi4_ep>
    4ce4:	a2 1b       	sub	r26, r18
    4ce6:	b3 0b       	sbc	r27, r19
    4ce8:	e4 0b       	sbc	r30, r20
    4cea:	f5 0b       	sbc	r31, r21

00004cec <__udivmodsi4_ep>:
    4cec:	66 1f       	adc	r22, r22
    4cee:	77 1f       	adc	r23, r23
    4cf0:	88 1f       	adc	r24, r24
    4cf2:	99 1f       	adc	r25, r25
    4cf4:	1a 94       	dec	r1
    4cf6:	69 f7       	brne	.-38     	; 0x4cd2 <__udivmodsi4_loop>
    4cf8:	60 95       	com	r22
    4cfa:	70 95       	com	r23
    4cfc:	80 95       	com	r24
    4cfe:	90 95       	com	r25
    4d00:	9b 01       	movw	r18, r22
    4d02:	ac 01       	movw	r20, r24
    4d04:	bd 01       	movw	r22, r26
    4d06:	cf 01       	movw	r24, r30
    4d08:	08 95       	ret

00004d0a <__prologue_saves__>:
    4d0a:	2f 92       	push	r2
    4d0c:	3f 92       	push	r3
    4d0e:	4f 92       	push	r4
    4d10:	5f 92       	push	r5
    4d12:	6f 92       	push	r6
    4d14:	7f 92       	push	r7
    4d16:	8f 92       	push	r8
    4d18:	9f 92       	push	r9
    4d1a:	af 92       	push	r10
    4d1c:	bf 92       	push	r11
    4d1e:	cf 92       	push	r12
    4d20:	df 92       	push	r13
    4d22:	ef 92       	push	r14
    4d24:	ff 92       	push	r15
    4d26:	0f 93       	push	r16
    4d28:	1f 93       	push	r17
    4d2a:	cf 93       	push	r28
    4d2c:	df 93       	push	r29
    4d2e:	cd b7       	in	r28, 0x3d	; 61
    4d30:	de b7       	in	r29, 0x3e	; 62
    4d32:	ca 1b       	sub	r28, r26
    4d34:	db 0b       	sbc	r29, r27
    4d36:	cd bf       	out	0x3d, r28	; 61
    4d38:	de bf       	out	0x3e, r29	; 62
    4d3a:	19 94       	eijmp

00004d3c <__epilogue_restores__>:
    4d3c:	2a 88       	ldd	r2, Y+18	; 0x12
    4d3e:	39 88       	ldd	r3, Y+17	; 0x11
    4d40:	48 88       	ldd	r4, Y+16	; 0x10
    4d42:	5f 84       	ldd	r5, Y+15	; 0x0f
    4d44:	6e 84       	ldd	r6, Y+14	; 0x0e
    4d46:	7d 84       	ldd	r7, Y+13	; 0x0d
    4d48:	8c 84       	ldd	r8, Y+12	; 0x0c
    4d4a:	9b 84       	ldd	r9, Y+11	; 0x0b
    4d4c:	aa 84       	ldd	r10, Y+10	; 0x0a
    4d4e:	b9 84       	ldd	r11, Y+9	; 0x09
    4d50:	c8 84       	ldd	r12, Y+8	; 0x08
    4d52:	df 80       	ldd	r13, Y+7	; 0x07
    4d54:	ee 80       	ldd	r14, Y+6	; 0x06
    4d56:	fd 80       	ldd	r15, Y+5	; 0x05
    4d58:	0c 81       	ldd	r16, Y+4	; 0x04
    4d5a:	1b 81       	ldd	r17, Y+3	; 0x03
    4d5c:	aa 81       	ldd	r26, Y+2	; 0x02
    4d5e:	b9 81       	ldd	r27, Y+1	; 0x01
    4d60:	ce 0f       	add	r28, r30
    4d62:	d1 1d       	adc	r29, r1
    4d64:	cd bf       	out	0x3d, r28	; 61
    4d66:	de bf       	out	0x3e, r29	; 62
    4d68:	ed 01       	movw	r28, r26
    4d6a:	08 95       	ret

00004d6c <calloc>:
    4d6c:	0f 93       	push	r16
    4d6e:	1f 93       	push	r17
    4d70:	cf 93       	push	r28
    4d72:	df 93       	push	r29
    4d74:	68 9f       	mul	r22, r24
    4d76:	80 01       	movw	r16, r0
    4d78:	69 9f       	mul	r22, r25
    4d7a:	10 0d       	add	r17, r0
    4d7c:	78 9f       	mul	r23, r24
    4d7e:	10 0d       	add	r17, r0
    4d80:	11 24       	eor	r1, r1
    4d82:	c8 01       	movw	r24, r16
    4d84:	0f d0       	rcall	.+30     	; 0x4da4 <malloc>
    4d86:	c8 2f       	mov	r28, r24
    4d88:	d9 2f       	mov	r29, r25
    4d8a:	20 97       	sbiw	r28, 0x00	; 0
    4d8c:	29 f0       	breq	.+10     	; 0x4d98 <calloc+0x2c>
    4d8e:	a8 01       	movw	r20, r16
    4d90:	60 e0       	ldi	r22, 0x00	; 0
    4d92:	70 e0       	ldi	r23, 0x00	; 0
    4d94:	8c 2f       	mov	r24, r28
    4d96:	49 d1       	rcall	.+658    	; 0x502a <memset>
    4d98:	ce 01       	movw	r24, r28
    4d9a:	df 91       	pop	r29
    4d9c:	cf 91       	pop	r28
    4d9e:	1f 91       	pop	r17
    4da0:	0f 91       	pop	r16
    4da2:	08 95       	ret

00004da4 <malloc>:
    4da4:	0f 93       	push	r16
    4da6:	1f 93       	push	r17
    4da8:	cf 93       	push	r28
    4daa:	df 93       	push	r29
    4dac:	82 30       	cpi	r24, 0x02	; 2
    4dae:	91 05       	cpc	r25, r1
    4db0:	10 f4       	brcc	.+4      	; 0x4db6 <malloc+0x12>
    4db2:	82 e0       	ldi	r24, 0x02	; 2
    4db4:	90 e0       	ldi	r25, 0x00	; 0
    4db6:	e0 91 59 2a 	lds	r30, 0x2A59
    4dba:	f0 91 5a 2a 	lds	r31, 0x2A5A
    4dbe:	20 e0       	ldi	r18, 0x00	; 0
    4dc0:	30 e0       	ldi	r19, 0x00	; 0
    4dc2:	c0 e0       	ldi	r28, 0x00	; 0
    4dc4:	d0 e0       	ldi	r29, 0x00	; 0
    4dc6:	23 c0       	rjmp	.+70     	; 0x4e0e <malloc+0x6a>
    4dc8:	40 81       	ld	r20, Z
    4dca:	51 81       	ldd	r21, Z+1	; 0x01
    4dcc:	48 17       	cp	r20, r24
    4dce:	59 07       	cpc	r21, r25
    4dd0:	a8 f0       	brcs	.+42     	; 0x4dfc <malloc+0x58>
    4dd2:	48 17       	cp	r20, r24
    4dd4:	59 07       	cpc	r21, r25
    4dd6:	61 f4       	brne	.+24     	; 0x4df0 <malloc+0x4c>
    4dd8:	82 81       	ldd	r24, Z+2	; 0x02
    4dda:	93 81       	ldd	r25, Z+3	; 0x03
    4ddc:	20 97       	sbiw	r28, 0x00	; 0
    4dde:	19 f0       	breq	.+6      	; 0x4de6 <malloc+0x42>
    4de0:	8a 83       	std	Y+2, r24	; 0x02
    4de2:	9b 83       	std	Y+3, r25	; 0x03
    4de4:	2e c0       	rjmp	.+92     	; 0x4e42 <malloc+0x9e>
    4de6:	80 93 59 2a 	sts	0x2A59, r24
    4dea:	90 93 5a 2a 	sts	0x2A5A, r25
    4dee:	29 c0       	rjmp	.+82     	; 0x4e42 <malloc+0x9e>
    4df0:	21 15       	cp	r18, r1
    4df2:	31 05       	cpc	r19, r1
    4df4:	29 f0       	breq	.+10     	; 0x4e00 <malloc+0x5c>
    4df6:	42 17       	cp	r20, r18
    4df8:	53 07       	cpc	r21, r19
    4dfa:	10 f0       	brcs	.+4      	; 0x4e00 <malloc+0x5c>
    4dfc:	a9 01       	movw	r20, r18
    4dfe:	02 c0       	rjmp	.+4      	; 0x4e04 <malloc+0x60>
    4e00:	be 01       	movw	r22, r28
    4e02:	df 01       	movw	r26, r30
    4e04:	02 81       	ldd	r16, Z+2	; 0x02
    4e06:	13 81       	ldd	r17, Z+3	; 0x03
    4e08:	ef 01       	movw	r28, r30
    4e0a:	9a 01       	movw	r18, r20
    4e0c:	f8 01       	movw	r30, r16
    4e0e:	30 97       	sbiw	r30, 0x00	; 0
    4e10:	d9 f6       	brne	.-74     	; 0x4dc8 <malloc+0x24>
    4e12:	21 15       	cp	r18, r1
    4e14:	31 05       	cpc	r19, r1
    4e16:	09 f1       	breq	.+66     	; 0x4e5a <malloc+0xb6>
    4e18:	28 1b       	sub	r18, r24
    4e1a:	39 0b       	sbc	r19, r25
    4e1c:	24 30       	cpi	r18, 0x04	; 4
    4e1e:	31 05       	cpc	r19, r1
    4e20:	90 f4       	brcc	.+36     	; 0x4e46 <malloc+0xa2>
    4e22:	12 96       	adiw	r26, 0x02	; 2
    4e24:	8d 91       	ld	r24, X+
    4e26:	9c 91       	ld	r25, X
    4e28:	13 97       	sbiw	r26, 0x03	; 3
    4e2a:	61 15       	cp	r22, r1
    4e2c:	71 05       	cpc	r23, r1
    4e2e:	21 f0       	breq	.+8      	; 0x4e38 <malloc+0x94>
    4e30:	fb 01       	movw	r30, r22
    4e32:	82 83       	std	Z+2, r24	; 0x02
    4e34:	93 83       	std	Z+3, r25	; 0x03
    4e36:	04 c0       	rjmp	.+8      	; 0x4e40 <malloc+0x9c>
    4e38:	80 93 59 2a 	sts	0x2A59, r24
    4e3c:	90 93 5a 2a 	sts	0x2A5A, r25
    4e40:	fd 01       	movw	r30, r26
    4e42:	32 96       	adiw	r30, 0x02	; 2
    4e44:	44 c0       	rjmp	.+136    	; 0x4ece <malloc+0x12a>
    4e46:	fd 01       	movw	r30, r26
    4e48:	e2 0f       	add	r30, r18
    4e4a:	f3 1f       	adc	r31, r19
    4e4c:	81 93       	st	Z+, r24
    4e4e:	91 93       	st	Z+, r25
    4e50:	22 50       	subi	r18, 0x02	; 2
    4e52:	31 09       	sbc	r19, r1
    4e54:	2d 93       	st	X+, r18
    4e56:	3c 93       	st	X, r19
    4e58:	3a c0       	rjmp	.+116    	; 0x4ece <malloc+0x12a>
    4e5a:	20 91 57 2a 	lds	r18, 0x2A57
    4e5e:	30 91 58 2a 	lds	r19, 0x2A58
    4e62:	23 2b       	or	r18, r19
    4e64:	41 f4       	brne	.+16     	; 0x4e76 <malloc+0xd2>
    4e66:	20 91 03 20 	lds	r18, 0x2003
    4e6a:	30 91 04 20 	lds	r19, 0x2004
    4e6e:	20 93 57 2a 	sts	0x2A57, r18
    4e72:	30 93 58 2a 	sts	0x2A58, r19
    4e76:	20 91 01 20 	lds	r18, 0x2001
    4e7a:	30 91 02 20 	lds	r19, 0x2002
    4e7e:	21 15       	cp	r18, r1
    4e80:	31 05       	cpc	r19, r1
    4e82:	41 f4       	brne	.+16     	; 0x4e94 <malloc+0xf0>
    4e84:	2d b7       	in	r18, 0x3d	; 61
    4e86:	3e b7       	in	r19, 0x3e	; 62
    4e88:	40 91 05 20 	lds	r20, 0x2005
    4e8c:	50 91 06 20 	lds	r21, 0x2006
    4e90:	24 1b       	sub	r18, r20
    4e92:	35 0b       	sbc	r19, r21
    4e94:	e0 91 57 2a 	lds	r30, 0x2A57
    4e98:	f0 91 58 2a 	lds	r31, 0x2A58
    4e9c:	e2 17       	cp	r30, r18
    4e9e:	f3 07       	cpc	r31, r19
    4ea0:	a0 f4       	brcc	.+40     	; 0x4eca <malloc+0x126>
    4ea2:	2e 1b       	sub	r18, r30
    4ea4:	3f 0b       	sbc	r19, r31
    4ea6:	28 17       	cp	r18, r24
    4ea8:	39 07       	cpc	r19, r25
    4eaa:	78 f0       	brcs	.+30     	; 0x4eca <malloc+0x126>
    4eac:	ac 01       	movw	r20, r24
    4eae:	4e 5f       	subi	r20, 0xFE	; 254
    4eb0:	5f 4f       	sbci	r21, 0xFF	; 255
    4eb2:	24 17       	cp	r18, r20
    4eb4:	35 07       	cpc	r19, r21
    4eb6:	48 f0       	brcs	.+18     	; 0x4eca <malloc+0x126>
    4eb8:	4e 0f       	add	r20, r30
    4eba:	5f 1f       	adc	r21, r31
    4ebc:	40 93 57 2a 	sts	0x2A57, r20
    4ec0:	50 93 58 2a 	sts	0x2A58, r21
    4ec4:	81 93       	st	Z+, r24
    4ec6:	91 93       	st	Z+, r25
    4ec8:	02 c0       	rjmp	.+4      	; 0x4ece <malloc+0x12a>
    4eca:	e0 e0       	ldi	r30, 0x00	; 0
    4ecc:	f0 e0       	ldi	r31, 0x00	; 0
    4ece:	cf 01       	movw	r24, r30
    4ed0:	df 91       	pop	r29
    4ed2:	cf 91       	pop	r28
    4ed4:	1f 91       	pop	r17
    4ed6:	0f 91       	pop	r16
    4ed8:	08 95       	ret

00004eda <free>:
    4eda:	ef 92       	push	r14
    4edc:	ff 92       	push	r15
    4ede:	0f 93       	push	r16
    4ee0:	1f 93       	push	r17
    4ee2:	cf 93       	push	r28
    4ee4:	df 93       	push	r29
    4ee6:	00 97       	sbiw	r24, 0x00	; 0
    4ee8:	09 f4       	brne	.+2      	; 0x4eec <free+0x12>
    4eea:	8f c0       	rjmp	.+286    	; 0x500a <free+0x130>
    4eec:	dc 01       	movw	r26, r24
    4eee:	12 97       	sbiw	r26, 0x02	; 2
    4ef0:	12 96       	adiw	r26, 0x02	; 2
    4ef2:	1d 92       	st	X+, r1
    4ef4:	1c 92       	st	X, r1
    4ef6:	13 97       	sbiw	r26, 0x03	; 3
    4ef8:	e0 90 59 2a 	lds	r14, 0x2A59
    4efc:	f0 90 5a 2a 	lds	r15, 0x2A5A
    4f00:	e1 14       	cp	r14, r1
    4f02:	f1 04       	cpc	r15, r1
    4f04:	89 f4       	brne	.+34     	; 0x4f28 <free+0x4e>
    4f06:	2d 91       	ld	r18, X+
    4f08:	3c 91       	ld	r19, X
    4f0a:	11 97       	sbiw	r26, 0x01	; 1
    4f0c:	28 0f       	add	r18, r24
    4f0e:	39 1f       	adc	r19, r25
    4f10:	80 91 57 2a 	lds	r24, 0x2A57
    4f14:	90 91 58 2a 	lds	r25, 0x2A58
    4f18:	82 17       	cp	r24, r18
    4f1a:	93 07       	cpc	r25, r19
    4f1c:	89 f5       	brne	.+98     	; 0x4f80 <free+0xa6>
    4f1e:	a0 93 57 2a 	sts	0x2A57, r26
    4f22:	b0 93 58 2a 	sts	0x2A58, r27
    4f26:	71 c0       	rjmp	.+226    	; 0x500a <free+0x130>
    4f28:	e7 01       	movw	r28, r14
    4f2a:	20 e0       	ldi	r18, 0x00	; 0
    4f2c:	30 e0       	ldi	r19, 0x00	; 0
    4f2e:	01 c0       	rjmp	.+2      	; 0x4f32 <free+0x58>
    4f30:	ea 01       	movw	r28, r20
    4f32:	ca 17       	cp	r28, r26
    4f34:	db 07       	cpc	r29, r27
    4f36:	38 f4       	brcc	.+14     	; 0x4f46 <free+0x6c>
    4f38:	4a 81       	ldd	r20, Y+2	; 0x02
    4f3a:	5b 81       	ldd	r21, Y+3	; 0x03
    4f3c:	9e 01       	movw	r18, r28
    4f3e:	41 15       	cp	r20, r1
    4f40:	51 05       	cpc	r21, r1
    4f42:	b1 f7       	brne	.-20     	; 0x4f30 <free+0x56>
    4f44:	22 c0       	rjmp	.+68     	; 0x4f8a <free+0xb0>
    4f46:	bc 01       	movw	r22, r24
    4f48:	62 50       	subi	r22, 0x02	; 2
    4f4a:	71 09       	sbc	r23, r1
    4f4c:	fb 01       	movw	r30, r22
    4f4e:	c2 83       	std	Z+2, r28	; 0x02
    4f50:	d3 83       	std	Z+3, r29	; 0x03
    4f52:	00 81       	ld	r16, Z
    4f54:	11 81       	ldd	r17, Z+1	; 0x01
    4f56:	ac 01       	movw	r20, r24
    4f58:	40 0f       	add	r20, r16
    4f5a:	51 1f       	adc	r21, r17
    4f5c:	4c 17       	cp	r20, r28
    4f5e:	5d 07       	cpc	r21, r29
    4f60:	61 f4       	brne	.+24     	; 0x4f7a <free+0xa0>
    4f62:	48 81       	ld	r20, Y
    4f64:	59 81       	ldd	r21, Y+1	; 0x01
    4f66:	40 0f       	add	r20, r16
    4f68:	51 1f       	adc	r21, r17
    4f6a:	4e 5f       	subi	r20, 0xFE	; 254
    4f6c:	5f 4f       	sbci	r21, 0xFF	; 255
    4f6e:	40 83       	st	Z, r20
    4f70:	51 83       	std	Z+1, r21	; 0x01
    4f72:	4a 81       	ldd	r20, Y+2	; 0x02
    4f74:	5b 81       	ldd	r21, Y+3	; 0x03
    4f76:	42 83       	std	Z+2, r20	; 0x02
    4f78:	53 83       	std	Z+3, r21	; 0x03
    4f7a:	21 15       	cp	r18, r1
    4f7c:	31 05       	cpc	r19, r1
    4f7e:	29 f4       	brne	.+10     	; 0x4f8a <free+0xb0>
    4f80:	a0 93 59 2a 	sts	0x2A59, r26
    4f84:	b0 93 5a 2a 	sts	0x2A5A, r27
    4f88:	40 c0       	rjmp	.+128    	; 0x500a <free+0x130>
    4f8a:	f9 01       	movw	r30, r18
    4f8c:	a2 83       	std	Z+2, r26	; 0x02
    4f8e:	b3 83       	std	Z+3, r27	; 0x03
    4f90:	e9 01       	movw	r28, r18
    4f92:	69 91       	ld	r22, Y+
    4f94:	79 91       	ld	r23, Y+
    4f96:	c6 0f       	add	r28, r22
    4f98:	d7 1f       	adc	r29, r23
    4f9a:	ac 17       	cp	r26, r28
    4f9c:	bd 07       	cpc	r27, r29
    4f9e:	79 f4       	brne	.+30     	; 0x4fbe <free+0xe4>
    4fa0:	dc 01       	movw	r26, r24
    4fa2:	5e 91       	ld	r21, -X
    4fa4:	4e 91       	ld	r20, -X
    4fa6:	46 0f       	add	r20, r22
    4fa8:	57 1f       	adc	r21, r23
    4faa:	4e 5f       	subi	r20, 0xFE	; 254
    4fac:	5f 4f       	sbci	r21, 0xFF	; 255
    4fae:	40 83       	st	Z, r20
    4fb0:	51 83       	std	Z+1, r21	; 0x01
    4fb2:	12 96       	adiw	r26, 0x02	; 2
    4fb4:	8d 91       	ld	r24, X+
    4fb6:	9c 91       	ld	r25, X
    4fb8:	13 97       	sbiw	r26, 0x03	; 3
    4fba:	82 83       	std	Z+2, r24	; 0x02
    4fbc:	93 83       	std	Z+3, r25	; 0x03
    4fbe:	a0 e0       	ldi	r26, 0x00	; 0
    4fc0:	b0 e0       	ldi	r27, 0x00	; 0
    4fc2:	02 c0       	rjmp	.+4      	; 0x4fc8 <free+0xee>
    4fc4:	d7 01       	movw	r26, r14
    4fc6:	7c 01       	movw	r14, r24
    4fc8:	f7 01       	movw	r30, r14
    4fca:	82 81       	ldd	r24, Z+2	; 0x02
    4fcc:	93 81       	ldd	r25, Z+3	; 0x03
    4fce:	00 97       	sbiw	r24, 0x00	; 0
    4fd0:	c9 f7       	brne	.-14     	; 0x4fc4 <free+0xea>
    4fd2:	c7 01       	movw	r24, r14
    4fd4:	02 96       	adiw	r24, 0x02	; 2
    4fd6:	20 81       	ld	r18, Z
    4fd8:	31 81       	ldd	r19, Z+1	; 0x01
    4fda:	82 0f       	add	r24, r18
    4fdc:	93 1f       	adc	r25, r19
    4fde:	20 91 57 2a 	lds	r18, 0x2A57
    4fe2:	30 91 58 2a 	lds	r19, 0x2A58
    4fe6:	28 17       	cp	r18, r24
    4fe8:	39 07       	cpc	r19, r25
    4fea:	79 f4       	brne	.+30     	; 0x500a <free+0x130>
    4fec:	10 97       	sbiw	r26, 0x00	; 0
    4fee:	29 f4       	brne	.+10     	; 0x4ffa <free+0x120>
    4ff0:	10 92 59 2a 	sts	0x2A59, r1
    4ff4:	10 92 5a 2a 	sts	0x2A5A, r1
    4ff8:	04 c0       	rjmp	.+8      	; 0x5002 <free+0x128>
    4ffa:	12 96       	adiw	r26, 0x02	; 2
    4ffc:	1d 92       	st	X+, r1
    4ffe:	1c 92       	st	X, r1
    5000:	13 97       	sbiw	r26, 0x03	; 3
    5002:	e0 92 57 2a 	sts	0x2A57, r14
    5006:	f0 92 58 2a 	sts	0x2A58, r15
    500a:	df 91       	pop	r29
    500c:	cf 91       	pop	r28
    500e:	1f 91       	pop	r17
    5010:	0f 91       	pop	r16
    5012:	ff 90       	pop	r15
    5014:	ef 90       	pop	r14
    5016:	08 95       	ret

00005018 <memcpy>:
    5018:	fb 01       	movw	r30, r22
    501a:	dc 01       	movw	r26, r24
    501c:	02 c0       	rjmp	.+4      	; 0x5022 <memcpy+0xa>
    501e:	01 90       	ld	r0, Z+
    5020:	0d 92       	st	X+, r0
    5022:	41 50       	subi	r20, 0x01	; 1
    5024:	50 40       	sbci	r21, 0x00	; 0
    5026:	d8 f7       	brcc	.-10     	; 0x501e <memcpy+0x6>
    5028:	08 95       	ret

0000502a <memset>:
    502a:	dc 01       	movw	r26, r24
    502c:	01 c0       	rjmp	.+2      	; 0x5030 <memset+0x6>
    502e:	6d 93       	st	X+, r22
    5030:	41 50       	subi	r20, 0x01	; 1
    5032:	50 40       	sbci	r21, 0x00	; 0
    5034:	e0 f7       	brcc	.-8      	; 0x502e <memset+0x4>
    5036:	08 95       	ret

00005038 <itoa>:
    5038:	fb 01       	movw	r30, r22
    503a:	9f 01       	movw	r18, r30
    503c:	e8 94       	clt
    503e:	42 30       	cpi	r20, 0x02	; 2
    5040:	bc f0       	brlt	.+46     	; 0x5070 <itoa+0x38>
    5042:	45 32       	cpi	r20, 0x25	; 37
    5044:	ac f4       	brge	.+42     	; 0x5070 <itoa+0x38>
    5046:	4a 30       	cpi	r20, 0x0A	; 10
    5048:	29 f4       	brne	.+10     	; 0x5054 <itoa+0x1c>
    504a:	97 fb       	bst	r25, 7
    504c:	1e f4       	brtc	.+6      	; 0x5054 <itoa+0x1c>
    504e:	90 95       	com	r25
    5050:	81 95       	neg	r24
    5052:	9f 4f       	sbci	r25, 0xFF	; 255
    5054:	64 2f       	mov	r22, r20
    5056:	77 27       	eor	r23, r23
    5058:	22 de       	rcall	.-956    	; 0x4c9e <__udivmodhi4>
    505a:	80 5d       	subi	r24, 0xD0	; 208
    505c:	8a 33       	cpi	r24, 0x3A	; 58
    505e:	0c f0       	brlt	.+2      	; 0x5062 <itoa+0x2a>
    5060:	89 5d       	subi	r24, 0xD9	; 217
    5062:	81 93       	st	Z+, r24
    5064:	cb 01       	movw	r24, r22
    5066:	00 97       	sbiw	r24, 0x00	; 0
    5068:	a9 f7       	brne	.-22     	; 0x5054 <itoa+0x1c>
    506a:	16 f4       	brtc	.+4      	; 0x5070 <itoa+0x38>
    506c:	5d e2       	ldi	r21, 0x2D	; 45
    506e:	51 93       	st	Z+, r21
    5070:	10 82       	st	Z, r1
    5072:	c9 01       	movw	r24, r18
    5074:	66 c2       	rjmp	.+1228   	; 0x5542 <strrev>

00005076 <snprintf>:
    5076:	0f 93       	push	r16
    5078:	1f 93       	push	r17
    507a:	cf 93       	push	r28
    507c:	df 93       	push	r29
    507e:	cd b7       	in	r28, 0x3d	; 61
    5080:	de b7       	in	r29, 0x3e	; 62
    5082:	2e 97       	sbiw	r28, 0x0e	; 14
    5084:	cd bf       	out	0x3d, r28	; 61
    5086:	de bf       	out	0x3e, r29	; 62
    5088:	0e 89       	ldd	r16, Y+22	; 0x16
    508a:	1f 89       	ldd	r17, Y+23	; 0x17
    508c:	88 8d       	ldd	r24, Y+24	; 0x18
    508e:	99 8d       	ldd	r25, Y+25	; 0x19
    5090:	26 e0       	ldi	r18, 0x06	; 6
    5092:	2c 83       	std	Y+4, r18	; 0x04
    5094:	09 83       	std	Y+1, r16	; 0x01
    5096:	1a 83       	std	Y+2, r17	; 0x02
    5098:	97 ff       	sbrs	r25, 7
    509a:	02 c0       	rjmp	.+4      	; 0x50a0 <snprintf+0x2a>
    509c:	80 e0       	ldi	r24, 0x00	; 0
    509e:	90 e8       	ldi	r25, 0x80	; 128
    50a0:	01 97       	sbiw	r24, 0x01	; 1
    50a2:	8d 83       	std	Y+5, r24	; 0x05
    50a4:	9e 83       	std	Y+6, r25	; 0x06
    50a6:	ce 01       	movw	r24, r28
    50a8:	4c 96       	adiw	r24, 0x1c	; 28
    50aa:	ac 01       	movw	r20, r24
    50ac:	6a 8d       	ldd	r22, Y+26	; 0x1a
    50ae:	7b 8d       	ldd	r23, Y+27	; 0x1b
    50b0:	ce 01       	movw	r24, r28
    50b2:	01 96       	adiw	r24, 0x01	; 1
    50b4:	3e d0       	rcall	.+124    	; 0x5132 <vfprintf>
    50b6:	4d 81       	ldd	r20, Y+5	; 0x05
    50b8:	5e 81       	ldd	r21, Y+6	; 0x06
    50ba:	57 fd       	sbrc	r21, 7
    50bc:	0a c0       	rjmp	.+20     	; 0x50d2 <snprintf+0x5c>
    50be:	2f 81       	ldd	r18, Y+7	; 0x07
    50c0:	38 85       	ldd	r19, Y+8	; 0x08
    50c2:	42 17       	cp	r20, r18
    50c4:	53 07       	cpc	r21, r19
    50c6:	0c f4       	brge	.+2      	; 0x50ca <snprintf+0x54>
    50c8:	9a 01       	movw	r18, r20
    50ca:	f8 01       	movw	r30, r16
    50cc:	e2 0f       	add	r30, r18
    50ce:	f3 1f       	adc	r31, r19
    50d0:	10 82       	st	Z, r1
    50d2:	2e 96       	adiw	r28, 0x0e	; 14
    50d4:	cd bf       	out	0x3d, r28	; 61
    50d6:	de bf       	out	0x3e, r29	; 62
    50d8:	df 91       	pop	r29
    50da:	cf 91       	pop	r28
    50dc:	1f 91       	pop	r17
    50de:	0f 91       	pop	r16
    50e0:	08 95       	ret

000050e2 <sprintf>:
    50e2:	0f 93       	push	r16
    50e4:	1f 93       	push	r17
    50e6:	cf 93       	push	r28
    50e8:	df 93       	push	r29
    50ea:	cd b7       	in	r28, 0x3d	; 61
    50ec:	de b7       	in	r29, 0x3e	; 62
    50ee:	2e 97       	sbiw	r28, 0x0e	; 14
    50f0:	cd bf       	out	0x3d, r28	; 61
    50f2:	de bf       	out	0x3e, r29	; 62
    50f4:	0e 89       	ldd	r16, Y+22	; 0x16
    50f6:	1f 89       	ldd	r17, Y+23	; 0x17
    50f8:	86 e0       	ldi	r24, 0x06	; 6
    50fa:	8c 83       	std	Y+4, r24	; 0x04
    50fc:	09 83       	std	Y+1, r16	; 0x01
    50fe:	1a 83       	std	Y+2, r17	; 0x02
    5100:	8f ef       	ldi	r24, 0xFF	; 255
    5102:	9f e7       	ldi	r25, 0x7F	; 127
    5104:	8d 83       	std	Y+5, r24	; 0x05
    5106:	9e 83       	std	Y+6, r25	; 0x06
    5108:	ce 01       	movw	r24, r28
    510a:	4a 96       	adiw	r24, 0x1a	; 26
    510c:	ac 01       	movw	r20, r24
    510e:	68 8d       	ldd	r22, Y+24	; 0x18
    5110:	79 8d       	ldd	r23, Y+25	; 0x19
    5112:	ce 01       	movw	r24, r28
    5114:	01 96       	adiw	r24, 0x01	; 1
    5116:	0d d0       	rcall	.+26     	; 0x5132 <vfprintf>
    5118:	ef 81       	ldd	r30, Y+7	; 0x07
    511a:	f8 85       	ldd	r31, Y+8	; 0x08
    511c:	e0 0f       	add	r30, r16
    511e:	f1 1f       	adc	r31, r17
    5120:	10 82       	st	Z, r1
    5122:	2e 96       	adiw	r28, 0x0e	; 14
    5124:	cd bf       	out	0x3d, r28	; 61
    5126:	de bf       	out	0x3e, r29	; 62
    5128:	df 91       	pop	r29
    512a:	cf 91       	pop	r28
    512c:	1f 91       	pop	r17
    512e:	0f 91       	pop	r16
    5130:	08 95       	ret

00005132 <vfprintf>:
    5132:	2f 92       	push	r2
    5134:	3f 92       	push	r3
    5136:	4f 92       	push	r4
    5138:	5f 92       	push	r5
    513a:	6f 92       	push	r6
    513c:	7f 92       	push	r7
    513e:	8f 92       	push	r8
    5140:	9f 92       	push	r9
    5142:	af 92       	push	r10
    5144:	bf 92       	push	r11
    5146:	cf 92       	push	r12
    5148:	df 92       	push	r13
    514a:	ef 92       	push	r14
    514c:	ff 92       	push	r15
    514e:	0f 93       	push	r16
    5150:	1f 93       	push	r17
    5152:	cf 93       	push	r28
    5154:	df 93       	push	r29
    5156:	cd b7       	in	r28, 0x3d	; 61
    5158:	de b7       	in	r29, 0x3e	; 62
    515a:	2c 97       	sbiw	r28, 0x0c	; 12
    515c:	cd bf       	out	0x3d, r28	; 61
    515e:	de bf       	out	0x3e, r29	; 62
    5160:	7c 01       	movw	r14, r24
    5162:	6b 01       	movw	r12, r22
    5164:	8a 01       	movw	r16, r20
    5166:	fc 01       	movw	r30, r24
    5168:	16 82       	std	Z+6, r1	; 0x06
    516a:	17 82       	std	Z+7, r1	; 0x07
    516c:	83 81       	ldd	r24, Z+3	; 0x03
    516e:	81 ff       	sbrs	r24, 1
    5170:	b9 c1       	rjmp	.+882    	; 0x54e4 <vfprintf+0x3b2>
    5172:	88 24       	eor	r8, r8
    5174:	83 94       	inc	r8
    5176:	91 2c       	mov	r9, r1
    5178:	8c 0e       	add	r8, r28
    517a:	9d 1e       	adc	r9, r29
    517c:	f7 01       	movw	r30, r14
    517e:	93 81       	ldd	r25, Z+3	; 0x03
    5180:	f6 01       	movw	r30, r12
    5182:	93 fd       	sbrc	r25, 3
    5184:	85 91       	lpm	r24, Z+
    5186:	93 ff       	sbrs	r25, 3
    5188:	81 91       	ld	r24, Z+
    518a:	6f 01       	movw	r12, r30
    518c:	88 23       	and	r24, r24
    518e:	09 f4       	brne	.+2      	; 0x5192 <vfprintf+0x60>
    5190:	a5 c1       	rjmp	.+842    	; 0x54dc <vfprintf+0x3aa>
    5192:	85 32       	cpi	r24, 0x25	; 37
    5194:	39 f4       	brne	.+14     	; 0x51a4 <vfprintf+0x72>
    5196:	93 fd       	sbrc	r25, 3
    5198:	85 91       	lpm	r24, Z+
    519a:	93 ff       	sbrs	r25, 3
    519c:	81 91       	ld	r24, Z+
    519e:	6f 01       	movw	r12, r30
    51a0:	85 32       	cpi	r24, 0x25	; 37
    51a2:	21 f4       	brne	.+8      	; 0x51ac <vfprintf+0x7a>
    51a4:	b7 01       	movw	r22, r14
    51a6:	90 e0       	ldi	r25, 0x00	; 0
    51a8:	dc d1       	rcall	.+952    	; 0x5562 <fputc>
    51aa:	e8 cf       	rjmp	.-48     	; 0x517c <vfprintf+0x4a>
    51ac:	51 2c       	mov	r5, r1
    51ae:	31 2c       	mov	r3, r1
    51b0:	20 e0       	ldi	r18, 0x00	; 0
    51b2:	20 32       	cpi	r18, 0x20	; 32
    51b4:	a8 f4       	brcc	.+42     	; 0x51e0 <vfprintf+0xae>
    51b6:	8b 32       	cpi	r24, 0x2B	; 43
    51b8:	61 f0       	breq	.+24     	; 0x51d2 <vfprintf+0xa0>
    51ba:	28 f4       	brcc	.+10     	; 0x51c6 <vfprintf+0x94>
    51bc:	80 32       	cpi	r24, 0x20	; 32
    51be:	51 f0       	breq	.+20     	; 0x51d4 <vfprintf+0xa2>
    51c0:	83 32       	cpi	r24, 0x23	; 35
    51c2:	71 f4       	brne	.+28     	; 0x51e0 <vfprintf+0xae>
    51c4:	0b c0       	rjmp	.+22     	; 0x51dc <vfprintf+0xaa>
    51c6:	8d 32       	cpi	r24, 0x2D	; 45
    51c8:	39 f0       	breq	.+14     	; 0x51d8 <vfprintf+0xa6>
    51ca:	80 33       	cpi	r24, 0x30	; 48
    51cc:	49 f4       	brne	.+18     	; 0x51e0 <vfprintf+0xae>
    51ce:	21 60       	ori	r18, 0x01	; 1
    51d0:	28 c0       	rjmp	.+80     	; 0x5222 <vfprintf+0xf0>
    51d2:	22 60       	ori	r18, 0x02	; 2
    51d4:	24 60       	ori	r18, 0x04	; 4
    51d6:	25 c0       	rjmp	.+74     	; 0x5222 <vfprintf+0xf0>
    51d8:	28 60       	ori	r18, 0x08	; 8
    51da:	23 c0       	rjmp	.+70     	; 0x5222 <vfprintf+0xf0>
    51dc:	20 61       	ori	r18, 0x10	; 16
    51de:	21 c0       	rjmp	.+66     	; 0x5222 <vfprintf+0xf0>
    51e0:	27 fd       	sbrc	r18, 7
    51e2:	27 c0       	rjmp	.+78     	; 0x5232 <vfprintf+0x100>
    51e4:	38 2f       	mov	r19, r24
    51e6:	30 53       	subi	r19, 0x30	; 48
    51e8:	3a 30       	cpi	r19, 0x0A	; 10
    51ea:	78 f4       	brcc	.+30     	; 0x520a <vfprintf+0xd8>
    51ec:	26 ff       	sbrs	r18, 6
    51ee:	06 c0       	rjmp	.+12     	; 0x51fc <vfprintf+0xca>
    51f0:	fa e0       	ldi	r31, 0x0A	; 10
    51f2:	5f 9e       	mul	r5, r31
    51f4:	30 0d       	add	r19, r0
    51f6:	11 24       	eor	r1, r1
    51f8:	53 2e       	mov	r5, r19
    51fa:	13 c0       	rjmp	.+38     	; 0x5222 <vfprintf+0xf0>
    51fc:	8a e0       	ldi	r24, 0x0A	; 10
    51fe:	38 9e       	mul	r3, r24
    5200:	30 0d       	add	r19, r0
    5202:	11 24       	eor	r1, r1
    5204:	33 2e       	mov	r3, r19
    5206:	20 62       	ori	r18, 0x20	; 32
    5208:	0c c0       	rjmp	.+24     	; 0x5222 <vfprintf+0xf0>
    520a:	8e 32       	cpi	r24, 0x2E	; 46
    520c:	21 f4       	brne	.+8      	; 0x5216 <vfprintf+0xe4>
    520e:	26 fd       	sbrc	r18, 6
    5210:	65 c1       	rjmp	.+714    	; 0x54dc <vfprintf+0x3aa>
    5212:	20 64       	ori	r18, 0x40	; 64
    5214:	06 c0       	rjmp	.+12     	; 0x5222 <vfprintf+0xf0>
    5216:	8c 36       	cpi	r24, 0x6C	; 108
    5218:	11 f4       	brne	.+4      	; 0x521e <vfprintf+0xec>
    521a:	20 68       	ori	r18, 0x80	; 128
    521c:	02 c0       	rjmp	.+4      	; 0x5222 <vfprintf+0xf0>
    521e:	88 36       	cpi	r24, 0x68	; 104
    5220:	41 f4       	brne	.+16     	; 0x5232 <vfprintf+0x100>
    5222:	f6 01       	movw	r30, r12
    5224:	93 fd       	sbrc	r25, 3
    5226:	85 91       	lpm	r24, Z+
    5228:	93 ff       	sbrs	r25, 3
    522a:	81 91       	ld	r24, Z+
    522c:	6f 01       	movw	r12, r30
    522e:	81 11       	cpse	r24, r1
    5230:	c0 cf       	rjmp	.-128    	; 0x51b2 <vfprintf+0x80>
    5232:	98 2f       	mov	r25, r24
    5234:	95 54       	subi	r25, 0x45	; 69
    5236:	93 30       	cpi	r25, 0x03	; 3
    5238:	18 f0       	brcs	.+6      	; 0x5240 <vfprintf+0x10e>
    523a:	90 52       	subi	r25, 0x20	; 32
    523c:	93 30       	cpi	r25, 0x03	; 3
    523e:	28 f4       	brcc	.+10     	; 0x524a <vfprintf+0x118>
    5240:	0c 5f       	subi	r16, 0xFC	; 252
    5242:	1f 4f       	sbci	r17, 0xFF	; 255
    5244:	ff e3       	ldi	r31, 0x3F	; 63
    5246:	f9 83       	std	Y+1, r31	; 0x01
    5248:	0d c0       	rjmp	.+26     	; 0x5264 <vfprintf+0x132>
    524a:	83 36       	cpi	r24, 0x63	; 99
    524c:	31 f0       	breq	.+12     	; 0x525a <vfprintf+0x128>
    524e:	83 37       	cpi	r24, 0x73	; 115
    5250:	71 f0       	breq	.+28     	; 0x526e <vfprintf+0x13c>
    5252:	83 35       	cpi	r24, 0x53	; 83
    5254:	09 f0       	breq	.+2      	; 0x5258 <vfprintf+0x126>
    5256:	5a c0       	rjmp	.+180    	; 0x530c <vfprintf+0x1da>
    5258:	22 c0       	rjmp	.+68     	; 0x529e <vfprintf+0x16c>
    525a:	f8 01       	movw	r30, r16
    525c:	80 81       	ld	r24, Z
    525e:	89 83       	std	Y+1, r24	; 0x01
    5260:	0e 5f       	subi	r16, 0xFE	; 254
    5262:	1f 4f       	sbci	r17, 0xFF	; 255
    5264:	44 24       	eor	r4, r4
    5266:	43 94       	inc	r4
    5268:	51 2c       	mov	r5, r1
    526a:	54 01       	movw	r10, r8
    526c:	14 c0       	rjmp	.+40     	; 0x5296 <vfprintf+0x164>
    526e:	38 01       	movw	r6, r16
    5270:	f2 e0       	ldi	r31, 0x02	; 2
    5272:	6f 0e       	add	r6, r31
    5274:	71 1c       	adc	r7, r1
    5276:	f8 01       	movw	r30, r16
    5278:	a0 80       	ld	r10, Z
    527a:	b1 80       	ldd	r11, Z+1	; 0x01
    527c:	26 ff       	sbrs	r18, 6
    527e:	03 c0       	rjmp	.+6      	; 0x5286 <vfprintf+0x154>
    5280:	65 2d       	mov	r22, r5
    5282:	70 e0       	ldi	r23, 0x00	; 0
    5284:	02 c0       	rjmp	.+4      	; 0x528a <vfprintf+0x158>
    5286:	6f ef       	ldi	r22, 0xFF	; 255
    5288:	7f ef       	ldi	r23, 0xFF	; 255
    528a:	c5 01       	movw	r24, r10
    528c:	2c 87       	std	Y+12, r18	; 0x0c
    528e:	4e d1       	rcall	.+668    	; 0x552c <strnlen>
    5290:	2c 01       	movw	r4, r24
    5292:	83 01       	movw	r16, r6
    5294:	2c 85       	ldd	r18, Y+12	; 0x0c
    5296:	6f e7       	ldi	r22, 0x7F	; 127
    5298:	26 2e       	mov	r2, r22
    529a:	22 22       	and	r2, r18
    529c:	17 c0       	rjmp	.+46     	; 0x52cc <vfprintf+0x19a>
    529e:	38 01       	movw	r6, r16
    52a0:	f2 e0       	ldi	r31, 0x02	; 2
    52a2:	6f 0e       	add	r6, r31
    52a4:	71 1c       	adc	r7, r1
    52a6:	f8 01       	movw	r30, r16
    52a8:	a0 80       	ld	r10, Z
    52aa:	b1 80       	ldd	r11, Z+1	; 0x01
    52ac:	26 ff       	sbrs	r18, 6
    52ae:	03 c0       	rjmp	.+6      	; 0x52b6 <vfprintf+0x184>
    52b0:	65 2d       	mov	r22, r5
    52b2:	70 e0       	ldi	r23, 0x00	; 0
    52b4:	02 c0       	rjmp	.+4      	; 0x52ba <vfprintf+0x188>
    52b6:	6f ef       	ldi	r22, 0xFF	; 255
    52b8:	7f ef       	ldi	r23, 0xFF	; 255
    52ba:	c5 01       	movw	r24, r10
    52bc:	2c 87       	std	Y+12, r18	; 0x0c
    52be:	2b d1       	rcall	.+598    	; 0x5516 <strnlen_P>
    52c0:	2c 01       	movw	r4, r24
    52c2:	2c 85       	ldd	r18, Y+12	; 0x0c
    52c4:	50 e8       	ldi	r21, 0x80	; 128
    52c6:	25 2e       	mov	r2, r21
    52c8:	22 2a       	or	r2, r18
    52ca:	83 01       	movw	r16, r6
    52cc:	23 fc       	sbrc	r2, 3
    52ce:	1a c0       	rjmp	.+52     	; 0x5304 <vfprintf+0x1d2>
    52d0:	05 c0       	rjmp	.+10     	; 0x52dc <vfprintf+0x1aa>
    52d2:	b7 01       	movw	r22, r14
    52d4:	80 e2       	ldi	r24, 0x20	; 32
    52d6:	90 e0       	ldi	r25, 0x00	; 0
    52d8:	44 d1       	rcall	.+648    	; 0x5562 <fputc>
    52da:	3a 94       	dec	r3
    52dc:	83 2d       	mov	r24, r3
    52de:	90 e0       	ldi	r25, 0x00	; 0
    52e0:	48 16       	cp	r4, r24
    52e2:	59 06       	cpc	r5, r25
    52e4:	b0 f3       	brcs	.-20     	; 0x52d2 <vfprintf+0x1a0>
    52e6:	0e c0       	rjmp	.+28     	; 0x5304 <vfprintf+0x1d2>
    52e8:	f5 01       	movw	r30, r10
    52ea:	27 fc       	sbrc	r2, 7
    52ec:	85 91       	lpm	r24, Z+
    52ee:	27 fe       	sbrs	r2, 7
    52f0:	81 91       	ld	r24, Z+
    52f2:	5f 01       	movw	r10, r30
    52f4:	b7 01       	movw	r22, r14
    52f6:	90 e0       	ldi	r25, 0x00	; 0
    52f8:	34 d1       	rcall	.+616    	; 0x5562 <fputc>
    52fa:	31 10       	cpse	r3, r1
    52fc:	3a 94       	dec	r3
    52fe:	f1 e0       	ldi	r31, 0x01	; 1
    5300:	4f 1a       	sub	r4, r31
    5302:	51 08       	sbc	r5, r1
    5304:	41 14       	cp	r4, r1
    5306:	51 04       	cpc	r5, r1
    5308:	79 f7       	brne	.-34     	; 0x52e8 <vfprintf+0x1b6>
    530a:	e5 c0       	rjmp	.+458    	; 0x54d6 <vfprintf+0x3a4>
    530c:	84 36       	cpi	r24, 0x64	; 100
    530e:	11 f0       	breq	.+4      	; 0x5314 <vfprintf+0x1e2>
    5310:	89 36       	cpi	r24, 0x69	; 105
    5312:	39 f5       	brne	.+78     	; 0x5362 <vfprintf+0x230>
    5314:	f8 01       	movw	r30, r16
    5316:	27 ff       	sbrs	r18, 7
    5318:	07 c0       	rjmp	.+14     	; 0x5328 <vfprintf+0x1f6>
    531a:	60 81       	ld	r22, Z
    531c:	71 81       	ldd	r23, Z+1	; 0x01
    531e:	82 81       	ldd	r24, Z+2	; 0x02
    5320:	93 81       	ldd	r25, Z+3	; 0x03
    5322:	0c 5f       	subi	r16, 0xFC	; 252
    5324:	1f 4f       	sbci	r17, 0xFF	; 255
    5326:	08 c0       	rjmp	.+16     	; 0x5338 <vfprintf+0x206>
    5328:	60 81       	ld	r22, Z
    532a:	71 81       	ldd	r23, Z+1	; 0x01
    532c:	88 27       	eor	r24, r24
    532e:	77 fd       	sbrc	r23, 7
    5330:	80 95       	com	r24
    5332:	98 2f       	mov	r25, r24
    5334:	0e 5f       	subi	r16, 0xFE	; 254
    5336:	1f 4f       	sbci	r17, 0xFF	; 255
    5338:	4f e6       	ldi	r20, 0x6F	; 111
    533a:	b4 2e       	mov	r11, r20
    533c:	b2 22       	and	r11, r18
    533e:	97 ff       	sbrs	r25, 7
    5340:	09 c0       	rjmp	.+18     	; 0x5354 <vfprintf+0x222>
    5342:	90 95       	com	r25
    5344:	80 95       	com	r24
    5346:	70 95       	com	r23
    5348:	61 95       	neg	r22
    534a:	7f 4f       	sbci	r23, 0xFF	; 255
    534c:	8f 4f       	sbci	r24, 0xFF	; 255
    534e:	9f 4f       	sbci	r25, 0xFF	; 255
    5350:	f0 e8       	ldi	r31, 0x80	; 128
    5352:	bf 2a       	or	r11, r31
    5354:	2a e0       	ldi	r18, 0x0A	; 10
    5356:	30 e0       	ldi	r19, 0x00	; 0
    5358:	a4 01       	movw	r20, r8
    535a:	2f d1       	rcall	.+606    	; 0x55ba <__ultoa_invert>
    535c:	a8 2e       	mov	r10, r24
    535e:	a8 18       	sub	r10, r8
    5360:	42 c0       	rjmp	.+132    	; 0x53e6 <vfprintf+0x2b4>
    5362:	85 37       	cpi	r24, 0x75	; 117
    5364:	31 f4       	brne	.+12     	; 0x5372 <vfprintf+0x240>
    5366:	3f ee       	ldi	r19, 0xEF	; 239
    5368:	b3 2e       	mov	r11, r19
    536a:	b2 22       	and	r11, r18
    536c:	2a e0       	ldi	r18, 0x0A	; 10
    536e:	30 e0       	ldi	r19, 0x00	; 0
    5370:	24 c0       	rjmp	.+72     	; 0x53ba <vfprintf+0x288>
    5372:	99 ef       	ldi	r25, 0xF9	; 249
    5374:	b9 2e       	mov	r11, r25
    5376:	b2 22       	and	r11, r18
    5378:	8f 36       	cpi	r24, 0x6F	; 111
    537a:	b9 f0       	breq	.+46     	; 0x53aa <vfprintf+0x278>
    537c:	20 f4       	brcc	.+8      	; 0x5386 <vfprintf+0x254>
    537e:	88 35       	cpi	r24, 0x58	; 88
    5380:	09 f0       	breq	.+2      	; 0x5384 <vfprintf+0x252>
    5382:	ac c0       	rjmp	.+344    	; 0x54dc <vfprintf+0x3aa>
    5384:	0d c0       	rjmp	.+26     	; 0x53a0 <vfprintf+0x26e>
    5386:	80 37       	cpi	r24, 0x70	; 112
    5388:	21 f0       	breq	.+8      	; 0x5392 <vfprintf+0x260>
    538a:	88 37       	cpi	r24, 0x78	; 120
    538c:	09 f0       	breq	.+2      	; 0x5390 <vfprintf+0x25e>
    538e:	a6 c0       	rjmp	.+332    	; 0x54dc <vfprintf+0x3aa>
    5390:	02 c0       	rjmp	.+4      	; 0x5396 <vfprintf+0x264>
    5392:	20 e1       	ldi	r18, 0x10	; 16
    5394:	b2 2a       	or	r11, r18
    5396:	b4 fe       	sbrs	r11, 4
    5398:	0b c0       	rjmp	.+22     	; 0x53b0 <vfprintf+0x27e>
    539a:	84 e0       	ldi	r24, 0x04	; 4
    539c:	b8 2a       	or	r11, r24
    539e:	08 c0       	rjmp	.+16     	; 0x53b0 <vfprintf+0x27e>
    53a0:	24 ff       	sbrs	r18, 4
    53a2:	09 c0       	rjmp	.+18     	; 0x53b6 <vfprintf+0x284>
    53a4:	e6 e0       	ldi	r30, 0x06	; 6
    53a6:	be 2a       	or	r11, r30
    53a8:	06 c0       	rjmp	.+12     	; 0x53b6 <vfprintf+0x284>
    53aa:	28 e0       	ldi	r18, 0x08	; 8
    53ac:	30 e0       	ldi	r19, 0x00	; 0
    53ae:	05 c0       	rjmp	.+10     	; 0x53ba <vfprintf+0x288>
    53b0:	20 e1       	ldi	r18, 0x10	; 16
    53b2:	30 e0       	ldi	r19, 0x00	; 0
    53b4:	02 c0       	rjmp	.+4      	; 0x53ba <vfprintf+0x288>
    53b6:	20 e1       	ldi	r18, 0x10	; 16
    53b8:	32 e0       	ldi	r19, 0x02	; 2
    53ba:	f8 01       	movw	r30, r16
    53bc:	b7 fe       	sbrs	r11, 7
    53be:	07 c0       	rjmp	.+14     	; 0x53ce <vfprintf+0x29c>
    53c0:	60 81       	ld	r22, Z
    53c2:	71 81       	ldd	r23, Z+1	; 0x01
    53c4:	82 81       	ldd	r24, Z+2	; 0x02
    53c6:	93 81       	ldd	r25, Z+3	; 0x03
    53c8:	0c 5f       	subi	r16, 0xFC	; 252
    53ca:	1f 4f       	sbci	r17, 0xFF	; 255
    53cc:	06 c0       	rjmp	.+12     	; 0x53da <vfprintf+0x2a8>
    53ce:	60 81       	ld	r22, Z
    53d0:	71 81       	ldd	r23, Z+1	; 0x01
    53d2:	80 e0       	ldi	r24, 0x00	; 0
    53d4:	90 e0       	ldi	r25, 0x00	; 0
    53d6:	0e 5f       	subi	r16, 0xFE	; 254
    53d8:	1f 4f       	sbci	r17, 0xFF	; 255
    53da:	a4 01       	movw	r20, r8
    53dc:	ee d0       	rcall	.+476    	; 0x55ba <__ultoa_invert>
    53de:	a8 2e       	mov	r10, r24
    53e0:	a8 18       	sub	r10, r8
    53e2:	ff e7       	ldi	r31, 0x7F	; 127
    53e4:	bf 22       	and	r11, r31
    53e6:	b6 fe       	sbrs	r11, 6
    53e8:	0b c0       	rjmp	.+22     	; 0x5400 <vfprintf+0x2ce>
    53ea:	2b 2d       	mov	r18, r11
    53ec:	2e 7f       	andi	r18, 0xFE	; 254
    53ee:	a5 14       	cp	r10, r5
    53f0:	50 f4       	brcc	.+20     	; 0x5406 <vfprintf+0x2d4>
    53f2:	b4 fe       	sbrs	r11, 4
    53f4:	0a c0       	rjmp	.+20     	; 0x540a <vfprintf+0x2d8>
    53f6:	b2 fc       	sbrc	r11, 2
    53f8:	08 c0       	rjmp	.+16     	; 0x540a <vfprintf+0x2d8>
    53fa:	2b 2d       	mov	r18, r11
    53fc:	2e 7e       	andi	r18, 0xEE	; 238
    53fe:	05 c0       	rjmp	.+10     	; 0x540a <vfprintf+0x2d8>
    5400:	7a 2c       	mov	r7, r10
    5402:	2b 2d       	mov	r18, r11
    5404:	03 c0       	rjmp	.+6      	; 0x540c <vfprintf+0x2da>
    5406:	7a 2c       	mov	r7, r10
    5408:	01 c0       	rjmp	.+2      	; 0x540c <vfprintf+0x2da>
    540a:	75 2c       	mov	r7, r5
    540c:	24 ff       	sbrs	r18, 4
    540e:	0d c0       	rjmp	.+26     	; 0x542a <vfprintf+0x2f8>
    5410:	fe 01       	movw	r30, r28
    5412:	ea 0d       	add	r30, r10
    5414:	f1 1d       	adc	r31, r1
    5416:	80 81       	ld	r24, Z
    5418:	80 33       	cpi	r24, 0x30	; 48
    541a:	11 f4       	brne	.+4      	; 0x5420 <vfprintf+0x2ee>
    541c:	29 7e       	andi	r18, 0xE9	; 233
    541e:	09 c0       	rjmp	.+18     	; 0x5432 <vfprintf+0x300>
    5420:	22 ff       	sbrs	r18, 2
    5422:	06 c0       	rjmp	.+12     	; 0x5430 <vfprintf+0x2fe>
    5424:	73 94       	inc	r7
    5426:	73 94       	inc	r7
    5428:	04 c0       	rjmp	.+8      	; 0x5432 <vfprintf+0x300>
    542a:	82 2f       	mov	r24, r18
    542c:	86 78       	andi	r24, 0x86	; 134
    542e:	09 f0       	breq	.+2      	; 0x5432 <vfprintf+0x300>
    5430:	73 94       	inc	r7
    5432:	23 fd       	sbrc	r18, 3
    5434:	13 c0       	rjmp	.+38     	; 0x545c <vfprintf+0x32a>
    5436:	20 ff       	sbrs	r18, 0
    5438:	0e c0       	rjmp	.+28     	; 0x5456 <vfprintf+0x324>
    543a:	5a 2c       	mov	r5, r10
    543c:	73 14       	cp	r7, r3
    543e:	58 f4       	brcc	.+22     	; 0x5456 <vfprintf+0x324>
    5440:	53 0c       	add	r5, r3
    5442:	57 18       	sub	r5, r7
    5444:	73 2c       	mov	r7, r3
    5446:	07 c0       	rjmp	.+14     	; 0x5456 <vfprintf+0x324>
    5448:	b7 01       	movw	r22, r14
    544a:	80 e2       	ldi	r24, 0x20	; 32
    544c:	90 e0       	ldi	r25, 0x00	; 0
    544e:	2c 87       	std	Y+12, r18	; 0x0c
    5450:	88 d0       	rcall	.+272    	; 0x5562 <fputc>
    5452:	73 94       	inc	r7
    5454:	2c 85       	ldd	r18, Y+12	; 0x0c
    5456:	73 14       	cp	r7, r3
    5458:	b8 f3       	brcs	.-18     	; 0x5448 <vfprintf+0x316>
    545a:	04 c0       	rjmp	.+8      	; 0x5464 <vfprintf+0x332>
    545c:	73 14       	cp	r7, r3
    545e:	10 f4       	brcc	.+4      	; 0x5464 <vfprintf+0x332>
    5460:	37 18       	sub	r3, r7
    5462:	01 c0       	rjmp	.+2      	; 0x5466 <vfprintf+0x334>
    5464:	31 2c       	mov	r3, r1
    5466:	24 ff       	sbrs	r18, 4
    5468:	11 c0       	rjmp	.+34     	; 0x548c <vfprintf+0x35a>
    546a:	b7 01       	movw	r22, r14
    546c:	80 e3       	ldi	r24, 0x30	; 48
    546e:	90 e0       	ldi	r25, 0x00	; 0
    5470:	2c 87       	std	Y+12, r18	; 0x0c
    5472:	77 d0       	rcall	.+238    	; 0x5562 <fputc>
    5474:	2c 85       	ldd	r18, Y+12	; 0x0c
    5476:	22 ff       	sbrs	r18, 2
    5478:	1c c0       	rjmp	.+56     	; 0x54b2 <vfprintf+0x380>
    547a:	21 ff       	sbrs	r18, 1
    547c:	03 c0       	rjmp	.+6      	; 0x5484 <vfprintf+0x352>
    547e:	88 e5       	ldi	r24, 0x58	; 88
    5480:	90 e0       	ldi	r25, 0x00	; 0
    5482:	02 c0       	rjmp	.+4      	; 0x5488 <vfprintf+0x356>
    5484:	88 e7       	ldi	r24, 0x78	; 120
    5486:	90 e0       	ldi	r25, 0x00	; 0
    5488:	b7 01       	movw	r22, r14
    548a:	0c c0       	rjmp	.+24     	; 0x54a4 <vfprintf+0x372>
    548c:	82 2f       	mov	r24, r18
    548e:	86 78       	andi	r24, 0x86	; 134
    5490:	81 f0       	breq	.+32     	; 0x54b2 <vfprintf+0x380>
    5492:	21 fd       	sbrc	r18, 1
    5494:	02 c0       	rjmp	.+4      	; 0x549a <vfprintf+0x368>
    5496:	80 e2       	ldi	r24, 0x20	; 32
    5498:	01 c0       	rjmp	.+2      	; 0x549c <vfprintf+0x36a>
    549a:	8b e2       	ldi	r24, 0x2B	; 43
    549c:	27 fd       	sbrc	r18, 7
    549e:	8d e2       	ldi	r24, 0x2D	; 45
    54a0:	b7 01       	movw	r22, r14
    54a2:	90 e0       	ldi	r25, 0x00	; 0
    54a4:	5e d0       	rcall	.+188    	; 0x5562 <fputc>
    54a6:	05 c0       	rjmp	.+10     	; 0x54b2 <vfprintf+0x380>
    54a8:	b7 01       	movw	r22, r14
    54aa:	80 e3       	ldi	r24, 0x30	; 48
    54ac:	90 e0       	ldi	r25, 0x00	; 0
    54ae:	59 d0       	rcall	.+178    	; 0x5562 <fputc>
    54b0:	5a 94       	dec	r5
    54b2:	a5 14       	cp	r10, r5
    54b4:	c8 f3       	brcs	.-14     	; 0x54a8 <vfprintf+0x376>
    54b6:	aa 94       	dec	r10
    54b8:	f4 01       	movw	r30, r8
    54ba:	ea 0d       	add	r30, r10
    54bc:	f1 1d       	adc	r31, r1
    54be:	b7 01       	movw	r22, r14
    54c0:	80 81       	ld	r24, Z
    54c2:	90 e0       	ldi	r25, 0x00	; 0
    54c4:	4e d0       	rcall	.+156    	; 0x5562 <fputc>
    54c6:	a1 10       	cpse	r10, r1
    54c8:	f6 cf       	rjmp	.-20     	; 0x54b6 <vfprintf+0x384>
    54ca:	05 c0       	rjmp	.+10     	; 0x54d6 <vfprintf+0x3a4>
    54cc:	b7 01       	movw	r22, r14
    54ce:	80 e2       	ldi	r24, 0x20	; 32
    54d0:	90 e0       	ldi	r25, 0x00	; 0
    54d2:	47 d0       	rcall	.+142    	; 0x5562 <fputc>
    54d4:	3a 94       	dec	r3
    54d6:	31 10       	cpse	r3, r1
    54d8:	f9 cf       	rjmp	.-14     	; 0x54cc <vfprintf+0x39a>
    54da:	50 ce       	rjmp	.-864    	; 0x517c <vfprintf+0x4a>
    54dc:	f7 01       	movw	r30, r14
    54de:	26 81       	ldd	r18, Z+6	; 0x06
    54e0:	37 81       	ldd	r19, Z+7	; 0x07
    54e2:	02 c0       	rjmp	.+4      	; 0x54e8 <vfprintf+0x3b6>
    54e4:	2f ef       	ldi	r18, 0xFF	; 255
    54e6:	3f ef       	ldi	r19, 0xFF	; 255
    54e8:	c9 01       	movw	r24, r18
    54ea:	2c 96       	adiw	r28, 0x0c	; 12
    54ec:	cd bf       	out	0x3d, r28	; 61
    54ee:	de bf       	out	0x3e, r29	; 62
    54f0:	df 91       	pop	r29
    54f2:	cf 91       	pop	r28
    54f4:	1f 91       	pop	r17
    54f6:	0f 91       	pop	r16
    54f8:	ff 90       	pop	r15
    54fa:	ef 90       	pop	r14
    54fc:	df 90       	pop	r13
    54fe:	cf 90       	pop	r12
    5500:	bf 90       	pop	r11
    5502:	af 90       	pop	r10
    5504:	9f 90       	pop	r9
    5506:	8f 90       	pop	r8
    5508:	7f 90       	pop	r7
    550a:	6f 90       	pop	r6
    550c:	5f 90       	pop	r5
    550e:	4f 90       	pop	r4
    5510:	3f 90       	pop	r3
    5512:	2f 90       	pop	r2
    5514:	08 95       	ret

00005516 <strnlen_P>:
    5516:	fc 01       	movw	r30, r24
    5518:	05 90       	lpm	r0, Z+
    551a:	61 50       	subi	r22, 0x01	; 1
    551c:	70 40       	sbci	r23, 0x00	; 0
    551e:	01 10       	cpse	r0, r1
    5520:	d8 f7       	brcc	.-10     	; 0x5518 <strnlen_P+0x2>
    5522:	80 95       	com	r24
    5524:	90 95       	com	r25
    5526:	8e 0f       	add	r24, r30
    5528:	9f 1f       	adc	r25, r31
    552a:	08 95       	ret

0000552c <strnlen>:
    552c:	fc 01       	movw	r30, r24
    552e:	61 50       	subi	r22, 0x01	; 1
    5530:	70 40       	sbci	r23, 0x00	; 0
    5532:	01 90       	ld	r0, Z+
    5534:	01 10       	cpse	r0, r1
    5536:	d8 f7       	brcc	.-10     	; 0x552e <strnlen+0x2>
    5538:	80 95       	com	r24
    553a:	90 95       	com	r25
    553c:	8e 0f       	add	r24, r30
    553e:	9f 1f       	adc	r25, r31
    5540:	08 95       	ret

00005542 <strrev>:
    5542:	dc 01       	movw	r26, r24
    5544:	fc 01       	movw	r30, r24
    5546:	67 2f       	mov	r22, r23
    5548:	71 91       	ld	r23, Z+
    554a:	77 23       	and	r23, r23
    554c:	e1 f7       	brne	.-8      	; 0x5546 <strrev+0x4>
    554e:	32 97       	sbiw	r30, 0x02	; 2
    5550:	04 c0       	rjmp	.+8      	; 0x555a <strrev+0x18>
    5552:	7c 91       	ld	r23, X
    5554:	6d 93       	st	X+, r22
    5556:	70 83       	st	Z, r23
    5558:	62 91       	ld	r22, -Z
    555a:	ae 17       	cp	r26, r30
    555c:	bf 07       	cpc	r27, r31
    555e:	c8 f3       	brcs	.-14     	; 0x5552 <strrev+0x10>
    5560:	08 95       	ret

00005562 <fputc>:
    5562:	0f 93       	push	r16
    5564:	1f 93       	push	r17
    5566:	cf 93       	push	r28
    5568:	df 93       	push	r29
    556a:	8c 01       	movw	r16, r24
    556c:	eb 01       	movw	r28, r22
    556e:	8b 81       	ldd	r24, Y+3	; 0x03
    5570:	81 fd       	sbrc	r24, 1
    5572:	03 c0       	rjmp	.+6      	; 0x557a <fputc+0x18>
    5574:	0f ef       	ldi	r16, 0xFF	; 255
    5576:	1f ef       	ldi	r17, 0xFF	; 255
    5578:	1a c0       	rjmp	.+52     	; 0x55ae <fputc+0x4c>
    557a:	82 ff       	sbrs	r24, 2
    557c:	0d c0       	rjmp	.+26     	; 0x5598 <fputc+0x36>
    557e:	2e 81       	ldd	r18, Y+6	; 0x06
    5580:	3f 81       	ldd	r19, Y+7	; 0x07
    5582:	8c 81       	ldd	r24, Y+4	; 0x04
    5584:	9d 81       	ldd	r25, Y+5	; 0x05
    5586:	28 17       	cp	r18, r24
    5588:	39 07       	cpc	r19, r25
    558a:	64 f4       	brge	.+24     	; 0x55a4 <fputc+0x42>
    558c:	e8 81       	ld	r30, Y
    558e:	f9 81       	ldd	r31, Y+1	; 0x01
    5590:	01 93       	st	Z+, r16
    5592:	e8 83       	st	Y, r30
    5594:	f9 83       	std	Y+1, r31	; 0x01
    5596:	06 c0       	rjmp	.+12     	; 0x55a4 <fputc+0x42>
    5598:	e8 85       	ldd	r30, Y+8	; 0x08
    559a:	f9 85       	ldd	r31, Y+9	; 0x09
    559c:	80 2f       	mov	r24, r16
    559e:	19 95       	eicall
    55a0:	89 2b       	or	r24, r25
    55a2:	41 f7       	brne	.-48     	; 0x5574 <fputc+0x12>
    55a4:	8e 81       	ldd	r24, Y+6	; 0x06
    55a6:	9f 81       	ldd	r25, Y+7	; 0x07
    55a8:	01 96       	adiw	r24, 0x01	; 1
    55aa:	8e 83       	std	Y+6, r24	; 0x06
    55ac:	9f 83       	std	Y+7, r25	; 0x07
    55ae:	c8 01       	movw	r24, r16
    55b0:	df 91       	pop	r29
    55b2:	cf 91       	pop	r28
    55b4:	1f 91       	pop	r17
    55b6:	0f 91       	pop	r16
    55b8:	08 95       	ret

000055ba <__ultoa_invert>:
    55ba:	fa 01       	movw	r30, r20
    55bc:	aa 27       	eor	r26, r26
    55be:	28 30       	cpi	r18, 0x08	; 8
    55c0:	51 f1       	breq	.+84     	; 0x5616 <__ultoa_invert+0x5c>
    55c2:	20 31       	cpi	r18, 0x10	; 16
    55c4:	81 f1       	breq	.+96     	; 0x5626 <__ultoa_invert+0x6c>
    55c6:	e8 94       	clt
    55c8:	6f 93       	push	r22
    55ca:	6e 7f       	andi	r22, 0xFE	; 254
    55cc:	6e 5f       	subi	r22, 0xFE	; 254
    55ce:	7f 4f       	sbci	r23, 0xFF	; 255
    55d0:	8f 4f       	sbci	r24, 0xFF	; 255
    55d2:	9f 4f       	sbci	r25, 0xFF	; 255
    55d4:	af 4f       	sbci	r26, 0xFF	; 255
    55d6:	b1 e0       	ldi	r27, 0x01	; 1
    55d8:	3e d0       	rcall	.+124    	; 0x5656 <__ultoa_invert+0x9c>
    55da:	b4 e0       	ldi	r27, 0x04	; 4
    55dc:	3c d0       	rcall	.+120    	; 0x5656 <__ultoa_invert+0x9c>
    55de:	67 0f       	add	r22, r23
    55e0:	78 1f       	adc	r23, r24
    55e2:	89 1f       	adc	r24, r25
    55e4:	9a 1f       	adc	r25, r26
    55e6:	a1 1d       	adc	r26, r1
    55e8:	68 0f       	add	r22, r24
    55ea:	79 1f       	adc	r23, r25
    55ec:	8a 1f       	adc	r24, r26
    55ee:	91 1d       	adc	r25, r1
    55f0:	a1 1d       	adc	r26, r1
    55f2:	6a 0f       	add	r22, r26
    55f4:	71 1d       	adc	r23, r1
    55f6:	81 1d       	adc	r24, r1
    55f8:	91 1d       	adc	r25, r1
    55fa:	a1 1d       	adc	r26, r1
    55fc:	20 d0       	rcall	.+64     	; 0x563e <__ultoa_invert+0x84>
    55fe:	09 f4       	brne	.+2      	; 0x5602 <__ultoa_invert+0x48>
    5600:	68 94       	set
    5602:	3f 91       	pop	r19
    5604:	2a e0       	ldi	r18, 0x0A	; 10
    5606:	26 9f       	mul	r18, r22
    5608:	11 24       	eor	r1, r1
    560a:	30 19       	sub	r19, r0
    560c:	30 5d       	subi	r19, 0xD0	; 208
    560e:	31 93       	st	Z+, r19
    5610:	de f6       	brtc	.-74     	; 0x55c8 <__ultoa_invert+0xe>
    5612:	cf 01       	movw	r24, r30
    5614:	08 95       	ret
    5616:	46 2f       	mov	r20, r22
    5618:	47 70       	andi	r20, 0x07	; 7
    561a:	40 5d       	subi	r20, 0xD0	; 208
    561c:	41 93       	st	Z+, r20
    561e:	b3 e0       	ldi	r27, 0x03	; 3
    5620:	0f d0       	rcall	.+30     	; 0x5640 <__ultoa_invert+0x86>
    5622:	c9 f7       	brne	.-14     	; 0x5616 <__ultoa_invert+0x5c>
    5624:	f6 cf       	rjmp	.-20     	; 0x5612 <__ultoa_invert+0x58>
    5626:	46 2f       	mov	r20, r22
    5628:	4f 70       	andi	r20, 0x0F	; 15
    562a:	40 5d       	subi	r20, 0xD0	; 208
    562c:	4a 33       	cpi	r20, 0x3A	; 58
    562e:	18 f0       	brcs	.+6      	; 0x5636 <__ultoa_invert+0x7c>
    5630:	49 5d       	subi	r20, 0xD9	; 217
    5632:	31 fd       	sbrc	r19, 1
    5634:	40 52       	subi	r20, 0x20	; 32
    5636:	41 93       	st	Z+, r20
    5638:	02 d0       	rcall	.+4      	; 0x563e <__ultoa_invert+0x84>
    563a:	a9 f7       	brne	.-22     	; 0x5626 <__ultoa_invert+0x6c>
    563c:	ea cf       	rjmp	.-44     	; 0x5612 <__ultoa_invert+0x58>
    563e:	b4 e0       	ldi	r27, 0x04	; 4
    5640:	a6 95       	lsr	r26
    5642:	97 95       	ror	r25
    5644:	87 95       	ror	r24
    5646:	77 95       	ror	r23
    5648:	67 95       	ror	r22
    564a:	ba 95       	dec	r27
    564c:	c9 f7       	brne	.-14     	; 0x5640 <__ultoa_invert+0x86>
    564e:	00 97       	sbiw	r24, 0x00	; 0
    5650:	61 05       	cpc	r22, r1
    5652:	71 05       	cpc	r23, r1
    5654:	08 95       	ret
    5656:	9b 01       	movw	r18, r22
    5658:	ac 01       	movw	r20, r24
    565a:	0a 2e       	mov	r0, r26
    565c:	06 94       	lsr	r0
    565e:	57 95       	ror	r21
    5660:	47 95       	ror	r20
    5662:	37 95       	ror	r19
    5664:	27 95       	ror	r18
    5666:	ba 95       	dec	r27
    5668:	c9 f7       	brne	.-14     	; 0x565c <__ultoa_invert+0xa2>
    566a:	62 0f       	add	r22, r18
    566c:	73 1f       	adc	r23, r19
    566e:	84 1f       	adc	r24, r20
    5670:	95 1f       	adc	r25, r21
    5672:	a0 1d       	adc	r26, r0
    5674:	08 95       	ret

00005676 <_exit>:
    5676:	f8 94       	cli

00005678 <__stop_program>:
    5678:	ff cf       	rjmp	.-2      	; 0x5678 <__stop_program>
