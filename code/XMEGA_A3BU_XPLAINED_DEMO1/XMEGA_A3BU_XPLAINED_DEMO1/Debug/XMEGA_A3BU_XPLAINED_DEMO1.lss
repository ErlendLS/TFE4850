
XMEGA_A3BU_XPLAINED_DEMO1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005bfe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a6  00802000  00005bfe  00005c92  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000008fb  008021a8  008021a8  00005e38  2**2
                  ALLOC
  3 .stab         00003fc0  00000000  00000000  00005e38  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fff  00000000  00000000  00009df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000adf7  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000bf0  00000000  00000000  0000ae28  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0001bbb8  00000000  00000000  0000ba18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005cef  00000000  00000000  000275d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0001548d  00000000  00000000  0002d2bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00002528  00000000  00000000  0004274c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00034bc5  00000000  00000000  00044c74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000c079  00000000  00000000  00079839  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000f08  00000000  00000000  000858b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000f855  00000000  00000000  000867c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	57 c3       	rjmp	.+1710   	; 0x6b0 <__ctors_end>
       2:	00 00       	nop
       4:	76 c3       	rjmp	.+1772   	; 0x6f2 <__bad_interrupt>
       6:	00 00       	nop
       8:	74 c3       	rjmp	.+1768   	; 0x6f2 <__bad_interrupt>
       a:	00 00       	nop
       c:	72 c3       	rjmp	.+1764   	; 0x6f2 <__bad_interrupt>
       e:	00 00       	nop
      10:	70 c3       	rjmp	.+1760   	; 0x6f2 <__bad_interrupt>
      12:	00 00       	nop
      14:	6e c3       	rjmp	.+1756   	; 0x6f2 <__bad_interrupt>
      16:	00 00       	nop
      18:	6c c3       	rjmp	.+1752   	; 0x6f2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6a c3       	rjmp	.+1748   	; 0x6f2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	68 c3       	rjmp	.+1744   	; 0x6f2 <__bad_interrupt>
      22:	00 00       	nop
      24:	66 c3       	rjmp	.+1740   	; 0x6f2 <__bad_interrupt>
      26:	00 00       	nop
      28:	64 c3       	rjmp	.+1736   	; 0x6f2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 c2 19 	jmp	0x3384	; 0x3384 <__vector_11>
      30:	60 c3       	rjmp	.+1728   	; 0x6f2 <__bad_interrupt>
      32:	00 00       	nop
      34:	5e c3       	rjmp	.+1724   	; 0x6f2 <__bad_interrupt>
      36:	00 00       	nop
      38:	5c c3       	rjmp	.+1720   	; 0x6f2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5a c3       	rjmp	.+1716   	; 0x6f2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	58 c3       	rjmp	.+1712   	; 0x6f2 <__bad_interrupt>
      42:	00 00       	nop
      44:	56 c3       	rjmp	.+1708   	; 0x6f2 <__bad_interrupt>
      46:	00 00       	nop
      48:	54 c3       	rjmp	.+1704   	; 0x6f2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	52 c3       	rjmp	.+1700   	; 0x6f2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	50 c3       	rjmp	.+1696   	; 0x6f2 <__bad_interrupt>
      52:	00 00       	nop
      54:	4e c3       	rjmp	.+1692   	; 0x6f2 <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 d3 24 	jmp	0x49a6	; 0x49a6 <__vector_22>
      5c:	4a c3       	rjmp	.+1684   	; 0x6f2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	48 c3       	rjmp	.+1680   	; 0x6f2 <__bad_interrupt>
      62:	00 00       	nop
      64:	46 c3       	rjmp	.+1676   	; 0x6f2 <__bad_interrupt>
      66:	00 00       	nop
      68:	44 c3       	rjmp	.+1672   	; 0x6f2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	42 c3       	rjmp	.+1668   	; 0x6f2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	40 c3       	rjmp	.+1664   	; 0x6f2 <__bad_interrupt>
      72:	00 00       	nop
      74:	3e c3       	rjmp	.+1660   	; 0x6f2 <__bad_interrupt>
      76:	00 00       	nop
      78:	3c c3       	rjmp	.+1656   	; 0x6f2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3a c3       	rjmp	.+1652   	; 0x6f2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	38 c3       	rjmp	.+1648   	; 0x6f2 <__bad_interrupt>
      82:	00 00       	nop
      84:	36 c3       	rjmp	.+1644   	; 0x6f2 <__bad_interrupt>
      86:	00 00       	nop
      88:	34 c3       	rjmp	.+1640   	; 0x6f2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	32 c3       	rjmp	.+1636   	; 0x6f2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	30 c3       	rjmp	.+1632   	; 0x6f2 <__bad_interrupt>
      92:	00 00       	nop
      94:	2e c3       	rjmp	.+1628   	; 0x6f2 <__bad_interrupt>
      96:	00 00       	nop
      98:	2c c3       	rjmp	.+1624   	; 0x6f2 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 5b 17 	jmp	0x2eb6	; 0x2eb6 <__vector_39>
      a0:	0c 94 8d 17 	jmp	0x2f1a	; 0x2f1a <__vector_40>
      a4:	0c 94 bf 17 	jmp	0x2f7e	; 0x2f7e <__vector_41>
      a8:	0c 94 f1 17 	jmp	0x2fe2	; 0x2fe2 <__vector_42>
      ac:	22 c3       	rjmp	.+1604   	; 0x6f2 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	20 c3       	rjmp	.+1600   	; 0x6f2 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	1e c3       	rjmp	.+1596   	; 0x6f2 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	1c c3       	rjmp	.+1592   	; 0x6f2 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	1a c3       	rjmp	.+1588   	; 0x6f2 <__bad_interrupt>
      be:	00 00       	nop
      c0:	18 c3       	rjmp	.+1584   	; 0x6f2 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	16 c3       	rjmp	.+1580   	; 0x6f2 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	14 c3       	rjmp	.+1576   	; 0x6f2 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	12 c3       	rjmp	.+1572   	; 0x6f2 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	10 c3       	rjmp	.+1568   	; 0x6f2 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	0e c3       	rjmp	.+1564   	; 0x6f2 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c c3       	rjmp	.+1560   	; 0x6f2 <__bad_interrupt>
      da:	00 00       	nop
      dc:	0a c3       	rjmp	.+1556   	; 0x6f2 <__bad_interrupt>
      de:	00 00       	nop
      e0:	08 c3       	rjmp	.+1552   	; 0x6f2 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	06 c3       	rjmp	.+1548   	; 0x6f2 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	04 c3       	rjmp	.+1544   	; 0x6f2 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	02 c3       	rjmp	.+1540   	; 0x6f2 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	00 c3       	rjmp	.+1536   	; 0x6f2 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	fe c2       	rjmp	.+1532   	; 0x6f2 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	fc c2       	rjmp	.+1528   	; 0x6f2 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	fa c2       	rjmp	.+1524   	; 0x6f2 <__bad_interrupt>
      fe:	00 00       	nop
     100:	f8 c2       	rjmp	.+1520   	; 0x6f2 <__bad_interrupt>
     102:	00 00       	nop
     104:	f6 c2       	rjmp	.+1516   	; 0x6f2 <__bad_interrupt>
     106:	00 00       	nop
     108:	f4 c2       	rjmp	.+1512   	; 0x6f2 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	f2 c2       	rjmp	.+1508   	; 0x6f2 <__bad_interrupt>
     10e:	00 00       	nop
     110:	f0 c2       	rjmp	.+1504   	; 0x6f2 <__bad_interrupt>
     112:	00 00       	nop
     114:	ee c2       	rjmp	.+1500   	; 0x6f2 <__bad_interrupt>
     116:	00 00       	nop
     118:	ec c2       	rjmp	.+1496   	; 0x6f2 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	0c 94 93 16 	jmp	0x2d26	; 0x2d26 <__vector_71>
     120:	0c 94 c5 16 	jmp	0x2d8a	; 0x2d8a <__vector_72>
     124:	0c 94 f7 16 	jmp	0x2dee	; 0x2dee <__vector_73>
     128:	0c 94 29 17 	jmp	0x2e52	; 0x2e52 <__vector_74>
     12c:	e2 c2       	rjmp	.+1476   	; 0x6f2 <__bad_interrupt>
     12e:	00 00       	nop
     130:	e0 c2       	rjmp	.+1472   	; 0x6f2 <__bad_interrupt>
     132:	00 00       	nop
     134:	de c2       	rjmp	.+1468   	; 0x6f2 <__bad_interrupt>
     136:	00 00       	nop
     138:	dc c2       	rjmp	.+1464   	; 0x6f2 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	da c2       	rjmp	.+1460   	; 0x6f2 <__bad_interrupt>
     13e:	00 00       	nop
     140:	d8 c2       	rjmp	.+1456   	; 0x6f2 <__bad_interrupt>
     142:	00 00       	nop
     144:	d6 c2       	rjmp	.+1452   	; 0x6f2 <__bad_interrupt>
     146:	00 00       	nop
     148:	d4 c2       	rjmp	.+1448   	; 0x6f2 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	d2 c2       	rjmp	.+1444   	; 0x6f2 <__bad_interrupt>
     14e:	00 00       	nop
     150:	d0 c2       	rjmp	.+1440   	; 0x6f2 <__bad_interrupt>
     152:	00 00       	nop
     154:	ce c2       	rjmp	.+1436   	; 0x6f2 <__bad_interrupt>
     156:	00 00       	nop
     158:	cc c2       	rjmp	.+1432   	; 0x6f2 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	ca c2       	rjmp	.+1428   	; 0x6f2 <__bad_interrupt>
     15e:	00 00       	nop
     160:	c8 c2       	rjmp	.+1424   	; 0x6f2 <__bad_interrupt>
     162:	00 00       	nop
     164:	c6 c2       	rjmp	.+1420   	; 0x6f2 <__bad_interrupt>
     166:	00 00       	nop
     168:	c4 c2       	rjmp	.+1416   	; 0x6f2 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	c2 c2       	rjmp	.+1412   	; 0x6f2 <__bad_interrupt>
     16e:	00 00       	nop
     170:	c0 c2       	rjmp	.+1408   	; 0x6f2 <__bad_interrupt>
     172:	00 00       	nop
     174:	be c2       	rjmp	.+1404   	; 0x6f2 <__bad_interrupt>
     176:	00 00       	nop
     178:	bc c2       	rjmp	.+1400   	; 0x6f2 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	ba c2       	rjmp	.+1396   	; 0x6f2 <__bad_interrupt>
     17e:	00 00       	nop
     180:	b8 c2       	rjmp	.+1392   	; 0x6f2 <__bad_interrupt>
     182:	00 00       	nop
     184:	b6 c2       	rjmp	.+1388   	; 0x6f2 <__bad_interrupt>
     186:	00 00       	nop
     188:	b4 c2       	rjmp	.+1384   	; 0x6f2 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	b2 c2       	rjmp	.+1380   	; 0x6f2 <__bad_interrupt>
     18e:	00 00       	nop
     190:	b0 c2       	rjmp	.+1376   	; 0x6f2 <__bad_interrupt>
     192:	00 00       	nop
     194:	ae c2       	rjmp	.+1372   	; 0x6f2 <__bad_interrupt>
     196:	00 00       	nop
     198:	ac c2       	rjmp	.+1368   	; 0x6f2 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	aa c2       	rjmp	.+1364   	; 0x6f2 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	a8 c2       	rjmp	.+1360   	; 0x6f2 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	a6 c2       	rjmp	.+1356   	; 0x6f2 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	a4 c2       	rjmp	.+1352   	; 0x6f2 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	a2 c2       	rjmp	.+1348   	; 0x6f2 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	a0 c2       	rjmp	.+1344   	; 0x6f2 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	9e c2       	rjmp	.+1340   	; 0x6f2 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	9c c2       	rjmp	.+1336   	; 0x6f2 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	9a c2       	rjmp	.+1332   	; 0x6f2 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	98 c2       	rjmp	.+1328   	; 0x6f2 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	96 c2       	rjmp	.+1324   	; 0x6f2 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	94 c2       	rjmp	.+1320   	; 0x6f2 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	92 c2       	rjmp	.+1316   	; 0x6f2 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	90 c2       	rjmp	.+1312   	; 0x6f2 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	8e c2       	rjmp	.+1308   	; 0x6f2 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	8c c2       	rjmp	.+1304   	; 0x6f2 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	8a c2       	rjmp	.+1300   	; 0x6f2 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	88 c2       	rjmp	.+1296   	; 0x6f2 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	86 c2       	rjmp	.+1292   	; 0x6f2 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	84 c2       	rjmp	.+1288   	; 0x6f2 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	82 c2       	rjmp	.+1284   	; 0x6f2 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	80 c2       	rjmp	.+1280   	; 0x6f2 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 7e 1f 	jmp	0x3efc	; 0x3efc <__vector_125>
     1f8:	0c 94 2e 20 	jmp	0x405c	; 0x405c <__vector_126>
     1fc:	07 63       	ori	r16, 0x37	; 55
     1fe:	42 36       	cpi	r20, 0x62	; 98
     200:	b7 9b       	sbis	0x16, 7	; 22
     202:	d8 a7       	std	Y+40, r29	; 0x28
     204:	1a 39       	cpi	r17, 0x9A	; 154
     206:	68 56       	subi	r22, 0x68	; 104
     208:	18 ae       	std	Y+56, r1	; 0x38
     20a:	ba ab       	std	Y+50, r27	; 0x32
     20c:	55 8c       	ldd	r5, Z+29	; 0x1d
     20e:	1d 3c       	cpi	r17, 0xCD	; 205
     210:	b7 cc       	rjmp	.-1682   	; 0xfffffb80 <__eeprom_end+0xff7efb80>
     212:	57 63       	ori	r21, 0x37	; 55
     214:	bd 6d       	ori	r27, 0xDD	; 221
     216:	ed fd       	.word	0xfded	; ????
     218:	75 3e       	cpi	r23, 0xE5	; 229
     21a:	f6 17       	cp	r31, r22
     21c:	72 31       	cpi	r23, 0x12	; 18
     21e:	bf 00       	.word	0x00bf	; ????
     220:	00 00       	nop
     222:	80 3f       	cpi	r24, 0xF0	; 240
     224:	08 00       	.word	0x0008	; ????
     226:	00 00       	nop
     228:	be 92       	st	-X, r11
     22a:	24 49       	sbci	r18, 0x94	; 148
     22c:	12 3e       	cpi	r17, 0xE2	; 226
     22e:	ab aa       	std	Y+51, r10	; 0x33
     230:	aa 2a       	or	r10, r26
     232:	be cd       	rjmp	.-1156   	; 0xfffffdb0 <__eeprom_end+0xff7efdb0>
     234:	cc cc       	rjmp	.-1640   	; 0xfffffbce <__eeprom_end+0xff7efbce>
     236:	4c 3e       	cpi	r20, 0xEC	; 236
     238:	00 00       	nop
     23a:	00 80       	ld	r0, Z
     23c:	be ab       	std	Y+54, r27	; 0x36
     23e:	aa aa       	std	Y+50, r10	; 0x32
     240:	aa 3e       	cpi	r26, 0xEA	; 234
     242:	00 00       	nop
     244:	00 00       	nop
     246:	bf 00       	.word	0x00bf	; ????
     248:	00 00       	nop
     24a:	80 3f       	cpi	r24, 0xF0	; 240
     24c:	00 00       	nop
     24e:	00 00       	nop
     250:	00 08       	sbc	r0, r0
     252:	41 78       	andi	r20, 0x81	; 129
     254:	d3 bb       	out	0x13, r29	; 19
     256:	43 87       	std	Z+11, r20	; 0x0b
     258:	d1 13       	cpse	r29, r17
     25a:	3d 19       	sub	r19, r13
     25c:	0e 3c       	cpi	r16, 0xCE	; 206
     25e:	c3 bd       	out	0x23, r28	; 35
     260:	42 82       	std	Z+2, r4	; 0x02
     262:	ad 2b       	or	r26, r29
     264:	3e 68       	ori	r19, 0x8E	; 142
     266:	ec 82       	std	Y+4, r14	; 0x04
     268:	76 be       	out	0x36, r7	; 54
     26a:	d9 8f       	std	Y+25, r29	; 0x19
     26c:	e1 a9       	ldd	r30, Z+49	; 0x31
     26e:	3e 4c       	sbci	r19, 0xCE	; 206
     270:	80 ef       	ldi	r24, 0xF0	; 240
     272:	ff be       	out	0x3f, r15	; 63
     274:	01 c4       	rjmp	.+2050   	; 0xa78 <qt_measure_sensors+0xa2>
     276:	ff 7f       	andi	r31, 0xFF	; 255
     278:	3f 00       	.word	0x003f	; ????
     27a:	00 00       	nop
	...

0000027e <sysfont_glyphs>:
     27e:	00 00 00 00 00 00 00 20 20 20 20 20 00 20 50 50     .......     . PP
     28e:	50 00 00 00 00 50 50 f8 50 f8 50 50 20 78 a0 70     P....PP.P.PP x.p
     29e:	28 f0 20 c0 c8 10 20 40 98 18 60 90 a0 40 a8 90     (. ... @..`..@..
     2ae:	68 60 20 40 00 00 00 00 10 20 40 40 40 20 10 40     h` @..... @@@ .@
     2be:	20 10 10 10 20 40 00 50 20 f8 20 50 00 00 20 20      ... @.P . P..  
     2ce:	f8 20 20 00 00 00 00 00 60 20 40 00 00 00 f8 00     .  .....` @.....
     2de:	00 00 00 00 00 00 00 60 60 00 08 10 20 40 80 00     .......``... @..
     2ee:	70 88 98 a8 c8 88 70 20 60 20 20 20 20 70 70 88     p.....p `    pp.
     2fe:	08 10 20 40 f8 f8 10 20 10 08 88 70 10 30 50 90     .. @... ...p.0P.
     30e:	f8 10 10 f8 80 f0 08 08 88 70 30 40 80 f0 88 88     .........p0@....
     31e:	70 f8 08 10 20 40 40 40 70 88 88 70 88 88 70 70     p... @@@p..p..pp
     32e:	88 88 78 08 10 60 00 60 60 00 60 60 00 00 60 60     ..x..`.``.``..``
     33e:	00 60 20 40 08 10 20 40 20 10 08 00 00 f8 00 f8     .` @.. @ .......
     34e:	00 00 80 40 20 10 20 40 80 70 88 08 10 20 00 20     ...@ . @.p... . 
     35e:	70 88 08 68 a8 a8 70 70 88 88 88 f8 88 88 f0 88     p..h..pp........
     36e:	88 f0 88 88 f0 70 88 80 80 80 88 70 e0 90 88 88     .....p.....p....
     37e:	88 90 e0 f8 80 80 f0 80 80 f8 f8 80 80 e0 80 80     ................
     38e:	80 70 88 80 80 98 88 70 88 88 88 f8 88 88 88 70     .p.....p.......p
     39e:	20 20 20 20 20 70 38 10 10 10 10 90 60 88 90 a0          p8.....`...
     3ae:	c0 a0 90 88 80 80 80 80 80 80 f8 88 d8 a8 88 88     ................
     3be:	88 88 88 88 c8 a8 98 88 88 70 88 88 88 88 88 70     .........p.....p
     3ce:	f0 88 88 f0 80 80 80 70 88 88 88 a8 90 68 f0 88     .......p.....h..
     3de:	88 f0 a0 90 88 78 80 80 70 08 08 f0 f8 20 20 20     .....x..p....   
     3ee:	20 20 20 88 88 88 88 88 88 70 88 88 88 88 88 50        ......p.....P
     3fe:	20 88 88 88 a8 a8 d8 88 88 88 50 20 50 88 88 88      .........P P...
     40e:	88 50 20 20 20 20 f8 08 10 20 40 80 f8 38 20 20     .P    ... @..8  
     41e:	20 20 20 38 00 80 40 20 10 08 00 e0 20 20 20 20        8..@ ....    
     42e:	20 e0 20 50 88 00 00 00 00 00 00 00 00 00 00 f8      . P............
     43e:	40 20 10 00 00 00 00 00 00 70 08 78 88 78 80 80     @ .......p.x.x..
     44e:	b0 c8 88 88 f0 00 00 70 80 80 88 70 08 08 68 98     .......p...p..h.
     45e:	88 88 78 00 00 70 88 f8 80 70 30 48 40 e0 40 40     ..x..p...p0H@.@@
     46e:	40 00 00 78 88 78 08 30 80 80 b0 c8 88 88 88 20     @..x.x.0....... 
     47e:	00 60 20 20 20 70 10 00 30 10 10 90 60 40 40 48     .`   p..0...`@@H
     48e:	50 60 50 48 60 20 20 20 20 20 70 00 00 d0 a8 a8     P`PH`     p.....
     49e:	88 88 00 00 b0 c8 88 88 88 00 00 70 88 88 88 70     ...........p...p
     4ae:	00 00 f0 88 f0 80 80 00 00 68 98 78 08 08 00 00     .........h.x....
     4be:	b0 c8 80 80 80 00 00 70 80 70 08 f0 40 40 e0 40     .......p.p..@@.@
     4ce:	40 48 30 00 00 88 88 88 98 68 00 00 88 88 88 50     @H0......h.....P
     4de:	20 00 00 88 88 a8 a8 50 00 00 88 50 20 50 88 00      ......P...P P..
     4ee:	00 88 88 78 08 70 00 00 f8 10 20 40 f8 10 20 20     ...x.p.... @..  
     4fe:	40 20 20 10 20 20 20 20 20 20 20 40 20 20 10 20     @  .       @  . 
     50e:	20 40                                                @

00000510 <tz_min_45>:
     510:	2b 34 35 20 6d 69 6e 00                             +45 min.

00000518 <tz_min_30>:
     518:	2b 33 30 20 6d 69 6e 00                             +30 min.

00000520 <tz_min_15>:
     520:	2b 31 35 20 6d 69 6e 00                             +15 min.

00000528 <tz_min_00>:
     528:	20 30 20 6d 69 6e 00                                 0 min.

0000052f <tz_minutes_title>:
     52f:	54 69 6d 65 7a 6f 6e 65 20 6d 69 6e 75 74 65 73     Timezone minutes
     53f:	3a 00                                               :.

00000541 <tz_12>:
     541:	2b 31 32 3a 20 46 69 6a 69 00                       +12: Fiji.

0000054b <tz_11>:
     54b:	2b 31 31 3a 20 53 6f 6c 6f 6d 6f 6e 20 49 73 6c     +11: Solomon Isl
     55b:	61 6e 64 00                                         and.

0000055f <tz_10>:
     55f:	2b 31 30 3a 20 41 45 53 54 00                       +10: AEST.

00000569 <tz_09>:
     569:	20 2b 39 3a 20 54 6f 6b 79 6f 00                     +9: Tokyo.

00000574 <tz_08>:
     574:	20 2b 38 3a 20 48 6f 6e 67 20 4b 6f 6e 67 00         +8: Hong Kong.

00000583 <tz_07>:
     583:	20 2b 37 3a 20 54 68 61 69 6c 61 6e 64 00            +7: Thailand.

00000591 <tz_06>:
     591:	20 2b 36 3a 20 42 61 6e 67 6c 61 64 65 73 68 00      +6: Bangladesh.

000005a1 <tz_05>:
     5a1:	20 2b 35 3a 20 50 61 6b 69 73 74 61 6e 00            +5: Pakistan.

000005af <tz_04>:
     5af:	20 2b 34 3a 20 4d 6f 73 63 6f 77 00                  +4: Moscow.

000005bb <tz_03>:
     5bb:	20 2b 33 3a 20 4e 61 69 72 6f 62 69 00               +3: Nairobi.

000005c8 <tz_02>:
     5c8:	20 2b 32 3a 20 49 73 74 61 6e 62 75 6c 00            +2: Istanbul.

000005d6 <tz_01>:
     5d6:	20 2b 31 3a 20 4f 73 6c 6f 2c 20 42 65 72 6c 69      +1: Oslo, Berli
     5e6:	6e 00                                               n.

000005e8 <tz_00>:
     5e8:	55 54 43 3a 20 55 4b 20 28 47 4d 54 29 00           UTC: UK (GMT).

000005f6 <tz_n01>:
     5f6:	20 2d 31 3a 20 50 72 61 69 61 00                     -1: Praia.

00000601 <tz_n02>:
     601:	20 2d 32 3a 20 53 6f 75 74 68 20 47 65 6f 72 67      -2: South Georg
     611:	69 61 00                                            ia.

00000614 <tz_n03>:
     614:	20 2d 33 3a 20 47 72 65 65 6e 6c 61 6e 64 00         -3: Greenland.

00000623 <tz_n04>:
     623:	20 2d 34 3a 20 45 43 54 00                           -4: ECT.

0000062c <tz_n05>:
     62c:	20 2d 35 3a 20 45 61 73 74 65 72 6e 00               -5: Eastern.

00000639 <tz_n06>:
     639:	20 2d 36 3a 20 43 65 6e 74 72 61 6c 00               -6: Central.

00000646 <tz_n07>:
     646:	20 2d 37 3a 20 4d 6f 75 6e 74 61 69 6e 00            -7: Mountain.

00000654 <tz_n08>:
     654:	20 2d 38 3a 20 50 61 63 69 66 69 63 00               -8: Pacific.

00000661 <tz_n09>:
     661:	20 2d 39 3a 20 41 6c 61 73 6b 61 00                  -9: Alaska.

0000066d <tz_n10>:
     66d:	2d 31 30 3a 20 48 61 77 61 69 69 00                 -10: Hawaii.

00000679 <tz_n11>:
     679:	2d 31 31 3a 20 4b 69 6e 67 6d 61 6e 20 52 65 65     -11: Kingman Ree
     689:	66 00                                               f.

0000068b <tz_n12>:
     68b:	2d 31 32 3a 20 42 61 6b 65 72 20 49 73 6c 61 6e     -12: Baker Islan
     69b:	64 00                                               d.

0000069d <tz_hours_title>:
     69d:	54 69 6d 65 7a 6f 6e 65 20 68 6f 75 72 73 20 55     Timezone hours U
     6ad:	54 43 00                                            TC.

000006b0 <__ctors_end>:
     6b0:	11 24       	eor	r1, r1
     6b2:	1f be       	out	0x3f, r1	; 63
     6b4:	cf ef       	ldi	r28, 0xFF	; 255
     6b6:	df e5       	ldi	r29, 0x5F	; 95
     6b8:	de bf       	out	0x3e, r29	; 62
     6ba:	cd bf       	out	0x3d, r28	; 61
     6bc:	00 e0       	ldi	r16, 0x00	; 0
     6be:	0c bf       	out	0x3c, r16	; 60

000006c0 <__do_copy_data>:
     6c0:	11 e2       	ldi	r17, 0x21	; 33
     6c2:	a0 e0       	ldi	r26, 0x00	; 0
     6c4:	b0 e2       	ldi	r27, 0x20	; 32
     6c6:	ee ef       	ldi	r30, 0xFE	; 254
     6c8:	fb e5       	ldi	r31, 0x5B	; 91
     6ca:	00 e0       	ldi	r16, 0x00	; 0
     6cc:	0b bf       	out	0x3b, r16	; 59
     6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <__do_copy_data+0x14>
     6d0:	07 90       	elpm	r0, Z+
     6d2:	0d 92       	st	X+, r0
     6d4:	a6 3a       	cpi	r26, 0xA6	; 166
     6d6:	b1 07       	cpc	r27, r17
     6d8:	d9 f7       	brne	.-10     	; 0x6d0 <__do_copy_data+0x10>

000006da <__do_clear_bss>:
     6da:	2a e2       	ldi	r18, 0x2A	; 42
     6dc:	a8 ea       	ldi	r26, 0xA8	; 168
     6de:	b1 e2       	ldi	r27, 0x21	; 33
     6e0:	01 c0       	rjmp	.+2      	; 0x6e4 <.do_clear_bss_start>

000006e2 <.do_clear_bss_loop>:
     6e2:	1d 92       	st	X+, r1

000006e4 <.do_clear_bss_start>:
     6e4:	a3 3a       	cpi	r26, 0xA3	; 163
     6e6:	b2 07       	cpc	r27, r18
     6e8:	e1 f7       	brne	.-8      	; 0x6e2 <.do_clear_bss_loop>
     6ea:	0e 94 ab 23 	call	0x4756	; 0x4756 <main>
     6ee:	0c 94 fd 2d 	jmp	0x5bfa	; 0x5bfa <_exit>

000006f2 <__bad_interrupt>:
     6f2:	86 cc       	rjmp	.-1780   	; 0x0 <__vectors>

000006f4 <_1101010101_>:

#if ((_STATIC_PORT_PIN_CONF_ == 1) && (QTOUCH_SNS_PORT_COUNT >= 1))

GLOBAL_FUNCTION _1101010101_
_1101010101_:
    sts	CONCAT( PORT, SNS1, _DIRCLR ), p_1
     6f4:	80 93 a2 06 	sts	0x06A2, r24
    sts	CONCAT( PORT, SNSK1, _DIRCLR ), p_2
     6f8:	60 93 a2 06 	sts	0x06A2, r22
    sts	CONCAT( PORT, SNS1, _OUTSET), p_1
     6fc:	80 93 a5 06 	sts	0x06A5, r24
    sts	CONCAT( PORT, SNSK1, _OUTCLR), p_2
     700:	60 93 a6 06 	sts	0x06A6, r22
    sts	CONCAT( PORT, SNSK1, _DIRSET), p_2
     704:	60 93 a1 06 	sts	0x06A1, r22
    ret
     708:	08 95       	ret

0000070a <_1101010111_>:


GLOBAL_FUNCTION _1101010111_
_1101010111_:
    push r19
     70a:	3f 93       	push	r19
    sts	CONCAT( PORT, SNSK1, _DIRCLR), p_2
     70c:	60 93 a2 06 	sts	0x06A2, r22
    sts	CONCAT( PORT, SNS1, _DIRSET), p_1
     710:	80 93 a1 06 	sts	0x06A1, r24
    _10100011_
    _01101001_
    _00011001_
    _00011001_
#endif
    sts	CONCAT( PORT, SNS1, _DIRCLR ), p_1
     714:	80 93 a2 06 	sts	0x06A2, r24
    sts	CONCAT( PORT, SNSK1, _DIRSET ), p_2
     718:	60 93 a1 06 	sts	0x06A1, r22
    pop  r19
     71c:	3f 91       	pop	r19
    lds	r_v, CONCAT(PORT, SNS1, _IN )
     71e:	80 91 a8 06 	lds	r24, 0x06A8
    and	r_v, p_3
     722:	84 23       	and	r24, r20
    ret
     724:	08 95       	ret

00000726 <_1101010110_>:


GLOBAL_FUNCTION _1101010110_
_1101010110_:
    sts	CONCAT( PORT, SNS1, _OUTCLR), p_1
     726:	80 93 a6 06 	sts	0x06A6, r24
    sts	CONCAT( PORT, SNS1, _DIRSET), p_1
     72a:	80 93 a1 06 	sts	0x06A1, r24
    ret
     72e:	08 95       	ret

00000730 <burst_1_1_10_0>:
     730:	a1 e0       	ldi	r26, 0x01	; 1
     732:	b0 e0       	ldi	r27, 0x00	; 0
     734:	ee e9       	ldi	r30, 0x9E	; 158
     736:	f3 e0       	ldi	r31, 0x03	; 3
     738:	0c 94 4d 29 	jmp	0x529a	; 0x529a <__prologue_saves__+0xc>
     73c:	e8 2f       	mov	r30, r24
     73e:	0f b7       	in	r16, 0x3f	; 63
     740:	00 78       	andi	r16, 0x80	; 128
     742:	19 82       	std	Y+1, r1	; 0x01
     744:	80 91 a8 21 	lds	r24, 0x21A8
     748:	81 30       	cpi	r24, 0x01	; 1
     74a:	19 f0       	breq	.+6      	; 0x752 <burst_1_1_10_0+0x22>
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	80 93 a8 21 	sts	0x21A8, r24
     752:	ce 2e       	mov	r12, r30
     754:	dd 24       	eor	r13, r13
     756:	f6 01       	movw	r30, r12
     758:	e6 51       	subi	r30, 0x16	; 22
     75a:	fe 4d       	sbci	r31, 0xDE	; 222
     75c:	b0 80       	ld	r11, Z
     75e:	f6 01       	movw	r30, r12
     760:	e2 51       	subi	r30, 0x12	; 18
     762:	fe 4d       	sbci	r31, 0xDE	; 222
     764:	a0 80       	ld	r10, Z
     766:	f8 94       	cli
     768:	bb 20       	and	r11, r11
     76a:	09 f4       	brne	.+2      	; 0x76e <burst_1_1_10_0+0x3e>
     76c:	aa c0       	rjmp	.+340    	; 0x8c2 <burst_1_1_10_0+0x192>
     76e:	8b 2d       	mov	r24, r11
     770:	da df       	rcall	.-76     	; 0x726 <_1101010110_>
     772:	8b 2d       	mov	r24, r11
     774:	6a 2d       	mov	r22, r10
     776:	be df       	rcall	.-132    	; 0x6f4 <_1101010101_>
     778:	1b 2d       	mov	r17, r11
     77a:	ee 24       	eor	r14, r14
     77c:	ff 24       	eor	r15, r15
     77e:	60 e0       	ldi	r22, 0x00	; 0
     780:	81 2c       	mov	r8, r1
     782:	30 e2       	ldi	r19, 0x20	; 32
     784:	93 2e       	mov	r9, r19
     786:	f5 fe       	sbrs	r15, 5
     788:	07 c0       	rjmp	.+14     	; 0x798 <burst_1_1_10_0+0x68>
     78a:	90 91 eb 21 	lds	r25, 0x21EB
     78e:	80 91 ea 21 	lds	r24, 0x21EA
     792:	98 2b       	or	r25, r24
     794:	19 f5       	brne	.+70     	; 0x7dc <burst_1_1_10_0+0xac>
     796:	35 c0       	rjmp	.+106    	; 0x802 <burst_1_1_10_0+0xd2>
     798:	8f b7       	in	r24, 0x3f	; 63
     79a:	80 2b       	or	r24, r16
     79c:	8f bf       	out	0x3f, r24	; 63
     79e:	00 00       	nop
     7a0:	f8 94       	cli
     7a2:	8b 2d       	mov	r24, r11
     7a4:	6a 2d       	mov	r22, r10
     7a6:	41 2f       	mov	r20, r17
     7a8:	b0 df       	rcall	.-160    	; 0x70a <_1101010111_>
     7aa:	68 2f       	mov	r22, r24
     7ac:	08 94       	sec
     7ae:	e1 1c       	adc	r14, r1
     7b0:	f1 1c       	adc	r15, r1
     7b2:	80 91 00 20 	lds	r24, 0x2000
     7b6:	8f 5f       	subi	r24, 0xFF	; 255
     7b8:	80 93 00 20 	sts	0x2000, r24
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	30 f0       	brcs	.+12     	; 0x7cc <burst_1_1_10_0+0x9c>
     7c0:	82 30       	cpi	r24, 0x02	; 2
     7c2:	21 f0       	breq	.+8      	; 0x7cc <burst_1_1_10_0+0x9c>
     7c4:	83 30       	cpi	r24, 0x03	; 3
     7c6:	11 f0       	breq	.+4      	; 0x7cc <burst_1_1_10_0+0x9c>
     7c8:	10 92 00 20 	sts	0x2000, r1
     7cc:	66 23       	and	r22, r22
     7ce:	d9 f2       	breq	.-74     	; 0x786 <burst_1_1_10_0+0x56>
     7d0:	20 91 eb 21 	lds	r18, 0x21EB
     7d4:	80 91 ea 21 	lds	r24, 0x21EA
     7d8:	28 2b       	or	r18, r24
     7da:	15 c0       	rjmp	.+42     	; 0x806 <burst_1_1_10_0+0xd6>
     7dc:	41 2f       	mov	r20, r17
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	40 ff       	sbrs	r20, 0
     7e2:	09 c0       	rjmp	.+18     	; 0x7f6 <burst_1_1_10_0+0xc6>
     7e4:	e8 2f       	mov	r30, r24
     7e6:	f0 e0       	ldi	r31, 0x00	; 0
     7e8:	ee 0f       	add	r30, r30
     7ea:	ff 1f       	adc	r31, r31
     7ec:	ed 54       	subi	r30, 0x4D	; 77
     7ee:	fe 4d       	sbci	r31, 0xDE	; 222
     7f0:	80 82       	st	Z, r8
     7f2:	91 82       	std	Z+1, r9	; 0x01
     7f4:	01 c0       	rjmp	.+2      	; 0x7f8 <burst_1_1_10_0+0xc8>
     7f6:	90 fd       	sbrc	r25, 0
     7f8:	8f 5f       	subi	r24, 0xFF	; 255
     7fa:	96 95       	lsr	r25
     7fc:	46 95       	lsr	r20
     7fe:	99 23       	and	r25, r25
     800:	79 f7       	brne	.-34     	; 0x7e0 <burst_1_1_10_0+0xb0>
     802:	10 e0       	ldi	r17, 0x00	; 0
     804:	20 e0       	ldi	r18, 0x00	; 0
     806:	8f b7       	in	r24, 0x3f	; 63
     808:	80 2b       	or	r24, r16
     80a:	8f bf       	out	0x3f, r24	; 63
     80c:	10 92 a9 21 	sts	0x21A9, r1
     810:	22 23       	and	r18, r18
     812:	09 f4       	brne	.+2      	; 0x816 <burst_1_1_10_0+0xe6>
     814:	3f c0       	rjmp	.+126    	; 0x894 <burst_1_1_10_0+0x164>
     816:	11 23       	and	r17, r17
     818:	09 f4       	brne	.+2      	; 0x81c <burst_1_1_10_0+0xec>
     81a:	3c c0       	rjmp	.+120    	; 0x894 <burst_1_1_10_0+0x164>
     81c:	30 91 ef 21 	lds	r19, 0x21EF
     820:	80 91 ee 21 	lds	r24, 0x21EE
     824:	38 2b       	or	r19, r24
     826:	56 2f       	mov	r21, r22
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	70 e0       	ldi	r23, 0x00	; 0
     82e:	40 e0       	ldi	r20, 0x00	; 0
     830:	23 c0       	rjmp	.+70     	; 0x878 <burst_1_1_10_0+0x148>
     832:	50 fd       	sbrc	r21, 0
     834:	17 c0       	rjmp	.+46     	; 0x864 <burst_1_1_10_0+0x134>
     836:	19 c0       	rjmp	.+50     	; 0x86a <burst_1_1_10_0+0x13a>
     838:	30 ff       	sbrs	r19, 0
     83a:	13 c0       	rjmp	.+38     	; 0x862 <burst_1_1_10_0+0x132>
     83c:	98 17       	cp	r25, r24
     83e:	81 f4       	brne	.+32     	; 0x860 <burst_1_1_10_0+0x130>
     840:	e4 2f       	mov	r30, r20
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	ee 0f       	add	r30, r30
     846:	ff 1f       	adc	r31, r31
     848:	ed 54       	subi	r30, 0x4D	; 77
     84a:	fe 4d       	sbci	r31, 0xDE	; 222
     84c:	e0 82       	st	Z, r14
     84e:	f1 82       	std	Z+1, r15	; 0x01
     850:	85 2f       	mov	r24, r21
     852:	8e 7f       	andi	r24, 0xFE	; 254
     854:	19 f4       	brne	.+6      	; 0x85c <burst_1_1_10_0+0x12c>
     856:	89 2f       	mov	r24, r25
     858:	71 e0       	ldi	r23, 0x01	; 1
     85a:	08 c0       	rjmp	.+16     	; 0x86c <burst_1_1_10_0+0x13c>
     85c:	89 2f       	mov	r24, r25
     85e:	06 c0       	rjmp	.+12     	; 0x86c <burst_1_1_10_0+0x13c>
     860:	8f 5f       	subi	r24, 0xFF	; 255
     862:	36 95       	lsr	r19
     864:	33 23       	and	r19, r19
     866:	41 f7       	brne	.-48     	; 0x838 <burst_1_1_10_0+0x108>
     868:	01 c0       	rjmp	.+2      	; 0x86c <burst_1_1_10_0+0x13c>
     86a:	20 fd       	sbrc	r18, 0
     86c:	9f 5f       	subi	r25, 0xFF	; 255
     86e:	20 fd       	sbrc	r18, 0
     870:	4f 5f       	subi	r20, 0xFF	; 255
     872:	56 95       	lsr	r21
     874:	26 95       	lsr	r18
     876:	11 f0       	breq	.+4      	; 0x87c <burst_1_1_10_0+0x14c>
     878:	55 23       	and	r21, r21
     87a:	d9 f6       	brne	.-74     	; 0x832 <burst_1_1_10_0+0x102>
     87c:	40 93 a9 21 	sts	0x21A9, r20
     880:	60 95       	com	r22
     882:	16 23       	and	r17, r22
     884:	71 30       	cpi	r23, 0x01	; 1
     886:	21 f4       	brne	.+8      	; 0x890 <burst_1_1_10_0+0x160>
     888:	11 23       	and	r17, r17
     88a:	11 f4       	brne	.+4      	; 0x890 <burst_1_1_10_0+0x160>
     88c:	ee 24       	eor	r14, r14
     88e:	ff 24       	eor	r15, r15
     890:	60 e0       	ldi	r22, 0x00	; 0
     892:	13 c0       	rjmp	.+38     	; 0x8ba <burst_1_1_10_0+0x18a>
     894:	80 91 eb 21 	lds	r24, 0x21EB
     898:	90 91 ea 21 	lds	r25, 0x21EA
     89c:	89 2b       	or	r24, r25
     89e:	89 83       	std	Y+1, r24	; 0x01
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	06 c0       	rjmp	.+12     	; 0x8b0 <burst_1_1_10_0+0x180>
     8a4:	89 81       	ldd	r24, Y+1	; 0x01
     8a6:	80 fd       	sbrc	r24, 0
     8a8:	9f 5f       	subi	r25, 0xFF	; 255
     8aa:	89 81       	ldd	r24, Y+1	; 0x01
     8ac:	86 95       	lsr	r24
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	89 81       	ldd	r24, Y+1	; 0x01
     8b2:	88 23       	and	r24, r24
     8b4:	b9 f7       	brne	.-18     	; 0x8a4 <burst_1_1_10_0+0x174>
     8b6:	90 93 a9 21 	sts	0x21A9, r25
     8ba:	f8 94       	cli
     8bc:	11 23       	and	r17, r17
     8be:	09 f0       	breq	.+2      	; 0x8c2 <burst_1_1_10_0+0x192>
     8c0:	62 cf       	rjmp	.-316    	; 0x786 <burst_1_1_10_0+0x56>
     8c2:	8a ee       	ldi	r24, 0xEA	; 234
     8c4:	91 e2       	ldi	r25, 0x21	; 33
     8c6:	c8 0e       	add	r12, r24
     8c8:	d9 1e       	adc	r13, r25
     8ca:	f6 01       	movw	r30, r12
     8cc:	80 81       	ld	r24, Z
     8ce:	2b df       	rcall	.-426    	; 0x726 <_1101010110_>
     8d0:	8f b7       	in	r24, 0x3f	; 63
     8d2:	08 2b       	or	r16, r24
     8d4:	0f bf       	out	0x3f, r16	; 63
     8d6:	21 96       	adiw	r28, 0x01	; 1
     8d8:	ec e0       	ldi	r30, 0x0C	; 12
     8da:	0c 94 66 29 	jmp	0x52cc	; 0x52cc <__epilogue_restores__+0xc>

000008de <qt_get_library_sig>:
     8de:	fc 01       	movw	r30, r24
     8e0:	80 e2       	ldi	r24, 0x20	; 32
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	80 83       	st	Z, r24
     8e6:	91 83       	std	Z+1, r25	; 0x01
     8e8:	12 82       	std	Z+2, r1	; 0x02
     8ea:	13 82       	std	Z+3, r1	; 0x03
     8ec:	80 e3       	ldi	r24, 0x30	; 48
     8ee:	94 e0       	ldi	r25, 0x04	; 4
     8f0:	84 83       	std	Z+4, r24	; 0x04
     8f2:	95 83       	std	Z+5, r25	; 0x05
     8f4:	08 95       	ret

000008f6 <qt_enable_key>:
     8f6:	90 91 e4 21 	lds	r25, 0x21E4
     8fa:	a9 2f       	mov	r26, r25
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	fd 01       	movw	r30, r26
     900:	ee 0f       	add	r30, r30
     902:	ff 1f       	adc	r31, r31
     904:	ea 0f       	add	r30, r26
     906:	fb 1f       	adc	r31, r27
     908:	ee 0f       	add	r30, r30
     90a:	ff 1f       	adc	r31, r31
     90c:	e4 53       	subi	r30, 0x34	; 52
     90e:	fe 4d       	sbci	r31, 0xDE	; 222
     910:	43 83       	std	Z+3, r20	; 0x03
     912:	67 70       	andi	r22, 0x07	; 7
     914:	85 83       	std	Z+5, r24	; 0x05
     916:	23 70       	andi	r18, 0x03	; 3
     918:	66 0f       	add	r22, r22
     91a:	66 0f       	add	r22, r22
     91c:	66 0f       	add	r22, r22
     91e:	26 2b       	or	r18, r22
     920:	24 83       	std	Z+4, r18	; 0x04
     922:	9f 5f       	subi	r25, 0xFF	; 255
     924:	90 93 e4 21 	sts	0x21E4, r25
     928:	08 95       	ret

0000092a <qt_get_sensor_delta>:
     92a:	1f 93       	push	r17
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	28 2f       	mov	r18, r24
     932:	c8 2f       	mov	r28, r24
     934:	d0 e0       	ldi	r29, 0x00	; 0
     936:	fe 01       	movw	r30, r28
     938:	ee 0f       	add	r30, r30
     93a:	ff 1f       	adc	r31, r31
     93c:	ec 0f       	add	r30, r28
     93e:	fd 1f       	adc	r31, r29
     940:	ee 0f       	add	r30, r30
     942:	ff 1f       	adc	r31, r31
     944:	e4 53       	subi	r30, 0x34	; 52
     946:	fe 4d       	sbci	r31, 0xDE	; 222
     948:	35 81       	ldd	r19, Z+5	; 0x05
     94a:	83 81       	ldd	r24, Z+3	; 0x03
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	00 90 ac 21 	lds	r0, 0x21AC
     952:	02 c0       	rjmp	.+4      	; 0x958 <qt_get_sensor_delta+0x2e>
     954:	95 95       	asr	r25
     956:	87 95       	ror	r24
     958:	0a 94       	dec	r0
     95a:	e2 f7       	brpl	.-8      	; 0x954 <qt_get_sensor_delta+0x2a>
     95c:	18 2f       	mov	r17, r24
     95e:	84 30       	cpi	r24, 0x04	; 4
     960:	08 f4       	brcc	.+2      	; 0x964 <qt_get_sensor_delta+0x3a>
     962:	14 e0       	ldi	r17, 0x04	; 4
     964:	80 91 e4 21 	lds	r24, 0x21E4
     968:	28 17       	cp	r18, r24
     96a:	18 f0       	brcs	.+6      	; 0x972 <qt_get_sensor_delta+0x48>
     96c:	20 e0       	ldi	r18, 0x00	; 0
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	2d c0       	rjmp	.+90     	; 0x9cc <qt_get_sensor_delta+0xa2>
     972:	83 2f       	mov	r24, r19
     974:	1d d1       	rcall	.+570    	; 0xbb0 <get_channel_delta>
     976:	9c 01       	movw	r18, r24
     978:	41 2f       	mov	r20, r17
     97a:	50 e0       	ldi	r21, 0x00	; 0
     97c:	16 95       	lsr	r17
     97e:	16 95       	lsr	r17
     980:	81 2f       	mov	r24, r17
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	84 1b       	sub	r24, r20
     986:	95 0b       	sbc	r25, r21
     988:	82 17       	cp	r24, r18
     98a:	93 07       	cpc	r25, r19
     98c:	64 f4       	brge	.+24     	; 0x9a6 <qt_get_sensor_delta+0x7c>
     98e:	fe 01       	movw	r30, r28
     990:	ee 0f       	add	r30, r30
     992:	ff 1f       	adc	r31, r31
     994:	ec 0f       	add	r30, r28
     996:	fd 1f       	adc	r31, r29
     998:	ee 0f       	add	r30, r30
     99a:	ff 1f       	adc	r31, r31
     99c:	e4 53       	subi	r30, 0x34	; 52
     99e:	fe 4d       	sbci	r31, 0xDE	; 222
     9a0:	84 81       	ldd	r24, Z+4	; 0x04
     9a2:	8b 7f       	andi	r24, 0xFB	; 251
     9a4:	84 83       	std	Z+4, r24	; 0x04
     9a6:	88 27       	eor	r24, r24
     9a8:	99 27       	eor	r25, r25
     9aa:	84 1b       	sub	r24, r20
     9ac:	95 0b       	sbc	r25, r21
     9ae:	82 17       	cp	r24, r18
     9b0:	93 07       	cpc	r25, r19
     9b2:	64 f0       	brlt	.+24     	; 0x9cc <qt_get_sensor_delta+0xa2>
     9b4:	fe 01       	movw	r30, r28
     9b6:	ee 0f       	add	r30, r30
     9b8:	ff 1f       	adc	r31, r31
     9ba:	ec 0f       	add	r30, r28
     9bc:	fd 1f       	adc	r31, r29
     9be:	ee 0f       	add	r30, r30
     9c0:	ff 1f       	adc	r31, r31
     9c2:	e4 53       	subi	r30, 0x34	; 52
     9c4:	fe 4d       	sbci	r31, 0xDE	; 222
     9c6:	84 81       	ldd	r24, Z+4	; 0x04
     9c8:	84 60       	ori	r24, 0x04	; 4
     9ca:	84 83       	std	Z+4, r24	; 0x04
     9cc:	c9 01       	movw	r24, r18
     9ce:	df 91       	pop	r29
     9d0:	cf 91       	pop	r28
     9d2:	1f 91       	pop	r17
     9d4:	08 95       	ret

000009d6 <qt_measure_sensors>:
     9d6:	ff 92       	push	r15
     9d8:	0f 93       	push	r16
     9da:	1f 93       	push	r17
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	10 92 c4 21 	sts	0x21C4, r1
     9e4:	10 92 c5 21 	sts	0x21C5, r1
     9e8:	20 91 c8 21 	lds	r18, 0x21C8
     9ec:	30 91 c9 21 	lds	r19, 0x21C9
     9f0:	80 93 c8 21 	sts	0x21C8, r24
     9f4:	90 93 c9 21 	sts	0x21C9, r25
     9f8:	40 91 ca 21 	lds	r20, 0x21CA
     9fc:	50 91 cb 21 	lds	r21, 0x21CB
     a00:	42 1b       	sub	r20, r18
     a02:	53 0b       	sbc	r21, r19
     a04:	48 0f       	add	r20, r24
     a06:	59 1f       	adc	r21, r25
     a08:	ff 24       	eor	r15, r15
     a0a:	03 c0       	rjmp	.+6      	; 0xa12 <qt_measure_sensors+0x3c>
     a0c:	f3 94       	inc	r15
     a0e:	48 5c       	subi	r20, 0xC8	; 200
     a10:	50 40       	sbci	r21, 0x00	; 0
     a12:	48 3c       	cpi	r20, 0xC8	; 200
     a14:	51 05       	cpc	r21, r1
     a16:	d0 f7       	brcc	.-12     	; 0xa0c <qt_measure_sensors+0x36>
     a18:	40 93 ca 21 	sts	0x21CA, r20
     a1c:	50 93 cb 21 	sts	0x21CB, r21
     a20:	80 91 e5 21 	lds	r24, 0x21E5
     a24:	88 23       	and	r24, r24
     a26:	41 f0       	breq	.+16     	; 0xa38 <qt_measure_sensors+0x62>
     a28:	8f 15       	cp	r24, r15
     a2a:	18 f4       	brcc	.+6      	; 0xa32 <qt_measure_sensors+0x5c>
     a2c:	10 92 e5 21 	sts	0x21E5, r1
     a30:	03 c0       	rjmp	.+6      	; 0xa38 <qt_measure_sensors+0x62>
     a32:	8f 19       	sub	r24, r15
     a34:	80 93 e5 21 	sts	0x21E5, r24
     a38:	aa d3       	rcall	.+1876   	; 0x118e <burst>
     a3a:	e0 91 c6 21 	lds	r30, 0x21C6
     a3e:	f0 91 c7 21 	lds	r31, 0x21C7
     a42:	30 97       	sbiw	r30, 0x00	; 0
     a44:	09 f0       	breq	.+2      	; 0xa48 <qt_measure_sensors+0x72>
     a46:	19 95       	eicall
     a48:	10 e0       	ldi	r17, 0x00	; 0
     a4a:	00 e0       	ldi	r16, 0x00	; 0
     a4c:	05 c0       	rjmp	.+10     	; 0xa58 <qt_measure_sensors+0x82>
     a4e:	81 2f       	mov	r24, r17
     a50:	6f 2d       	mov	r22, r15
     a52:	c3 d0       	rcall	.+390    	; 0xbda <process_sensor>
     a54:	08 2b       	or	r16, r24
     a56:	1f 5f       	subi	r17, 0xFF	; 255
     a58:	60 91 e4 21 	lds	r22, 0x21E4
     a5c:	16 17       	cp	r17, r22
     a5e:	b8 f3       	brcs	.-18     	; 0xa4e <qt_measure_sensors+0x78>
     a60:	00 23       	and	r16, r16
     a62:	49 f0       	breq	.+18     	; 0xa76 <qt_measure_sensors+0xa0>
     a64:	80 91 c4 21 	lds	r24, 0x21C4
     a68:	90 91 c5 21 	lds	r25, 0x21C5
     a6c:	91 60       	ori	r25, 0x01	; 1
     a6e:	80 93 c4 21 	sts	0x21C4, r24
     a72:	90 93 c5 21 	sts	0x21C5, r25
     a76:	10 92 c3 21 	sts	0x21C3, r1
     a7a:	ac ec       	ldi	r26, 0xCC	; 204
     a7c:	b1 e2       	ldi	r27, 0x21	; 33
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	41 e0       	ldi	r20, 0x01	; 1
     a82:	50 e0       	ldi	r21, 0x00	; 0
     a84:	17 c0       	rjmp	.+46     	; 0xab4 <qt_measure_sensors+0xde>
     a86:	8c 91       	ld	r24, X
     a88:	88 71       	andi	r24, 0x18	; 24
     a8a:	91 f0       	breq	.+36     	; 0xab0 <qt_measure_sensors+0xda>
     a8c:	e3 2f       	mov	r30, r19
     a8e:	e6 95       	lsr	r30
     a90:	e6 95       	lsr	r30
     a92:	e6 95       	lsr	r30
     a94:	f0 e0       	ldi	r31, 0x00	; 0
     a96:	ed 54       	subi	r30, 0x4D	; 77
     a98:	fe 4d       	sbci	r31, 0xDE	; 222
     a9a:	83 2f       	mov	r24, r19
     a9c:	87 70       	andi	r24, 0x07	; 7
     a9e:	ea 01       	movw	r28, r20
     aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <qt_measure_sensors+0xd0>
     aa2:	cc 0f       	add	r28, r28
     aa4:	dd 1f       	adc	r29, r29
     aa6:	8a 95       	dec	r24
     aa8:	e2 f7       	brpl	.-8      	; 0xaa2 <qt_measure_sensors+0xcc>
     aaa:	20 89       	ldd	r18, Z+16	; 0x10
     aac:	2c 2b       	or	r18, r28
     aae:	20 8b       	std	Z+16, r18	; 0x10
     ab0:	3f 5f       	subi	r19, 0xFF	; 255
     ab2:	16 96       	adiw	r26, 0x06	; 6
     ab4:	36 17       	cp	r19, r22
     ab6:	38 f3       	brcs	.-50     	; 0xa86 <qt_measure_sensors+0xb0>
     ab8:	80 91 c4 21 	lds	r24, 0x21C4
     abc:	90 91 c5 21 	lds	r25, 0x21C5
     ac0:	cd b7       	in	r28, 0x3d	; 61
     ac2:	de b7       	in	r29, 0x3e	; 62
     ac4:	e5 e0       	ldi	r30, 0x05	; 5
     ac6:	0c 94 6d 29 	jmp	0x52da	; 0x52da <__epilogue_restores__+0x1a>

00000aca <qt_reset_sensing>:
     aca:	10 92 e4 21 	sts	0x21E4, r1
     ace:	84 e0       	ldi	r24, 0x04	; 4
     ad0:	80 93 ad 21 	sts	0x21AD, r24
     ad4:	94 e1       	ldi	r25, 0x14	; 20
     ad6:	90 93 b0 21 	sts	0x21B0, r25
     ada:	85 e0       	ldi	r24, 0x05	; 5
     adc:	80 93 b1 21 	sts	0x21B1, r24
     ae0:	10 92 af 21 	sts	0x21AF, r1
     ae4:	90 93 ae 21 	sts	0x21AE, r25
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	80 93 ac 21 	sts	0x21AC, r24
     aee:	83 e0       	ldi	r24, 0x03	; 3
     af0:	80 93 b2 21 	sts	0x21B2, r24
     af4:	3b d3       	rcall	.+1654   	; 0x116c <burst_reset>
     af6:	10 92 c6 21 	sts	0x21C6, r1
     afa:	10 92 c7 21 	sts	0x21C7, r1
     afe:	08 95       	ret

00000b00 <qt_calibrate_sensing>:
     b00:	1f 93       	push	r17
     b02:	10 e0       	ldi	r17, 0x00	; 0
     b04:	03 c0       	rjmp	.+6      	; 0xb0c <qt_calibrate_sensing+0xc>
     b06:	81 2f       	mov	r24, r17
     b08:	27 d0       	rcall	.+78     	; 0xb58 <start_cal_sensor>
     b0a:	1f 5f       	subi	r17, 0xFF	; 255
     b0c:	80 91 e4 21 	lds	r24, 0x21E4
     b10:	18 17       	cp	r17, r24
     b12:	c8 f3       	brcs	.-14     	; 0xb06 <qt_calibrate_sensing+0x6>
     b14:	1f 91       	pop	r17
     b16:	08 95       	ret

00000b18 <qt_init_sensing_with_burst>:
     b18:	ef 92       	push	r14
     b1a:	ff 92       	push	r15
     b1c:	1f 93       	push	r17
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	ec 01       	movw	r28, r24
     b24:	7b 01       	movw	r14, r22
     b26:	10 e0       	ldi	r17, 0x00	; 0
     b28:	03 c0       	rjmp	.+6      	; 0xb30 <qt_init_sensing_with_burst+0x18>
     b2a:	81 2f       	mov	r24, r17
     b2c:	15 d0       	rcall	.+42     	; 0xb58 <start_cal_sensor>
     b2e:	1f 5f       	subi	r17, 0xFF	; 255
     b30:	80 91 e4 21 	lds	r24, 0x21E4
     b34:	18 17       	cp	r17, r24
     b36:	c8 f3       	brcs	.-14     	; 0xb2a <qt_init_sensing_with_burst+0x12>
     b38:	10 92 c8 21 	sts	0x21C8, r1
     b3c:	10 92 c9 21 	sts	0x21C9, r1
     b40:	c0 93 aa 21 	sts	0x21AA, r28
     b44:	d0 93 ab 21 	sts	0x21AB, r29
     b48:	c7 01       	movw	r24, r14
     b4a:	0b d3       	rcall	.+1558   	; 0x1162 <burst_init>
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	1f 91       	pop	r17
     b52:	ff 90       	pop	r15
     b54:	ef 90       	pop	r14
     b56:	08 95       	ret

00000b58 <start_cal_sensor>:
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	ec ec       	ldi	r30, 0xCC	; 204
     b5c:	f1 e2       	ldi	r31, 0x21	; 33
     b5e:	9c 01       	movw	r18, r24
     b60:	22 0f       	add	r18, r18
     b62:	33 1f       	adc	r19, r19
     b64:	28 0f       	add	r18, r24
     b66:	39 1f       	adc	r19, r25
     b68:	d9 01       	movw	r26, r18
     b6a:	aa 0f       	add	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	ae 0f       	add	r26, r30
     b70:	bf 1f       	adc	r27, r31
     b72:	15 96       	adiw	r26, 0x05	; 5
     b74:	4c 91       	ld	r20, X
     b76:	15 97       	sbiw	r26, 0x05	; 5
     b78:	80 91 c4 21 	lds	r24, 0x21C4
     b7c:	90 91 c5 21 	lds	r25, 0x21C5
     b80:	82 60       	ori	r24, 0x02	; 2
     b82:	80 93 c4 21 	sts	0x21C4, r24
     b86:	90 93 c5 21 	sts	0x21C5, r25
     b8a:	2f 5f       	subi	r18, 0xFF	; 255
     b8c:	3f 4f       	sbci	r19, 0xFF	; 255
     b8e:	22 0f       	add	r18, r18
     b90:	33 1f       	adc	r19, r19
     b92:	e2 0f       	add	r30, r18
     b94:	f3 1f       	adc	r31, r19
     b96:	10 82       	st	Z, r1
     b98:	e6 ee       	ldi	r30, 0xE6	; 230
     b9a:	f1 e2       	ldi	r31, 0x21	; 33
     b9c:	e4 0f       	add	r30, r20
     b9e:	f1 1d       	adc	r31, r1
     ba0:	80 e8       	ldi	r24, 0x80	; 128
     ba2:	80 83       	st	Z, r24
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	8f e0       	ldi	r24, 0x0F	; 15
     baa:	11 96       	adiw	r26, 0x01	; 1
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret

00000bb0 <get_channel_delta>:
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	fc 01       	movw	r30, r24
     bb4:	34 96       	adiw	r30, 0x04	; 4
     bb6:	a3 eb       	ldi	r26, 0xB3	; 179
     bb8:	b1 e2       	ldi	r27, 0x21	; 33
     bba:	ee 0f       	add	r30, r30
     bbc:	ff 1f       	adc	r31, r31
     bbe:	ea 0f       	add	r30, r26
     bc0:	fb 1f       	adc	r31, r27
     bc2:	88 0f       	add	r24, r24
     bc4:	99 1f       	adc	r25, r25
     bc6:	a8 0f       	add	r26, r24
     bc8:	b9 1f       	adc	r27, r25
     bca:	20 81       	ld	r18, Z
     bcc:	31 81       	ldd	r19, Z+1	; 0x01
     bce:	8d 91       	ld	r24, X+
     bd0:	9c 91       	ld	r25, X
     bd2:	28 1b       	sub	r18, r24
     bd4:	39 0b       	sbc	r19, r25
     bd6:	c9 01       	movw	r24, r18
     bd8:	08 95       	ret

00000bda <process_sensor>:
     bda:	a0 e0       	ldi	r26, 0x00	; 0
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e3 ef       	ldi	r30, 0xF3	; 243
     be0:	f5 e0       	ldi	r31, 0x05	; 5
     be2:	0c 94 4b 29 	jmp	0x5296	; 0x5296 <__prologue_saves__+0x8>
     be6:	78 2e       	mov	r7, r24
     be8:	f6 2e       	mov	r15, r22
     bea:	9f de       	rcall	.-706    	; 0x92a <qt_get_sensor_delta>
     bec:	5c 01       	movw	r10, r24
     bee:	07 2d       	mov	r16, r7
     bf0:	10 e0       	ldi	r17, 0x00	; 0
     bf2:	f8 01       	movw	r30, r16
     bf4:	ee 0f       	add	r30, r30
     bf6:	ff 1f       	adc	r31, r31
     bf8:	e0 0f       	add	r30, r16
     bfa:	f1 1f       	adc	r31, r17
     bfc:	ee 0f       	add	r30, r30
     bfe:	ff 1f       	adc	r31, r31
     c00:	e4 53       	subi	r30, 0x34	; 52
     c02:	fe 4d       	sbci	r31, 0xDE	; 222
     c04:	54 81       	ldd	r21, Z+4	; 0x04
     c06:	43 81       	ldd	r20, Z+3	; 0x03
     c08:	24 2f       	mov	r18, r20
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	85 2f       	mov	r24, r21
     c0e:	83 70       	andi	r24, 0x03	; 3
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	01 96       	adiw	r24, 0x01	; 1
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <process_sensor+0x40>
     c16:	35 95       	asr	r19
     c18:	27 95       	ror	r18
     c1a:	8a 95       	dec	r24
     c1c:	e2 f7       	brpl	.-8      	; 0xc16 <process_sensor+0x3c>
     c1e:	82 2f       	mov	r24, r18
     c20:	22 30       	cpi	r18, 0x02	; 2
     c22:	08 f4       	brcc	.+2      	; 0xc26 <process_sensor+0x4c>
     c24:	82 e0       	ldi	r24, 0x02	; 2
     c26:	24 2f       	mov	r18, r20
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	b9 01       	movw	r22, r18
     c2c:	68 1b       	sub	r22, r24
     c2e:	71 09       	sbc	r23, r1
     c30:	f8 01       	movw	r30, r16
     c32:	ee 0f       	add	r30, r30
     c34:	ff 1f       	adc	r31, r31
     c36:	e0 0f       	add	r30, r16
     c38:	f1 1f       	adc	r31, r17
     c3a:	ef 01       	movw	r28, r30
     c3c:	cc 0f       	add	r28, r28
     c3e:	dd 1f       	adc	r29, r29
     c40:	c4 53       	subi	r28, 0x34	; 52
     c42:	de 4d       	sbci	r29, 0xDE	; 222
     c44:	88 81       	ld	r24, Y
     c46:	84 30       	cpi	r24, 0x04	; 4
     c48:	09 f4       	brne	.+2      	; 0xc4c <process_sensor+0x72>
     c4a:	f7 c0       	rjmp	.+494    	; 0xe3a <process_sensor+0x260>
     c4c:	85 30       	cpi	r24, 0x05	; 5
     c4e:	30 f4       	brcc	.+12     	; 0xc5c <process_sensor+0x82>
     c50:	81 30       	cpi	r24, 0x01	; 1
     c52:	71 f0       	breq	.+28     	; 0xc70 <process_sensor+0x96>
     c54:	82 30       	cpi	r24, 0x02	; 2
     c56:	09 f0       	breq	.+2      	; 0xc5a <process_sensor+0x80>
     c58:	7d c2       	rjmp	.+1274   	; 0x1154 <process_sensor+0x57a>
     c5a:	6e c0       	rjmp	.+220    	; 0xd38 <process_sensor+0x15e>
     c5c:	80 31       	cpi	r24, 0x10	; 16
     c5e:	09 f4       	brne	.+2      	; 0xc62 <process_sensor+0x88>
     c60:	a1 c1       	rjmp	.+834    	; 0xfa4 <process_sensor+0x3ca>
     c62:	80 32       	cpi	r24, 0x20	; 32
     c64:	09 f4       	brne	.+2      	; 0xc68 <process_sensor+0x8e>
     c66:	42 c2       	rjmp	.+1156   	; 0x10ec <process_sensor+0x512>
     c68:	88 30       	cpi	r24, 0x08	; 8
     c6a:	09 f0       	breq	.+2      	; 0xc6e <process_sensor+0x94>
     c6c:	73 c2       	rjmp	.+1254   	; 0x1154 <process_sensor+0x57a>
     c6e:	ee c1       	rjmp	.+988    	; 0x104c <process_sensor+0x472>
     c70:	40 91 c4 21 	lds	r20, 0x21C4
     c74:	50 91 c5 21 	lds	r21, 0x21C5
     c78:	ca 01       	movw	r24, r20
     c7a:	92 60       	ori	r25, 0x02	; 2
     c7c:	80 93 c4 21 	sts	0x21C4, r24
     c80:	90 93 c5 21 	sts	0x21C5, r25
     c84:	8d 81       	ldd	r24, Y+5	; 0x05
     c86:	69 81       	ldd	r22, Y+1	; 0x01
     c88:	a8 2f       	mov	r26, r24
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	6a 30       	cpi	r22, 0x0A	; 10
     c8e:	60 f0       	brcs	.+24     	; 0xca8 <process_sensor+0xce>
     c90:	aa 0f       	add	r26, r26
     c92:	bb 1f       	adc	r27, r27
     c94:	fd 01       	movw	r30, r26
     c96:	ed 54       	subi	r30, 0x4D	; 77
     c98:	fe 4d       	sbci	r31, 0xDE	; 222
     c9a:	80 81       	ld	r24, Z
     c9c:	91 81       	ldd	r25, Z+1	; 0x01
     c9e:	a5 54       	subi	r26, 0x45	; 69
     ca0:	be 4d       	sbci	r27, 0xDE	; 222
     ca2:	8d 93       	st	X+, r24
     ca4:	9c 93       	st	X, r25
     ca6:	18 c0       	rjmp	.+48     	; 0xcd8 <process_sensor+0xfe>
     ca8:	aa 0f       	add	r26, r26
     caa:	bb 1f       	adc	r27, r27
     cac:	fd 01       	movw	r30, r26
     cae:	e5 54       	subi	r30, 0x45	; 69
     cb0:	fe 4d       	sbci	r31, 0xDE	; 222
     cb2:	20 81       	ld	r18, Z
     cb4:	31 81       	ldd	r19, Z+1	; 0x01
     cb6:	ad 54       	subi	r26, 0x4D	; 77
     cb8:	be 4d       	sbci	r27, 0xDE	; 222
     cba:	8d 91       	ld	r24, X+
     cbc:	9c 91       	ld	r25, X
     cbe:	82 17       	cp	r24, r18
     cc0:	93 07       	cpc	r25, r19
     cc2:	18 f4       	brcc	.+6      	; 0xcca <process_sensor+0xf0>
     cc4:	21 50       	subi	r18, 0x01	; 1
     cc6:	30 40       	sbci	r19, 0x00	; 0
     cc8:	05 c0       	rjmp	.+10     	; 0xcd4 <process_sensor+0xfa>
     cca:	28 17       	cp	r18, r24
     ccc:	39 07       	cpc	r19, r25
     cce:	50 f4       	brcc	.+20     	; 0xce4 <process_sensor+0x10a>
     cd0:	2f 5f       	subi	r18, 0xFF	; 255
     cd2:	3f 4f       	sbci	r19, 0xFF	; 255
     cd4:	20 83       	st	Z, r18
     cd6:	31 83       	std	Z+1, r19	; 0x01
     cd8:	48 60       	ori	r20, 0x08	; 8
     cda:	52 60       	ori	r21, 0x02	; 2
     cdc:	40 93 c4 21 	sts	0x21C4, r20
     ce0:	50 93 c5 21 	sts	0x21C5, r21
     ce4:	86 2f       	mov	r24, r22
     ce6:	81 50       	subi	r24, 0x01	; 1
     ce8:	f8 01       	movw	r30, r16
     cea:	ee 0f       	add	r30, r30
     cec:	ff 1f       	adc	r31, r31
     cee:	e0 0f       	add	r30, r16
     cf0:	f1 1f       	adc	r31, r17
     cf2:	ef 01       	movw	r28, r30
     cf4:	cc 0f       	add	r28, r28
     cf6:	dd 1f       	adc	r29, r29
     cf8:	c4 53       	subi	r28, 0x34	; 52
     cfa:	de 4d       	sbci	r29, 0xDE	; 222
     cfc:	89 83       	std	Y+1, r24	; 0x01
     cfe:	88 23       	and	r24, r24
     d00:	b1 f4       	brne	.+44     	; 0xd2e <process_sensor+0x154>
     d02:	ad 81       	ldd	r26, Y+5	; 0x05
     d04:	82 e0       	ldi	r24, 0x02	; 2
     d06:	88 83       	st	Y, r24
     d08:	80 91 c4 21 	lds	r24, 0x21C4
     d0c:	90 91 c5 21 	lds	r25, 0x21C5
     d10:	82 60       	ori	r24, 0x02	; 2
     d12:	80 93 c4 21 	sts	0x21C4, r24
     d16:	90 93 c5 21 	sts	0x21C5, r25
     d1a:	ee 0f       	add	r30, r30
     d1c:	ff 1f       	adc	r31, r31
     d1e:	e2 53       	subi	r30, 0x32	; 50
     d20:	fe 4d       	sbci	r31, 0xDE	; 222
     d22:	10 82       	st	Z, r1
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	aa 51       	subi	r26, 0x1A	; 26
     d28:	be 4d       	sbci	r27, 0xDE	; 222
     d2a:	80 e8       	ldi	r24, 0x80	; 128
     d2c:	8c 93       	st	X, r24
     d2e:	80 91 ae 21 	lds	r24, 0x21AE
     d32:	80 93 e5 21 	sts	0x21E5, r24
     d36:	0c c2       	rjmp	.+1048   	; 0x1150 <process_sensor+0x576>
     d38:	52 ff       	sbrs	r21, 2
     d3a:	04 c0       	rjmp	.+8      	; 0xd44 <process_sensor+0x16a>
     d3c:	80 e2       	ldi	r24, 0x20	; 32
     d3e:	88 83       	st	Y, r24
     d40:	19 82       	std	Y+1, r1	; 0x01
     d42:	f7 c1       	rjmp	.+1006   	; 0x1132 <process_sensor+0x558>
     d44:	c5 01       	movw	r24, r10
     d46:	b7 fe       	sbrs	r11, 7
     d48:	02 c0       	rjmp	.+4      	; 0xd4e <process_sensor+0x174>
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	82 17       	cp	r24, r18
     d50:	93 07       	cpc	r25, r19
     d52:	80 f0       	brcs	.+32     	; 0xd74 <process_sensor+0x19a>
     d54:	f8 01       	movw	r30, r16
     d56:	ee 0f       	add	r30, r30
     d58:	ff 1f       	adc	r31, r31
     d5a:	e0 0f       	add	r30, r16
     d5c:	f1 1f       	adc	r31, r17
     d5e:	ee 0f       	add	r30, r30
     d60:	ff 1f       	adc	r31, r31
     d62:	df 01       	movw	r26, r30
     d64:	a4 53       	subi	r26, 0x34	; 52
     d66:	be 4d       	sbci	r27, 0xDE	; 222
     d68:	84 e0       	ldi	r24, 0x04	; 4
     d6a:	8c 93       	st	X, r24
     d6c:	e2 53       	subi	r30, 0x32	; 50
     d6e:	fe 4d       	sbci	r31, 0xDE	; 222
     d70:	10 82       	st	Z, r1
     d72:	e5 c1       	rjmp	.+970    	; 0x113e <process_sensor+0x564>
     d74:	ff 20       	and	r15, r15
     d76:	09 f4       	brne	.+2      	; 0xd7a <process_sensor+0x1a0>
     d78:	ed c1       	rjmp	.+986    	; 0x1154 <process_sensor+0x57a>
     d7a:	80 91 e5 21 	lds	r24, 0x21E5
     d7e:	88 23       	and	r24, r24
     d80:	09 f0       	breq	.+2      	; 0xd84 <process_sensor+0x1aa>
     d82:	e8 c1       	rjmp	.+976    	; 0x1154 <process_sensor+0x57a>
     d84:	f8 01       	movw	r30, r16
     d86:	ee 0f       	add	r30, r30
     d88:	ff 1f       	adc	r31, r31
     d8a:	e0 0f       	add	r30, r16
     d8c:	f1 1f       	adc	r31, r17
     d8e:	ee 0f       	add	r30, r30
     d90:	ff 1f       	adc	r31, r31
     d92:	e4 53       	subi	r30, 0x34	; 52
     d94:	fe 4d       	sbci	r31, 0xDE	; 222
     d96:	85 81       	ldd	r24, Z+5	; 0x05
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	ec 01       	movw	r28, r24
     d9c:	cc 0f       	add	r28, r28
     d9e:	dd 1f       	adc	r29, r29
     da0:	c5 54       	subi	r28, 0x45	; 69
     da2:	de 4d       	sbci	r29, 0xDE	; 222
     da4:	28 81       	ld	r18, Y
     da6:	39 81       	ldd	r19, Y+1	; 0x01
     da8:	fc 01       	movw	r30, r24
     daa:	ee 0f       	add	r30, r30
     dac:	ff 1f       	adc	r31, r31
     dae:	ed 54       	subi	r30, 0x4D	; 77
     db0:	fe 4d       	sbci	r31, 0xDE	; 222
     db2:	01 90       	ld	r0, Z+
     db4:	f0 81       	ld	r31, Z
     db6:	e0 2d       	mov	r30, r0
     db8:	2e 17       	cp	r18, r30
     dba:	3f 07       	cpc	r19, r31
     dbc:	88 f4       	brcc	.+34     	; 0xde0 <process_sensor+0x206>
     dbe:	fc 01       	movw	r30, r24
     dc0:	ea 51       	subi	r30, 0x1A	; 26
     dc2:	fe 4d       	sbci	r31, 0xDE	; 222
     dc4:	90 81       	ld	r25, Z
     dc6:	9f 0d       	add	r25, r15
     dc8:	90 83       	st	Z, r25
     dca:	80 91 b1 21 	lds	r24, 0x21B1
     dce:	80 58       	subi	r24, 0x80	; 128
     dd0:	98 17       	cp	r25, r24
     dd2:	08 f4       	brcc	.+2      	; 0xdd6 <process_sensor+0x1fc>
     dd4:	bf c1       	rjmp	.+894    	; 0x1154 <process_sensor+0x57a>
     dd6:	80 e8       	ldi	r24, 0x80	; 128
     dd8:	80 83       	st	Z, r24
     dda:	2f 5f       	subi	r18, 0xFF	; 255
     ddc:	3f 4f       	sbci	r19, 0xFF	; 255
     dde:	14 c0       	rjmp	.+40     	; 0xe08 <process_sensor+0x22e>
     de0:	dc 01       	movw	r26, r24
     de2:	aa 51       	subi	r26, 0x1A	; 26
     de4:	be 4d       	sbci	r27, 0xDE	; 222
     de6:	e2 17       	cp	r30, r18
     de8:	f3 07       	cpc	r31, r19
     dea:	d0 f4       	brcc	.+52     	; 0xe20 <process_sensor+0x246>
     dec:	8c 91       	ld	r24, X
     dee:	8f 19       	sub	r24, r15
     df0:	8c 93       	st	X, r24
     df2:	40 e8       	ldi	r20, 0x80	; 128
     df4:	90 91 b0 21 	lds	r25, 0x21B0
     df8:	54 2f       	mov	r21, r20
     dfa:	59 1b       	sub	r21, r25
     dfc:	58 17       	cp	r21, r24
     dfe:	08 f4       	brcc	.+2      	; 0xe02 <process_sensor+0x228>
     e00:	a9 c1       	rjmp	.+850    	; 0x1154 <process_sensor+0x57a>
     e02:	4c 93       	st	X, r20
     e04:	21 50       	subi	r18, 0x01	; 1
     e06:	30 40       	sbci	r19, 0x00	; 0
     e08:	28 83       	st	Y, r18
     e0a:	39 83       	std	Y+1, r19	; 0x01
     e0c:	80 91 c4 21 	lds	r24, 0x21C4
     e10:	90 91 c5 21 	lds	r25, 0x21C5
     e14:	88 60       	ori	r24, 0x08	; 8
     e16:	80 93 c4 21 	sts	0x21C4, r24
     e1a:	90 93 c5 21 	sts	0x21C5, r25
     e1e:	9a c1       	rjmp	.+820    	; 0x1154 <process_sensor+0x57a>
     e20:	2c 91       	ld	r18, X
     e22:	21 38       	cpi	r18, 0x81	; 129
     e24:	10 f0       	brcs	.+4      	; 0xe2a <process_sensor+0x250>
     e26:	21 50       	subi	r18, 0x01	; 1
     e28:	2c 93       	st	X, r18
     e2a:	fc 01       	movw	r30, r24
     e2c:	ea 51       	subi	r30, 0x1A	; 26
     e2e:	fe 4d       	sbci	r31, 0xDE	; 222
     e30:	80 81       	ld	r24, Z
     e32:	87 fd       	sbrc	r24, 7
     e34:	8f c1       	rjmp	.+798    	; 0x1154 <process_sensor+0x57a>
     e36:	8f 5f       	subi	r24, 0xFF	; 255
     e38:	57 c1       	rjmp	.+686    	; 0x10e8 <process_sensor+0x50e>
     e3a:	c5 01       	movw	r24, r10
     e3c:	b7 fe       	sbrs	r11, 7
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <process_sensor+0x26a>
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	f8 01       	movw	r30, r16
     e46:	ee 0f       	add	r30, r30
     e48:	ff 1f       	adc	r31, r31
     e4a:	82 17       	cp	r24, r18
     e4c:	93 07       	cpc	r25, r19
     e4e:	08 f4       	brcc	.+2      	; 0xe52 <process_sensor+0x278>
     e50:	8f c0       	rjmp	.+286    	; 0xf70 <process_sensor+0x396>
     e52:	80 91 ae 21 	lds	r24, 0x21AE
     e56:	80 93 e5 21 	sts	0x21E5, r24
     e5a:	9f 01       	movw	r18, r30
     e5c:	20 0f       	add	r18, r16
     e5e:	31 1f       	adc	r19, r17
     e60:	22 0f       	add	r18, r18
     e62:	33 1f       	adc	r19, r19
     e64:	d9 01       	movw	r26, r18
     e66:	a2 53       	subi	r26, 0x32	; 50
     e68:	be 4d       	sbci	r27, 0xDE	; 222
     e6a:	8c 91       	ld	r24, X
     e6c:	8f 5f       	subi	r24, 0xFF	; 255
     e6e:	8c 93       	st	X, r24
     e70:	f9 01       	movw	r30, r18
     e72:	e4 53       	subi	r30, 0x34	; 52
     e74:	fe 4d       	sbci	r31, 0xDE	; 222
     e76:	84 81       	ldd	r24, Z+4	; 0x04
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	88 73       	andi	r24, 0x38	; 56
     e7c:	90 70       	andi	r25, 0x00	; 0
     e7e:	23 e0       	ldi	r18, 0x03	; 3
     e80:	96 95       	lsr	r25
     e82:	87 95       	ror	r24
     e84:	2a 95       	dec	r18
     e86:	e1 f7       	brne	.-8      	; 0xe80 <process_sensor+0x2a6>
     e88:	68 2e       	mov	r6, r24
     e8a:	88 23       	and	r24, r24
     e8c:	09 f4       	brne	.+2      	; 0xe90 <process_sensor+0x2b6>
     e8e:	3e c0       	rjmp	.+124    	; 0xf0c <process_sensor+0x332>
     e90:	dd 24       	eor	r13, r13
     e92:	cc 24       	eor	r12, r12
     e94:	7f 01       	movw	r14, r30
     e96:	83 e0       	ldi	r24, 0x03	; 3
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	e8 0e       	add	r14, r24
     e9c:	f9 1e       	adc	r15, r25
     e9e:	4d 01       	movw	r8, r26
     ea0:	2f c0       	rjmp	.+94     	; 0xf00 <process_sensor+0x326>
     ea2:	d7 14       	cp	r13, r7
     ea4:	61 f1       	breq	.+88     	; 0xefe <process_sensor+0x324>
     ea6:	8d 2d       	mov	r24, r13
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	ec 01       	movw	r28, r24
     eac:	cc 0f       	add	r28, r28
     eae:	dd 1f       	adc	r29, r29
     eb0:	c8 0f       	add	r28, r24
     eb2:	d9 1f       	adc	r29, r25
     eb4:	cc 0f       	add	r28, r28
     eb6:	dd 1f       	adc	r29, r29
     eb8:	c4 53       	subi	r28, 0x34	; 52
     eba:	de 4d       	sbci	r29, 0xDE	; 222
     ebc:	8c 81       	ldd	r24, Y+4	; 0x04
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	88 73       	andi	r24, 0x38	; 56
     ec2:	90 70       	andi	r25, 0x00	; 0
     ec4:	73 e0       	ldi	r23, 0x03	; 3
     ec6:	96 95       	lsr	r25
     ec8:	87 95       	ror	r24
     eca:	7a 95       	dec	r23
     ecc:	e1 f7       	brne	.-8      	; 0xec6 <process_sensor+0x2ec>
     ece:	68 16       	cp	r6, r24
     ed0:	b1 f4       	brne	.+44     	; 0xefe <process_sensor+0x324>
     ed2:	8d 2d       	mov	r24, r13
     ed4:	2a dd       	rcall	.-1452   	; 0x92a <qt_get_sensor_delta>
     ed6:	2b 81       	ldd	r18, Y+3	; 0x03
     ed8:	82 1b       	sub	r24, r18
     eda:	91 09       	sbc	r25, r1
     edc:	f7 01       	movw	r30, r14
     ede:	20 81       	ld	r18, Z
     ee0:	a5 01       	movw	r20, r10
     ee2:	42 1b       	sub	r20, r18
     ee4:	51 09       	sbc	r21, r1
     ee6:	48 17       	cp	r20, r24
     ee8:	59 07       	cpc	r21, r25
     eea:	2c f0       	brlt	.+10     	; 0xef6 <process_sensor+0x31c>
     eec:	88 81       	ld	r24, Y
     eee:	80 31       	cpi	r24, 0x10	; 16
     ef0:	11 f0       	breq	.+4      	; 0xef6 <process_sensor+0x31c>
     ef2:	88 30       	cpi	r24, 0x08	; 8
     ef4:	21 f4       	brne	.+8      	; 0xefe <process_sensor+0x324>
     ef6:	f4 01       	movw	r30, r8
     ef8:	10 82       	st	Z, r1
     efa:	cc 24       	eor	r12, r12
     efc:	c3 94       	inc	r12
     efe:	d3 94       	inc	r13
     f00:	80 91 e4 21 	lds	r24, 0x21E4
     f04:	d8 16       	cp	r13, r24
     f06:	68 f2       	brcs	.-102    	; 0xea2 <process_sensor+0x2c8>
     f08:	cc 20       	and	r12, r12
     f0a:	79 f4       	brne	.+30     	; 0xf2a <process_sensor+0x350>
     f0c:	80 91 ad 21 	lds	r24, 0x21AD
     f10:	88 23       	and	r24, r24
     f12:	59 f0       	breq	.+22     	; 0xf2a <process_sensor+0x350>
     f14:	80 91 c4 21 	lds	r24, 0x21C4
     f18:	90 91 c5 21 	lds	r25, 0x21C5
     f1c:	98 60       	ori	r25, 0x08	; 8
     f1e:	80 93 c4 21 	sts	0x21C4, r24
     f22:	90 93 c5 21 	sts	0x21C5, r25
     f26:	41 e0       	ldi	r20, 0x01	; 1
     f28:	01 c0       	rjmp	.+2      	; 0xf2c <process_sensor+0x352>
     f2a:	40 e0       	ldi	r20, 0x00	; 0
     f2c:	98 01       	movw	r18, r16
     f2e:	22 0f       	add	r18, r18
     f30:	33 1f       	adc	r19, r19
     f32:	20 0f       	add	r18, r16
     f34:	31 1f       	adc	r19, r17
     f36:	f9 01       	movw	r30, r18
     f38:	ee 0f       	add	r30, r30
     f3a:	ff 1f       	adc	r31, r31
     f3c:	e2 53       	subi	r30, 0x32	; 50
     f3e:	fe 4d       	sbci	r31, 0xDE	; 222
     f40:	90 81       	ld	r25, Z
     f42:	80 91 ad 21 	lds	r24, 0x21AD
     f46:	98 17       	cp	r25, r24
     f48:	08 f4       	brcc	.+2      	; 0xf4c <process_sensor+0x372>
     f4a:	05 c1       	rjmp	.+522    	; 0x1156 <process_sensor+0x57c>
     f4c:	80 91 c4 21 	lds	r24, 0x21C4
     f50:	90 91 c5 21 	lds	r25, 0x21C5
     f54:	83 60       	ori	r24, 0x03	; 3
     f56:	80 93 c4 21 	sts	0x21C4, r24
     f5a:	90 93 c5 21 	sts	0x21C5, r25
     f5e:	f9 01       	movw	r30, r18
     f60:	ee 0f       	add	r30, r30
     f62:	ff 1f       	adc	r31, r31
     f64:	e4 53       	subi	r30, 0x34	; 52
     f66:	fe 4d       	sbci	r31, 0xDE	; 222
     f68:	80 e1       	ldi	r24, 0x10	; 16
     f6a:	80 83       	st	Z, r24
     f6c:	11 82       	std	Z+1, r1	; 0x01
     f6e:	f3 c0       	rjmp	.+486    	; 0x1156 <process_sensor+0x57c>
     f70:	e0 0f       	add	r30, r16
     f72:	f1 1f       	adc	r31, r17
     f74:	ee 0f       	add	r30, r30
     f76:	ff 1f       	adc	r31, r31
     f78:	df 01       	movw	r26, r30
     f7a:	a4 53       	subi	r26, 0x34	; 52
     f7c:	be 4d       	sbci	r27, 0xDE	; 222
     f7e:	15 96       	adiw	r26, 0x05	; 5
     f80:	2c 91       	ld	r18, X
     f82:	15 97       	sbiw	r26, 0x05	; 5
     f84:	82 e0       	ldi	r24, 0x02	; 2
     f86:	8c 93       	st	X, r24
     f88:	80 91 c4 21 	lds	r24, 0x21C4
     f8c:	90 91 c5 21 	lds	r25, 0x21C5
     f90:	82 60       	ori	r24, 0x02	; 2
     f92:	80 93 c4 21 	sts	0x21C4, r24
     f96:	90 93 c5 21 	sts	0x21C5, r25
     f9a:	e2 53       	subi	r30, 0x32	; 50
     f9c:	fe 4d       	sbci	r31, 0xDE	; 222
     f9e:	10 82       	st	Z, r1
     fa0:	e2 2f       	mov	r30, r18
     fa2:	9e c0       	rjmp	.+316    	; 0x10e0 <process_sensor+0x506>
     fa4:	c5 01       	movw	r24, r10
     fa6:	b7 fe       	sbrs	r11, 7
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <process_sensor+0x3d4>
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	f8 01       	movw	r30, r16
     fb0:	ee 0f       	add	r30, r30
     fb2:	ff 1f       	adc	r31, r31
     fb4:	40 91 c4 21 	lds	r20, 0x21C4
     fb8:	50 91 c5 21 	lds	r21, 0x21C5
     fbc:	86 17       	cp	r24, r22
     fbe:	97 07       	cpc	r25, r23
     fc0:	70 f4       	brcc	.+28     	; 0xfde <process_sensor+0x404>
     fc2:	e0 0f       	add	r30, r16
     fc4:	f1 1f       	adc	r31, r17
     fc6:	ee 0f       	add	r30, r30
     fc8:	ff 1f       	adc	r31, r31
     fca:	e4 53       	subi	r30, 0x34	; 52
     fcc:	fe 4d       	sbci	r31, 0xDE	; 222
     fce:	88 e0       	ldi	r24, 0x08	; 8
     fd0:	80 83       	st	Z, r24
     fd2:	54 60       	ori	r21, 0x04	; 4
     fd4:	40 93 c4 21 	sts	0x21C4, r20
     fd8:	50 93 c5 21 	sts	0x21C5, r21
     fdc:	31 c0       	rjmp	.+98     	; 0x1040 <process_sensor+0x466>
     fde:	41 60       	ori	r20, 0x01	; 1
     fe0:	40 93 c4 21 	sts	0x21C4, r20
     fe4:	50 93 c5 21 	sts	0x21C5, r21
     fe8:	e0 0f       	add	r30, r16
     fea:	f1 1f       	adc	r31, r17
     fec:	ee 0f       	add	r30, r30
     fee:	ff 1f       	adc	r31, r31
     ff0:	e2 53       	subi	r30, 0x32	; 50
     ff2:	fe 4d       	sbci	r31, 0xDE	; 222
     ff4:	90 81       	ld	r25, Z
     ff6:	80 91 ad 21 	lds	r24, 0x21AD
     ffa:	98 17       	cp	r25, r24
     ffc:	10 f4       	brcc	.+4      	; 0x1002 <process_sensor+0x428>
     ffe:	9f 5f       	subi	r25, 0xFF	; 255
    1000:	90 83       	st	Z, r25
    1002:	90 91 af 21 	lds	r25, 0x21AF
    1006:	99 23       	and	r25, r25
    1008:	71 f0       	breq	.+28     	; 0x1026 <process_sensor+0x44c>
    100a:	f8 01       	movw	r30, r16
    100c:	ee 0f       	add	r30, r30
    100e:	ff 1f       	adc	r31, r31
    1010:	e0 0f       	add	r30, r16
    1012:	f1 1f       	adc	r31, r17
    1014:	ee 0f       	add	r30, r30
    1016:	ff 1f       	adc	r31, r31
    1018:	e4 53       	subi	r30, 0x34	; 52
    101a:	fe 4d       	sbci	r31, 0xDE	; 222
    101c:	81 81       	ldd	r24, Z+1	; 0x01
    101e:	89 17       	cp	r24, r25
    1020:	20 f4       	brcc	.+8      	; 0x102a <process_sensor+0x450>
    1022:	8f 0d       	add	r24, r15
    1024:	81 83       	std	Z+1, r24	; 0x01
    1026:	40 e0       	ldi	r20, 0x00	; 0
    1028:	0c c0       	rjmp	.+24     	; 0x1042 <process_sensor+0x468>
    102a:	87 2d       	mov	r24, r7
    102c:	95 dd       	rcall	.-1238   	; 0xb58 <start_cal_sensor>
    102e:	80 91 c4 21 	lds	r24, 0x21C4
    1032:	90 91 c5 21 	lds	r25, 0x21C5
    1036:	92 60       	ori	r25, 0x02	; 2
    1038:	80 93 c4 21 	sts	0x21C4, r24
    103c:	90 93 c5 21 	sts	0x21C5, r25
    1040:	41 e0       	ldi	r20, 0x01	; 1
    1042:	80 91 ae 21 	lds	r24, 0x21AE
    1046:	80 93 e5 21 	sts	0x21E5, r24
    104a:	85 c0       	rjmp	.+266    	; 0x1156 <process_sensor+0x57c>
    104c:	80 91 ae 21 	lds	r24, 0x21AE
    1050:	80 93 e5 21 	sts	0x21E5, r24
    1054:	df 01       	movw	r26, r30
    1056:	aa 0f       	add	r26, r26
    1058:	bb 1f       	adc	r27, r27
    105a:	a2 53       	subi	r26, 0x32	; 50
    105c:	be 4d       	sbci	r27, 0xDE	; 222
    105e:	8c 91       	ld	r24, X
    1060:	88 23       	and	r24, r24
    1062:	89 f1       	breq	.+98     	; 0x10c6 <process_sensor+0x4ec>
    1064:	c5 01       	movw	r24, r10
    1066:	b7 fe       	sbrs	r11, 7
    1068:	02 c0       	rjmp	.+4      	; 0x106e <process_sensor+0x494>
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	40 91 c4 21 	lds	r20, 0x21C4
    1072:	50 91 c5 21 	lds	r21, 0x21C5
    1076:	68 17       	cp	r22, r24
    1078:	79 07       	cpc	r23, r25
    107a:	90 f4       	brcc	.+36     	; 0x10a0 <process_sensor+0x4c6>
    107c:	f8 01       	movw	r30, r16
    107e:	ee 0f       	add	r30, r30
    1080:	ff 1f       	adc	r31, r31
    1082:	e0 0f       	add	r30, r16
    1084:	f1 1f       	adc	r31, r17
    1086:	ee 0f       	add	r30, r30
    1088:	ff 1f       	adc	r31, r31
    108a:	e4 53       	subi	r30, 0x34	; 52
    108c:	fe 4d       	sbci	r31, 0xDE	; 222
    108e:	80 e1       	ldi	r24, 0x10	; 16
    1090:	80 83       	st	Z, r24
    1092:	41 60       	ori	r20, 0x01	; 1
    1094:	40 93 c4 21 	sts	0x21C4, r20
    1098:	50 93 c5 21 	sts	0x21C5, r21
    109c:	40 e0       	ldi	r20, 0x00	; 0
    109e:	06 c0       	rjmp	.+12     	; 0x10ac <process_sensor+0x4d2>
    10a0:	54 60       	ori	r21, 0x04	; 4
    10a2:	40 93 c4 21 	sts	0x21C4, r20
    10a6:	50 93 c5 21 	sts	0x21C5, r21
    10aa:	41 e0       	ldi	r20, 0x01	; 1
    10ac:	f8 01       	movw	r30, r16
    10ae:	ee 0f       	add	r30, r30
    10b0:	ff 1f       	adc	r31, r31
    10b2:	e0 0f       	add	r30, r16
    10b4:	f1 1f       	adc	r31, r17
    10b6:	ee 0f       	add	r30, r30
    10b8:	ff 1f       	adc	r31, r31
    10ba:	e2 53       	subi	r30, 0x32	; 50
    10bc:	fe 4d       	sbci	r31, 0xDE	; 222
    10be:	80 81       	ld	r24, Z
    10c0:	81 50       	subi	r24, 0x01	; 1
    10c2:	80 83       	st	Z, r24
    10c4:	48 c0       	rjmp	.+144    	; 0x1156 <process_sensor+0x57c>
    10c6:	ed 81       	ldd	r30, Y+5	; 0x05
    10c8:	82 e0       	ldi	r24, 0x02	; 2
    10ca:	88 83       	st	Y, r24
    10cc:	80 91 c4 21 	lds	r24, 0x21C4
    10d0:	90 91 c5 21 	lds	r25, 0x21C5
    10d4:	82 60       	ori	r24, 0x02	; 2
    10d6:	80 93 c4 21 	sts	0x21C4, r24
    10da:	90 93 c5 21 	sts	0x21C5, r25
    10de:	1c 92       	st	X, r1
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	ea 51       	subi	r30, 0x1A	; 26
    10e4:	fe 4d       	sbci	r31, 0xDE	; 222
    10e6:	80 e8       	ldi	r24, 0x80	; 128
    10e8:	80 83       	st	Z, r24
    10ea:	34 c0       	rjmp	.+104    	; 0x1154 <process_sensor+0x57a>
    10ec:	99 81       	ldd	r25, Y+1	; 0x01
    10ee:	9f 5f       	subi	r25, 0xFF	; 255
    10f0:	99 83       	std	Y+1, r25	; 0x01
    10f2:	8c 81       	ldd	r24, Y+4	; 0x04
    10f4:	82 fd       	sbrc	r24, 2
    10f6:	17 c0       	rjmp	.+46     	; 0x1126 <process_sensor+0x54c>
    10f8:	ad 81       	ldd	r26, Y+5	; 0x05
    10fa:	82 e0       	ldi	r24, 0x02	; 2
    10fc:	88 83       	st	Y, r24
    10fe:	80 91 c4 21 	lds	r24, 0x21C4
    1102:	90 91 c5 21 	lds	r25, 0x21C5
    1106:	82 60       	ori	r24, 0x02	; 2
    1108:	80 93 c4 21 	sts	0x21C4, r24
    110c:	90 93 c5 21 	sts	0x21C5, r25
    1110:	ee 0f       	add	r30, r30
    1112:	ff 1f       	adc	r31, r31
    1114:	e2 53       	subi	r30, 0x32	; 50
    1116:	fe 4d       	sbci	r31, 0xDE	; 222
    1118:	10 82       	st	Z, r1
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	aa 51       	subi	r26, 0x1A	; 26
    111e:	be 4d       	sbci	r27, 0xDE	; 222
    1120:	80 e8       	ldi	r24, 0x80	; 128
    1122:	8c 93       	st	X, r24
    1124:	17 c0       	rjmp	.+46     	; 0x1154 <process_sensor+0x57a>
    1126:	80 91 b2 21 	lds	r24, 0x21B2
    112a:	98 17       	cp	r25, r24
    112c:	40 f0       	brcs	.+16     	; 0x113e <process_sensor+0x564>
    112e:	87 2d       	mov	r24, r7
    1130:	13 dd       	rcall	.-1498   	; 0xb58 <start_cal_sensor>
    1132:	80 91 c4 21 	lds	r24, 0x21C4
    1136:	90 91 c5 21 	lds	r25, 0x21C5
    113a:	90 61       	ori	r25, 0x10	; 16
    113c:	05 c0       	rjmp	.+10     	; 0x1148 <process_sensor+0x56e>
    113e:	80 91 c4 21 	lds	r24, 0x21C4
    1142:	90 91 c5 21 	lds	r25, 0x21C5
    1146:	94 60       	ori	r25, 0x04	; 4
    1148:	80 93 c4 21 	sts	0x21C4, r24
    114c:	90 93 c5 21 	sts	0x21C5, r25
    1150:	41 e0       	ldi	r20, 0x01	; 1
    1152:	01 c0       	rjmp	.+2      	; 0x1156 <process_sensor+0x57c>
    1154:	40 e0       	ldi	r20, 0x00	; 0
    1156:	84 2f       	mov	r24, r20
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	ee e0       	ldi	r30, 0x0E	; 14
    115e:	0c 94 64 29 	jmp	0x52c8	; 0x52c8 <__epilogue_restores__+0x8>

00001162 <burst_init>:
    1162:	fc 01       	movw	r30, r24
    1164:	00 97       	sbiw	r24, 0x00	; 0
    1166:	09 f0       	breq	.+2      	; 0x116a <burst_init+0x8>
    1168:	19 95       	eicall
    116a:	08 95       	ret

0000116c <burst_reset>:
    116c:	10 92 ea 21 	sts	0x21EA, r1
    1170:	10 92 eb 21 	sts	0x21EB, r1
    1174:	10 92 ee 21 	sts	0x21EE, r1
    1178:	10 92 ef 21 	sts	0x21EF, r1
    117c:	10 92 ec 21 	sts	0x21EC, r1
    1180:	10 92 ed 21 	sts	0x21ED, r1
    1184:	10 92 f0 21 	sts	0x21F0, r1
    1188:	10 92 f1 21 	sts	0x21F1, r1
    118c:	08 95       	ret

0000118e <burst>:
    118e:	80 91 ec 21 	lds	r24, 0x21EC
    1192:	90 91 ea 21 	lds	r25, 0x21EA
    1196:	89 2b       	or	r24, r25
    1198:	41 f0       	breq	.+16     	; 0x11aa <burst+0x1c>
    119a:	e0 91 aa 21 	lds	r30, 0x21AA
    119e:	f0 91 ab 21 	lds	r31, 0x21AB
    11a2:	30 97       	sbiw	r30, 0x00	; 0
    11a4:	11 f0       	breq	.+4      	; 0x11aa <burst+0x1c>
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	19 95       	eicall
    11aa:	80 91 ed 21 	lds	r24, 0x21ED
    11ae:	90 91 eb 21 	lds	r25, 0x21EB
    11b2:	89 2b       	or	r24, r25
    11b4:	41 f0       	breq	.+16     	; 0x11c6 <burst+0x38>
    11b6:	e0 91 aa 21 	lds	r30, 0x21AA
    11ba:	f0 91 ab 21 	lds	r31, 0x21AB
    11be:	30 97       	sbiw	r30, 0x00	; 0
    11c0:	11 f0       	breq	.+4      	; 0x11c6 <burst+0x38>
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	19 95       	eicall
    11c6:	08 95       	ret

000011c8 <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
    11c8:	cf 92       	push	r12
    11ca:	df 92       	push	r13
    11cc:	ef 92       	push	r14
    11ce:	ff 92       	push	r15
    11d0:	0f 93       	push	r16
    11d2:	1f 93       	push	r17
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	1f 92       	push	r1
    11da:	1f 92       	push	r1
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
 */
static inline void st7565r_hard_reset(void)
{
	// us delay is given by cpu_cykl = CPU_Mhz * us_delay / while_loop_cycles
	uint8_t delay_start = (sysclk_get_cpu_hz() / 1000000) * 10 / 10;
	volatile uint8_t delay = delay_start;
    11e0:	88 e1       	ldi	r24, 0x18	; 24
    11e2:	8a 83       	std	Y+2, r24	; 0x02
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    11e4:	88 e0       	ldi	r24, 0x08	; 8
    11e6:	e0 e0       	ldi	r30, 0x00	; 0
    11e8:	f6 e0       	ldi	r31, 0x06	; 6
    11ea:	86 83       	std	Z+6, r24	; 0x06
	gpio_set_pin_low(ST7565R_RESET_PIN);
	while (delay--) {
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	98 2f       	mov	r25, r24
    11f0:	91 50       	subi	r25, 0x01	; 1
    11f2:	9a 83       	std	Y+2, r25	; 0x02
    11f4:	81 11       	cpse	r24, r1
    11f6:	fa cf       	rjmp	.-12     	; 0x11ec <st7565r_init+0x24>
		// Intentionally left blank
	}
	delay = delay_start;
    11f8:	88 e1       	ldi	r24, 0x18	; 24
    11fa:	8a 83       	std	Y+2, r24	; 0x02
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    11fc:	88 e0       	ldi	r24, 0x08	; 8
    11fe:	e0 e0       	ldi	r30, 0x00	; 0
    1200:	f6 e0       	ldi	r31, 0x06	; 6
    1202:	85 83       	std	Z+5, r24	; 0x05
	gpio_set_pin_high(ST7565R_RESET_PIN);
	while (delay--) {
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	98 2f       	mov	r25, r24
    1208:	91 50       	subi	r25, 0x01	; 1
    120a:	9a 83       	std	Y+2, r25	; 0x02
    120c:	81 11       	cpse	r24, r1
    120e:	fa cf       	rjmp	.-12     	; 0x1204 <st7565r_init+0x3c>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
    1210:	8b e2       	ldi	r24, 0x2B	; 43
    1212:	89 83       	std	Y+1, r24	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
    1214:	80 ea       	ldi	r24, 0xA0	; 160
    1216:	99 e0       	ldi	r25, 0x09	; 9
    1218:	ec d5       	rcall	.+3032   	; 0x1df2 <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
    121a:	c1 2c       	mov	r12, r1
    121c:	d1 2c       	mov	r13, r1
    121e:	76 01       	movw	r14, r12
    1220:	00 e0       	ldi	r16, 0x00	; 0
    1222:	12 e1       	ldi	r17, 0x12	; 18
    1224:	2a e7       	ldi	r18, 0x7A	; 122
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	43 e0       	ldi	r20, 0x03	; 3
    122a:	be 01       	movw	r22, r28
    122c:	6f 5f       	subi	r22, 0xFF	; 255
    122e:	7f 4f       	sbci	r23, 0xFF	; 255
    1230:	80 ea       	ldi	r24, 0xA0	; 160
    1232:	99 e0       	ldi	r25, 0x09	; 9
    1234:	08 d6       	rcall	.+3088   	; 0x1e46 <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1236:	e0 e6       	ldi	r30, 0x60	; 96
    1238:	f6 e0       	ldi	r31, 0x06	; 6
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	86 83       	std	Z+6, r24	; 0x06
    123e:	98 e0       	ldi	r25, 0x08	; 8
    1240:	a0 ea       	ldi	r26, 0xA0	; 160
    1242:	b6 e0       	ldi	r27, 0x06	; 6
    1244:	16 96       	adiw	r26, 0x06	; 6
    1246:	9c 93       	st	X, r25
    1248:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    124a:	e0 ea       	ldi	r30, 0xA0	; 160
    124c:	f9 e0       	ldi	r31, 0x09	; 9
    124e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    1250:	85 ff       	sbrs	r24, 5
    1252:	fd cf       	rjmp	.-6      	; 0x124e <st7565r_init+0x86>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1254:	80 ea       	ldi	r24, 0xA0	; 160
    1256:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    125a:	e0 ea       	ldi	r30, 0xA0	; 160
    125c:	f9 e0       	ldi	r31, 0x09	; 9
    125e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1260:	86 ff       	sbrs	r24, 6
    1262:	fd cf       	rjmp	.-6      	; 0x125e <st7565r_init+0x96>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    1264:	e0 ea       	ldi	r30, 0xA0	; 160
    1266:	f9 e0       	ldi	r31, 0x09	; 9
    1268:	80 e4       	ldi	r24, 0x40	; 64
    126a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    126c:	80 81       	ld	r24, Z
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    126e:	e0 ea       	ldi	r30, 0xA0	; 160
    1270:	f6 e0       	ldi	r31, 0x06	; 6
    1272:	88 e0       	ldi	r24, 0x08	; 8
    1274:	85 83       	std	Z+5, r24	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1276:	86 83       	std	Z+6, r24	; 0x06
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	e0 e6       	ldi	r30, 0x60	; 96
    127c:	f6 e0       	ldi	r31, 0x06	; 6
    127e:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    1280:	e0 ea       	ldi	r30, 0xA0	; 160
    1282:	f9 e0       	ldi	r31, 0x09	; 9
    1284:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    1286:	85 ff       	sbrs	r24, 5
    1288:	fd cf       	rjmp	.-6      	; 0x1284 <st7565r_init+0xbc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    128a:	86 ea       	ldi	r24, 0xA6	; 166
    128c:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1290:	e0 ea       	ldi	r30, 0xA0	; 160
    1292:	f9 e0       	ldi	r31, 0x09	; 9
    1294:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1296:	86 ff       	sbrs	r24, 6
    1298:	fd cf       	rjmp	.-6      	; 0x1294 <st7565r_init+0xcc>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    129a:	e0 ea       	ldi	r30, 0xA0	; 160
    129c:	f9 e0       	ldi	r31, 0x09	; 9
    129e:	80 e4       	ldi	r24, 0x40	; 64
    12a0:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    12a2:	80 81       	ld	r24, Z
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    12a4:	e0 ea       	ldi	r30, 0xA0	; 160
    12a6:	f6 e0       	ldi	r31, 0x06	; 6
    12a8:	88 e0       	ldi	r24, 0x08	; 8
    12aa:	85 83       	std	Z+5, r24	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    12ac:	86 83       	std	Z+6, r24	; 0x06
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	e0 e6       	ldi	r30, 0x60	; 96
    12b2:	f6 e0       	ldi	r31, 0x06	; 6
    12b4:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    12b6:	e0 ea       	ldi	r30, 0xA0	; 160
    12b8:	f9 e0       	ldi	r31, 0x09	; 9
    12ba:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    12bc:	85 ff       	sbrs	r24, 5
    12be:	fd cf       	rjmp	.-6      	; 0x12ba <st7565r_init+0xf2>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    12c0:	88 ec       	ldi	r24, 0xC8	; 200
    12c2:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    12c6:	e0 ea       	ldi	r30, 0xA0	; 160
    12c8:	f9 e0       	ldi	r31, 0x09	; 9
    12ca:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    12cc:	86 ff       	sbrs	r24, 6
    12ce:	fd cf       	rjmp	.-6      	; 0x12ca <st7565r_init+0x102>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    12d0:	e0 ea       	ldi	r30, 0xA0	; 160
    12d2:	f9 e0       	ldi	r31, 0x09	; 9
    12d4:	80 e4       	ldi	r24, 0x40	; 64
    12d6:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    12d8:	80 81       	ld	r24, Z
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    12da:	e0 ea       	ldi	r30, 0xA0	; 160
    12dc:	f6 e0       	ldi	r31, 0x06	; 6
    12de:	88 e0       	ldi	r24, 0x08	; 8
    12e0:	85 83       	std	Z+5, r24	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    12e2:	86 83       	std	Z+6, r24	; 0x06
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	e0 e6       	ldi	r30, 0x60	; 96
    12e8:	f6 e0       	ldi	r31, 0x06	; 6
    12ea:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    12ec:	e0 ea       	ldi	r30, 0xA0	; 160
    12ee:	f9 e0       	ldi	r31, 0x09	; 9
    12f0:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    12f2:	85 ff       	sbrs	r24, 5
    12f4:	fd cf       	rjmp	.-6      	; 0x12f0 <st7565r_init+0x128>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    12f6:	82 ea       	ldi	r24, 0xA2	; 162
    12f8:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    12fc:	e0 ea       	ldi	r30, 0xA0	; 160
    12fe:	f9 e0       	ldi	r31, 0x09	; 9
    1300:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1302:	86 ff       	sbrs	r24, 6
    1304:	fd cf       	rjmp	.-6      	; 0x1300 <st7565r_init+0x138>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    1306:	e0 ea       	ldi	r30, 0xA0	; 160
    1308:	f9 e0       	ldi	r31, 0x09	; 9
    130a:	80 e4       	ldi	r24, 0x40	; 64
    130c:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    130e:	80 81       	ld	r24, Z
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1310:	e0 ea       	ldi	r30, 0xA0	; 160
    1312:	f6 e0       	ldi	r31, 0x06	; 6
    1314:	88 e0       	ldi	r24, 0x08	; 8
    1316:	85 83       	std	Z+5, r24	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1318:	86 83       	std	Z+6, r24	; 0x06
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	e0 e6       	ldi	r30, 0x60	; 96
    131e:	f6 e0       	ldi	r31, 0x06	; 6
    1320:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    1322:	e0 ea       	ldi	r30, 0xA0	; 160
    1324:	f9 e0       	ldi	r31, 0x09	; 9
    1326:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    1328:	85 ff       	sbrs	r24, 5
    132a:	fd cf       	rjmp	.-6      	; 0x1326 <st7565r_init+0x15e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    132c:	8f e2       	ldi	r24, 0x2F	; 47
    132e:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1332:	e0 ea       	ldi	r30, 0xA0	; 160
    1334:	f9 e0       	ldi	r31, 0x09	; 9
    1336:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1338:	86 ff       	sbrs	r24, 6
    133a:	fd cf       	rjmp	.-6      	; 0x1336 <st7565r_init+0x16e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    133c:	e0 ea       	ldi	r30, 0xA0	; 160
    133e:	f9 e0       	ldi	r31, 0x09	; 9
    1340:	80 e4       	ldi	r24, 0x40	; 64
    1342:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1344:	80 81       	ld	r24, Z
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1346:	e0 ea       	ldi	r30, 0xA0	; 160
    1348:	f6 e0       	ldi	r31, 0x06	; 6
    134a:	88 e0       	ldi	r24, 0x08	; 8
    134c:	85 83       	std	Z+5, r24	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    134e:	86 83       	std	Z+6, r24	; 0x06
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	e0 e6       	ldi	r30, 0x60	; 96
    1354:	f6 e0       	ldi	r31, 0x06	; 6
    1356:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    1358:	e0 ea       	ldi	r30, 0xA0	; 160
    135a:	f9 e0       	ldi	r31, 0x09	; 9
    135c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    135e:	85 ff       	sbrs	r24, 5
    1360:	fd cf       	rjmp	.-6      	; 0x135c <st7565r_init+0x194>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1362:	88 ef       	ldi	r24, 0xF8	; 248
    1364:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1368:	e0 ea       	ldi	r30, 0xA0	; 160
    136a:	f9 e0       	ldi	r31, 0x09	; 9
    136c:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    136e:	86 ff       	sbrs	r24, 6
    1370:	fd cf       	rjmp	.-6      	; 0x136c <st7565r_init+0x1a4>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    1372:	e0 ea       	ldi	r30, 0xA0	; 160
    1374:	f9 e0       	ldi	r31, 0x09	; 9
    1376:	80 e4       	ldi	r24, 0x40	; 64
    1378:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    137a:	80 81       	ld	r24, Z
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    137c:	e0 ea       	ldi	r30, 0xA0	; 160
    137e:	f6 e0       	ldi	r31, 0x06	; 6
    1380:	88 e0       	ldi	r24, 0x08	; 8
    1382:	85 83       	std	Z+5, r24	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1384:	86 83       	std	Z+6, r24	; 0x06
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	e0 e6       	ldi	r30, 0x60	; 96
    138a:	f6 e0       	ldi	r31, 0x06	; 6
    138c:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    138e:	e0 ea       	ldi	r30, 0xA0	; 160
    1390:	f9 e0       	ldi	r31, 0x09	; 9
    1392:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    1394:	85 ff       	sbrs	r24, 5
    1396:	fd cf       	rjmp	.-6      	; 0x1392 <st7565r_init+0x1ca>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1398:	10 92 a0 09 	sts	0x09A0, r1
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    139c:	e0 ea       	ldi	r30, 0xA0	; 160
    139e:	f9 e0       	ldi	r31, 0x09	; 9
    13a0:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    13a2:	86 ff       	sbrs	r24, 6
    13a4:	fd cf       	rjmp	.-6      	; 0x13a0 <st7565r_init+0x1d8>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    13a6:	e0 ea       	ldi	r30, 0xA0	; 160
    13a8:	f9 e0       	ldi	r31, 0x09	; 9
    13aa:	80 e4       	ldi	r24, 0x40	; 64
    13ac:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    13ae:	80 81       	ld	r24, Z
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    13b0:	e0 ea       	ldi	r30, 0xA0	; 160
    13b2:	f6 e0       	ldi	r31, 0x06	; 6
    13b4:	88 e0       	ldi	r24, 0x08	; 8
    13b6:	85 83       	std	Z+5, r24	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    13b8:	86 83       	std	Z+6, r24	; 0x06
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	e0 e6       	ldi	r30, 0x60	; 96
    13be:	f6 e0       	ldi	r31, 0x06	; 6
    13c0:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    13c2:	e0 ea       	ldi	r30, 0xA0	; 160
    13c4:	f9 e0       	ldi	r31, 0x09	; 9
    13c6:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    13c8:	85 ff       	sbrs	r24, 5
    13ca:	fd cf       	rjmp	.-6      	; 0x13c6 <st7565r_init+0x1fe>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    13cc:	81 e2       	ldi	r24, 0x21	; 33
    13ce:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    13d2:	e0 ea       	ldi	r30, 0xA0	; 160
    13d4:	f9 e0       	ldi	r31, 0x09	; 9
    13d6:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    13d8:	86 ff       	sbrs	r24, 6
    13da:	fd cf       	rjmp	.-6      	; 0x13d6 <st7565r_init+0x20e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    13dc:	e0 ea       	ldi	r30, 0xA0	; 160
    13de:	f9 e0       	ldi	r31, 0x09	; 9
    13e0:	80 e4       	ldi	r24, 0x40	; 64
    13e2:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    13e4:	80 81       	ld	r24, Z
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    13e6:	e0 ea       	ldi	r30, 0xA0	; 160
    13e8:	f6 e0       	ldi	r31, 0x06	; 6
    13ea:	88 e0       	ldi	r24, 0x08	; 8
    13ec:	85 83       	std	Z+5, r24	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    13ee:	86 83       	std	Z+6, r24	; 0x06
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	e0 e6       	ldi	r30, 0x60	; 96
    13f4:	f6 e0       	ldi	r31, 0x06	; 6
    13f6:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    13f8:	e0 ea       	ldi	r30, 0xA0	; 160
    13fa:	f9 e0       	ldi	r31, 0x09	; 9
    13fc:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    13fe:	85 ff       	sbrs	r24, 5
    1400:	fd cf       	rjmp	.-6      	; 0x13fc <st7565r_init+0x234>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1402:	81 e8       	ldi	r24, 0x81	; 129
    1404:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1408:	e0 ea       	ldi	r30, 0xA0	; 160
    140a:	f9 e0       	ldi	r31, 0x09	; 9
    140c:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    140e:	86 ff       	sbrs	r24, 6
    1410:	fd cf       	rjmp	.-6      	; 0x140c <st7565r_init+0x244>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    1412:	e0 ea       	ldi	r30, 0xA0	; 160
    1414:	f9 e0       	ldi	r31, 0x09	; 9
    1416:	80 e4       	ldi	r24, 0x40	; 64
    1418:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    141a:	80 81       	ld	r24, Z
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    141c:	e0 ea       	ldi	r30, 0xA0	; 160
    141e:	f6 e0       	ldi	r31, 0x06	; 6
    1420:	88 e0       	ldi	r24, 0x08	; 8
    1422:	85 83       	std	Z+5, r24	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1424:	86 83       	std	Z+6, r24	; 0x06
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	e0 e6       	ldi	r30, 0x60	; 96
    142a:	f6 e0       	ldi	r31, 0x06	; 6
    142c:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    142e:	e0 ea       	ldi	r30, 0xA0	; 160
    1430:	f9 e0       	ldi	r31, 0x09	; 9
    1432:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    1434:	85 ff       	sbrs	r24, 5
    1436:	fd cf       	rjmp	.-6      	; 0x1432 <st7565r_init+0x26a>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1438:	81 e2       	ldi	r24, 0x21	; 33
    143a:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    143e:	e0 ea       	ldi	r30, 0xA0	; 160
    1440:	f9 e0       	ldi	r31, 0x09	; 9
    1442:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1444:	86 ff       	sbrs	r24, 6
    1446:	fd cf       	rjmp	.-6      	; 0x1442 <st7565r_init+0x27a>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    1448:	e0 ea       	ldi	r30, 0xA0	; 160
    144a:	f9 e0       	ldi	r31, 0x09	; 9
    144c:	80 e4       	ldi	r24, 0x40	; 64
    144e:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1450:	80 81       	ld	r24, Z
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1452:	e0 ea       	ldi	r30, 0xA0	; 160
    1454:	f6 e0       	ldi	r31, 0x06	; 6
    1456:	88 e0       	ldi	r24, 0x08	; 8
    1458:	85 83       	std	Z+5, r24	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    145a:	86 83       	std	Z+6, r24	; 0x06
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	e0 e6       	ldi	r30, 0x60	; 96
    1460:	f6 e0       	ldi	r31, 0x06	; 6
    1462:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    1464:	e0 ea       	ldi	r30, 0xA0	; 160
    1466:	f9 e0       	ldi	r31, 0x09	; 9
    1468:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    146a:	85 ff       	sbrs	r24, 5
    146c:	fd cf       	rjmp	.-6      	; 0x1468 <st7565r_init+0x2a0>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    146e:	8f ea       	ldi	r24, 0xAF	; 175
    1470:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1474:	e0 ea       	ldi	r30, 0xA0	; 160
    1476:	f9 e0       	ldi	r31, 0x09	; 9
    1478:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    147a:	86 ff       	sbrs	r24, 6
    147c:	fd cf       	rjmp	.-6      	; 0x1478 <st7565r_init+0x2b0>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    147e:	e0 ea       	ldi	r30, 0xA0	; 160
    1480:	f9 e0       	ldi	r31, 0x09	; 9
    1482:	80 e4       	ldi	r24, 0x40	; 64
    1484:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1486:	80 81       	ld	r24, Z
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1488:	88 e0       	ldi	r24, 0x08	; 8
    148a:	e0 ea       	ldi	r30, 0xA0	; 160
    148c:	f6 e0       	ldi	r31, 0x06	; 6
    148e:	85 83       	std	Z+5, r24	; 0x05
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	df 91       	pop	r29
    1496:	cf 91       	pop	r28
    1498:	1f 91       	pop	r17
    149a:	0f 91       	pop	r16
    149c:	ff 90       	pop	r15
    149e:	ef 90       	pop	r14
    14a0:	df 90       	pop	r13
    14a2:	cf 90       	pop	r12
    14a4:	08 95       	ret

000014a6 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    14a6:	0f 93       	push	r16
    14a8:	1f 93       	push	r17
    14aa:	cf 93       	push	r28
    14ac:	df 93       	push	r29
    14ae:	00 d0       	rcall	.+0      	; 0x14b0 <sysclk_init+0xa>
    14b0:	1f 92       	push	r1
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    14b6:	8f ef       	ldi	r24, 0xFF	; 255
    14b8:	80 93 70 00 	sts	0x0070, r24
    14bc:	80 93 71 00 	sts	0x0071, r24
    14c0:	80 93 72 00 	sts	0x0072, r24
    14c4:	80 93 73 00 	sts	0x0073, r24
    14c8:	80 93 74 00 	sts	0x0074, r24
    14cc:	80 93 75 00 	sts	0x0075, r24
    14d0:	80 93 76 00 	sts	0x0076, r24
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    14d4:	64 e0       	ldi	r22, 0x04	; 4
    14d6:	81 e4       	ldi	r24, 0x41	; 65
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	0e 94 0a 19 	call	0x3214	; 0x3214 <ccp_write_io>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    14de:	6c e1       	ldi	r22, 0x1C	; 28
    14e0:	70 e0       	ldi	r23, 0x00	; 0
    14e2:	82 e0       	ldi	r24, 0x02	; 2
    14e4:	0e 94 2a 19 	call	0x3254	; 0x3254 <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    14e8:	8a 83       	std	Y+2, r24	; 0x02
    14ea:	6d e1       	ldi	r22, 0x1D	; 29
    14ec:	70 e0       	ldi	r23, 0x00	; 0
    14ee:	82 e0       	ldi	r24, 0x02	; 2
    14f0:	0e 94 2a 19 	call	0x3254	; 0x3254 <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    14f4:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
    14f8:	9a 81       	ldd	r25, Y+2	; 0x02
    14fa:	01 96       	adiw	r24, 0x01	; 1
    14fc:	21 f4       	brne	.+8      	; 0x1506 <sysclk_init+0x60>
		cal = 0x2340;
    14fe:	80 e4       	ldi	r24, 0x40	; 64
    1500:	93 e2       	ldi	r25, 0x23	; 35
    1502:	89 83       	std	Y+1, r24	; 0x01
    1504:	9a 83       	std	Y+2, r25	; 0x02
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	9a 81       	ldd	r25, Y+2	; 0x02
    150a:	8b 83       	std	Y+3, r24	; 0x03
    150c:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALA=LSB(calib);
		DFLLRC2M.CALB=MSB(calib);
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    150e:	e0 e6       	ldi	r30, 0x60	; 96
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    1514:	8c 81       	ldd	r24, Y+4	; 0x04
    1516:	83 83       	std	Z+3, r24	; 0x03

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1518:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    151a:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    151c:	e0 e5       	ldi	r30, 0x50	; 80
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	90 81       	ld	r25, Z
    1522:	92 60       	ori	r25, 0x02	; 2
    1524:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1526:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1528:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    152a:	81 ff       	sbrs	r24, 1
    152c:	fd cf       	rjmp	.-6      	; 0x1528 <sysclk_init+0x82>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    152e:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1530:	f8 94       	cli
#if XMEGA_AU || XMEGA_B || XMEGA_C
		Assert((ref_id == OSC_ID_RC32KHZ)
				|| (ref_id == OSC_ID_XOSC)
				|| (ref_id == OSC_ID_USBSOF));

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    1532:	00 e5       	ldi	r16, 0x50	; 80
    1534:	10 e0       	ldi	r17, 0x00	; 0
    1536:	d8 01       	movw	r26, r16
    1538:	16 96       	adiw	r26, 0x06	; 6
    153a:	9c 91       	ld	r25, X
    153c:	16 97       	sbiw	r26, 0x06	; 6
    153e:	99 7f       	andi	r25, 0xF9	; 249
    1540:	16 96       	adiw	r26, 0x06	; 6
    1542:	9c 93       	st	X, r25
    1544:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    1546:	e0 e6       	ldi	r30, 0x60	; 96
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	90 e8       	ldi	r25, 0x80	; 128
    154c:	95 83       	std	Z+5, r25	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    154e:	9b eb       	ldi	r25, 0xBB	; 187
    1550:	96 83       	std	Z+6, r25	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    1552:	16 96       	adiw	r26, 0x06	; 6
    1554:	9c 91       	ld	r25, X
    1556:	16 97       	sbiw	r26, 0x06	; 6
    1558:	94 60       	ori	r25, 0x04	; 4
    155a:	16 96       	adiw	r26, 0x06	; 6
    155c:	9c 93       	st	X, r25
		}
		else if (ref_id == OSC_ID_RC32KHZ) {
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
		}
#endif
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    155e:	90 81       	ld	r25, Z
    1560:	91 60       	ori	r25, 0x01	; 1
    1562:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1564:	8f bf       	out	0x3f, r24	; 63
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    1566:	61 e0       	ldi	r22, 0x01	; 1
    1568:	80 e4       	ldi	r24, 0x40	; 64
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	0e 94 0a 19 	call	0x3214	; 0x3214 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1570:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1572:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    1574:	f8 01       	movw	r30, r16
    1576:	90 81       	ld	r25, Z
    1578:	9e 7f       	andi	r25, 0xFE	; 254
    157a:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    157c:	8f bf       	out	0x3f, r24	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    157e:	24 96       	adiw	r28, 0x04	; 4
    1580:	cd bf       	out	0x3d, r28	; 61
    1582:	de bf       	out	0x3e, r29	; 62
    1584:	df 91       	pop	r29
    1586:	cf 91       	pop	r28
    1588:	1f 91       	pop	r17
    158a:	0f 91       	pop	r16
    158c:	08 95       	ret

0000158e <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    158e:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1590:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1592:	e8 2f       	mov	r30, r24
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	e0 59       	subi	r30, 0x90	; 144
    1598:	ff 4f       	sbci	r31, 0xFF	; 255
    159a:	60 95       	com	r22
    159c:	80 81       	ld	r24, Z
    159e:	68 23       	and	r22, r24
    15a0:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    15a2:	9f bf       	out	0x3f, r25	; 63
    15a4:	08 95       	ret

000015a6 <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    15a6:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    15a8:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    15aa:	e8 2f       	mov	r30, r24
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	e0 59       	subi	r30, 0x90	; 144
    15b0:	ff 4f       	sbci	r31, 0xFF	; 255
    15b2:	80 81       	ld	r24, Z
    15b4:	68 2b       	or	r22, r24
    15b6:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    15b8:	9f bf       	out	0x3f, r25	; 63
    15ba:	08 95       	ret

000015bc <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    15bc:	86 30       	cpi	r24, 0x06	; 6
    15be:	11 f4       	brne	.+4      	; 0x15c4 <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
    15c0:	68 e1       	ldi	r22, 0x18	; 24
    15c2:	01 c0       	rjmp	.+2      	; 0x15c6 <sysclk_enable_usb+0xa>
	}
	else {
		prescaler = 0;
    15c4:	60 e0       	ldi	r22, 0x00	; 0

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    15c6:	e0 e5       	ldi	r30, 0x50	; 80
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	81 81       	ldd	r24, Z+1	; 0x01
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    15cc:	81 fd       	sbrc	r24, 1
    15ce:	24 c0       	rjmp	.+72     	; 0x1618 <sysclk_enable_usb+0x5c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    15d0:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    15d2:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    15d4:	90 81       	ld	r25, Z
    15d6:	92 60       	ori	r25, 0x02	; 2
    15d8:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    15da:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    15dc:	81 81       	ldd	r24, Z+1	; 0x01
    15de:	81 ff       	sbrs	r24, 1
    15e0:	fd cf       	rjmp	.-6      	; 0x15dc <sysclk_enable_usb+0x20>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    15e2:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    15e4:	f8 94       	cli
#if XMEGA_AU || XMEGA_B || XMEGA_C
		Assert((ref_id == OSC_ID_RC32KHZ)
				|| (ref_id == OSC_ID_XOSC)
				|| (ref_id == OSC_ID_USBSOF));

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    15e6:	a0 e5       	ldi	r26, 0x50	; 80
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	16 96       	adiw	r26, 0x06	; 6
    15ec:	9c 91       	ld	r25, X
    15ee:	16 97       	sbiw	r26, 0x06	; 6
    15f0:	99 7f       	andi	r25, 0xF9	; 249
    15f2:	16 96       	adiw	r26, 0x06	; 6
    15f4:	9c 93       	st	X, r25
    15f6:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    15f8:	e0 e6       	ldi	r30, 0x60	; 96
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	90 e8       	ldi	r25, 0x80	; 128
    15fe:	95 83       	std	Z+5, r25	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    1600:	9b eb       	ldi	r25, 0xBB	; 187
    1602:	96 83       	std	Z+6, r25	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    1604:	16 96       	adiw	r26, 0x06	; 6
    1606:	9c 91       	ld	r25, X
    1608:	16 97       	sbiw	r26, 0x06	; 6
    160a:	94 60       	ori	r25, 0x04	; 4
    160c:	16 96       	adiw	r26, 0x06	; 6
    160e:	9c 93       	st	X, r25
		}
		else if (ref_id == OSC_ID_RC32KHZ) {
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
		}
#endif
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    1610:	90 81       	ld	r25, Z
    1612:	91 60       	ori	r25, 0x01	; 1
    1614:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1616:	8f bf       	out	0x3f, r24	; 63
#ifdef CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    1618:	63 60       	ori	r22, 0x03	; 3
    161a:	84 e4       	ldi	r24, 0x44	; 68
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	0e 94 0a 19 	call	0x3214	; 0x3214 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    1622:	60 e4       	ldi	r22, 0x40	; 64
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	b3 cf       	rjmp	.-154    	; 0x158e <sysclk_enable_module>

00001628 <gfx_mono_st7565r_put_page>:

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
	pixel_mask = (1 << (y - (page * 8)));

	return gfx_mono_get_byte(page, x) & pixel_mask;
}
    1628:	ef 92       	push	r14
    162a:	ff 92       	push	r15
    162c:	0f 93       	push	r16
    162e:	1f 93       	push	r17
    1630:	cf 93       	push	r28
    1632:	df 93       	push	r29
    1634:	ec 01       	movw	r28, r24
    1636:	f6 2e       	mov	r15, r22
    1638:	04 2f       	mov	r16, r20
    163a:	12 2f       	mov	r17, r18
    163c:	a2 d1       	rcall	.+836    	; 0x1982 <gfx_mono_framebuffer_put_page>
    163e:	9f 2d       	mov	r25, r15
    1640:	9f 70       	andi	r25, 0x0F	; 15
    1642:	90 6b       	ori	r25, 0xB0	; 176
    1644:	88 e0       	ldi	r24, 0x08	; 8
    1646:	e0 ea       	ldi	r30, 0xA0	; 160
    1648:	f6 e0       	ldi	r31, 0x06	; 6
    164a:	86 83       	std	Z+6, r24	; 0x06
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	e0 e6       	ldi	r30, 0x60	; 96
    1650:	f6 e0       	ldi	r31, 0x06	; 6
    1652:	86 83       	std	Z+6, r24	; 0x06
    1654:	e0 ea       	ldi	r30, 0xA0	; 160
    1656:	f9 e0       	ldi	r31, 0x09	; 9
    1658:	81 81       	ldd	r24, Z+1	; 0x01
    165a:	85 ff       	sbrs	r24, 5
    165c:	fd cf       	rjmp	.-6      	; 0x1658 <gfx_mono_st7565r_put_page+0x30>
    165e:	90 93 a0 09 	sts	0x09A0, r25
    1662:	e0 ea       	ldi	r30, 0xA0	; 160
    1664:	f9 e0       	ldi	r31, 0x09	; 9
    1666:	81 81       	ldd	r24, Z+1	; 0x01
    1668:	86 ff       	sbrs	r24, 6
    166a:	fd cf       	rjmp	.-6      	; 0x1666 <gfx_mono_st7565r_put_page+0x3e>
    166c:	e0 ea       	ldi	r30, 0xA0	; 160
    166e:	f9 e0       	ldi	r31, 0x09	; 9
    1670:	80 e4       	ldi	r24, 0x40	; 64
    1672:	81 83       	std	Z+1, r24	; 0x01
    1674:	80 81       	ld	r24, Z
    1676:	e0 ea       	ldi	r30, 0xA0	; 160
    1678:	f6 e0       	ldi	r31, 0x06	; 6
    167a:	88 e0       	ldi	r24, 0x08	; 8
    167c:	85 83       	std	Z+5, r24	; 0x05
    167e:	90 2f       	mov	r25, r16
    1680:	9f 77       	andi	r25, 0x7F	; 127
    1682:	92 95       	swap	r25
    1684:	9f 70       	andi	r25, 0x0F	; 15
    1686:	90 61       	ori	r25, 0x10	; 16
    1688:	86 83       	std	Z+6, r24	; 0x06
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	e0 e6       	ldi	r30, 0x60	; 96
    168e:	f6 e0       	ldi	r31, 0x06	; 6
    1690:	86 83       	std	Z+6, r24	; 0x06
    1692:	e0 ea       	ldi	r30, 0xA0	; 160
    1694:	f9 e0       	ldi	r31, 0x09	; 9
    1696:	81 81       	ldd	r24, Z+1	; 0x01
    1698:	85 ff       	sbrs	r24, 5
    169a:	fd cf       	rjmp	.-6      	; 0x1696 <gfx_mono_st7565r_put_page+0x6e>
    169c:	90 93 a0 09 	sts	0x09A0, r25
    16a0:	e0 ea       	ldi	r30, 0xA0	; 160
    16a2:	f9 e0       	ldi	r31, 0x09	; 9
    16a4:	81 81       	ldd	r24, Z+1	; 0x01
    16a6:	86 ff       	sbrs	r24, 6
    16a8:	fd cf       	rjmp	.-6      	; 0x16a4 <gfx_mono_st7565r_put_page+0x7c>
    16aa:	e0 ea       	ldi	r30, 0xA0	; 160
    16ac:	f9 e0       	ldi	r31, 0x09	; 9
    16ae:	80 e4       	ldi	r24, 0x40	; 64
    16b0:	81 83       	std	Z+1, r24	; 0x01
    16b2:	80 81       	ld	r24, Z
    16b4:	e0 ea       	ldi	r30, 0xA0	; 160
    16b6:	f6 e0       	ldi	r31, 0x06	; 6
    16b8:	88 e0       	ldi	r24, 0x08	; 8
    16ba:	85 83       	std	Z+5, r24	; 0x05
    16bc:	0f 70       	andi	r16, 0x0F	; 15
    16be:	86 83       	std	Z+6, r24	; 0x06
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	e0 e6       	ldi	r30, 0x60	; 96
    16c4:	f6 e0       	ldi	r31, 0x06	; 6
    16c6:	86 83       	std	Z+6, r24	; 0x06
    16c8:	e0 ea       	ldi	r30, 0xA0	; 160
    16ca:	f9 e0       	ldi	r31, 0x09	; 9
    16cc:	81 81       	ldd	r24, Z+1	; 0x01
    16ce:	85 ff       	sbrs	r24, 5
    16d0:	fd cf       	rjmp	.-6      	; 0x16cc <gfx_mono_st7565r_put_page+0xa4>
    16d2:	00 93 a0 09 	sts	0x09A0, r16
    16d6:	e0 ea       	ldi	r30, 0xA0	; 160
    16d8:	f9 e0       	ldi	r31, 0x09	; 9
    16da:	81 81       	ldd	r24, Z+1	; 0x01
    16dc:	86 ff       	sbrs	r24, 6
    16de:	fd cf       	rjmp	.-6      	; 0x16da <gfx_mono_st7565r_put_page+0xb2>
    16e0:	e0 ea       	ldi	r30, 0xA0	; 160
    16e2:	f9 e0       	ldi	r31, 0x09	; 9
    16e4:	80 e4       	ldi	r24, 0x40	; 64
    16e6:	81 83       	std	Z+1, r24	; 0x01
    16e8:	80 81       	ld	r24, Z
    16ea:	88 e0       	ldi	r24, 0x08	; 8
    16ec:	e0 ea       	ldi	r30, 0xA0	; 160
    16ee:	f6 e0       	ldi	r31, 0x06	; 6
    16f0:	85 83       	std	Z+5, r24	; 0x05
    16f2:	80 ea       	ldi	r24, 0xA0	; 160
    16f4:	96 e0       	ldi	r25, 0x06	; 6
    16f6:	48 e0       	ldi	r20, 0x08	; 8
    16f8:	0f 2e       	mov	r0, r31
    16fa:	f0 e6       	ldi	r31, 0x60	; 96
    16fc:	ef 2e       	mov	r14, r31
    16fe:	f6 e0       	ldi	r31, 0x06	; 6
    1700:	ff 2e       	mov	r15, r31
    1702:	f0 2d       	mov	r31, r0
    1704:	31 e0       	ldi	r19, 0x01	; 1
    1706:	e0 ea       	ldi	r30, 0xA0	; 160
    1708:	f9 e0       	ldi	r31, 0x09	; 9
    170a:	60 e4       	ldi	r22, 0x40	; 64
    170c:	59 91       	ld	r21, Y+
    170e:	dc 01       	movw	r26, r24
    1710:	16 96       	adiw	r26, 0x06	; 6
    1712:	4c 93       	st	X, r20
    1714:	d7 01       	movw	r26, r14
    1716:	15 96       	adiw	r26, 0x05	; 5
    1718:	3c 93       	st	X, r19
    171a:	21 81       	ldd	r18, Z+1	; 0x01
    171c:	25 ff       	sbrs	r18, 5
    171e:	fd cf       	rjmp	.-6      	; 0x171a <gfx_mono_st7565r_put_page+0xf2>
    1720:	50 83       	st	Z, r21
    1722:	21 81       	ldd	r18, Z+1	; 0x01
    1724:	26 ff       	sbrs	r18, 6
    1726:	fd cf       	rjmp	.-6      	; 0x1722 <gfx_mono_st7565r_put_page+0xfa>
    1728:	61 83       	std	Z+1, r22	; 0x01
    172a:	20 81       	ld	r18, Z
    172c:	d7 01       	movw	r26, r14
    172e:	16 96       	adiw	r26, 0x06	; 6
    1730:	3c 93       	st	X, r19
    1732:	dc 01       	movw	r26, r24
    1734:	15 96       	adiw	r26, 0x05	; 5
    1736:	4c 93       	st	X, r20
    1738:	11 50       	subi	r17, 0x01	; 1
    173a:	41 f7       	brne	.-48     	; 0x170c <gfx_mono_st7565r_put_page+0xe4>
    173c:	df 91       	pop	r29
    173e:	cf 91       	pop	r28
    1740:	1f 91       	pop	r17
    1742:	0f 91       	pop	r16
    1744:	ff 90       	pop	r15
    1746:	ef 90       	pop	r14
    1748:	08 95       	ret

0000174a <gfx_mono_st7565r_put_byte>:
    174a:	1f 93       	push	r17
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	18 2f       	mov	r17, r24
    1752:	d6 2f       	mov	r29, r22
    1754:	c4 2f       	mov	r28, r20
    1756:	29 d1       	rcall	.+594    	; 0x19aa <gfx_mono_framebuffer_put_byte>
    1758:	1f 70       	andi	r17, 0x0F	; 15
    175a:	10 6b       	ori	r17, 0xB0	; 176
    175c:	88 e0       	ldi	r24, 0x08	; 8
    175e:	e0 ea       	ldi	r30, 0xA0	; 160
    1760:	f6 e0       	ldi	r31, 0x06	; 6
    1762:	86 83       	std	Z+6, r24	; 0x06
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	e0 e6       	ldi	r30, 0x60	; 96
    1768:	f6 e0       	ldi	r31, 0x06	; 6
    176a:	86 83       	std	Z+6, r24	; 0x06
    176c:	e0 ea       	ldi	r30, 0xA0	; 160
    176e:	f9 e0       	ldi	r31, 0x09	; 9
    1770:	91 81       	ldd	r25, Z+1	; 0x01
    1772:	95 ff       	sbrs	r25, 5
    1774:	fd cf       	rjmp	.-6      	; 0x1770 <gfx_mono_st7565r_put_byte+0x26>
    1776:	10 93 a0 09 	sts	0x09A0, r17
    177a:	e0 ea       	ldi	r30, 0xA0	; 160
    177c:	f9 e0       	ldi	r31, 0x09	; 9
    177e:	81 81       	ldd	r24, Z+1	; 0x01
    1780:	86 ff       	sbrs	r24, 6
    1782:	fd cf       	rjmp	.-6      	; 0x177e <gfx_mono_st7565r_put_byte+0x34>
    1784:	e0 ea       	ldi	r30, 0xA0	; 160
    1786:	f9 e0       	ldi	r31, 0x09	; 9
    1788:	80 e4       	ldi	r24, 0x40	; 64
    178a:	81 83       	std	Z+1, r24	; 0x01
    178c:	80 81       	ld	r24, Z
    178e:	e0 ea       	ldi	r30, 0xA0	; 160
    1790:	f6 e0       	ldi	r31, 0x06	; 6
    1792:	88 e0       	ldi	r24, 0x08	; 8
    1794:	85 83       	std	Z+5, r24	; 0x05
    1796:	9d 2f       	mov	r25, r29
    1798:	9f 77       	andi	r25, 0x7F	; 127
    179a:	92 95       	swap	r25
    179c:	9f 70       	andi	r25, 0x0F	; 15
    179e:	90 61       	ori	r25, 0x10	; 16
    17a0:	86 83       	std	Z+6, r24	; 0x06
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	e0 e6       	ldi	r30, 0x60	; 96
    17a6:	f6 e0       	ldi	r31, 0x06	; 6
    17a8:	86 83       	std	Z+6, r24	; 0x06
    17aa:	e0 ea       	ldi	r30, 0xA0	; 160
    17ac:	f9 e0       	ldi	r31, 0x09	; 9
    17ae:	81 81       	ldd	r24, Z+1	; 0x01
    17b0:	85 ff       	sbrs	r24, 5
    17b2:	fd cf       	rjmp	.-6      	; 0x17ae <gfx_mono_st7565r_put_byte+0x64>
    17b4:	90 93 a0 09 	sts	0x09A0, r25
    17b8:	e0 ea       	ldi	r30, 0xA0	; 160
    17ba:	f9 e0       	ldi	r31, 0x09	; 9
    17bc:	81 81       	ldd	r24, Z+1	; 0x01
    17be:	86 ff       	sbrs	r24, 6
    17c0:	fd cf       	rjmp	.-6      	; 0x17bc <gfx_mono_st7565r_put_byte+0x72>
    17c2:	e0 ea       	ldi	r30, 0xA0	; 160
    17c4:	f9 e0       	ldi	r31, 0x09	; 9
    17c6:	80 e4       	ldi	r24, 0x40	; 64
    17c8:	81 83       	std	Z+1, r24	; 0x01
    17ca:	80 81       	ld	r24, Z
    17cc:	e0 ea       	ldi	r30, 0xA0	; 160
    17ce:	f6 e0       	ldi	r31, 0x06	; 6
    17d0:	88 e0       	ldi	r24, 0x08	; 8
    17d2:	85 83       	std	Z+5, r24	; 0x05
    17d4:	df 70       	andi	r29, 0x0F	; 15
    17d6:	86 83       	std	Z+6, r24	; 0x06
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	e0 e6       	ldi	r30, 0x60	; 96
    17dc:	f6 e0       	ldi	r31, 0x06	; 6
    17de:	86 83       	std	Z+6, r24	; 0x06
    17e0:	e0 ea       	ldi	r30, 0xA0	; 160
    17e2:	f9 e0       	ldi	r31, 0x09	; 9
    17e4:	81 81       	ldd	r24, Z+1	; 0x01
    17e6:	85 ff       	sbrs	r24, 5
    17e8:	fd cf       	rjmp	.-6      	; 0x17e4 <gfx_mono_st7565r_put_byte+0x9a>
    17ea:	d0 93 a0 09 	sts	0x09A0, r29
    17ee:	e0 ea       	ldi	r30, 0xA0	; 160
    17f0:	f9 e0       	ldi	r31, 0x09	; 9
    17f2:	81 81       	ldd	r24, Z+1	; 0x01
    17f4:	86 ff       	sbrs	r24, 6
    17f6:	fd cf       	rjmp	.-6      	; 0x17f2 <gfx_mono_st7565r_put_byte+0xa8>
    17f8:	e0 ea       	ldi	r30, 0xA0	; 160
    17fa:	f9 e0       	ldi	r31, 0x09	; 9
    17fc:	80 e4       	ldi	r24, 0x40	; 64
    17fe:	81 83       	std	Z+1, r24	; 0x01
    1800:	80 81       	ld	r24, Z
    1802:	e0 ea       	ldi	r30, 0xA0	; 160
    1804:	f6 e0       	ldi	r31, 0x06	; 6
    1806:	88 e0       	ldi	r24, 0x08	; 8
    1808:	85 83       	std	Z+5, r24	; 0x05
    180a:	86 83       	std	Z+6, r24	; 0x06
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	e0 e6       	ldi	r30, 0x60	; 96
    1810:	f6 e0       	ldi	r31, 0x06	; 6
    1812:	85 83       	std	Z+5, r24	; 0x05
    1814:	e0 ea       	ldi	r30, 0xA0	; 160
    1816:	f9 e0       	ldi	r31, 0x09	; 9
    1818:	81 81       	ldd	r24, Z+1	; 0x01
    181a:	85 ff       	sbrs	r24, 5
    181c:	fd cf       	rjmp	.-6      	; 0x1818 <gfx_mono_st7565r_put_byte+0xce>
    181e:	c0 93 a0 09 	sts	0x09A0, r28
    1822:	e0 ea       	ldi	r30, 0xA0	; 160
    1824:	f9 e0       	ldi	r31, 0x09	; 9
    1826:	81 81       	ldd	r24, Z+1	; 0x01
    1828:	86 ff       	sbrs	r24, 6
    182a:	fd cf       	rjmp	.-6      	; 0x1826 <gfx_mono_st7565r_put_byte+0xdc>
    182c:	e0 ea       	ldi	r30, 0xA0	; 160
    182e:	f9 e0       	ldi	r31, 0x09	; 9
    1830:	80 e4       	ldi	r24, 0x40	; 64
    1832:	81 83       	std	Z+1, r24	; 0x01
    1834:	80 81       	ld	r24, Z
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	e0 e6       	ldi	r30, 0x60	; 96
    183a:	f6 e0       	ldi	r31, 0x06	; 6
    183c:	86 83       	std	Z+6, r24	; 0x06
    183e:	88 e0       	ldi	r24, 0x08	; 8
    1840:	e0 ea       	ldi	r30, 0xA0	; 160
    1842:	f6 e0       	ldi	r31, 0x06	; 6
    1844:	85 83       	std	Z+5, r24	; 0x05
    1846:	df 91       	pop	r29
    1848:	cf 91       	pop	r28
    184a:	1f 91       	pop	r17
    184c:	08 95       	ret

0000184e <gfx_mono_st7565r_init>:
    184e:	cf 93       	push	r28
    1850:	df 93       	push	r29
    1852:	82 ef       	ldi	r24, 0xF2	; 242
    1854:	91 e2       	ldi	r25, 0x21	; 33
    1856:	90 d0       	rcall	.+288    	; 0x1978 <gfx_mono_set_framebuffer>
    1858:	b7 dc       	rcall	.-1682   	; 0x11c8 <st7565r_init>
    185a:	88 e0       	ldi	r24, 0x08	; 8
    185c:	e0 ea       	ldi	r30, 0xA0	; 160
    185e:	f6 e0       	ldi	r31, 0x06	; 6
    1860:	86 83       	std	Z+6, r24	; 0x06
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	e0 e6       	ldi	r30, 0x60	; 96
    1866:	f6 e0       	ldi	r31, 0x06	; 6
    1868:	86 83       	std	Z+6, r24	; 0x06
    186a:	e0 ea       	ldi	r30, 0xA0	; 160
    186c:	f9 e0       	ldi	r31, 0x09	; 9
    186e:	81 81       	ldd	r24, Z+1	; 0x01
    1870:	85 ff       	sbrs	r24, 5
    1872:	fd cf       	rjmp	.-6      	; 0x186e <gfx_mono_st7565r_init+0x20>
    1874:	80 e4       	ldi	r24, 0x40	; 64
    1876:	80 93 a0 09 	sts	0x09A0, r24
    187a:	e0 ea       	ldi	r30, 0xA0	; 160
    187c:	f9 e0       	ldi	r31, 0x09	; 9
    187e:	81 81       	ldd	r24, Z+1	; 0x01
    1880:	86 ff       	sbrs	r24, 6
    1882:	fd cf       	rjmp	.-6      	; 0x187e <gfx_mono_st7565r_init+0x30>
    1884:	e0 ea       	ldi	r30, 0xA0	; 160
    1886:	f9 e0       	ldi	r31, 0x09	; 9
    1888:	80 e4       	ldi	r24, 0x40	; 64
    188a:	81 83       	std	Z+1, r24	; 0x01
    188c:	80 81       	ld	r24, Z
    188e:	88 e0       	ldi	r24, 0x08	; 8
    1890:	e0 ea       	ldi	r30, 0xA0	; 160
    1892:	f6 e0       	ldi	r31, 0x06	; 6
    1894:	85 83       	std	Z+5, r24	; 0x05
    1896:	d0 e0       	ldi	r29, 0x00	; 0
    1898:	0a c0       	rjmp	.+20     	; 0x18ae <gfx_mono_st7565r_init+0x60>
    189a:	40 e0       	ldi	r20, 0x00	; 0
    189c:	6c 2f       	mov	r22, r28
    189e:	8d 2f       	mov	r24, r29
    18a0:	54 df       	rcall	.-344    	; 0x174a <gfx_mono_st7565r_put_byte>
    18a2:	cf 5f       	subi	r28, 0xFF	; 255
    18a4:	c0 38       	cpi	r28, 0x80	; 128
    18a6:	c9 f7       	brne	.-14     	; 0x189a <gfx_mono_st7565r_init+0x4c>
    18a8:	df 5f       	subi	r29, 0xFF	; 255
    18aa:	d4 30       	cpi	r29, 0x04	; 4
    18ac:	11 f0       	breq	.+4      	; 0x18b2 <gfx_mono_st7565r_init+0x64>
    18ae:	c0 e0       	ldi	r28, 0x00	; 0
    18b0:	f4 cf       	rjmp	.-24     	; 0x189a <gfx_mono_st7565r_init+0x4c>
    18b2:	df 91       	pop	r29
    18b4:	cf 91       	pop	r28
    18b6:	08 95       	ret

000018b8 <gfx_mono_st7565r_get_byte>:
    18b8:	87 c0       	rjmp	.+270    	; 0x19c8 <gfx_mono_framebuffer_get_byte>
    18ba:	08 95       	ret

000018bc <gfx_mono_st7565r_draw_pixel>:
 * gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
 * \endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
    18bc:	ef 92       	push	r14
    18be:	ff 92       	push	r15
    18c0:	0f 93       	push	r16
    18c2:	1f 93       	push	r17
    18c4:	cf 93       	push	r28
    18c6:	df 93       	push	r29
    18c8:	18 2f       	mov	r17, r24
    18ca:	04 2f       	mov	r16, r20
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
    18cc:	88 23       	and	r24, r24
    18ce:	7c f1       	brlt	.+94     	; 0x192e <gfx_mono_st7565r_draw_pixel+0x72>
    18d0:	60 32       	cpi	r22, 0x20	; 32
    18d2:	68 f5       	brcc	.+90     	; 0x192e <gfx_mono_st7565r_draw_pixel+0x72>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
    18d4:	f6 2e       	mov	r15, r22
    18d6:	f6 94       	lsr	r15
    18d8:	f6 94       	lsr	r15
    18da:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
    18dc:	cf 2d       	mov	r28, r15
    18de:	d0 e0       	ldi	r29, 0x00	; 0
    18e0:	d1 95       	neg	r29
    18e2:	c1 95       	neg	r28
    18e4:	d1 09       	sbc	r29, r1
    18e6:	cc 0f       	add	r28, r28
    18e8:	dd 1f       	adc	r29, r29
    18ea:	cc 0f       	add	r28, r28
    18ec:	dd 1f       	adc	r29, r29
    18ee:	cc 0f       	add	r28, r28
    18f0:	dd 1f       	adc	r29, r29
    18f2:	c6 0f       	add	r28, r22
    18f4:	d1 1d       	adc	r29, r1
    18f6:	21 e0       	ldi	r18, 0x01	; 1
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	c9 01       	movw	r24, r18
    18fc:	02 c0       	rjmp	.+4      	; 0x1902 <gfx_mono_st7565r_draw_pixel+0x46>
    18fe:	88 0f       	add	r24, r24
    1900:	99 1f       	adc	r25, r25
    1902:	ca 95       	dec	r28
    1904:	e2 f7       	brpl	.-8      	; 0x18fe <gfx_mono_st7565r_draw_pixel+0x42>
    1906:	ec 01       	movw	r28, r24
	/*
	 * Read the page containing the pixel in interest, then perform the
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);
    1908:	61 2f       	mov	r22, r17
    190a:	8f 2d       	mov	r24, r15
    190c:	d5 df       	rcall	.-86     	; 0x18b8 <gfx_mono_st7565r_get_byte>

	switch (color) {
    190e:	01 30       	cpi	r16, 0x01	; 1
    1910:	21 f0       	breq	.+8      	; 0x191a <gfx_mono_st7565r_draw_pixel+0x5e>
    1912:	28 f0       	brcs	.+10     	; 0x191e <gfx_mono_st7565r_draw_pixel+0x62>
    1914:	02 30       	cpi	r16, 0x02	; 2
    1916:	39 f4       	brne	.+14     	; 0x1926 <gfx_mono_st7565r_draw_pixel+0x6a>
    1918:	05 c0       	rjmp	.+10     	; 0x1924 <gfx_mono_st7565r_draw_pixel+0x68>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
    191a:	8c 2b       	or	r24, r28
		break;
    191c:	04 c0       	rjmp	.+8      	; 0x1926 <gfx_mono_st7565r_draw_pixel+0x6a>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
    191e:	c0 95       	com	r28
    1920:	8c 23       	and	r24, r28
		break;
    1922:	01 c0       	rjmp	.+2      	; 0x1926 <gfx_mono_st7565r_draw_pixel+0x6a>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
    1924:	8c 27       	eor	r24, r28

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
    1926:	48 2f       	mov	r20, r24
    1928:	61 2f       	mov	r22, r17
    192a:	8f 2d       	mov	r24, r15
    192c:	0e df       	rcall	.-484    	; 0x174a <gfx_mono_st7565r_put_byte>
}
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	1f 91       	pop	r17
    1934:	0f 91       	pop	r16
    1936:	ff 90       	pop	r15
    1938:	ef 90       	pop	r14
    193a:	08 95       	ret

0000193c <gfx_mono_st7565r_mask_byte>:
 * gfx_mono_st7565r_mask_byte(0,0,0xAA,GFX_PIXEL_XOR);
 * \endcode
 */
void gfx_mono_st7565r_mask_byte(gfx_coord_t page, gfx_coord_t column,
		gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
    193c:	0f 93       	push	r16
    193e:	1f 93       	push	r17
    1940:	cf 93       	push	r28
    1942:	df 93       	push	r29
    1944:	d8 2f       	mov	r29, r24
    1946:	16 2f       	mov	r17, r22
    1948:	04 2f       	mov	r16, r20
    194a:	c2 2f       	mov	r28, r18
	gfx_mono_color_t temp = gfx_mono_get_byte(page, column);
    194c:	b5 df       	rcall	.-150    	; 0x18b8 <gfx_mono_st7565r_get_byte>

	switch (color) {
    194e:	c1 30       	cpi	r28, 0x01	; 1
    1950:	21 f0       	breq	.+8      	; 0x195a <gfx_mono_st7565r_mask_byte+0x1e>
    1952:	28 f0       	brcs	.+10     	; 0x195e <gfx_mono_st7565r_mask_byte+0x22>
    1954:	c2 30       	cpi	r28, 0x02	; 2
    1956:	39 f4       	brne	.+14     	; 0x1966 <gfx_mono_st7565r_mask_byte+0x2a>
    1958:	05 c0       	rjmp	.+10     	; 0x1964 <gfx_mono_st7565r_mask_byte+0x28>
	case GFX_PIXEL_SET:
		temp |= pixel_mask;
    195a:	80 2b       	or	r24, r16
		break;
    195c:	04 c0       	rjmp	.+8      	; 0x1966 <gfx_mono_st7565r_mask_byte+0x2a>

	case GFX_PIXEL_CLR:
		temp &= ~pixel_mask;
    195e:	00 95       	com	r16
    1960:	80 23       	and	r24, r16
		break;
    1962:	01 c0       	rjmp	.+2      	; 0x1966 <gfx_mono_st7565r_mask_byte+0x2a>

	case GFX_PIXEL_XOR:
		temp ^= pixel_mask;
    1964:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, column, temp);
    1966:	48 2f       	mov	r20, r24
    1968:	61 2f       	mov	r22, r17
    196a:	8d 2f       	mov	r24, r29
    196c:	ee de       	rcall	.-548    	; 0x174a <gfx_mono_st7565r_put_byte>
}
    196e:	df 91       	pop	r29
    1970:	cf 91       	pop	r28
    1972:	1f 91       	pop	r17
    1974:	0f 91       	pop	r16
    1976:	08 95       	ret

00001978 <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
    1978:	80 93 f2 23 	sts	0x23F2, r24
    197c:	90 93 f3 23 	sts	0x23F3, r25
    1980:	08 95       	ret

00001982 <gfx_mono_framebuffer_put_page>:
    1982:	a4 2f       	mov	r26, r20
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	30 e8       	ldi	r19, 0x80	; 128
    1988:	63 9f       	mul	r22, r19
    198a:	a0 0d       	add	r26, r0
    198c:	b1 1d       	adc	r27, r1
    198e:	11 24       	eor	r1, r1
    1990:	40 91 f2 23 	lds	r20, 0x23F2
    1994:	50 91 f3 23 	lds	r21, 0x23F3
    1998:	a4 0f       	add	r26, r20
    199a:	b5 1f       	adc	r27, r21
    199c:	e8 2f       	mov	r30, r24
    199e:	f9 2f       	mov	r31, r25
    19a0:	81 91       	ld	r24, Z+
    19a2:	8d 93       	st	X+, r24
    19a4:	21 50       	subi	r18, 0x01	; 1
    19a6:	e1 f7       	brne	.-8      	; 0x19a0 <gfx_mono_framebuffer_put_page+0x1e>
    19a8:	08 95       	ret

000019aa <gfx_mono_framebuffer_put_byte>:
 * \endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
    19aa:	20 e8       	ldi	r18, 0x80	; 128
    19ac:	82 9f       	mul	r24, r18
    19ae:	c0 01       	movw	r24, r0
    19b0:	11 24       	eor	r1, r1
    19b2:	fc 01       	movw	r30, r24
    19b4:	e6 0f       	add	r30, r22
    19b6:	f1 1d       	adc	r31, r1
    19b8:	80 91 f2 23 	lds	r24, 0x23F2
    19bc:	90 91 f3 23 	lds	r25, 0x23F3
    19c0:	e8 0f       	add	r30, r24
    19c2:	f9 1f       	adc	r31, r25
    19c4:	40 83       	st	Z, r20
    19c6:	08 95       	ret

000019c8 <gfx_mono_framebuffer_get_byte>:
 * data = gfx_mono_framebuffer_get_byte(0, 0);
 * \endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
    19c8:	20 e8       	ldi	r18, 0x80	; 128
    19ca:	82 9f       	mul	r24, r18
    19cc:	c0 01       	movw	r24, r0
    19ce:	11 24       	eor	r1, r1
    19d0:	fc 01       	movw	r30, r24
    19d2:	e6 0f       	add	r30, r22
    19d4:	f1 1d       	adc	r31, r1
    19d6:	80 91 f2 23 	lds	r24, 0x23F2
    19da:	90 91 f3 23 	lds	r25, 0x23F3
    19de:	e8 0f       	add	r30, r24
    19e0:	f9 1f       	adc	r31, r25
}
    19e2:	80 81       	ld	r24, Z
    19e4:	08 95       	ret

000019e6 <gfx_mono_generic_draw_horizontal_line>:
		}

		/* Next X. */
		++offset_x;
	}
}
    19e6:	ff 92       	push	r15
    19e8:	0f 93       	push	r16
    19ea:	1f 93       	push	r17
    19ec:	cf 93       	push	r28
    19ee:	df 93       	push	r29
    19f0:	c4 2f       	mov	r28, r20
    19f2:	e4 2f       	mov	r30, r20
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	e8 0f       	add	r30, r24
    19f8:	f1 1d       	adc	r31, r1
    19fa:	e1 38       	cpi	r30, 0x81	; 129
    19fc:	f1 05       	cpc	r31, r1
    19fe:	14 f0       	brlt	.+4      	; 0x1a04 <gfx_mono_generic_draw_horizontal_line+0x1e>
    1a00:	c0 e8       	ldi	r28, 0x80	; 128
    1a02:	c8 1b       	sub	r28, r24
    1a04:	cc 23       	and	r28, r28
    1a06:	09 f4       	brne	.+2      	; 0x1a0a <gfx_mono_generic_draw_horizontal_line+0x24>
    1a08:	50 c0       	rjmp	.+160    	; 0x1aaa <gfx_mono_generic_draw_horizontal_line+0xc4>
    1a0a:	d6 2f       	mov	r29, r22
    1a0c:	d6 95       	lsr	r29
    1a0e:	d6 95       	lsr	r29
    1a10:	d6 95       	lsr	r29
    1a12:	ed 2f       	mov	r30, r29
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	f1 95       	neg	r31
    1a18:	e1 95       	neg	r30
    1a1a:	f1 09       	sbc	r31, r1
    1a1c:	ee 0f       	add	r30, r30
    1a1e:	ff 1f       	adc	r31, r31
    1a20:	ee 0f       	add	r30, r30
    1a22:	ff 1f       	adc	r31, r31
    1a24:	ee 0f       	add	r30, r30
    1a26:	ff 1f       	adc	r31, r31
    1a28:	af 01       	movw	r20, r30
    1a2a:	46 0f       	add	r20, r22
    1a2c:	51 1d       	adc	r21, r1
    1a2e:	ba 01       	movw	r22, r20
    1a30:	e1 e0       	ldi	r30, 0x01	; 1
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	af 01       	movw	r20, r30
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <gfx_mono_generic_draw_horizontal_line+0x56>
    1a38:	44 0f       	add	r20, r20
    1a3a:	55 1f       	adc	r21, r21
    1a3c:	6a 95       	dec	r22
    1a3e:	e2 f7       	brpl	.-8      	; 0x1a38 <gfx_mono_generic_draw_horizontal_line+0x52>
    1a40:	04 2f       	mov	r16, r20
    1a42:	21 30       	cpi	r18, 0x01	; 1
    1a44:	21 f0       	breq	.+8      	; 0x1a4e <gfx_mono_generic_draw_horizontal_line+0x68>
    1a46:	90 f0       	brcs	.+36     	; 0x1a6c <gfx_mono_generic_draw_horizontal_line+0x86>
    1a48:	22 30       	cpi	r18, 0x02	; 2
    1a4a:	79 f5       	brne	.+94     	; 0x1aaa <gfx_mono_generic_draw_horizontal_line+0xc4>
    1a4c:	20 c0       	rjmp	.+64     	; 0x1a8e <gfx_mono_generic_draw_horizontal_line+0xa8>
    1a4e:	f8 2e       	mov	r15, r24
    1a50:	fa 94       	dec	r15
    1a52:	1f 2d       	mov	r17, r15
    1a54:	1c 0f       	add	r17, r28
    1a56:	61 2f       	mov	r22, r17
    1a58:	8d 2f       	mov	r24, r29
    1a5a:	2e df       	rcall	.-420    	; 0x18b8 <gfx_mono_st7565r_get_byte>
    1a5c:	48 2f       	mov	r20, r24
    1a5e:	40 2b       	or	r20, r16
    1a60:	61 2f       	mov	r22, r17
    1a62:	8d 2f       	mov	r24, r29
    1a64:	72 de       	rcall	.-796    	; 0x174a <gfx_mono_st7565r_put_byte>
    1a66:	c1 50       	subi	r28, 0x01	; 1
    1a68:	a1 f7       	brne	.-24     	; 0x1a52 <gfx_mono_generic_draw_horizontal_line+0x6c>
    1a6a:	1f c0       	rjmp	.+62     	; 0x1aaa <gfx_mono_generic_draw_horizontal_line+0xc4>
    1a6c:	f8 2e       	mov	r15, r24
    1a6e:	fa 94       	dec	r15
    1a70:	04 2f       	mov	r16, r20
    1a72:	00 95       	com	r16
    1a74:	1f 2d       	mov	r17, r15
    1a76:	1c 0f       	add	r17, r28
    1a78:	61 2f       	mov	r22, r17
    1a7a:	8d 2f       	mov	r24, r29
    1a7c:	1d df       	rcall	.-454    	; 0x18b8 <gfx_mono_st7565r_get_byte>
    1a7e:	48 2f       	mov	r20, r24
    1a80:	40 23       	and	r20, r16
    1a82:	61 2f       	mov	r22, r17
    1a84:	8d 2f       	mov	r24, r29
    1a86:	61 de       	rcall	.-830    	; 0x174a <gfx_mono_st7565r_put_byte>
    1a88:	c1 50       	subi	r28, 0x01	; 1
    1a8a:	a1 f7       	brne	.-24     	; 0x1a74 <gfx_mono_generic_draw_horizontal_line+0x8e>
    1a8c:	0e c0       	rjmp	.+28     	; 0x1aaa <gfx_mono_generic_draw_horizontal_line+0xc4>
    1a8e:	f8 2e       	mov	r15, r24
    1a90:	fa 94       	dec	r15
    1a92:	1f 2d       	mov	r17, r15
    1a94:	1c 0f       	add	r17, r28
    1a96:	61 2f       	mov	r22, r17
    1a98:	8d 2f       	mov	r24, r29
    1a9a:	0e df       	rcall	.-484    	; 0x18b8 <gfx_mono_st7565r_get_byte>
    1a9c:	48 2f       	mov	r20, r24
    1a9e:	40 27       	eor	r20, r16
    1aa0:	61 2f       	mov	r22, r17
    1aa2:	8d 2f       	mov	r24, r29
    1aa4:	52 de       	rcall	.-860    	; 0x174a <gfx_mono_st7565r_put_byte>
    1aa6:	c1 50       	subi	r28, 0x01	; 1
    1aa8:	a1 f7       	brne	.-24     	; 0x1a92 <gfx_mono_generic_draw_horizontal_line+0xac>
    1aaa:	df 91       	pop	r29
    1aac:	cf 91       	pop	r28
    1aae:	1f 91       	pop	r17
    1ab0:	0f 91       	pop	r16
    1ab2:	ff 90       	pop	r15
    1ab4:	08 95       	ret

00001ab6 <gfx_mono_generic_draw_vertical_line>:
    1ab6:	ff 92       	push	r15
    1ab8:	0f 93       	push	r16
    1aba:	1f 93       	push	r17
    1abc:	cf 93       	push	r28
    1abe:	df 93       	push	r29
    1ac0:	d8 2f       	mov	r29, r24
    1ac2:	12 2f       	mov	r17, r18
    1ac4:	44 23       	and	r20, r20
    1ac6:	09 f4       	brne	.+2      	; 0x1aca <gfx_mono_generic_draw_vertical_line+0x14>
    1ac8:	42 c0       	rjmp	.+132    	; 0x1b4e <gfx_mono_generic_draw_vertical_line+0x98>
    1aca:	96 2f       	mov	r25, r22
    1acc:	91 50       	subi	r25, 0x01	; 1
    1ace:	94 0f       	add	r25, r20
    1ad0:	69 13       	cpse	r22, r25
    1ad2:	03 c0       	rjmp	.+6      	; 0x1ada <gfx_mono_generic_draw_vertical_line+0x24>
    1ad4:	42 2f       	mov	r20, r18
    1ad6:	f2 de       	rcall	.-540    	; 0x18bc <gfx_mono_st7565r_draw_pixel>
    1ad8:	3a c0       	rjmp	.+116    	; 0x1b4e <gfx_mono_generic_draw_vertical_line+0x98>
    1ada:	9f 31       	cpi	r25, 0x1F	; 31
    1adc:	08 f0       	brcs	.+2      	; 0x1ae0 <gfx_mono_generic_draw_vertical_line+0x2a>
    1ade:	9f e1       	ldi	r25, 0x1F	; 31
    1ae0:	c6 2f       	mov	r28, r22
    1ae2:	c6 95       	lsr	r28
    1ae4:	c6 95       	lsr	r28
    1ae6:	c6 95       	lsr	r28
    1ae8:	09 2f       	mov	r16, r25
    1aea:	06 95       	lsr	r16
    1aec:	06 95       	lsr	r16
    1aee:	06 95       	lsr	r16
    1af0:	67 70       	andi	r22, 0x07	; 7
    1af2:	ef ef       	ldi	r30, 0xFF	; 255
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	4e 2f       	mov	r20, r30
    1af8:	01 c0       	rjmp	.+2      	; 0x1afc <gfx_mono_generic_draw_vertical_line+0x46>
    1afa:	44 0f       	add	r20, r20
    1afc:	6a 95       	dec	r22
    1afe:	ea f7       	brpl	.-6      	; 0x1afa <gfx_mono_generic_draw_vertical_line+0x44>
    1b00:	97 70       	andi	r25, 0x07	; 7
    1b02:	a7 e0       	ldi	r26, 0x07	; 7
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	a9 1b       	sub	r26, r25
    1b08:	b1 09       	sbc	r27, r1
    1b0a:	02 c0       	rjmp	.+4      	; 0x1b10 <gfx_mono_generic_draw_vertical_line+0x5a>
    1b0c:	f5 95       	asr	r31
    1b0e:	e7 95       	ror	r30
    1b10:	aa 95       	dec	r26
    1b12:	e2 f7       	brpl	.-8      	; 0x1b0c <gfx_mono_generic_draw_vertical_line+0x56>
    1b14:	fe 2e       	mov	r15, r30
    1b16:	c0 13       	cpse	r28, r16
    1b18:	06 c0       	rjmp	.+12     	; 0x1b26 <gfx_mono_generic_draw_vertical_line+0x70>
    1b1a:	4e 23       	and	r20, r30
    1b1c:	21 2f       	mov	r18, r17
    1b1e:	6d 2f       	mov	r22, r29
    1b20:	8c 2f       	mov	r24, r28
    1b22:	0c df       	rcall	.-488    	; 0x193c <gfx_mono_st7565r_mask_byte>
    1b24:	14 c0       	rjmp	.+40     	; 0x1b4e <gfx_mono_generic_draw_vertical_line+0x98>
    1b26:	21 2f       	mov	r18, r17
    1b28:	6d 2f       	mov	r22, r29
    1b2a:	8c 2f       	mov	r24, r28
    1b2c:	07 df       	rcall	.-498    	; 0x193c <gfx_mono_st7565r_mask_byte>
    1b2e:	cf 5f       	subi	r28, 0xFF	; 255
    1b30:	c0 17       	cp	r28, r16
    1b32:	40 f4       	brcc	.+16     	; 0x1b44 <gfx_mono_generic_draw_vertical_line+0x8e>
    1b34:	21 2f       	mov	r18, r17
    1b36:	4f ef       	ldi	r20, 0xFF	; 255
    1b38:	6d 2f       	mov	r22, r29
    1b3a:	8c 2f       	mov	r24, r28
    1b3c:	ff de       	rcall	.-514    	; 0x193c <gfx_mono_st7565r_mask_byte>
    1b3e:	cf 5f       	subi	r28, 0xFF	; 255
    1b40:	c0 17       	cp	r28, r16
    1b42:	c0 f3       	brcs	.-16     	; 0x1b34 <gfx_mono_generic_draw_vertical_line+0x7e>
    1b44:	21 2f       	mov	r18, r17
    1b46:	4f 2d       	mov	r20, r15
    1b48:	6d 2f       	mov	r22, r29
    1b4a:	80 2f       	mov	r24, r16
    1b4c:	f7 de       	rcall	.-530    	; 0x193c <gfx_mono_st7565r_mask_byte>
    1b4e:	df 91       	pop	r29
    1b50:	cf 91       	pop	r28
    1b52:	1f 91       	pop	r17
    1b54:	0f 91       	pop	r16
    1b56:	ff 90       	pop	r15
    1b58:	08 95       	ret

00001b5a <gfx_mono_generic_draw_rect>:
    1b5a:	ff 92       	push	r15
    1b5c:	0f 93       	push	r16
    1b5e:	1f 93       	push	r17
    1b60:	cf 93       	push	r28
    1b62:	df 93       	push	r29
    1b64:	d8 2f       	mov	r29, r24
    1b66:	c6 2f       	mov	r28, r22
    1b68:	14 2f       	mov	r17, r20
    1b6a:	f2 2e       	mov	r15, r18
    1b6c:	20 2f       	mov	r18, r16
    1b6e:	3b df       	rcall	.-394    	; 0x19e6 <gfx_mono_generic_draw_horizontal_line>
    1b70:	6c 2f       	mov	r22, r28
    1b72:	61 50       	subi	r22, 0x01	; 1
    1b74:	6f 0d       	add	r22, r15
    1b76:	20 2f       	mov	r18, r16
    1b78:	41 2f       	mov	r20, r17
    1b7a:	8d 2f       	mov	r24, r29
    1b7c:	34 df       	rcall	.-408    	; 0x19e6 <gfx_mono_generic_draw_horizontal_line>
    1b7e:	20 2f       	mov	r18, r16
    1b80:	4f 2d       	mov	r20, r15
    1b82:	6c 2f       	mov	r22, r28
    1b84:	8d 2f       	mov	r24, r29
    1b86:	97 df       	rcall	.-210    	; 0x1ab6 <gfx_mono_generic_draw_vertical_line>
    1b88:	8d 2f       	mov	r24, r29
    1b8a:	81 50       	subi	r24, 0x01	; 1
    1b8c:	20 2f       	mov	r18, r16
    1b8e:	4f 2d       	mov	r20, r15
    1b90:	6c 2f       	mov	r22, r28
    1b92:	81 0f       	add	r24, r17
    1b94:	90 df       	rcall	.-224    	; 0x1ab6 <gfx_mono_generic_draw_vertical_line>
    1b96:	df 91       	pop	r29
    1b98:	cf 91       	pop	r28
    1b9a:	1f 91       	pop	r17
    1b9c:	0f 91       	pop	r16
    1b9e:	ff 90       	pop	r15
    1ba0:	08 95       	ret

00001ba2 <gfx_mono_generic_draw_filled_rect>:
    1ba2:	ff 92       	push	r15
    1ba4:	0f 93       	push	r16
    1ba6:	1f 93       	push	r17
    1ba8:	cf 93       	push	r28
    1baa:	df 93       	push	r29
    1bac:	d8 2f       	mov	r29, r24
    1bae:	14 2f       	mov	r17, r20
    1bb0:	c2 2f       	mov	r28, r18
    1bb2:	22 23       	and	r18, r18
    1bb4:	51 f0       	breq	.+20     	; 0x1bca <gfx_mono_generic_draw_filled_rect+0x28>
    1bb6:	f6 2e       	mov	r15, r22
    1bb8:	fa 94       	dec	r15
    1bba:	6f 2d       	mov	r22, r15
    1bbc:	6c 0f       	add	r22, r28
    1bbe:	20 2f       	mov	r18, r16
    1bc0:	41 2f       	mov	r20, r17
    1bc2:	8d 2f       	mov	r24, r29
    1bc4:	10 df       	rcall	.-480    	; 0x19e6 <gfx_mono_generic_draw_horizontal_line>
    1bc6:	c1 50       	subi	r28, 0x01	; 1
    1bc8:	c1 f7       	brne	.-16     	; 0x1bba <gfx_mono_generic_draw_filled_rect+0x18>
    1bca:	df 91       	pop	r29
    1bcc:	cf 91       	pop	r28
    1bce:	1f 91       	pop	r17
    1bd0:	0f 91       	pop	r16
    1bd2:	ff 90       	pop	r15
    1bd4:	08 95       	ret

00001bd6 <gfx_mono_generic_put_bitmap>:
 * placing a bitmap at x = 10, y = 10 will put the bitmap at x = 10, y = 8
 *
 */
void gfx_mono_generic_put_bitmap(struct gfx_mono_bitmap *bitmap, gfx_coord_t x,
		gfx_coord_t y)
{
    1bd6:	bf 92       	push	r11
    1bd8:	cf 92       	push	r12
    1bda:	df 92       	push	r13
    1bdc:	ef 92       	push	r14
    1bde:	ff 92       	push	r15
    1be0:	0f 93       	push	r16
    1be2:	1f 93       	push	r17
    1be4:	cf 93       	push	r28
    1be6:	df 93       	push	r29
    1be8:	ec 01       	movw	r28, r24
    1bea:	f6 2e       	mov	r15, r22
	gfx_coord_t num_pages = bitmap->height / 8;
    1bec:	e9 80       	ldd	r14, Y+1	; 0x01
    1bee:	e6 94       	lsr	r14
    1bf0:	e6 94       	lsr	r14
    1bf2:	e6 94       	lsr	r14
	gfx_coord_t page = y / 8;
    1bf4:	d4 2e       	mov	r13, r20
    1bf6:	d6 94       	lsr	r13
    1bf8:	d6 94       	lsr	r13
    1bfa:	d6 94       	lsr	r13
	gfx_coord_t column;
	gfx_coord_t i;
	gfx_mono_color_t temp;

	switch (bitmap->type) {
    1bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfe:	88 23       	and	r24, r24
    1c00:	31 f0       	breq	.+12     	; 0x1c0e <gfx_mono_generic_put_bitmap+0x38>
    1c02:	81 30       	cpi	r24, 0x01	; 1
    1c04:	09 f0       	breq	.+2      	; 0x1c08 <gfx_mono_generic_put_bitmap+0x32>
    1c06:	3c c0       	rjmp	.+120    	; 0x1c80 <gfx_mono_generic_put_bitmap+0xaa>
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
    1c08:	e1 10       	cpse	r14, r1
    1c0a:	20 c0       	rjmp	.+64     	; 0x1c4c <gfx_mono_generic_put_bitmap+0x76>
    1c0c:	39 c0       	rjmp	.+114    	; 0x1c80 <gfx_mono_generic_put_bitmap+0xaa>
			}
		}
		break;

	case GFX_MONO_BITMAP_RAM:
		for (i = 0; i < num_pages; i++) {
    1c0e:	e1 10       	cpse	r14, r1
    1c10:	23 c0       	rjmp	.+70     	; 0x1c58 <gfx_mono_generic_put_bitmap+0x82>
    1c12:	36 c0       	rjmp	.+108    	; 0x1c80 <gfx_mono_generic_put_bitmap+0xaa>
	gfx_mono_color_t temp;

	switch (bitmap->type) {
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
			for (column = 0; column < bitmap->width; column++) {
    1c14:	c1 2c       	mov	r12, r1
 * The bitmap y-coordinate will be aligned with display pages, rounded down.
 * Ie: placing a bitmap at x=10, y=5 will put the bitmap at x = 10,y = 0 and
 * placing a bitmap at x = 10, y = 10 will put the bitmap at x = 10, y = 8
 *
 */
void gfx_mono_generic_put_bitmap(struct gfx_mono_bitmap *bitmap, gfx_coord_t x,
    1c16:	bd 2c       	mov	r11, r13
    1c18:	b0 0e       	add	r11, r16

	switch (bitmap->type) {
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
			for (column = 0; column < bitmap->width; column++) {
				temp = PROGMEM_READ_BYTE(bitmap->data.progmem
    1c1a:	90 9f       	mul	r25, r16
    1c1c:	f0 01       	movw	r30, r0
    1c1e:	91 9f       	mul	r25, r17
    1c20:	f0 0d       	add	r31, r0
    1c22:	11 24       	eor	r1, r1
    1c24:	ec 0d       	add	r30, r12
    1c26:	f1 1d       	adc	r31, r1
    1c28:	2b 81       	ldd	r18, Y+3	; 0x03
    1c2a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c2c:	e2 0f       	add	r30, r18
    1c2e:	f3 1f       	adc	r31, r19
    1c30:	44 91       	lpm	r20, Z
 * The bitmap y-coordinate will be aligned with display pages, rounded down.
 * Ie: placing a bitmap at x=10, y=5 will put the bitmap at x = 10,y = 0 and
 * placing a bitmap at x = 10, y = 10 will put the bitmap at x = 10, y = 8
 *
 */
void gfx_mono_generic_put_bitmap(struct gfx_mono_bitmap *bitmap, gfx_coord_t x,
    1c32:	6c 2d       	mov	r22, r12
    1c34:	6f 0d       	add	r22, r15
		for (i = 0; i < num_pages; i++) {
			for (column = 0; column < bitmap->width; column++) {
				temp = PROGMEM_READ_BYTE(bitmap->data.progmem
						+ (i * bitmap->width)
						+ column);
				gfx_mono_put_byte(i + page, column + x, temp);
    1c36:	8b 2d       	mov	r24, r11
    1c38:	88 dd       	rcall	.-1264   	; 0x174a <gfx_mono_st7565r_put_byte>
	gfx_mono_color_t temp;

	switch (bitmap->type) {
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
			for (column = 0; column < bitmap->width; column++) {
    1c3a:	c3 94       	inc	r12
    1c3c:	98 81       	ld	r25, Y
    1c3e:	c9 16       	cp	r12, r25
    1c40:	60 f3       	brcs	.-40     	; 0x1c1a <gfx_mono_generic_put_bitmap+0x44>
    1c42:	0f 5f       	subi	r16, 0xFF	; 255
    1c44:	1f 4f       	sbci	r17, 0xFF	; 255
	gfx_coord_t i;
	gfx_mono_color_t temp;

	switch (bitmap->type) {
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
    1c46:	0e 15       	cp	r16, r14
    1c48:	18 f0       	brcs	.+6      	; 0x1c50 <gfx_mono_generic_put_bitmap+0x7a>
    1c4a:	1a c0       	rjmp	.+52     	; 0x1c80 <gfx_mono_generic_put_bitmap+0xaa>
    1c4c:	00 e0       	ldi	r16, 0x00	; 0
    1c4e:	10 e0       	ldi	r17, 0x00	; 0
			for (column = 0; column < bitmap->width; column++) {
    1c50:	98 81       	ld	r25, Y
    1c52:	91 11       	cpse	r25, r1
    1c54:	df cf       	rjmp	.-66     	; 0x1c14 <gfx_mono_generic_put_bitmap+0x3e>
    1c56:	f5 cf       	rjmp	.-22     	; 0x1c42 <gfx_mono_generic_put_bitmap+0x6c>
			}
		}
		break;

	case GFX_MONO_BITMAP_RAM:
		for (i = 0; i < num_pages; i++) {
    1c58:	00 e0       	ldi	r16, 0x00	; 0
    1c5a:	10 e0       	ldi	r17, 0x00	; 0
			gfx_mono_put_page(bitmap->data.pixmap
    1c5c:	28 81       	ld	r18, Y
 * The bitmap y-coordinate will be aligned with display pages, rounded down.
 * Ie: placing a bitmap at x=10, y=5 will put the bitmap at x = 10,y = 0 and
 * placing a bitmap at x = 10, y = 10 will put the bitmap at x = 10, y = 8
 *
 */
void gfx_mono_generic_put_bitmap(struct gfx_mono_bitmap *bitmap, gfx_coord_t x,
    1c5e:	6d 2d       	mov	r22, r13
    1c60:	60 0f       	add	r22, r16
		}
		break;

	case GFX_MONO_BITMAP_RAM:
		for (i = 0; i < num_pages; i++) {
			gfx_mono_put_page(bitmap->data.pixmap
    1c62:	20 9f       	mul	r18, r16
    1c64:	c0 01       	movw	r24, r0
    1c66:	21 9f       	mul	r18, r17
    1c68:	90 0d       	add	r25, r0
    1c6a:	11 24       	eor	r1, r1
    1c6c:	eb 81       	ldd	r30, Y+3	; 0x03
    1c6e:	fc 81       	ldd	r31, Y+4	; 0x04
    1c70:	4f 2d       	mov	r20, r15
    1c72:	8e 0f       	add	r24, r30
    1c74:	9f 1f       	adc	r25, r31
    1c76:	d8 dc       	rcall	.-1616   	; 0x1628 <gfx_mono_st7565r_put_page>
    1c78:	0f 5f       	subi	r16, 0xFF	; 255
    1c7a:	1f 4f       	sbci	r17, 0xFF	; 255
			}
		}
		break;

	case GFX_MONO_BITMAP_RAM:
		for (i = 0; i < num_pages; i++) {
    1c7c:	0e 15       	cp	r16, r14
    1c7e:	70 f3       	brcs	.-36     	; 0x1c5c <gfx_mono_generic_put_bitmap+0x86>
		break;

	default:
		break;
	}
}
    1c80:	df 91       	pop	r29
    1c82:	cf 91       	pop	r28
    1c84:	1f 91       	pop	r17
    1c86:	0f 91       	pop	r16
    1c88:	ff 90       	pop	r15
    1c8a:	ef 90       	pop	r14
    1c8c:	df 90       	pop	r13
    1c8e:	cf 90       	pop	r12
    1c90:	bf 90       	pop	r11
    1c92:	08 95       	ret

00001c94 <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
    1c94:	af 92       	push	r10
    1c96:	bf 92       	push	r11
    1c98:	cf 92       	push	r12
    1c9a:	df 92       	push	r13
    1c9c:	ef 92       	push	r14
    1c9e:	ff 92       	push	r15
    1ca0:	0f 93       	push	r16
    1ca2:	1f 93       	push	r17
    1ca4:	cf 93       	push	r28
    1ca6:	df 93       	push	r29
    1ca8:	c8 2f       	mov	r28, r24
    1caa:	d6 2e       	mov	r13, r22
    1cac:	a4 2e       	mov	r10, r20
    1cae:	79 01       	movw	r14, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
    1cb0:	00 e0       	ldi	r16, 0x00	; 0
    1cb2:	f9 01       	movw	r30, r18
    1cb4:	24 81       	ldd	r18, Z+4	; 0x04
    1cb6:	43 81       	ldd	r20, Z+3	; 0x03
    1cb8:	6a 2d       	mov	r22, r10
    1cba:	8d 2d       	mov	r24, r13
    1cbc:	72 df       	rcall	.-284    	; 0x1ba2 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
    1cbe:	f7 01       	movw	r30, r14
    1cc0:	90 81       	ld	r25, Z
    1cc2:	91 11       	cpse	r25, r1
    1cc4:	39 c0       	rjmp	.+114    	; 0x1d38 <gfx_mono_draw_char+0xa4>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    1cc6:	83 81       	ldd	r24, Z+3	; 0x03
    1cc8:	a8 2f       	mov	r26, r24
    1cca:	a6 95       	lsr	r26
    1ccc:	a6 95       	lsr	r26
    1cce:	a6 95       	lsr	r26
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    1cd0:	87 70       	andi	r24, 0x07	; 7
    1cd2:	09 f0       	breq	.+2      	; 0x1cd6 <gfx_mono_draw_char+0x42>
		char_row_size++;
    1cd4:	af 5f       	subi	r26, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
    1cd6:	f7 01       	movw	r30, r14
    1cd8:	c4 80       	ldd	r12, Z+4	; 0x04
    1cda:	ac 9d       	mul	r26, r12
    1cdc:	d0 01       	movw	r26, r0
    1cde:	11 24       	eor	r1, r1
			((uint8_t)ch - font->first_char);
    1ce0:	ec 2f       	mov	r30, r28
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	e7 01       	movw	r28, r14
    1ce6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce8:	e8 1b       	sub	r30, r24
    1cea:	f1 09       	sbc	r31, r1
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
		char_row_size++;
	}

	glyph_data_offset = char_row_size * font->height *
    1cec:	ae 9f       	mul	r26, r30
    1cee:	90 01       	movw	r18, r0
    1cf0:	af 9f       	mul	r26, r31
    1cf2:	30 0d       	add	r19, r0
    1cf4:	be 9f       	mul	r27, r30
    1cf6:	30 0d       	add	r19, r0
    1cf8:	11 24       	eor	r1, r1
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
    1cfa:	09 80       	ldd	r0, Y+1	; 0x01
    1cfc:	da 81       	ldd	r29, Y+2	; 0x02
    1cfe:	c0 2d       	mov	r28, r0
    1d00:	c2 0f       	add	r28, r18
    1d02:	d3 1f       	adc	r29, r19
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
    1d04:	f7 01       	movw	r30, r14
    1d06:	b3 80       	ldd	r11, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
    1d08:	bb 20       	and	r11, r11
    1d0a:	99 f0       	breq	.+38     	; 0x1d32 <gfx_mono_draw_char+0x9e>
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
    1d0c:	00 e0       	ldi	r16, 0x00	; 0
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    1d0e:	10 e0       	ldi	r17, 0x00	; 0
 * \param c        Character to be drawn
 * \param x        X coordinate on screen.
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
    1d10:	81 2f       	mov	r24, r17
    1d12:	8d 0d       	add	r24, r13
	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    1d14:	91 2f       	mov	r25, r17
    1d16:	97 70       	andi	r25, 0x07	; 7
    1d18:	19 f4       	brne	.+6      	; 0x1d20 <gfx_mono_draw_char+0x8c>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    1d1a:	fe 01       	movw	r30, r28
    1d1c:	04 91       	lpm	r16, Z
				glyph_data++;
    1d1e:	21 96       	adiw	r28, 0x01	; 1
			}

			if ((glyph_byte & 0x80)) {
    1d20:	00 23       	and	r16, r16
    1d22:	1c f4       	brge	.+6      	; 0x1d2a <gfx_mono_draw_char+0x96>
				gfx_mono_draw_pixel(inc_x, inc_y,
    1d24:	41 e0       	ldi	r20, 0x01	; 1
    1d26:	6a 2d       	mov	r22, r10
    1d28:	c9 dd       	rcall	.-1134   	; 0x18bc <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
    1d2a:	00 0f       	add	r16, r16

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    1d2c:	1f 5f       	subi	r17, 0xFF	; 255
    1d2e:	1b 11       	cpse	r17, r11
    1d30:	ef cf       	rjmp	.-34     	; 0x1d10 <gfx_mono_draw_char+0x7c>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
    1d32:	a3 94       	inc	r10
		inc_x = x;
		rows_left--;
    1d34:	ca 94       	dec	r12
	} while (rows_left > 0);
    1d36:	31 f7       	brne	.-52     	; 0x1d04 <gfx_mono_draw_char+0x70>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    1d38:	df 91       	pop	r29
    1d3a:	cf 91       	pop	r28
    1d3c:	1f 91       	pop	r17
    1d3e:	0f 91       	pop	r16
    1d40:	ff 90       	pop	r15
    1d42:	ef 90       	pop	r14
    1d44:	df 90       	pop	r13
    1d46:	cf 90       	pop	r12
    1d48:	bf 90       	pop	r11
    1d4a:	af 90       	pop	r10
    1d4c:	08 95       	ret

00001d4e <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    1d4e:	df 92       	push	r13
    1d50:	ef 92       	push	r14
    1d52:	ff 92       	push	r15
    1d54:	0f 93       	push	r16
    1d56:	1f 93       	push	r17
    1d58:	cf 93       	push	r28
    1d5a:	df 93       	push	r29
    1d5c:	e4 2e       	mov	r14, r20
    1d5e:	89 01       	movw	r16, r18
    1d60:	c8 2f       	mov	r28, r24
    1d62:	d9 2f       	mov	r29, r25
    1d64:	f6 2e       	mov	r15, r22

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    1d66:	d6 2e       	mov	r13, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
    1d68:	89 91       	ld	r24, Y+
    1d6a:	8a 30       	cpi	r24, 0x0A	; 10
    1d6c:	31 f4       	brne	.+12     	; 0x1d7a <gfx_mono_draw_string+0x2c>
			x = start_of_string_position_x;
			y += font->height + 1;
    1d6e:	f8 01       	movw	r30, r16
    1d70:	84 81       	ldd	r24, Z+4	; 0x04
    1d72:	8f 5f       	subi	r24, 0xFF	; 255
    1d74:	e8 0e       	add	r14, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    1d76:	fd 2c       	mov	r15, r13
    1d78:	09 c0       	rjmp	.+18     	; 0x1d8c <gfx_mono_draw_string+0x3e>
			y += font->height + 1;
		} else if (*str == '\r') {
    1d7a:	8d 30       	cpi	r24, 0x0D	; 13
    1d7c:	39 f0       	breq	.+14     	; 0x1d8c <gfx_mono_draw_string+0x3e>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
    1d7e:	98 01       	movw	r18, r16
    1d80:	4e 2d       	mov	r20, r14
    1d82:	6f 2d       	mov	r22, r15
    1d84:	87 df       	rcall	.-242    	; 0x1c94 <gfx_mono_draw_char>
			x += font->width;
    1d86:	f8 01       	movw	r30, r16
    1d88:	83 81       	ldd	r24, Z+3	; 0x03
    1d8a:	f8 0e       	add	r15, r24
		}
	} while (*(++str));
    1d8c:	88 81       	ld	r24, Y
    1d8e:	81 11       	cpse	r24, r1
    1d90:	eb cf       	rjmp	.-42     	; 0x1d68 <gfx_mono_draw_string+0x1a>
}
    1d92:	df 91       	pop	r29
    1d94:	cf 91       	pop	r28
    1d96:	1f 91       	pop	r17
    1d98:	0f 91       	pop	r16
    1d9a:	ff 90       	pop	r15
    1d9c:	ef 90       	pop	r14
    1d9e:	df 90       	pop	r13
    1da0:	08 95       	ret

00001da2 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    1da2:	cf 93       	push	r28
    1da4:	df 93       	push	r29
 *
 */
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
    1da6:	fc 01       	movw	r30, r24
    1da8:	70 96       	adiw	r30, 0x10	; 16
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    1dae:	c6 2f       	mov	r28, r22
    1db0:	d0 e0       	ldi	r29, 0x00	; 0
    1db2:	de 01       	movw	r26, r28
    1db4:	02 2e       	mov	r0, r18
    1db6:	02 c0       	rjmp	.+4      	; 0x1dbc <ioport_configure_port_pin+0x1a>
    1db8:	b5 95       	asr	r27
    1dba:	a7 95       	ror	r26
    1dbc:	0a 94       	dec	r0
    1dbe:	e2 f7       	brpl	.-8      	; 0x1db8 <ioport_configure_port_pin+0x16>
    1dc0:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    1dc2:	50 83       	st	Z, r21
    1dc4:	2f 5f       	subi	r18, 0xFF	; 255
    1dc6:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc8:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    1dca:	28 30       	cpi	r18, 0x08	; 8
    1dcc:	31 05       	cpc	r19, r1
    1dce:	89 f7       	brne	.-30     	; 0x1db2 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    1dd0:	40 ff       	sbrs	r20, 0
    1dd2:	0a c0       	rjmp	.+20     	; 0x1de8 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
    1dd4:	41 ff       	sbrs	r20, 1
    1dd6:	03 c0       	rjmp	.+6      	; 0x1dde <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    1dd8:	fc 01       	movw	r30, r24
    1dda:	65 83       	std	Z+5, r22	; 0x05
    1ddc:	02 c0       	rjmp	.+4      	; 0x1de2 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    1dde:	fc 01       	movw	r30, r24
    1de0:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    1de2:	fc 01       	movw	r30, r24
    1de4:	61 83       	std	Z+1, r22	; 0x01
    1de6:	02 c0       	rjmp	.+4      	; 0x1dec <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    1de8:	fc 01       	movw	r30, r24
    1dea:	62 83       	std	Z+2, r22	; 0x02
	}
}
    1dec:	df 91       	pop	r29
    1dee:	cf 91       	pop	r28
    1df0:	08 95       	ret

00001df2 <usart_spi_init>:
#include "sysclk.h"

void usart_spi_init(USART_t *usart)
{
#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
    1df2:	80 3a       	cpi	r24, 0xA0	; 160
    1df4:	28 e0       	ldi	r18, 0x08	; 8
    1df6:	92 07       	cpc	r25, r18
    1df8:	19 f4       	brne	.+6      	; 0x1e00 <usart_spi_init+0xe>
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
    1dfa:	60 e1       	ldi	r22, 0x10	; 16
    1dfc:	83 e0       	ldi	r24, 0x03	; 3
    1dfe:	c7 cb       	rjmp	.-2162   	; 0x158e <sysclk_enable_module>
	}
#endif
#ifdef USARTC1
	else
	if((uint16_t)usart == (uint16_t)&USARTC1) {
    1e00:	80 3b       	cpi	r24, 0xB0	; 176
    1e02:	28 e0       	ldi	r18, 0x08	; 8
    1e04:	92 07       	cpc	r25, r18
    1e06:	19 f4       	brne	.+6      	; 0x1e0e <usart_spi_init+0x1c>
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART1_bm);
    1e08:	60 e2       	ldi	r22, 0x20	; 32
    1e0a:	83 e0       	ldi	r24, 0x03	; 3
    1e0c:	c0 cb       	rjmp	.-2176   	; 0x158e <sysclk_enable_module>
	}
#endif
#ifdef USARTD0
	else
	if((uint16_t)usart == (uint16_t)&USARTD0) {
    1e0e:	80 3a       	cpi	r24, 0xA0	; 160
    1e10:	29 e0       	ldi	r18, 0x09	; 9
    1e12:	92 07       	cpc	r25, r18
    1e14:	19 f4       	brne	.+6      	; 0x1e1c <usart_spi_init+0x2a>
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
    1e16:	60 e1       	ldi	r22, 0x10	; 16
    1e18:	84 e0       	ldi	r24, 0x04	; 4
    1e1a:	b9 cb       	rjmp	.-2190   	; 0x158e <sysclk_enable_module>
	}
#endif
#ifdef USARTD1
	else
	if((uint16_t)usart == (uint16_t)&USARTD1) {
    1e1c:	80 3b       	cpi	r24, 0xB0	; 176
    1e1e:	29 e0       	ldi	r18, 0x09	; 9
    1e20:	92 07       	cpc	r25, r18
    1e22:	19 f4       	brne	.+6      	; 0x1e2a <usart_spi_init+0x38>
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
    1e24:	60 e2       	ldi	r22, 0x20	; 32
    1e26:	84 e0       	ldi	r24, 0x04	; 4
    1e28:	b2 cb       	rjmp	.-2204   	; 0x158e <sysclk_enable_module>
	}
#endif
#ifdef USARTE0
	else
	if((uint16_t)usart == (uint16_t)&USARTE0) {
    1e2a:	80 3a       	cpi	r24, 0xA0	; 160
    1e2c:	2a e0       	ldi	r18, 0x0A	; 10
    1e2e:	92 07       	cpc	r25, r18
    1e30:	19 f4       	brne	.+6      	; 0x1e38 <usart_spi_init+0x46>
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
    1e32:	60 e1       	ldi	r22, 0x10	; 16
    1e34:	85 e0       	ldi	r24, 0x05	; 5
    1e36:	ab cb       	rjmp	.-2218   	; 0x158e <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART1_bm);
	}
#endif
#ifdef USARTF0
	else
	if((uint16_t)usart == (uint16_t)&USARTF0) {
    1e38:	80 3a       	cpi	r24, 0xA0	; 160
    1e3a:	9b 40       	sbci	r25, 0x0B	; 11
    1e3c:	19 f4       	brne	.+6      	; 0x1e44 <usart_spi_init+0x52>
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART0_bm);
    1e3e:	60 e1       	ldi	r22, 0x10	; 16
    1e40:	86 e0       	ldi	r24, 0x06	; 6
    1e42:	a5 cb       	rjmp	.-2230   	; 0x158e <sysclk_enable_module>
    1e44:	08 95       	ret

00001e46 <usart_spi_setup_device>:
}

void usart_spi_setup_device(USART_t *usart, struct usart_spi_device *device,
     spi_flags_t flags, unsigned long baud_rate,
     board_spi_select_id_t sel_id)
{
    1e46:	0f 93       	push	r16
    1e48:	1f 93       	push	r17
    1e4a:	cf 93       	push	r28
    1e4c:	df 93       	push	r29
    1e4e:	00 d0       	rcall	.+0      	; 0x1e50 <usart_spi_setup_device+0xa>
    1e50:	00 d0       	rcall	.+0      	; 0x1e52 <usart_spi_setup_device+0xc>
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
	usart_spi_options_t opt;
	opt.baudrate=baud_rate;
    1e56:	09 83       	std	Y+1, r16	; 0x01
    1e58:	1a 83       	std	Y+2, r17	; 0x02
    1e5a:	2b 83       	std	Y+3, r18	; 0x03
    1e5c:	3c 83       	std	Y+4, r19	; 0x04
	opt.spimode=flags;
    1e5e:	4d 83       	std	Y+5, r20	; 0x05
	opt.data_order=false;
    1e60:	1e 82       	std	Y+6, r1	; 0x06
	usart_init_spi(usart, &opt);
    1e62:	be 01       	movw	r22, r28
    1e64:	6f 5f       	subi	r22, 0xFF	; 255
    1e66:	7f 4f       	sbci	r23, 0xFF	; 255
    1e68:	0e 94 2c 1a 	call	0x3458	; 0x3458 <usart_init_spi>
}
    1e6c:	26 96       	adiw	r28, 0x06	; 6
    1e6e:	cd bf       	out	0x3d, r28	; 61
    1e70:	de bf       	out	0x3e, r29	; 62
    1e72:	df 91       	pop	r29
    1e74:	cf 91       	pop	r28
    1e76:	1f 91       	pop	r17
    1e78:	0f 91       	pop	r16
    1e7a:	08 95       	ret

00001e7c <udi_cdc_comm_enable>:
}

bool udi_cdc_is_tx_ready(void)
{
	return udi_cdc_multi_is_tx_ready(0);
}
    1e7c:	10 92 fd 23 	sts	0x23FD, r1
    1e80:	10 92 fe 23 	sts	0x23FE, r1
    1e84:	10 92 ff 23 	sts	0x23FF, r1
    1e88:	81 ea       	ldi	r24, 0xA1	; 161
    1e8a:	80 93 00 24 	sts	0x2400, r24
    1e8e:	80 e2       	ldi	r24, 0x20	; 32
    1e90:	80 93 01 24 	sts	0x2401, r24
    1e94:	10 92 02 24 	sts	0x2402, r1
    1e98:	10 92 03 24 	sts	0x2403, r1
    1e9c:	10 92 04 24 	sts	0x2404, r1
    1ea0:	10 92 05 24 	sts	0x2405, r1
    1ea4:	82 e0       	ldi	r24, 0x02	; 2
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	80 93 06 24 	sts	0x2406, r24
    1eac:	90 93 07 24 	sts	0x2407, r25
    1eb0:	10 92 08 24 	sts	0x2408, r1
    1eb4:	10 92 09 24 	sts	0x2409, r1
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	92 ec       	ldi	r25, 0xC2	; 194
    1ebc:	a1 e0       	ldi	r26, 0x01	; 1
    1ebe:	b0 e0       	ldi	r27, 0x00	; 0
    1ec0:	80 93 0a 24 	sts	0x240A, r24
    1ec4:	90 93 0b 24 	sts	0x240B, r25
    1ec8:	a0 93 0c 24 	sts	0x240C, r26
    1ecc:	b0 93 0d 24 	sts	0x240D, r27
    1ed0:	10 92 0e 24 	sts	0x240E, r1
    1ed4:	10 92 0f 24 	sts	0x240F, r1
    1ed8:	88 e0       	ldi	r24, 0x08	; 8
    1eda:	80 93 10 24 	sts	0x2410, r24
    1ede:	80 91 fd 23 	lds	r24, 0x23FD
    1ee2:	8f 5f       	subi	r24, 0xFF	; 255
    1ee4:	80 93 fd 23 	sts	0x23FD, r24
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	08 95       	ret

00001eec <udi_cdc_comm_disable>:
    1eec:	80 91 fd 23 	lds	r24, 0x23FD
    1ef0:	81 50       	subi	r24, 0x01	; 1
    1ef2:	80 93 fd 23 	sts	0x23FD, r24
    1ef6:	08 95       	ret

00001ef8 <udi_cdc_data_disable>:
    1ef8:	80 91 fc 23 	lds	r24, 0x23FC
    1efc:	81 50       	subi	r24, 0x01	; 1
    1efe:	80 93 fc 23 	sts	0x23FC, r24
    1f02:	80 91 fc 23 	lds	r24, 0x23FC
    1f06:	10 92 fb 23 	sts	0x23FB, r1
    1f0a:	08 95       	ret

00001f0c <udi_cdc_data_setup>:
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	08 95       	ret

00001f10 <udi_cdc_getsetting>:
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	08 95       	ret

00001f14 <udi_cdc_line_coding_received>:
    1f14:	08 95       	ret

00001f16 <udi_cdc_tx_send>:
    1f16:	ff 92       	push	r15
    1f18:	0f 93       	push	r16
    1f1a:	1f 93       	push	r17
    1f1c:	cf 93       	push	r28
    1f1e:	df 93       	push	r29
    1f20:	80 91 f5 23 	lds	r24, 0x23F5
    1f24:	81 11       	cpse	r24, r1
    1f26:	6c c0       	rjmp	.+216    	; 0x2000 <udi_cdc_tx_send+0xea>
    1f28:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <udd_is_high_speed>
    1f2c:	88 23       	and	r24, r24
    1f2e:	51 f0       	breq	.+20     	; 0x1f44 <udi_cdc_tx_send+0x2e>
    1f30:	c0 91 15 24 	lds	r28, 0x2415
    1f34:	d0 91 16 24 	lds	r29, 0x2416
    1f38:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <udd_get_micro_frame_number>
    1f3c:	c8 17       	cp	r28, r24
    1f3e:	d9 07       	cpc	r29, r25
    1f40:	59 f4       	brne	.+22     	; 0x1f58 <udi_cdc_tx_send+0x42>
    1f42:	5e c0       	rjmp	.+188    	; 0x2000 <udi_cdc_tx_send+0xea>
    1f44:	c0 91 15 24 	lds	r28, 0x2415
    1f48:	d0 91 16 24 	lds	r29, 0x2416
    1f4c:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <udd_get_frame_number>
    1f50:	c8 17       	cp	r28, r24
    1f52:	d9 07       	cpc	r29, r25
    1f54:	09 f4       	brne	.+2      	; 0x1f58 <udi_cdc_tx_send+0x42>
    1f56:	54 c0       	rjmp	.+168    	; 0x2000 <udi_cdc_tx_send+0xea>
    1f58:	8f b7       	in	r24, 0x3f	; 63
    1f5a:	f8 94       	cli
    1f5c:	c0 91 f6 23 	lds	r28, 0x23F6
    1f60:	90 91 f4 23 	lds	r25, 0x23F4
    1f64:	91 11       	cpse	r25, r1
    1f66:	06 c0       	rjmp	.+12     	; 0x1f74 <udi_cdc_tx_send+0x5e>
    1f68:	91 e0       	ldi	r25, 0x01	; 1
    1f6a:	c1 11       	cpse	r28, r1
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	90 93 f6 23 	sts	0x23F6, r25
    1f72:	04 c0       	rjmp	.+8      	; 0x1f7c <udi_cdc_tx_send+0x66>
    1f74:	91 e0       	ldi	r25, 0x01	; 1
    1f76:	c1 11       	cpse	r28, r1
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	c9 2f       	mov	r28, r25
    1f7c:	91 e0       	ldi	r25, 0x01	; 1
    1f7e:	90 93 f5 23 	sts	0x23F5, r25
    1f82:	8f bf       	out	0x3f, r24	; 63
    1f84:	d0 e0       	ldi	r29, 0x00	; 0
    1f86:	fe 01       	movw	r30, r28
    1f88:	ee 0f       	add	r30, r30
    1f8a:	ff 1f       	adc	r31, r31
    1f8c:	ef 5e       	subi	r30, 0xEF	; 239
    1f8e:	fb 4d       	sbci	r31, 0xDB	; 219
    1f90:	ff 24       	eor	r15, r15
    1f92:	f3 94       	inc	r15
    1f94:	80 81       	ld	r24, Z
    1f96:	91 81       	ldd	r25, Z+1	; 0x01
    1f98:	80 34       	cpi	r24, 0x40	; 64
    1f9a:	91 40       	sbci	r25, 0x01	; 1
    1f9c:	09 f4       	brne	.+2      	; 0x1fa0 <udi_cdc_tx_send+0x8a>
    1f9e:	f1 2c       	mov	r15, r1
    1fa0:	ff 20       	and	r15, r15
    1fa2:	91 f0       	breq	.+36     	; 0x1fc8 <udi_cdc_tx_send+0xb2>
    1fa4:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <udd_is_high_speed>
    1fa8:	88 23       	and	r24, r24
    1faa:	39 f0       	breq	.+14     	; 0x1fba <udi_cdc_tx_send+0xa4>
    1fac:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <udd_get_micro_frame_number>
    1fb0:	80 93 15 24 	sts	0x2415, r24
    1fb4:	90 93 16 24 	sts	0x2416, r25
    1fb8:	0b c0       	rjmp	.+22     	; 0x1fd0 <udi_cdc_tx_send+0xba>
    1fba:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <udd_get_frame_number>
    1fbe:	80 93 15 24 	sts	0x2415, r24
    1fc2:	90 93 16 24 	sts	0x2416, r25
    1fc6:	04 c0       	rjmp	.+8      	; 0x1fd0 <udi_cdc_tx_send+0xba>
    1fc8:	10 92 15 24 	sts	0x2415, r1
    1fcc:	10 92 16 24 	sts	0x2416, r1
    1fd0:	fe 01       	movw	r30, r28
    1fd2:	ee 0f       	add	r30, r30
    1fd4:	ff 1f       	adc	r31, r31
    1fd6:	ef 5e       	subi	r30, 0xEF	; 239
    1fd8:	fb 4d       	sbci	r31, 0xDB	; 219
    1fda:	20 81       	ld	r18, Z
    1fdc:	31 81       	ldd	r19, Z+1	; 0x01
    1fde:	80 e4       	ldi	r24, 0x40	; 64
    1fe0:	91 e0       	ldi	r25, 0x01	; 1
    1fe2:	c8 9f       	mul	r28, r24
    1fe4:	a0 01       	movw	r20, r0
    1fe6:	c9 9f       	mul	r28, r25
    1fe8:	50 0d       	add	r21, r0
    1fea:	d8 9f       	mul	r29, r24
    1fec:	50 0d       	add	r21, r0
    1fee:	11 24       	eor	r1, r1
    1ff0:	44 5e       	subi	r20, 0xE4	; 228
    1ff2:	5b 4d       	sbci	r21, 0xDB	; 219
    1ff4:	08 e0       	ldi	r16, 0x08	; 8
    1ff6:	10 e1       	ldi	r17, 0x10	; 16
    1ff8:	6f 2d       	mov	r22, r15
    1ffa:	81 e8       	ldi	r24, 0x81	; 129
    1ffc:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <udd_ep_run>
    2000:	df 91       	pop	r29
    2002:	cf 91       	pop	r28
    2004:	1f 91       	pop	r17
    2006:	0f 91       	pop	r16
    2008:	ff 90       	pop	r15
    200a:	08 95       	ret

0000200c <udi_cdc_data_sof_notify>:
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	83 cf       	rjmp	.-250    	; 0x1f16 <udi_cdc_tx_send>

00002010 <udi_cdc_data_sent>:
    2010:	81 11       	cpse	r24, r1
    2012:	15 c0       	rjmp	.+42     	; 0x203e <udi_cdc_data_sent+0x2e>
    2014:	20 91 f6 23 	lds	r18, 0x23F6
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	22 23       	and	r18, r18
    201e:	11 f0       	breq	.+4      	; 0x2024 <udi_cdc_data_sent+0x14>
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	fc 01       	movw	r30, r24
    2026:	ee 0f       	add	r30, r30
    2028:	ff 1f       	adc	r31, r31
    202a:	ef 5e       	subi	r30, 0xEF	; 239
    202c:	fb 4d       	sbci	r31, 0xDB	; 219
    202e:	10 82       	st	Z, r1
    2030:	11 82       	std	Z+1, r1	; 0x01
    2032:	10 92 f4 23 	sts	0x23F4, r1
    2036:	10 92 f5 23 	sts	0x23F5, r1
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	6c cf       	rjmp	.-296    	; 0x1f16 <udi_cdc_tx_send>
    203e:	08 95       	ret

00002040 <udi_cdc_comm_setup>:
    2040:	80 91 6b 2a 	lds	r24, 0x2A6B
    2044:	88 23       	and	r24, r24
    2046:	ec f4       	brge	.+58     	; 0x2082 <udi_cdc_comm_setup+0x42>
    2048:	80 76       	andi	r24, 0x60	; 96
    204a:	80 32       	cpi	r24, 0x20	; 32
    204c:	09 f0       	breq	.+2      	; 0x2050 <udi_cdc_comm_setup+0x10>
    204e:	44 c0       	rjmp	.+136    	; 0x20d8 <udi_cdc_comm_setup+0x98>
    2050:	80 91 6c 2a 	lds	r24, 0x2A6C
    2054:	81 32       	cpi	r24, 0x21	; 33
    2056:	09 f0       	breq	.+2      	; 0x205a <udi_cdc_comm_setup+0x1a>
    2058:	41 c0       	rjmp	.+130    	; 0x20dc <udi_cdc_comm_setup+0x9c>
    205a:	80 91 71 2a 	lds	r24, 0x2A71
    205e:	90 91 72 2a 	lds	r25, 0x2A72
    2062:	07 97       	sbiw	r24, 0x07	; 7
    2064:	e9 f5       	brne	.+122    	; 0x20e0 <udi_cdc_comm_setup+0xa0>
    2066:	8a e0       	ldi	r24, 0x0A	; 10
    2068:	94 e2       	ldi	r25, 0x24	; 36
    206a:	80 93 73 2a 	sts	0x2A73, r24
    206e:	90 93 74 2a 	sts	0x2A74, r25
    2072:	87 e0       	ldi	r24, 0x07	; 7
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	80 93 75 2a 	sts	0x2A75, r24
    207a:	90 93 76 2a 	sts	0x2A76, r25
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	08 95       	ret
    2082:	80 76       	andi	r24, 0x60	; 96
    2084:	80 32       	cpi	r24, 0x20	; 32
    2086:	71 f5       	brne	.+92     	; 0x20e4 <udi_cdc_comm_setup+0xa4>
    2088:	80 91 6c 2a 	lds	r24, 0x2A6C
    208c:	80 32       	cpi	r24, 0x20	; 32
    208e:	19 f0       	breq	.+6      	; 0x2096 <udi_cdc_comm_setup+0x56>
    2090:	82 32       	cpi	r24, 0x22	; 34
    2092:	51 f5       	brne	.+84     	; 0x20e8 <udi_cdc_comm_setup+0xa8>
    2094:	1a c0       	rjmp	.+52     	; 0x20ca <udi_cdc_comm_setup+0x8a>
    2096:	80 91 71 2a 	lds	r24, 0x2A71
    209a:	90 91 72 2a 	lds	r25, 0x2A72
    209e:	07 97       	sbiw	r24, 0x07	; 7
    20a0:	29 f5       	brne	.+74     	; 0x20ec <udi_cdc_comm_setup+0xac>
    20a2:	8a e8       	ldi	r24, 0x8A	; 138
    20a4:	9f e0       	ldi	r25, 0x0F	; 15
    20a6:	80 93 77 2a 	sts	0x2A77, r24
    20aa:	90 93 78 2a 	sts	0x2A78, r25
    20ae:	8a e0       	ldi	r24, 0x0A	; 10
    20b0:	94 e2       	ldi	r25, 0x24	; 36
    20b2:	80 93 73 2a 	sts	0x2A73, r24
    20b6:	90 93 74 2a 	sts	0x2A74, r25
    20ba:	87 e0       	ldi	r24, 0x07	; 7
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	80 93 75 2a 	sts	0x2A75, r24
    20c2:	90 93 76 2a 	sts	0x2A76, r25
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	08 95       	ret
    20ca:	80 91 6d 2a 	lds	r24, 0x2A6D
    20ce:	81 70       	andi	r24, 0x01	; 1
    20d0:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <cdc_set_dtr>
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	08 95       	ret
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	08 95       	ret
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	08 95       	ret
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	08 95       	ret
    20e4:	80 e0       	ldi	r24, 0x00	; 0
    20e6:	08 95       	ret
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	08 95       	ret
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	08 95       	ret

000020f0 <udi_cdc_multi_is_rx_ready>:
    20f0:	20 91 f8 23 	lds	r18, 0x23F8
    20f4:	30 91 f9 23 	lds	r19, 0x23F9
    20f8:	e0 91 fa 23 	lds	r30, 0x23FA
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	ee 0f       	add	r30, r30
    2100:	ff 1f       	adc	r31, r31
    2102:	e9 5e       	subi	r30, 0xE9	; 233
    2104:	fb 4d       	sbci	r31, 0xDB	; 219
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	40 81       	ld	r20, Z
    210a:	51 81       	ldd	r21, Z+1	; 0x01
    210c:	24 17       	cp	r18, r20
    210e:	35 07       	cpc	r19, r21
    2110:	08 f0       	brcs	.+2      	; 0x2114 <udi_cdc_multi_is_rx_ready+0x24>
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	08 95       	ret

00002116 <udi_cdc_rx_start>:
    2116:	0f 93       	push	r16
    2118:	1f 93       	push	r17
    211a:	cf 93       	push	r28
    211c:	df 93       	push	r29
    211e:	4f b7       	in	r20, 0x3f	; 63
    2120:	f8 94       	cli
    2122:	50 91 fa 23 	lds	r21, 0x23FA
    2126:	80 91 f7 23 	lds	r24, 0x23F7
    212a:	81 11       	cpse	r24, r1
    212c:	10 c0       	rjmp	.+32     	; 0x214e <udi_cdc_rx_start+0x38>
    212e:	20 91 f8 23 	lds	r18, 0x23F8
    2132:	30 91 f9 23 	lds	r19, 0x23F9
    2136:	c5 2f       	mov	r28, r21
    2138:	d0 e0       	ldi	r29, 0x00	; 0
    213a:	fe 01       	movw	r30, r28
    213c:	ee 0f       	add	r30, r30
    213e:	ff 1f       	adc	r31, r31
    2140:	e9 5e       	subi	r30, 0xE9	; 233
    2142:	fb 4d       	sbci	r31, 0xDB	; 219
    2144:	80 81       	ld	r24, Z
    2146:	91 81       	ldd	r25, Z+1	; 0x01
    2148:	28 17       	cp	r18, r24
    214a:	39 07       	cpc	r19, r25
    214c:	18 f4       	brcc	.+6      	; 0x2154 <udi_cdc_rx_start+0x3e>
    214e:	4f bf       	out	0x3f, r20	; 63
    2150:	80 e0       	ldi	r24, 0x00	; 0
    2152:	22 c0       	rjmp	.+68     	; 0x2198 <udi_cdc_rx_start+0x82>
    2154:	10 92 f8 23 	sts	0x23F8, r1
    2158:	10 92 f9 23 	sts	0x23F9, r1
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	51 11       	cpse	r21, r1
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	80 93 fa 23 	sts	0x23FA, r24
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	80 93 f7 23 	sts	0x23F7, r24
    216c:	4f bf       	out	0x3f, r20	; 63
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	bf df       	rcall	.-130    	; 0x20f0 <udi_cdc_multi_is_rx_ready>
    2172:	80 e4       	ldi	r24, 0x40	; 64
    2174:	91 e0       	ldi	r25, 0x01	; 1
    2176:	c8 9f       	mul	r28, r24
    2178:	a0 01       	movw	r20, r0
    217a:	c9 9f       	mul	r28, r25
    217c:	50 0d       	add	r21, r0
    217e:	d8 9f       	mul	r29, r24
    2180:	50 0d       	add	r21, r0
    2182:	11 24       	eor	r1, r1
    2184:	44 56       	subi	r20, 0x64	; 100
    2186:	59 4d       	sbci	r21, 0xD9	; 217
    2188:	01 ed       	ldi	r16, 0xD1	; 209
    218a:	10 e1       	ldi	r17, 0x10	; 16
    218c:	20 e4       	ldi	r18, 0x40	; 64
    218e:	31 e0       	ldi	r19, 0x01	; 1
    2190:	61 e0       	ldi	r22, 0x01	; 1
    2192:	82 e0       	ldi	r24, 0x02	; 2
    2194:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <udd_ep_run>
    2198:	df 91       	pop	r29
    219a:	cf 91       	pop	r28
    219c:	1f 91       	pop	r17
    219e:	0f 91       	pop	r16
    21a0:	08 95       	ret

000021a2 <udi_cdc_data_received>:
    21a2:	0f 93       	push	r16
    21a4:	1f 93       	push	r17
    21a6:	94 2f       	mov	r25, r20
    21a8:	81 11       	cpse	r24, r1
    21aa:	27 c0       	rjmp	.+78     	; 0x21fa <udi_cdc_data_received+0x58>
    21ac:	80 91 fa 23 	lds	r24, 0x23FA
    21b0:	e1 e0       	ldi	r30, 0x01	; 1
    21b2:	81 11       	cpse	r24, r1
    21b4:	e0 e0       	ldi	r30, 0x00	; 0
    21b6:	61 15       	cp	r22, r1
    21b8:	71 05       	cpc	r23, r1
    21ba:	a1 f4       	brne	.+40     	; 0x21e4 <udi_cdc_data_received+0x42>
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	20 e4       	ldi	r18, 0x40	; 64
    21c0:	31 e0       	ldi	r19, 0x01	; 1
    21c2:	e2 9f       	mul	r30, r18
    21c4:	b0 01       	movw	r22, r0
    21c6:	e3 9f       	mul	r30, r19
    21c8:	70 0d       	add	r23, r0
    21ca:	f2 9f       	mul	r31, r18
    21cc:	70 0d       	add	r23, r0
    21ce:	11 24       	eor	r1, r1
    21d0:	ab 01       	movw	r20, r22
    21d2:	44 56       	subi	r20, 0x64	; 100
    21d4:	59 4d       	sbci	r21, 0xD9	; 217
    21d6:	01 ed       	ldi	r16, 0xD1	; 209
    21d8:	10 e1       	ldi	r17, 0x10	; 16
    21da:	61 e0       	ldi	r22, 0x01	; 1
    21dc:	89 2f       	mov	r24, r25
    21de:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <udd_ep_run>
    21e2:	0b c0       	rjmp	.+22     	; 0x21fa <udi_cdc_data_received+0x58>
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	ee 0f       	add	r30, r30
    21e8:	ff 1f       	adc	r31, r31
    21ea:	e9 5e       	subi	r30, 0xE9	; 233
    21ec:	fb 4d       	sbci	r31, 0xDB	; 219
    21ee:	60 83       	st	Z, r22
    21f0:	71 83       	std	Z+1, r23	; 0x01
    21f2:	10 92 f7 23 	sts	0x23F7, r1
    21f6:	80 e0       	ldi	r24, 0x00	; 0
    21f8:	8e df       	rcall	.-228    	; 0x2116 <udi_cdc_rx_start>
    21fa:	1f 91       	pop	r17
    21fc:	0f 91       	pop	r16
    21fe:	08 95       	ret

00002200 <udi_cdc_data_enable>:
    2200:	10 92 fc 23 	sts	0x23FC, r1
    2204:	10 92 f5 23 	sts	0x23F5, r1
    2208:	10 92 f4 23 	sts	0x23F4, r1
    220c:	10 92 f6 23 	sts	0x23F6, r1
    2210:	10 92 11 24 	sts	0x2411, r1
    2214:	10 92 12 24 	sts	0x2412, r1
    2218:	10 92 13 24 	sts	0x2413, r1
    221c:	10 92 14 24 	sts	0x2414, r1
    2220:	10 92 15 24 	sts	0x2415, r1
    2224:	10 92 16 24 	sts	0x2416, r1
    2228:	80 e0       	ldi	r24, 0x00	; 0
    222a:	75 de       	rcall	.-790    	; 0x1f16 <udi_cdc_tx_send>
    222c:	10 92 f7 23 	sts	0x23F7, r1
    2230:	10 92 fa 23 	sts	0x23FA, r1
    2234:	10 92 17 24 	sts	0x2417, r1
    2238:	10 92 18 24 	sts	0x2418, r1
    223c:	10 92 f8 23 	sts	0x23F8, r1
    2240:	10 92 f9 23 	sts	0x23F9, r1
    2244:	80 e0       	ldi	r24, 0x00	; 0
    2246:	67 df       	rcall	.-306    	; 0x2116 <udi_cdc_rx_start>
    2248:	88 23       	and	r24, r24
    224a:	61 f0       	breq	.+24     	; 0x2264 <udi_cdc_data_enable+0x64>
    224c:	80 91 fc 23 	lds	r24, 0x23FC
    2250:	8f 5f       	subi	r24, 0xFF	; 255
    2252:	80 93 fc 23 	sts	0x23FC, r24
    2256:	80 91 fc 23 	lds	r24, 0x23FC
    225a:	81 30       	cpi	r24, 0x01	; 1
    225c:	29 f4       	brne	.+10     	; 0x2268 <udi_cdc_data_enable+0x68>
    225e:	80 93 fb 23 	sts	0x23FB, r24
    2262:	08 95       	ret
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	08 95       	ret
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	08 95       	ret

0000226c <udi_cdc_is_rx_ready>:
    226c:	80 e0       	ldi	r24, 0x00	; 0
    226e:	40 cf       	rjmp	.-384    	; 0x20f0 <udi_cdc_multi_is_rx_ready>

00002270 <udi_cdc_multi_getc>:
    2270:	ff 92       	push	r15
    2272:	0f 93       	push	r16
    2274:	1f 93       	push	r17
    2276:	cf 93       	push	r28
    2278:	df 93       	push	r29
    227a:	ff 24       	eor	r15, r15
    227c:	f3 94       	inc	r15
    227e:	80 91 10 24 	lds	r24, 0x2410
    2282:	89 30       	cpi	r24, 0x09	; 9
    2284:	09 f0       	breq	.+2      	; 0x2288 <udi_cdc_multi_getc+0x18>
    2286:	f1 2c       	mov	r15, r1
    2288:	00 e0       	ldi	r16, 0x00	; 0
    228a:	10 e0       	ldi	r17, 0x00	; 0
    228c:	c0 e4       	ldi	r28, 0x40	; 64
    228e:	d1 e0       	ldi	r29, 0x01	; 1
    2290:	20 91 f8 23 	lds	r18, 0x23F8
    2294:	30 91 f9 23 	lds	r19, 0x23F9
    2298:	40 91 fa 23 	lds	r20, 0x23FA
    229c:	50 e0       	ldi	r21, 0x00	; 0
    229e:	fa 01       	movw	r30, r20
    22a0:	ee 0f       	add	r30, r30
    22a2:	ff 1f       	adc	r31, r31
    22a4:	e9 5e       	subi	r30, 0xE9	; 233
    22a6:	fb 4d       	sbci	r31, 0xDB	; 219
    22a8:	60 81       	ld	r22, Z
    22aa:	71 81       	ldd	r23, Z+1	; 0x01
    22ac:	26 17       	cp	r18, r22
    22ae:	37 07       	cpc	r19, r23
    22b0:	38 f0       	brcs	.+14     	; 0x22c0 <udi_cdc_multi_getc+0x50>
    22b2:	80 91 fb 23 	lds	r24, 0x23FB
    22b6:	81 11       	cpse	r24, r1
    22b8:	eb cf       	rjmp	.-42     	; 0x2290 <udi_cdc_multi_getc+0x20>
    22ba:	00 e0       	ldi	r16, 0x00	; 0
    22bc:	10 e0       	ldi	r17, 0x00	; 0
    22be:	1b c0       	rjmp	.+54     	; 0x22f6 <udi_cdc_multi_getc+0x86>
    22c0:	4c 9f       	mul	r20, r28
    22c2:	f0 01       	movw	r30, r0
    22c4:	4d 9f       	mul	r20, r29
    22c6:	f0 0d       	add	r31, r0
    22c8:	5c 9f       	mul	r21, r28
    22ca:	f0 0d       	add	r31, r0
    22cc:	11 24       	eor	r1, r1
    22ce:	e2 0f       	add	r30, r18
    22d0:	f3 1f       	adc	r31, r19
    22d2:	e4 56       	subi	r30, 0x64	; 100
    22d4:	f9 4d       	sbci	r31, 0xD9	; 217
    22d6:	80 81       	ld	r24, Z
    22d8:	08 2b       	or	r16, r24
    22da:	2f 5f       	subi	r18, 0xFF	; 255
    22dc:	3f 4f       	sbci	r19, 0xFF	; 255
    22de:	20 93 f8 23 	sts	0x23F8, r18
    22e2:	30 93 f9 23 	sts	0x23F9, r19
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	16 df       	rcall	.-468    	; 0x2116 <udi_cdc_rx_start>
    22ea:	ff 20       	and	r15, r15
    22ec:	21 f0       	breq	.+8      	; 0x22f6 <udi_cdc_multi_getc+0x86>
    22ee:	10 2f       	mov	r17, r16
    22f0:	00 27       	eor	r16, r16
    22f2:	f1 2c       	mov	r15, r1
    22f4:	cd cf       	rjmp	.-102    	; 0x2290 <udi_cdc_multi_getc+0x20>
    22f6:	80 2f       	mov	r24, r16
    22f8:	91 2f       	mov	r25, r17
    22fa:	df 91       	pop	r29
    22fc:	cf 91       	pop	r28
    22fe:	1f 91       	pop	r17
    2300:	0f 91       	pop	r16
    2302:	ff 90       	pop	r15
    2304:	08 95       	ret

00002306 <udi_cdc_getc>:
    2306:	80 e0       	ldi	r24, 0x00	; 0
    2308:	b3 cf       	rjmp	.-154    	; 0x2270 <udi_cdc_multi_getc>

0000230a <udi_cdc_multi_is_tx_ready>:
    230a:	e0 91 f6 23 	lds	r30, 0x23F6
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	ee 0f       	add	r30, r30
    2312:	ff 1f       	adc	r31, r31
    2314:	ef 5e       	subi	r30, 0xEF	; 239
    2316:	fb 4d       	sbci	r31, 0xDB	; 219
    2318:	80 81       	ld	r24, Z
    231a:	91 81       	ldd	r25, Z+1	; 0x01
    231c:	80 34       	cpi	r24, 0x40	; 64
    231e:	91 40       	sbci	r25, 0x01	; 1
    2320:	19 f5       	brne	.+70     	; 0x2368 <udi_cdc_multi_is_tx_ready+0x5e>
    2322:	80 91 f4 23 	lds	r24, 0x23F4
    2326:	81 11       	cpse	r24, r1
    2328:	10 c0       	rjmp	.+32     	; 0x234a <udi_cdc_multi_is_tx_ready+0x40>
    232a:	8f b7       	in	r24, 0x3f	; 63
    232c:	f8 94       	cli
    232e:	90 91 f5 23 	lds	r25, 0x23F5
    2332:	91 11       	cpse	r25, r1
    2334:	09 c0       	rjmp	.+18     	; 0x2348 <udi_cdc_multi_is_tx_ready+0x3e>
    2336:	91 e0       	ldi	r25, 0x01	; 1
    2338:	90 93 f4 23 	sts	0x23F4, r25
    233c:	20 91 f6 23 	lds	r18, 0x23F6
    2340:	21 11       	cpse	r18, r1
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	90 93 f6 23 	sts	0x23F6, r25
    2348:	8f bf       	out	0x3f, r24	; 63
    234a:	e0 91 f6 23 	lds	r30, 0x23F6
    234e:	f0 e0       	ldi	r31, 0x00	; 0
    2350:	ee 0f       	add	r30, r30
    2352:	ff 1f       	adc	r31, r31
    2354:	ef 5e       	subi	r30, 0xEF	; 239
    2356:	fb 4d       	sbci	r31, 0xDB	; 219
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	20 81       	ld	r18, Z
    235c:	31 81       	ldd	r19, Z+1	; 0x01
    235e:	20 34       	cpi	r18, 0x40	; 64
    2360:	31 40       	sbci	r19, 0x01	; 1
    2362:	19 f4       	brne	.+6      	; 0x236a <udi_cdc_multi_is_tx_ready+0x60>
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	08 95       	ret
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	08 95       	ret

0000236c <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
    236c:	ff 92       	push	r15
    236e:	0f 93       	push	r16
    2370:	1f 93       	push	r17
    2372:	cf 93       	push	r28
    2374:	df 93       	push	r29
    2376:	eb 01       	movw	r28, r22

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    2378:	ff 24       	eor	r15, r15
    237a:	f3 94       	inc	r15
    237c:	80 91 10 24 	lds	r24, 0x2410
    2380:	89 30       	cpi	r24, 0x09	; 9
    2382:	09 f0       	breq	.+2      	; 0x2386 <udi_cdc_multi_putc+0x1a>
    2384:	f1 2c       	mov	r15, r1
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
    2386:	00 e4       	ldi	r16, 0x40	; 64
    2388:	11 e0       	ldi	r17, 0x01	; 1

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	be df       	rcall	.-132    	; 0x230a <udi_cdc_multi_is_tx_ready>
    238e:	81 11       	cpse	r24, r1
    2390:	07 c0       	rjmp	.+14     	; 0x23a0 <udi_cdc_multi_putc+0x34>
		if (!udi_cdc_data_running) {
    2392:	80 91 fb 23 	lds	r24, 0x23FB
    2396:	81 11       	cpse	r24, r1
    2398:	f8 cf       	rjmp	.-16     	; 0x238a <udi_cdc_multi_putc+0x1e>
			return false;
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	25 c0       	rjmp	.+74     	; 0x23ea <udi_cdc_multi_putc+0x7e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    23a0:	4f b7       	in	r20, 0x3f	; 63
	cpu_irq_disable();
    23a2:	f8 94       	cli
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
    23a4:	20 91 f6 23 	lds	r18, 0x23F6
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	f9 01       	movw	r30, r18
    23ac:	ee 0f       	add	r30, r30
    23ae:	ff 1f       	adc	r31, r31
    23b0:	ef 5e       	subi	r30, 0xEF	; 239
    23b2:	fb 4d       	sbci	r31, 0xDB	; 219
    23b4:	80 81       	ld	r24, Z
    23b6:	91 81       	ldd	r25, Z+1	; 0x01
    23b8:	20 9f       	mul	r18, r16
    23ba:	d0 01       	movw	r26, r0
    23bc:	21 9f       	mul	r18, r17
    23be:	b0 0d       	add	r27, r0
    23c0:	30 9f       	mul	r19, r16
    23c2:	b0 0d       	add	r27, r0
    23c4:	11 24       	eor	r1, r1
    23c6:	a8 0f       	add	r26, r24
    23c8:	b9 1f       	adc	r27, r25
    23ca:	a4 5e       	subi	r26, 0xE4	; 228
    23cc:	bb 4d       	sbci	r27, 0xDB	; 219
    23ce:	cc 93       	st	X, r28
    23d0:	01 96       	adiw	r24, 0x01	; 1
    23d2:	80 83       	st	Z, r24
    23d4:	91 83       	std	Z+1, r25	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    23d6:	4f bf       	out	0x3f, r20	; 63
	cpu_irq_restore(flags);

	if (b_databit_9) {
    23d8:	ff 20       	and	r15, r15
    23da:	29 f0       	breq	.+10     	; 0x23e6 <udi_cdc_multi_putc+0x7a>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
    23dc:	cd 2f       	mov	r28, r29
    23de:	dd 0f       	add	r29, r29
    23e0:	dd 0b       	sbc	r29, r29
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
    23e2:	f1 2c       	mov	r15, r1
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
    23e4:	d2 cf       	rjmp	.-92     	; 0x238a <udi_cdc_multi_putc+0x1e>
	}
	return true;
    23e6:	21 e0       	ldi	r18, 0x01	; 1
    23e8:	30 e0       	ldi	r19, 0x00	; 0
}
    23ea:	82 2f       	mov	r24, r18
    23ec:	93 2f       	mov	r25, r19
    23ee:	df 91       	pop	r29
    23f0:	cf 91       	pop	r28
    23f2:	1f 91       	pop	r17
    23f4:	0f 91       	pop	r16
    23f6:	ff 90       	pop	r15
    23f8:	08 95       	ret

000023fa <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
    23fa:	bc 01       	movw	r22, r24
    23fc:	80 e0       	ldi	r24, 0x00	; 0
}
    23fe:	b6 cf       	rjmp	.-148    	; 0x236c <udi_cdc_multi_putc>

00002400 <udc_get_eof_conf>:

/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
    2400:	e0 91 1f 29 	lds	r30, 0x291F
    2404:	f0 91 20 29 	lds	r31, 0x2920
    2408:	01 90       	ld	r0, Z+
    240a:	f0 81       	ld	r31, Z
    240c:	e0 2d       	mov	r30, r0
    240e:	22 81       	ldd	r18, Z+2	; 0x02
    2410:	33 81       	ldd	r19, Z+3	; 0x03
    2412:	2e 0f       	add	r18, r30
    2414:	3f 1f       	adc	r19, r31
    2416:	82 2f       	mov	r24, r18
    2418:	93 2f       	mov	r25, r19
    241a:	08 95       	ret

0000241c <udc_next_desc_in_iface>:
    241c:	1f 93       	push	r17
    241e:	cf 93       	push	r28
    2420:	df 93       	push	r29
    2422:	ec 01       	movw	r28, r24
    2424:	16 2f       	mov	r17, r22
    2426:	ec df       	rcall	.-40     	; 0x2400 <udc_get_eof_conf>
    2428:	28 81       	ld	r18, Y
    242a:	fe 01       	movw	r30, r28
    242c:	e2 0f       	add	r30, r18
    242e:	f1 1d       	adc	r31, r1
    2430:	e8 17       	cp	r30, r24
    2432:	f9 07       	cpc	r31, r25
    2434:	a0 f4       	brcc	.+40     	; 0x245e <udc_next_desc_in_iface+0x42>
    2436:	21 81       	ldd	r18, Z+1	; 0x01
    2438:	24 30       	cpi	r18, 0x04	; 4
    243a:	a1 f0       	breq	.+40     	; 0x2464 <udc_next_desc_in_iface+0x48>
    243c:	21 13       	cpse	r18, r17
    243e:	06 c0       	rjmp	.+12     	; 0x244c <udc_next_desc_in_iface+0x30>
    2440:	16 c0       	rjmp	.+44     	; 0x246e <udc_next_desc_in_iface+0x52>
    2442:	21 81       	ldd	r18, Z+1	; 0x01
    2444:	24 30       	cpi	r18, 0x04	; 4
    2446:	89 f0       	breq	.+34     	; 0x246a <udc_next_desc_in_iface+0x4e>
    2448:	21 17       	cp	r18, r17
    244a:	89 f0       	breq	.+34     	; 0x246e <udc_next_desc_in_iface+0x52>
    244c:	20 81       	ld	r18, Z
    244e:	e2 0f       	add	r30, r18
    2450:	f1 1d       	adc	r31, r1
    2452:	e8 17       	cp	r30, r24
    2454:	f9 07       	cpc	r31, r25
    2456:	a8 f3       	brcs	.-22     	; 0x2442 <udc_next_desc_in_iface+0x26>
    2458:	e0 e0       	ldi	r30, 0x00	; 0
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	08 c0       	rjmp	.+16     	; 0x246e <udc_next_desc_in_iface+0x52>
    245e:	e0 e0       	ldi	r30, 0x00	; 0
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	05 c0       	rjmp	.+10     	; 0x246e <udc_next_desc_in_iface+0x52>
    2464:	e0 e0       	ldi	r30, 0x00	; 0
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	02 c0       	rjmp	.+4      	; 0x246e <udc_next_desc_in_iface+0x52>
    246a:	e0 e0       	ldi	r30, 0x00	; 0
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	8e 2f       	mov	r24, r30
    2470:	9f 2f       	mov	r25, r31
    2472:	df 91       	pop	r29
    2474:	cf 91       	pop	r28
    2476:	1f 91       	pop	r17
    2478:	08 95       	ret

0000247a <udc_update_iface_desc>:
    247a:	0f 93       	push	r16
    247c:	1f 93       	push	r17
    247e:	cf 93       	push	r28
    2480:	df 93       	push	r29
    2482:	18 2f       	mov	r17, r24
    2484:	06 2f       	mov	r16, r22
    2486:	80 91 1e 29 	lds	r24, 0x291E
    248a:	88 23       	and	r24, r24
    248c:	69 f1       	breq	.+90     	; 0x24e8 <udc_update_iface_desc+0x6e>
    248e:	e0 91 1f 29 	lds	r30, 0x291F
    2492:	f0 91 20 29 	lds	r31, 0x2920
    2496:	c0 81       	ld	r28, Z
    2498:	d1 81       	ldd	r29, Z+1	; 0x01
    249a:	8c 81       	ldd	r24, Y+4	; 0x04
    249c:	18 17       	cp	r17, r24
    249e:	30 f5       	brcc	.+76     	; 0x24ec <udc_update_iface_desc+0x72>
    24a0:	c0 93 1c 29 	sts	0x291C, r28
    24a4:	d0 93 1d 29 	sts	0x291D, r29
    24a8:	ab df       	rcall	.-170    	; 0x2400 <udc_get_eof_conf>
    24aa:	9c 01       	movw	r18, r24
    24ac:	c8 17       	cp	r28, r24
    24ae:	d9 07       	cpc	r29, r25
    24b0:	f8 f4       	brcc	.+62     	; 0x24f0 <udc_update_iface_desc+0x76>
    24b2:	99 81       	ldd	r25, Y+1	; 0x01
    24b4:	94 30       	cpi	r25, 0x04	; 4
    24b6:	61 f4       	brne	.+24     	; 0x24d0 <udc_update_iface_desc+0x56>
    24b8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ba:	91 13       	cpse	r25, r17
    24bc:	09 c0       	rjmp	.+18     	; 0x24d0 <udc_update_iface_desc+0x56>
    24be:	8b 81       	ldd	r24, Y+3	; 0x03
    24c0:	80 13       	cpse	r24, r16
    24c2:	06 c0       	rjmp	.+12     	; 0x24d0 <udc_update_iface_desc+0x56>
    24c4:	c0 93 1c 29 	sts	0x291C, r28
    24c8:	d0 93 1d 29 	sts	0x291D, r29
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	11 c0       	rjmp	.+34     	; 0x24f2 <udc_update_iface_desc+0x78>
    24d0:	98 81       	ld	r25, Y
    24d2:	c9 0f       	add	r28, r25
    24d4:	d1 1d       	adc	r29, r1
    24d6:	c2 17       	cp	r28, r18
    24d8:	d3 07       	cpc	r29, r19
    24da:	58 f3       	brcs	.-42     	; 0x24b2 <udc_update_iface_desc+0x38>
    24dc:	c0 93 1c 29 	sts	0x291C, r28
    24e0:	d0 93 1d 29 	sts	0x291D, r29
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	05 c0       	rjmp	.+10     	; 0x24f2 <udc_update_iface_desc+0x78>
    24e8:	80 e0       	ldi	r24, 0x00	; 0
    24ea:	03 c0       	rjmp	.+6      	; 0x24f2 <udc_update_iface_desc+0x78>
    24ec:	80 e0       	ldi	r24, 0x00	; 0
    24ee:	01 c0       	rjmp	.+2      	; 0x24f2 <udc_update_iface_desc+0x78>
    24f0:	80 e0       	ldi	r24, 0x00	; 0
    24f2:	df 91       	pop	r29
    24f4:	cf 91       	pop	r28
    24f6:	1f 91       	pop	r17
    24f8:	0f 91       	pop	r16
    24fa:	08 95       	ret

000024fc <udc_valid_address>:
    24fc:	80 91 6d 2a 	lds	r24, 0x2A6D
    2500:	8f 77       	andi	r24, 0x7F	; 127
    2502:	0c 94 65 1e 	jmp	0x3cca	; 0x3cca <udd_set_address>

00002506 <udc_iface_enable>:
    2506:	1f 93       	push	r17
    2508:	cf 93       	push	r28
    250a:	df 93       	push	r29
    250c:	18 2f       	mov	r17, r24
    250e:	b5 df       	rcall	.-150    	; 0x247a <udc_update_iface_desc>
    2510:	88 23       	and	r24, r24
    2512:	49 f1       	breq	.+82     	; 0x2566 <udc_iface_enable+0x60>
    2514:	c0 91 1c 29 	lds	r28, 0x291C
    2518:	d0 91 1d 29 	lds	r29, 0x291D
    251c:	65 e0       	ldi	r22, 0x05	; 5
    251e:	ce 01       	movw	r24, r28
    2520:	7d df       	rcall	.-262    	; 0x241c <udc_next_desc_in_iface>
    2522:	ec 01       	movw	r28, r24
    2524:	00 97       	sbiw	r24, 0x00	; 0
    2526:	49 f0       	breq	.+18     	; 0x253a <udc_iface_enable+0x34>
    2528:	4c 81       	ldd	r20, Y+4	; 0x04
    252a:	5d 81       	ldd	r21, Y+5	; 0x05
    252c:	6b 81       	ldd	r22, Y+3	; 0x03
    252e:	8a 81       	ldd	r24, Y+2	; 0x02
    2530:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <udd_ep_alloc>
    2534:	81 11       	cpse	r24, r1
    2536:	f2 cf       	rjmp	.-28     	; 0x251c <udc_iface_enable+0x16>
    2538:	17 c0       	rjmp	.+46     	; 0x2568 <udc_iface_enable+0x62>
    253a:	a0 91 1f 29 	lds	r26, 0x291F
    253e:	b0 91 20 29 	lds	r27, 0x2920
    2542:	81 2f       	mov	r24, r17
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	88 0f       	add	r24, r24
    2548:	99 1f       	adc	r25, r25
    254a:	12 96       	adiw	r26, 0x02	; 2
    254c:	ed 91       	ld	r30, X+
    254e:	fc 91       	ld	r31, X
    2550:	13 97       	sbiw	r26, 0x03	; 3
    2552:	e8 0f       	add	r30, r24
    2554:	f9 1f       	adc	r31, r25
    2556:	01 90       	ld	r0, Z+
    2558:	f0 81       	ld	r31, Z
    255a:	e0 2d       	mov	r30, r0
    255c:	01 90       	ld	r0, Z+
    255e:	f0 81       	ld	r31, Z
    2560:	e0 2d       	mov	r30, r0
    2562:	19 95       	eicall
    2564:	01 c0       	rjmp	.+2      	; 0x2568 <udc_iface_enable+0x62>
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	df 91       	pop	r29
    256a:	cf 91       	pop	r28
    256c:	1f 91       	pop	r17
    256e:	08 95       	ret

00002570 <udc_iface_disable>:
    2570:	0f 93       	push	r16
    2572:	1f 93       	push	r17
    2574:	cf 93       	push	r28
    2576:	df 93       	push	r29
    2578:	c8 2f       	mov	r28, r24
    257a:	60 e0       	ldi	r22, 0x00	; 0
    257c:	7e df       	rcall	.-260    	; 0x247a <udc_update_iface_desc>
    257e:	88 23       	and	r24, r24
    2580:	89 f1       	breq	.+98     	; 0x25e4 <udc_iface_disable+0x74>
    2582:	a0 91 1f 29 	lds	r26, 0x291F
    2586:	b0 91 20 29 	lds	r27, 0x2920
    258a:	ec 2f       	mov	r30, r28
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	ee 0f       	add	r30, r30
    2590:	ff 1f       	adc	r31, r31
    2592:	12 96       	adiw	r26, 0x02	; 2
    2594:	2d 91       	ld	r18, X+
    2596:	3c 91       	ld	r19, X
    2598:	13 97       	sbiw	r26, 0x03	; 3
    259a:	e2 0f       	add	r30, r18
    259c:	f3 1f       	adc	r31, r19
    259e:	00 81       	ld	r16, Z
    25a0:	11 81       	ldd	r17, Z+1	; 0x01
    25a2:	d8 01       	movw	r26, r16
    25a4:	16 96       	adiw	r26, 0x06	; 6
    25a6:	ed 91       	ld	r30, X+
    25a8:	fc 91       	ld	r31, X
    25aa:	17 97       	sbiw	r26, 0x07	; 7
    25ac:	19 95       	eicall
    25ae:	68 2f       	mov	r22, r24
    25b0:	8c 2f       	mov	r24, r28
    25b2:	63 df       	rcall	.-314    	; 0x247a <udc_update_iface_desc>
    25b4:	88 23       	and	r24, r24
    25b6:	c1 f0       	breq	.+48     	; 0x25e8 <udc_iface_disable+0x78>
    25b8:	c0 91 1c 29 	lds	r28, 0x291C
    25bc:	d0 91 1d 29 	lds	r29, 0x291D
    25c0:	65 e0       	ldi	r22, 0x05	; 5
    25c2:	ce 01       	movw	r24, r28
    25c4:	2b df       	rcall	.-426    	; 0x241c <udc_next_desc_in_iface>
    25c6:	ec 01       	movw	r28, r24
    25c8:	00 97       	sbiw	r24, 0x00	; 0
    25ca:	21 f0       	breq	.+8      	; 0x25d4 <udc_iface_disable+0x64>
    25cc:	8a 81       	ldd	r24, Y+2	; 0x02
    25ce:	0e 94 75 1f 	call	0x3eea	; 0x3eea <udd_ep_free>
    25d2:	f6 cf       	rjmp	.-20     	; 0x25c0 <udc_iface_disable+0x50>
    25d4:	d8 01       	movw	r26, r16
    25d6:	12 96       	adiw	r26, 0x02	; 2
    25d8:	ed 91       	ld	r30, X+
    25da:	fc 91       	ld	r31, X
    25dc:	13 97       	sbiw	r26, 0x03	; 3
    25de:	19 95       	eicall
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	03 c0       	rjmp	.+6      	; 0x25ea <udc_iface_disable+0x7a>
    25e4:	80 e0       	ldi	r24, 0x00	; 0
    25e6:	01 c0       	rjmp	.+2      	; 0x25ea <udc_iface_disable+0x7a>
    25e8:	80 e0       	ldi	r24, 0x00	; 0
    25ea:	df 91       	pop	r29
    25ec:	cf 91       	pop	r28
    25ee:	1f 91       	pop	r17
    25f0:	0f 91       	pop	r16
    25f2:	08 95       	ret

000025f4 <udc_start>:
    25f4:	0c 94 cf 1d 	jmp	0x3b9e	; 0x3b9e <udd_enable>
    25f8:	08 95       	ret

000025fa <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
    25fa:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    25fc:	80 91 1e 29 	lds	r24, 0x291E
    2600:	88 23       	and	r24, r24
    2602:	c1 f0       	breq	.+48     	; 0x2634 <udc_reset+0x3a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2604:	e0 91 1f 29 	lds	r30, 0x291F
    2608:	f0 91 20 29 	lds	r31, 0x2920
    260c:	01 90       	ld	r0, Z+
    260e:	f0 81       	ld	r31, Z
    2610:	e0 2d       	mov	r30, r0
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    2612:	84 81       	ldd	r24, Z+4	; 0x04
    2614:	88 23       	and	r24, r24
    2616:	71 f0       	breq	.+28     	; 0x2634 <udc_reset+0x3a>
    2618:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
    261a:	8c 2f       	mov	r24, r28
    261c:	a9 df       	rcall	.-174    	; 0x2570 <udc_iface_disable>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    261e:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2620:	e0 91 1f 29 	lds	r30, 0x291F
    2624:	f0 91 20 29 	lds	r31, 0x2920
    2628:	01 90       	ld	r0, Z+
    262a:	f0 81       	ld	r31, Z
    262c:	e0 2d       	mov	r30, r0
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    262e:	84 81       	ldd	r24, Z+4	; 0x04
    2630:	c8 17       	cp	r28, r24
    2632:	98 f3       	brcs	.-26     	; 0x261a <udc_reset+0x20>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
    2634:	10 92 1e 29 	sts	0x291E, r1
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	80 93 21 29 	sts	0x2921, r24
    2640:	90 93 22 29 	sts	0x2922, r25
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
    2644:	cf 91       	pop	r28
    2646:	08 95       	ret

00002648 <udc_sof_notify>:

void udc_sof_notify(void)
{
    2648:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    264a:	80 91 1e 29 	lds	r24, 0x291E
    264e:	88 23       	and	r24, r24
    2650:	41 f1       	breq	.+80     	; 0x26a2 <udc_sof_notify+0x5a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2652:	e0 91 1f 29 	lds	r30, 0x291F
    2656:	f0 91 20 29 	lds	r31, 0x2920
    265a:	a0 81       	ld	r26, Z
    265c:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    265e:	14 96       	adiw	r26, 0x04	; 4
    2660:	8c 91       	ld	r24, X
    2662:	88 23       	and	r24, r24
    2664:	f1 f0       	breq	.+60     	; 0x26a2 <udc_sof_notify+0x5a>
    2666:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    2668:	8c 2f       	mov	r24, r28
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	88 0f       	add	r24, r24
    266e:	99 1f       	adc	r25, r25
    2670:	02 80       	ldd	r0, Z+2	; 0x02
    2672:	f3 81       	ldd	r31, Z+3	; 0x03
    2674:	e0 2d       	mov	r30, r0
    2676:	e8 0f       	add	r30, r24
    2678:	f9 1f       	adc	r31, r25
    267a:	01 90       	ld	r0, Z+
    267c:	f0 81       	ld	r31, Z
    267e:	e0 2d       	mov	r30, r0
    2680:	00 84       	ldd	r0, Z+8	; 0x08
    2682:	f1 85       	ldd	r31, Z+9	; 0x09
    2684:	e0 2d       	mov	r30, r0
    2686:	30 97       	sbiw	r30, 0x00	; 0
    2688:	09 f0       	breq	.+2      	; 0x268c <udc_sof_notify+0x44>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    268a:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    268c:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    268e:	e0 91 1f 29 	lds	r30, 0x291F
    2692:	f0 91 20 29 	lds	r31, 0x2920
    2696:	a0 81       	ld	r26, Z
    2698:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    269a:	14 96       	adiw	r26, 0x04	; 4
    269c:	8c 91       	ld	r24, X
    269e:	c8 17       	cp	r28, r24
    26a0:	18 f3       	brcs	.-58     	; 0x2668 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    26a2:	cf 91       	pop	r28
    26a4:	08 95       	ret

000026a6 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    26a6:	ff 92       	push	r15
    26a8:	0f 93       	push	r16
    26aa:	1f 93       	push	r17
    26ac:	cf 93       	push	r28
    26ae:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    26b0:	10 92 75 2a 	sts	0x2A75, r1
    26b4:	10 92 76 2a 	sts	0x2A76, r1
	udd_g_ctrlreq.callback = NULL;
    26b8:	10 92 77 2a 	sts	0x2A77, r1
    26bc:	10 92 78 2a 	sts	0x2A78, r1
	udd_g_ctrlreq.over_under_run = NULL;
    26c0:	10 92 79 2a 	sts	0x2A79, r1
    26c4:	10 92 7a 2a 	sts	0x2A7A, r1

	if (Udd_setup_is_in()) {
    26c8:	20 91 6b 2a 	lds	r18, 0x2A6B
    26cc:	22 23       	and	r18, r18
    26ce:	0c f0       	brlt	.+2      	; 0x26d2 <udc_process_setup+0x2c>
    26d0:	43 c2       	rjmp	.+1158   	; 0x2b58 <udc_process_setup+0x4b2>
		if (udd_g_ctrlreq.req.wLength == 0) {
    26d2:	80 91 71 2a 	lds	r24, 0x2A71
    26d6:	90 91 72 2a 	lds	r25, 0x2A72
    26da:	00 97       	sbiw	r24, 0x00	; 0
    26dc:	09 f0       	breq	.+2      	; 0x26e0 <udc_process_setup+0x3a>
    26de:	41 c2       	rjmp	.+1154   	; 0x2b62 <udc_process_setup+0x4bc>
    26e0:	35 c2       	rjmp	.+1130   	; 0x2b4c <udc_process_setup+0x4a6>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    26e2:	2f 71       	andi	r18, 0x1F	; 31
    26e4:	09 f0       	breq	.+2      	; 0x26e8 <udc_process_setup+0x42>
    26e6:	a3 c0       	rjmp	.+326    	; 0x282e <udc_process_setup+0x188>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    26e8:	30 91 6c 2a 	lds	r19, 0x2A6C
    26ec:	36 30       	cpi	r19, 0x06	; 6
    26ee:	89 f0       	breq	.+34     	; 0x2712 <udc_process_setup+0x6c>
    26f0:	38 30       	cpi	r19, 0x08	; 8
    26f2:	09 f4       	brne	.+2      	; 0x26f6 <udc_process_setup+0x50>
    26f4:	90 c0       	rjmp	.+288    	; 0x2816 <udc_process_setup+0x170>
    26f6:	31 11       	cpse	r19, r1
    26f8:	9a c0       	rjmp	.+308    	; 0x282e <udc_process_setup+0x188>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    26fa:	02 97       	sbiw	r24, 0x02	; 2
    26fc:	41 f4       	brne	.+16     	; 0x270e <udc_process_setup+0x68>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    26fe:	62 e0       	ldi	r22, 0x02	; 2
    2700:	70 e0       	ldi	r23, 0x00	; 0
    2702:	81 e2       	ldi	r24, 0x21	; 33
    2704:	99 e2       	ldi	r25, 0x29	; 41
    2706:	0e 94 75 1e 	call	0x3cea	; 0x3cea <udd_set_setup_payload>
			sizeof(udc_device_status));
	return true;
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	e3 c1       	rjmp	.+966    	; 0x2ad4 <udc_process_setup+0x42e>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	e1 c1       	rjmp	.+962    	; 0x2ad4 <udc_process_setup+0x42e>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    2712:	20 91 6d 2a 	lds	r18, 0x2A6D
    2716:	30 91 6e 2a 	lds	r19, 0x2A6E
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    271a:	83 2f       	mov	r24, r19
    271c:	99 27       	eor	r25, r25
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    271e:	82 30       	cpi	r24, 0x02	; 2
    2720:	91 05       	cpc	r25, r1
    2722:	81 f0       	breq	.+32     	; 0x2744 <udc_process_setup+0x9e>
    2724:	83 30       	cpi	r24, 0x03	; 3
    2726:	91 05       	cpc	r25, r1
    2728:	79 f1       	breq	.+94     	; 0x2788 <udc_process_setup+0xe2>
    272a:	01 97       	sbiw	r24, 0x01	; 1
    272c:	09 f0       	breq	.+2      	; 0x2730 <udc_process_setup+0x8a>
    272e:	6b c0       	rjmp	.+214    	; 0x2806 <udc_process_setup+0x160>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    2730:	80 91 22 20 	lds	r24, 0x2022
    2734:	90 91 23 20 	lds	r25, 0x2023
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    2738:	dc 01       	movw	r26, r24
    273a:	6c 91       	ld	r22, X
    273c:	70 e0       	ldi	r23, 0x00	; 0
    273e:	0e 94 75 1e 	call	0x3cea	; 0x3cea <udd_set_setup_payload>
    2742:	50 c0       	rjmp	.+160    	; 0x27e4 <udc_process_setup+0x13e>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    2744:	e0 91 22 20 	lds	r30, 0x2022
    2748:	f0 91 23 20 	lds	r31, 0x2023
    274c:	81 89       	ldd	r24, Z+17	; 0x11
    274e:	28 17       	cp	r18, r24
    2750:	08 f0       	brcs	.+2      	; 0x2754 <udc_process_setup+0xae>
    2752:	5b c0       	rjmp	.+182    	; 0x280a <udc_process_setup+0x164>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    2754:	c9 01       	movw	r24, r18
    2756:	99 27       	eor	r25, r25
    2758:	88 0f       	add	r24, r24
    275a:	99 1f       	adc	r25, r25
    275c:	88 0f       	add	r24, r24
    275e:	99 1f       	adc	r25, r25
    2760:	e0 91 24 20 	lds	r30, 0x2024
    2764:	f0 91 25 20 	lds	r31, 0x2025
    2768:	e8 0f       	add	r30, r24
    276a:	f9 1f       	adc	r31, r25
    276c:	80 81       	ld	r24, Z
    276e:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    2770:	fc 01       	movw	r30, r24
    2772:	62 81       	ldd	r22, Z+2	; 0x02
    2774:	73 81       	ldd	r23, Z+3	; 0x03
    2776:	0e 94 75 1e 	call	0x3cea	; 0x3cea <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    277a:	e0 91 73 2a 	lds	r30, 0x2A73
    277e:	f0 91 74 2a 	lds	r31, 0x2A74
    2782:	82 e0       	ldi	r24, 0x02	; 2
    2784:	81 83       	std	Z+1, r24	; 0x01
    2786:	2e c0       	rjmp	.+92     	; 0x27e4 <udc_process_setup+0x13e>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    2788:	33 27       	eor	r19, r19
    278a:	21 30       	cpi	r18, 0x01	; 1
    278c:	31 05       	cpc	r19, r1
    278e:	81 f0       	breq	.+32     	; 0x27b0 <udc_process_setup+0x10a>
    2790:	40 f0       	brcs	.+16     	; 0x27a2 <udc_process_setup+0xfc>
    2792:	22 30       	cpi	r18, 0x02	; 2
    2794:	31 05       	cpc	r19, r1
    2796:	09 f4       	brne	.+2      	; 0x279a <udc_process_setup+0xf4>
    2798:	e9 c1       	rjmp	.+978    	; 0x2b6c <udc_process_setup+0x4c6>
    279a:	23 30       	cpi	r18, 0x03	; 3
    279c:	31 05       	cpc	r19, r1
    279e:	b9 f5       	brne	.+110    	; 0x280e <udc_process_setup+0x168>
    27a0:	e9 c1       	rjmp	.+978    	; 0x2b74 <udc_process_setup+0x4ce>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    27a2:	64 e0       	ldi	r22, 0x04	; 4
    27a4:	70 e0       	ldi	r23, 0x00	; 0
    27a6:	84 e8       	ldi	r24, 0x84	; 132
    27a8:	90 e2       	ldi	r25, 0x20	; 32
    27aa:	0e 94 75 1e 	call	0x3cea	; 0x3cea <udd_set_setup_payload>
    27ae:	1a c0       	rjmp	.+52     	; 0x27e4 <udc_process_setup+0x13e>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    27b0:	88 e8       	ldi	r24, 0x88	; 136
    27b2:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    27b4:	29 e0       	ldi	r18, 0x09	; 9
    27b6:	38 2f       	mov	r19, r24
    27b8:	e4 ea       	ldi	r30, 0xA4	; 164
    27ba:	f0 e2       	ldi	r31, 0x20	; 32
    27bc:	a8 2f       	mov	r26, r24
    27be:	b9 2f       	mov	r27, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    27c0:	8d 91       	ld	r24, X+
    27c2:	80 83       	st	Z, r24
    27c4:	11 82       	std	Z+1, r1	; 0x01
    27c6:	32 96       	adiw	r30, 0x02	; 2
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    27c8:	8a 2f       	mov	r24, r26
    27ca:	83 1b       	sub	r24, r19
    27cc:	82 17       	cp	r24, r18
    27ce:	c0 f3       	brcs	.-16     	; 0x27c0 <udc_process_setup+0x11a>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    27d0:	22 0f       	add	r18, r18
    27d2:	62 2f       	mov	r22, r18
    27d4:	6e 5f       	subi	r22, 0xFE	; 254
    27d6:	60 93 a2 20 	sts	0x20A2, r22
		udd_set_setup_payload(
    27da:	70 e0       	ldi	r23, 0x00	; 0
    27dc:	82 ea       	ldi	r24, 0xA2	; 162
    27de:	90 e2       	ldi	r25, 0x20	; 32
    27e0:	0e 94 75 1e 	call	0x3cea	; 0x3cea <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    27e4:	80 91 71 2a 	lds	r24, 0x2A71
    27e8:	90 91 72 2a 	lds	r25, 0x2A72
    27ec:	20 91 75 2a 	lds	r18, 0x2A75
    27f0:	30 91 76 2a 	lds	r19, 0x2A76
    27f4:	82 17       	cp	r24, r18
    27f6:	93 07       	cpc	r25, r19
    27f8:	60 f4       	brcc	.+24     	; 0x2812 <udc_process_setup+0x16c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    27fa:	80 93 75 2a 	sts	0x2A75, r24
    27fe:	90 93 76 2a 	sts	0x2A76, r25
	}
	return true;
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	67 c1       	rjmp	.+718    	; 0x2ad4 <udc_process_setup+0x42e>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	65 c1       	rjmp	.+714    	; 0x2ad4 <udc_process_setup+0x42e>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
    280a:	80 e0       	ldi	r24, 0x00	; 0
    280c:	63 c1       	rjmp	.+710    	; 0x2ad4 <udc_process_setup+0x42e>
#endif

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
    280e:	80 e0       	ldi	r24, 0x00	; 0
    2810:	61 c1       	rjmp	.+706    	; 0x2ad4 <udc_process_setup+0x42e>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	5f c1       	rjmp	.+702    	; 0x2ad4 <udc_process_setup+0x42e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    2816:	01 97       	sbiw	r24, 0x01	; 1
    2818:	41 f4       	brne	.+16     	; 0x282a <udc_process_setup+0x184>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    281a:	61 e0       	ldi	r22, 0x01	; 1
    281c:	70 e0       	ldi	r23, 0x00	; 0
    281e:	8e e1       	ldi	r24, 0x1E	; 30
    2820:	99 e2       	ldi	r25, 0x29	; 41
    2822:	0e 94 75 1e 	call	0x3cea	; 0x3cea <udd_set_setup_payload>
	return true;
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	55 c1       	rjmp	.+682    	; 0x2ad4 <udc_process_setup+0x42e>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
    282a:	80 e0       	ldi	r24, 0x00	; 0
    282c:	53 c1       	rjmp	.+678    	; 0x2ad4 <udc_process_setup+0x42e>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    282e:	21 30       	cpi	r18, 0x01	; 1
    2830:	09 f0       	breq	.+2      	; 0x2834 <udc_process_setup+0x18e>
    2832:	41 c0       	rjmp	.+130    	; 0x28b6 <udc_process_setup+0x210>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    2834:	30 91 6c 2a 	lds	r19, 0x2A6C
    2838:	3a 30       	cpi	r19, 0x0A	; 10
    283a:	e9 f5       	brne	.+122    	; 0x28b6 <udc_process_setup+0x210>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    283c:	01 97       	sbiw	r24, 0x01	; 1
    283e:	99 f5       	brne	.+102    	; 0x28a6 <udc_process_setup+0x200>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    2840:	80 91 1e 29 	lds	r24, 0x291E
    2844:	88 23       	and	r24, r24
    2846:	89 f1       	breq	.+98     	; 0x28aa <udc_process_setup+0x204>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    2848:	c0 91 6f 2a 	lds	r28, 0x2A6F
    284c:	d0 91 70 2a 	lds	r29, 0x2A70
    2850:	8c 2f       	mov	r24, r28
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    2852:	00 91 1f 29 	lds	r16, 0x291F
    2856:	10 91 20 29 	lds	r17, 0x2920
    285a:	d8 01       	movw	r26, r16
    285c:	ed 91       	ld	r30, X+
    285e:	fc 91       	ld	r31, X
    2860:	94 81       	ldd	r25, Z+4	; 0x04
    2862:	c9 17       	cp	r28, r25
    2864:	20 f5       	brcc	.+72     	; 0x28ae <udc_process_setup+0x208>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    2866:	60 e0       	ldi	r22, 0x00	; 0
    2868:	08 de       	rcall	.-1008   	; 0x247a <udc_update_iface_desc>
    286a:	88 23       	and	r24, r24
    286c:	11 f1       	breq	.+68     	; 0x28b2 <udc_process_setup+0x20c>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    286e:	ce 01       	movw	r24, r28
    2870:	99 27       	eor	r25, r25
    2872:	88 0f       	add	r24, r24
    2874:	99 1f       	adc	r25, r25
    2876:	d8 01       	movw	r26, r16
    2878:	12 96       	adiw	r26, 0x02	; 2
    287a:	ed 91       	ld	r30, X+
    287c:	fc 91       	ld	r31, X
    287e:	13 97       	sbiw	r26, 0x03	; 3
    2880:	e8 0f       	add	r30, r24
    2882:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    2884:	01 90       	ld	r0, Z+
    2886:	f0 81       	ld	r31, Z
    2888:	e0 2d       	mov	r30, r0
    288a:	86 81       	ldd	r24, Z+6	; 0x06
    288c:	97 81       	ldd	r25, Z+7	; 0x07
    288e:	fc 01       	movw	r30, r24
    2890:	19 95       	eicall
    2892:	80 93 23 29 	sts	0x2923, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    2896:	61 e0       	ldi	r22, 0x01	; 1
    2898:	70 e0       	ldi	r23, 0x00	; 0
    289a:	83 e2       	ldi	r24, 0x23	; 35
    289c:	99 e2       	ldi	r25, 0x29	; 41
    289e:	0e 94 75 1e 	call	0x3cea	; 0x3cea <udd_set_setup_payload>
	return true;
    28a2:	81 e0       	ldi	r24, 0x01	; 1
    28a4:	17 c1       	rjmp	.+558    	; 0x2ad4 <udc_process_setup+0x42e>
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
    28a6:	80 e0       	ldi	r24, 0x00	; 0
    28a8:	15 c1       	rjmp	.+554    	; 0x2ad4 <udc_process_setup+0x42e>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
    28aa:	80 e0       	ldi	r24, 0x00	; 0
    28ac:	13 c1       	rjmp	.+550    	; 0x2ad4 <udc_process_setup+0x42e>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
    28ae:	80 e0       	ldi	r24, 0x00	; 0
    28b0:	11 c1       	rjmp	.+546    	; 0x2ad4 <udc_process_setup+0x42e>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
    28b2:	80 e0       	ldi	r24, 0x00	; 0
    28b4:	0f c1       	rjmp	.+542    	; 0x2ad4 <udc_process_setup+0x42e>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    28b6:	22 30       	cpi	r18, 0x02	; 2
    28b8:	09 f0       	breq	.+2      	; 0x28bc <udc_process_setup+0x216>
    28ba:	0e c1       	rjmp	.+540    	; 0x2ad8 <udc_process_setup+0x432>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    28bc:	20 91 6c 2a 	lds	r18, 0x2A6C
    28c0:	21 11       	cpse	r18, r1
    28c2:	03 c1       	rjmp	.+518    	; 0x2aca <udc_process_setup+0x424>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    28c4:	02 97       	sbiw	r24, 0x02	; 2
    28c6:	81 f4       	brne	.+32     	; 0x28e8 <udc_process_setup+0x242>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    28c8:	80 91 6f 2a 	lds	r24, 0x2A6F
    28cc:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <udd_ep_is_halted>
    28d0:	80 93 24 29 	sts	0x2924, r24
    28d4:	10 92 25 29 	sts	0x2925, r1
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    28d8:	62 e0       	ldi	r22, 0x02	; 2
    28da:	70 e0       	ldi	r23, 0x00	; 0
    28dc:	84 e2       	ldi	r24, 0x24	; 36
    28de:	99 e2       	ldi	r25, 0x29	; 41
    28e0:	0e 94 75 1e 	call	0x3cea	; 0x3cea <udd_set_setup_payload>
			sizeof(udc_ep_status));
	return true;
    28e4:	81 e0       	ldi	r24, 0x01	; 1
    28e6:	f6 c0       	rjmp	.+492    	; 0x2ad4 <udc_process_setup+0x42e>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
    28e8:	80 e0       	ldi	r24, 0x00	; 0
    28ea:	f4 c0       	rjmp	.+488    	; 0x2ad4 <udc_process_setup+0x42e>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    28ec:	2f 71       	andi	r18, 0x1F	; 31
    28ee:	09 f0       	breq	.+2      	; 0x28f2 <udc_process_setup+0x24c>
    28f0:	93 c0       	rjmp	.+294    	; 0x2a18 <udc_process_setup+0x372>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    28f2:	80 91 6c 2a 	lds	r24, 0x2A6C
    28f6:	83 30       	cpi	r24, 0x03	; 3
    28f8:	09 f4       	brne	.+2      	; 0x28fc <udc_process_setup+0x256>
    28fa:	e9 c0       	rjmp	.+466    	; 0x2ace <udc_process_setup+0x428>
    28fc:	20 f4       	brcc	.+8      	; 0x2906 <udc_process_setup+0x260>
    28fe:	81 30       	cpi	r24, 0x01	; 1
    2900:	09 f0       	breq	.+2      	; 0x2904 <udc_process_setup+0x25e>
    2902:	8a c0       	rjmp	.+276    	; 0x2a18 <udc_process_setup+0x372>
    2904:	16 c0       	rjmp	.+44     	; 0x2932 <udc_process_setup+0x28c>
    2906:	85 30       	cpi	r24, 0x05	; 5
    2908:	21 f0       	breq	.+8      	; 0x2912 <udc_process_setup+0x26c>
    290a:	89 30       	cpi	r24, 0x09	; 9
    290c:	09 f0       	breq	.+2      	; 0x2910 <udc_process_setup+0x26a>
    290e:	84 c0       	rjmp	.+264    	; 0x2a18 <udc_process_setup+0x372>
    2910:	2b c0       	rjmp	.+86     	; 0x2968 <udc_process_setup+0x2c2>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    2912:	80 91 71 2a 	lds	r24, 0x2A71
    2916:	90 91 72 2a 	lds	r25, 0x2A72
    291a:	89 2b       	or	r24, r25
    291c:	41 f4       	brne	.+16     	; 0x292e <udc_process_setup+0x288>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    291e:	8e e7       	ldi	r24, 0x7E	; 126
    2920:	92 e1       	ldi	r25, 0x12	; 18
    2922:	80 93 77 2a 	sts	0x2A77, r24
    2926:	90 93 78 2a 	sts	0x2A78, r25
	return true;
    292a:	81 e0       	ldi	r24, 0x01	; 1
    292c:	d3 c0       	rjmp	.+422    	; 0x2ad4 <udc_process_setup+0x42e>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    292e:	80 e0       	ldi	r24, 0x00	; 0
    2930:	d1 c0       	rjmp	.+418    	; 0x2ad4 <udc_process_setup+0x42e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    2932:	80 91 71 2a 	lds	r24, 0x2A71
    2936:	90 91 72 2a 	lds	r25, 0x2A72
    293a:	89 2b       	or	r24, r25
    293c:	89 f4       	brne	.+34     	; 0x2960 <udc_process_setup+0x2ba>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    293e:	80 91 6d 2a 	lds	r24, 0x2A6D
    2942:	90 91 6e 2a 	lds	r25, 0x2A6E
    2946:	01 97       	sbiw	r24, 0x01	; 1
    2948:	69 f4       	brne	.+26     	; 0x2964 <udc_process_setup+0x2be>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    294a:	80 91 21 29 	lds	r24, 0x2921
    294e:	90 91 22 29 	lds	r25, 0x2922
    2952:	8d 7f       	andi	r24, 0xFD	; 253
    2954:	80 93 21 29 	sts	0x2921, r24
    2958:	90 93 22 29 	sts	0x2922, r25
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	ba c0       	rjmp	.+372    	; 0x2ad4 <udc_process_setup+0x42e>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    2960:	80 e0       	ldi	r24, 0x00	; 0
    2962:	b8 c0       	rjmp	.+368    	; 0x2ad4 <udc_process_setup+0x42e>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	b6 c0       	rjmp	.+364    	; 0x2ad4 <udc_process_setup+0x42e>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    2968:	80 91 71 2a 	lds	r24, 0x2A71
    296c:	90 91 72 2a 	lds	r25, 0x2A72
    2970:	89 2b       	or	r24, r25
    2972:	09 f0       	breq	.+2      	; 0x2976 <udc_process_setup+0x2d0>
    2974:	45 c0       	rjmp	.+138    	; 0x2a00 <udc_process_setup+0x35a>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    2976:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <udd_getaddress>
    297a:	88 23       	and	r24, r24
    297c:	09 f4       	brne	.+2      	; 0x2980 <udc_process_setup+0x2da>
    297e:	42 c0       	rjmp	.+132    	; 0x2a04 <udc_process_setup+0x35e>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    2980:	20 91 6d 2a 	lds	r18, 0x2A6D
    2984:	30 91 6e 2a 	lds	r19, 0x2A6E
    2988:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    298a:	e0 91 22 20 	lds	r30, 0x2022
    298e:	f0 91 23 20 	lds	r31, 0x2023
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    2992:	81 89       	ldd	r24, Z+17	; 0x11
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	82 17       	cp	r24, r18
    2998:	93 07       	cpc	r25, r19
    299a:	b0 f1       	brcs	.+108    	; 0x2a08 <udc_process_setup+0x362>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    299c:	2e de       	rcall	.-932    	; 0x25fa <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    299e:	80 91 6d 2a 	lds	r24, 0x2A6D
    29a2:	90 91 6e 2a 	lds	r25, 0x2A6E
    29a6:	80 93 1e 29 	sts	0x291E, r24
	if (udc_num_configuration == 0) {
    29aa:	88 23       	and	r24, r24
    29ac:	79 f1       	breq	.+94     	; 0x2a0c <udc_process_setup+0x366>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    29ae:	99 27       	eor	r25, r25
    29b0:	01 97       	sbiw	r24, 0x01	; 1
    29b2:	88 0f       	add	r24, r24
    29b4:	99 1f       	adc	r25, r25
    29b6:	88 0f       	add	r24, r24
    29b8:	99 1f       	adc	r25, r25
    29ba:	e0 91 24 20 	lds	r30, 0x2024
    29be:	f0 91 25 20 	lds	r31, 0x2025
    29c2:	e8 0f       	add	r30, r24
    29c4:	f9 1f       	adc	r31, r25
    29c6:	e0 93 1f 29 	sts	0x291F, r30
    29ca:	f0 93 20 29 	sts	0x2920, r31
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    29ce:	01 90       	ld	r0, Z+
    29d0:	f0 81       	ld	r31, Z
    29d2:	e0 2d       	mov	r30, r0
    29d4:	84 81       	ldd	r24, Z+4	; 0x04
    29d6:	88 23       	and	r24, r24
    29d8:	d9 f0       	breq	.+54     	; 0x2a10 <udc_process_setup+0x36a>
    29da:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    29dc:	60 e0       	ldi	r22, 0x00	; 0
    29de:	8c 2f       	mov	r24, r28
    29e0:	92 dd       	rcall	.-1244   	; 0x2506 <udc_iface_enable>
    29e2:	88 23       	and	r24, r24
    29e4:	b9 f0       	breq	.+46     	; 0x2a14 <udc_process_setup+0x36e>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    29e6:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    29e8:	e0 91 1f 29 	lds	r30, 0x291F
    29ec:	f0 91 20 29 	lds	r31, 0x2920
    29f0:	01 90       	ld	r0, Z+
    29f2:	f0 81       	ld	r31, Z
    29f4:	e0 2d       	mov	r30, r0
    29f6:	84 81       	ldd	r24, Z+4	; 0x04
    29f8:	c8 17       	cp	r28, r24
    29fa:	80 f3       	brcs	.-32     	; 0x29dc <udc_process_setup+0x336>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
    29fc:	81 e0       	ldi	r24, 0x01	; 1
    29fe:	6a c0       	rjmp	.+212    	; 0x2ad4 <udc_process_setup+0x42e>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    2a00:	80 e0       	ldi	r24, 0x00	; 0
    2a02:	68 c0       	rjmp	.+208    	; 0x2ad4 <udc_process_setup+0x42e>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
    2a04:	80 e0       	ldi	r24, 0x00	; 0
    2a06:	66 c0       	rjmp	.+204    	; 0x2ad4 <udc_process_setup+0x42e>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
    2a08:	80 e0       	ldi	r24, 0x00	; 0
    2a0a:	64 c0       	rjmp	.+200    	; 0x2ad4 <udc_process_setup+0x42e>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
    2a0e:	62 c0       	rjmp	.+196    	; 0x2ad4 <udc_process_setup+0x42e>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
    2a10:	81 e0       	ldi	r24, 0x01	; 1
    2a12:	60 c0       	rjmp	.+192    	; 0x2ad4 <udc_process_setup+0x42e>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
    2a14:	80 e0       	ldi	r24, 0x00	; 0
    2a16:	5e c0       	rjmp	.+188    	; 0x2ad4 <udc_process_setup+0x42e>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    2a18:	21 30       	cpi	r18, 0x01	; 1
    2a1a:	01 f5       	brne	.+64     	; 0x2a5c <udc_process_setup+0x3b6>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    2a1c:	80 91 6c 2a 	lds	r24, 0x2A6C
    2a20:	8b 30       	cpi	r24, 0x0B	; 11
    2a22:	e1 f4       	brne	.+56     	; 0x2a5c <udc_process_setup+0x3b6>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    2a24:	80 91 71 2a 	lds	r24, 0x2A71
    2a28:	90 91 72 2a 	lds	r25, 0x2A72
    2a2c:	89 2b       	or	r24, r25
    2a2e:	81 f4       	brne	.+32     	; 0x2a50 <udc_process_setup+0x3aa>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    2a30:	80 91 1e 29 	lds	r24, 0x291E
    2a34:	88 23       	and	r24, r24
    2a36:	71 f0       	breq	.+28     	; 0x2a54 <udc_process_setup+0x3ae>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    2a38:	c0 91 6f 2a 	lds	r28, 0x2A6F
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    2a3c:	d0 91 6d 2a 	lds	r29, 0x2A6D

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    2a40:	8c 2f       	mov	r24, r28
    2a42:	96 dd       	rcall	.-1236   	; 0x2570 <udc_iface_disable>
    2a44:	88 23       	and	r24, r24
    2a46:	41 f0       	breq	.+16     	; 0x2a58 <udc_process_setup+0x3b2>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    2a48:	6d 2f       	mov	r22, r29
    2a4a:	8c 2f       	mov	r24, r28
    2a4c:	5c dd       	rcall	.-1352   	; 0x2506 <udc_iface_enable>
    2a4e:	42 c0       	rjmp	.+132    	; 0x2ad4 <udc_process_setup+0x42e>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
    2a50:	80 e0       	ldi	r24, 0x00	; 0
    2a52:	40 c0       	rjmp	.+128    	; 0x2ad4 <udc_process_setup+0x42e>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
    2a54:	80 e0       	ldi	r24, 0x00	; 0
    2a56:	3e c0       	rjmp	.+124    	; 0x2ad4 <udc_process_setup+0x42e>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
		return false;
    2a58:	80 e0       	ldi	r24, 0x00	; 0
    2a5a:	3c c0       	rjmp	.+120    	; 0x2ad4 <udc_process_setup+0x42e>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    2a5c:	22 30       	cpi	r18, 0x02	; 2
    2a5e:	e1 f5       	brne	.+120    	; 0x2ad8 <udc_process_setup+0x432>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    2a60:	80 91 6c 2a 	lds	r24, 0x2A6C
    2a64:	81 30       	cpi	r24, 0x01	; 1
    2a66:	19 f0       	breq	.+6      	; 0x2a6e <udc_process_setup+0x3c8>
    2a68:	83 30       	cpi	r24, 0x03	; 3
    2a6a:	99 f5       	brne	.+102    	; 0x2ad2 <udc_process_setup+0x42c>
    2a6c:	15 c0       	rjmp	.+42     	; 0x2a98 <udc_process_setup+0x3f2>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    2a6e:	80 91 71 2a 	lds	r24, 0x2A71
    2a72:	90 91 72 2a 	lds	r25, 0x2A72
    2a76:	89 2b       	or	r24, r25
    2a78:	59 f4       	brne	.+22     	; 0x2a90 <udc_process_setup+0x3ea>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    2a7a:	80 91 6d 2a 	lds	r24, 0x2A6D
    2a7e:	90 91 6e 2a 	lds	r25, 0x2A6E
    2a82:	89 2b       	or	r24, r25
    2a84:	39 f4       	brne	.+14     	; 0x2a94 <udc_process_setup+0x3ee>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    2a86:	80 91 6f 2a 	lds	r24, 0x2A6F
    2a8a:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <udd_ep_clear_halt>
    2a8e:	22 c0       	rjmp	.+68     	; 0x2ad4 <udc_process_setup+0x42e>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    2a90:	80 e0       	ldi	r24, 0x00	; 0
    2a92:	20 c0       	rjmp	.+64     	; 0x2ad4 <udc_process_setup+0x42e>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
    2a94:	80 e0       	ldi	r24, 0x00	; 0
    2a96:	1e c0       	rjmp	.+60     	; 0x2ad4 <udc_process_setup+0x42e>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    2a98:	80 91 71 2a 	lds	r24, 0x2A71
    2a9c:	90 91 72 2a 	lds	r25, 0x2A72
    2aa0:	89 2b       	or	r24, r25
    2aa2:	79 f4       	brne	.+30     	; 0x2ac2 <udc_process_setup+0x41c>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    2aa4:	80 91 6d 2a 	lds	r24, 0x2A6D
    2aa8:	90 91 6e 2a 	lds	r25, 0x2A6E
    2aac:	89 2b       	or	r24, r25
    2aae:	59 f4       	brne	.+22     	; 0x2ac6 <udc_process_setup+0x420>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    2ab0:	cf e6       	ldi	r28, 0x6F	; 111
    2ab2:	da e2       	ldi	r29, 0x2A	; 42
    2ab4:	88 81       	ld	r24, Y
    2ab6:	0e 94 3e 1f 	call	0x3e7c	; 0x3e7c <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    2aba:	88 81       	ld	r24, Y
    2abc:	0e 94 65 1f 	call	0x3eca	; 0x3eca <udd_ep_set_halt>
    2ac0:	09 c0       	rjmp	.+18     	; 0x2ad4 <udc_process_setup+0x42e>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    2ac2:	80 e0       	ldi	r24, 0x00	; 0
    2ac4:	07 c0       	rjmp	.+14     	; 0x2ad4 <udc_process_setup+0x42e>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
    2ac6:	80 e0       	ldi	r24, 0x00	; 0
    2ac8:	05 c0       	rjmp	.+10     	; 0x2ad4 <udc_process_setup+0x42e>
				break;
			}
		}
#endif
	}
	return false;
    2aca:	80 e0       	ldi	r24, 0x00	; 0
    2acc:	03 c0       	rjmp	.+6      	; 0x2ad4 <udc_process_setup+0x42e>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    2ace:	80 e0       	ldi	r24, 0x00	; 0
    2ad0:	01 c0       	rjmp	.+2      	; 0x2ad4 <udc_process_setup+0x42e>
				break;
			}
		}
#endif
	}
	return false;
    2ad2:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    2ad4:	81 11       	cpse	r24, r1
    2ad6:	3c c0       	rjmp	.+120    	; 0x2b50 <udc_process_setup+0x4aa>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    2ad8:	80 91 6b 2a 	lds	r24, 0x2A6B
    2adc:	8f 71       	andi	r24, 0x1F	; 31
    2ade:	81 30       	cpi	r24, 0x01	; 1
    2ae0:	c9 f5       	brne	.+114    	; 0x2b54 <udc_process_setup+0x4ae>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    2ae2:	80 91 1e 29 	lds	r24, 0x291E
    2ae6:	88 23       	and	r24, r24
    2ae8:	49 f1       	breq	.+82     	; 0x2b3c <udc_process_setup+0x496>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    2aea:	00 91 6f 2a 	lds	r16, 0x2A6F
    2aee:	10 91 70 2a 	lds	r17, 0x2A70
    2af2:	f0 2e       	mov	r15, r16
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    2af4:	c0 91 1f 29 	lds	r28, 0x291F
    2af8:	d0 91 20 29 	lds	r29, 0x2920
    2afc:	e8 81       	ld	r30, Y
    2afe:	f9 81       	ldd	r31, Y+1	; 0x01
    2b00:	84 81       	ldd	r24, Z+4	; 0x04
    2b02:	08 17       	cp	r16, r24
    2b04:	e8 f4       	brcc	.+58     	; 0x2b40 <udc_process_setup+0x49a>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    2b06:	60 e0       	ldi	r22, 0x00	; 0
    2b08:	80 2f       	mov	r24, r16
    2b0a:	b7 dc       	rcall	.-1682   	; 0x247a <udc_update_iface_desc>
    2b0c:	88 23       	and	r24, r24
    2b0e:	d1 f0       	breq	.+52     	; 0x2b44 <udc_process_setup+0x49e>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    2b10:	11 27       	eor	r17, r17
    2b12:	98 01       	movw	r18, r16
    2b14:	22 0f       	add	r18, r18
    2b16:	33 1f       	adc	r19, r19
    2b18:	ea 81       	ldd	r30, Y+2	; 0x02
    2b1a:	fb 81       	ldd	r31, Y+3	; 0x03
    2b1c:	e2 0f       	add	r30, r18
    2b1e:	f3 1f       	adc	r31, r19
    2b20:	c0 81       	ld	r28, Z
    2b22:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    2b24:	ee 81       	ldd	r30, Y+6	; 0x06
    2b26:	ff 81       	ldd	r31, Y+7	; 0x07
    2b28:	19 95       	eicall
    2b2a:	68 2f       	mov	r22, r24
    2b2c:	8f 2d       	mov	r24, r15
    2b2e:	a5 dc       	rcall	.-1718   	; 0x247a <udc_update_iface_desc>
    2b30:	88 23       	and	r24, r24
    2b32:	51 f0       	breq	.+20     	; 0x2b48 <udc_process_setup+0x4a2>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    2b34:	ec 81       	ldd	r30, Y+4	; 0x04
    2b36:	fd 81       	ldd	r31, Y+5	; 0x05
    2b38:	19 95       	eicall
    2b3a:	20 c0       	rjmp	.+64     	; 0x2b7c <udc_process_setup+0x4d6>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    2b3c:	80 e0       	ldi	r24, 0x00	; 0
    2b3e:	1e c0       	rjmp	.+60     	; 0x2b7c <udc_process_setup+0x4d6>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
    2b40:	80 e0       	ldi	r24, 0x00	; 0
    2b42:	1c c0       	rjmp	.+56     	; 0x2b7c <udc_process_setup+0x4d6>

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
    2b44:	80 e0       	ldi	r24, 0x00	; 0
    2b46:	1a c0       	rjmp	.+52     	; 0x2b7c <udc_process_setup+0x4d6>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
		return false;
    2b48:	80 e0       	ldi	r24, 0x00	; 0
    2b4a:	18 c0       	rjmp	.+48     	; 0x2b7c <udc_process_setup+0x4d6>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    2b4c:	80 e0       	ldi	r24, 0x00	; 0
    2b4e:	16 c0       	rjmp	.+44     	; 0x2b7c <udc_process_setup+0x4d6>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    2b50:	81 e0       	ldi	r24, 0x01	; 1
    2b52:	14 c0       	rjmp	.+40     	; 0x2b7c <udc_process_setup+0x4d6>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	12 c0       	rjmp	.+36     	; 0x2b7c <udc_process_setup+0x4d6>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    2b58:	82 2f       	mov	r24, r18
    2b5a:	80 76       	andi	r24, 0x60	; 96
    2b5c:	09 f0       	breq	.+2      	; 0x2b60 <udc_process_setup+0x4ba>
    2b5e:	bc cf       	rjmp	.-136    	; 0x2ad8 <udc_process_setup+0x432>
    2b60:	c5 ce       	rjmp	.-630    	; 0x28ec <udc_process_setup+0x246>
    2b62:	32 2f       	mov	r19, r18
    2b64:	30 76       	andi	r19, 0x60	; 96
    2b66:	09 f0       	breq	.+2      	; 0x2b6a <udc_process_setup+0x4c4>
    2b68:	b7 cf       	rjmp	.-146    	; 0x2ad8 <udc_process_setup+0x432>
    2b6a:	bb cd       	rjmp	.-1162   	; 0x26e2 <udc_process_setup+0x3c>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    2b6c:	2f e0       	ldi	r18, 0x0F	; 15
		str = udc_string_product_name;
    2b6e:	82 e9       	ldi	r24, 0x92	; 146
    2b70:	90 e2       	ldi	r25, 0x20	; 32
    2b72:	21 ce       	rjmp	.-958    	; 0x27b6 <udc_process_setup+0x110>
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    2b74:	2c e0       	ldi	r18, 0x0C	; 12
		str = udc_get_string_serial_name();
    2b76:	8b e7       	ldi	r24, 0x7B	; 123
    2b78:	9a e2       	ldi	r25, 0x2A	; 42
    2b7a:	1d ce       	rjmp	.-966    	; 0x27b6 <udc_process_setup+0x110>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    2b7c:	df 91       	pop	r29
    2b7e:	cf 91       	pop	r28
    2b80:	1f 91       	pop	r17
    2b82:	0f 91       	pop	r16
    2b84:	ff 90       	pop	r15
    2b86:	08 95       	ret

00002b88 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    2b88:	43 e0       	ldi	r20, 0x03	; 3
    2b8a:	50 e0       	ldi	r21, 0x00	; 0
    2b8c:	61 e0       	ldi	r22, 0x01	; 1
    2b8e:	80 ee       	ldi	r24, 0xE0	; 224
    2b90:	97 e0       	ldi	r25, 0x07	; 7
    2b92:	07 d9       	rcall	.-3570   	; 0x1da2 <ioport_configure_port_pin>
    2b94:	43 e0       	ldi	r20, 0x03	; 3
    2b96:	50 e0       	ldi	r21, 0x00	; 0
    2b98:	62 e0       	ldi	r22, 0x02	; 2
    2b9a:	80 ee       	ldi	r24, 0xE0	; 224
    2b9c:	97 e0       	ldi	r25, 0x07	; 7
    2b9e:	01 d9       	rcall	.-3582   	; 0x1da2 <ioport_configure_port_pin>
    2ba0:	43 e0       	ldi	r20, 0x03	; 3
    2ba2:	50 e0       	ldi	r21, 0x00	; 0
    2ba4:	60 e1       	ldi	r22, 0x10	; 16
    2ba6:	80 e6       	ldi	r24, 0x60	; 96
    2ba8:	96 e0       	ldi	r25, 0x06	; 6
    2baa:	fb d8       	rcall	.-3594   	; 0x1da2 <ioport_configure_port_pin>
    2bac:	41 e0       	ldi	r20, 0x01	; 1
    2bae:	50 e4       	ldi	r21, 0x40	; 64
    2bb0:	60 e2       	ldi	r22, 0x20	; 32
    2bb2:	80 e6       	ldi	r24, 0x60	; 96
    2bb4:	96 e0       	ldi	r25, 0x06	; 6
    2bb6:	f5 d8       	rcall	.-3606   	; 0x1da2 <ioport_configure_port_pin>
    2bb8:	40 e0       	ldi	r20, 0x00	; 0
    2bba:	5b e1       	ldi	r21, 0x1B	; 27
    2bbc:	60 e2       	ldi	r22, 0x20	; 32
    2bbe:	80 e8       	ldi	r24, 0x80	; 128
    2bc0:	96 e0       	ldi	r25, 0x06	; 6
    2bc2:	ef d8       	rcall	.-3618   	; 0x1da2 <ioport_configure_port_pin>
    2bc4:	40 e0       	ldi	r20, 0x00	; 0
    2bc6:	5b e1       	ldi	r21, 0x1B	; 27
    2bc8:	62 e0       	ldi	r22, 0x02	; 2
    2bca:	80 ea       	ldi	r24, 0xA0	; 160
    2bcc:	96 e0       	ldi	r25, 0x06	; 6
    2bce:	e9 d8       	rcall	.-3630   	; 0x1da2 <ioport_configure_port_pin>
    2bd0:	40 e0       	ldi	r20, 0x00	; 0
    2bd2:	5b e1       	ldi	r21, 0x1B	; 27
    2bd4:	64 e0       	ldi	r22, 0x04	; 4
    2bd6:	80 ea       	ldi	r24, 0xA0	; 160
    2bd8:	96 e0       	ldi	r25, 0x06	; 6
    2bda:	e3 d8       	rcall	.-3642   	; 0x1da2 <ioport_configure_port_pin>
    2bdc:	43 e0       	ldi	r20, 0x03	; 3
    2bde:	50 e0       	ldi	r21, 0x00	; 0
    2be0:	62 e0       	ldi	r22, 0x02	; 2
    2be2:	80 e6       	ldi	r24, 0x60	; 96
    2be4:	96 e0       	ldi	r25, 0x06	; 6
    2be6:	dd d8       	rcall	.-3654   	; 0x1da2 <ioport_configure_port_pin>
    2be8:	43 e0       	ldi	r20, 0x03	; 3
    2bea:	50 e0       	ldi	r21, 0x00	; 0
    2bec:	68 e0       	ldi	r22, 0x08	; 8
    2bee:	80 e6       	ldi	r24, 0x60	; 96
    2bf0:	96 e0       	ldi	r25, 0x06	; 6
    2bf2:	d7 d8       	rcall	.-3666   	; 0x1da2 <ioport_configure_port_pin>
    2bf4:	43 e0       	ldi	r20, 0x03	; 3
    2bf6:	50 e0       	ldi	r21, 0x00	; 0
    2bf8:	68 e0       	ldi	r22, 0x08	; 8
    2bfa:	80 ea       	ldi	r24, 0xA0	; 160
    2bfc:	96 e0       	ldi	r25, 0x06	; 6
    2bfe:	d1 d8       	rcall	.-3678   	; 0x1da2 <ioport_configure_port_pin>
    2c00:	43 e0       	ldi	r20, 0x03	; 3
    2c02:	50 e0       	ldi	r21, 0x00	; 0
    2c04:	61 e0       	ldi	r22, 0x01	; 1
    2c06:	80 e6       	ldi	r24, 0x60	; 96
    2c08:	96 e0       	ldi	r25, 0x06	; 6
    2c0a:	cb d8       	rcall	.-3690   	; 0x1da2 <ioport_configure_port_pin>
    2c0c:	43 e0       	ldi	r20, 0x03	; 3
    2c0e:	50 e0       	ldi	r21, 0x00	; 0
    2c10:	68 e0       	ldi	r22, 0x08	; 8
    2c12:	80 e0       	ldi	r24, 0x00	; 0
    2c14:	96 e0       	ldi	r25, 0x06	; 6
    2c16:	c5 d8       	rcall	.-3702   	; 0x1da2 <ioport_configure_port_pin>
    2c18:	41 e0       	ldi	r20, 0x01	; 1
    2c1a:	50 e0       	ldi	r21, 0x00	; 0
    2c1c:	60 e1       	ldi	r22, 0x10	; 16
    2c1e:	80 e8       	ldi	r24, 0x80	; 128
    2c20:	96 e0       	ldi	r25, 0x06	; 6
    2c22:	bf d8       	rcall	.-3714   	; 0x1da2 <ioport_configure_port_pin>
    2c24:	43 e0       	ldi	r20, 0x03	; 3
    2c26:	50 e0       	ldi	r21, 0x00	; 0
    2c28:	62 e0       	ldi	r22, 0x02	; 2
    2c2a:	80 e6       	ldi	r24, 0x60	; 96
    2c2c:	96 e0       	ldi	r25, 0x06	; 6
    2c2e:	b9 d8       	rcall	.-3726   	; 0x1da2 <ioport_configure_port_pin>
    2c30:	43 e0       	ldi	r20, 0x03	; 3
    2c32:	50 e0       	ldi	r21, 0x00	; 0
    2c34:	68 e0       	ldi	r22, 0x08	; 8
    2c36:	80 e6       	ldi	r24, 0x60	; 96
    2c38:	96 e0       	ldi	r25, 0x06	; 6
    2c3a:	b3 d8       	rcall	.-3738   	; 0x1da2 <ioport_configure_port_pin>
    2c3c:	40 e0       	ldi	r20, 0x00	; 0
    2c3e:	50 e0       	ldi	r21, 0x00	; 0
    2c40:	64 e0       	ldi	r22, 0x04	; 4
    2c42:	80 e6       	ldi	r24, 0x60	; 96
    2c44:	96 e0       	ldi	r25, 0x06	; 6
    2c46:	ad d8       	rcall	.-3750   	; 0x1da2 <ioport_configure_port_pin>
    2c48:	43 e0       	ldi	r20, 0x03	; 3
    2c4a:	50 e0       	ldi	r21, 0x00	; 0
    2c4c:	60 e1       	ldi	r22, 0x10	; 16
    2c4e:	80 ea       	ldi	r24, 0xA0	; 160
    2c50:	96 e0       	ldi	r25, 0x06	; 6
    2c52:	a7 c8       	rjmp	.-3762   	; 0x1da2 <ioport_configure_port_pin>

00002c54 <adc_set_callback>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2c54:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
    2c56:	f8 94       	cli
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    2c58:	81 15       	cp	r24, r1
    2c5a:	32 e0       	ldi	r19, 0x02	; 2
    2c5c:	93 07       	cpc	r25, r19
    2c5e:	29 f4       	brne	.+10     	; 0x2c6a <adc_set_callback+0x16>
		adca_callback = callback;
    2c60:	60 93 67 2a 	sts	0x2A67, r22
    2c64:	70 93 68 2a 	sts	0x2A68, r23
    2c68:	07 c0       	rjmp	.+14     	; 0x2c78 <adc_set_callback+0x24>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    2c6a:	80 34       	cpi	r24, 0x40	; 64
    2c6c:	92 40       	sbci	r25, 0x02	; 2
    2c6e:	21 f4       	brne	.+8      	; 0x2c78 <adc_set_callback+0x24>
		adcb_callback = callback;
    2c70:	60 93 65 2a 	sts	0x2A65, r22
    2c74:	70 93 66 2a 	sts	0x2A66, r23
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2c78:	2f bf       	out	0x3f, r18	; 63
    2c7a:	08 95       	ret

00002c7c <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    2c7c:	81 15       	cp	r24, r1
    2c7e:	22 e0       	ldi	r18, 0x02	; 2
    2c80:	92 07       	cpc	r25, r18
    2c82:	61 f4       	brne	.+24     	; 0x2c9c <adc_enable_clock+0x20>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    2c84:	80 91 26 29 	lds	r24, 0x2926
    2c88:	98 2f       	mov	r25, r24
    2c8a:	9f 5f       	subi	r25, 0xFF	; 255
    2c8c:	90 93 26 29 	sts	0x2926, r25
    2c90:	81 11       	cpse	r24, r1
    2c92:	13 c0       	rjmp	.+38     	; 0x2cba <adc_enable_clock+0x3e>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2c94:	62 e0       	ldi	r22, 0x02	; 2
    2c96:	81 e0       	ldi	r24, 0x01	; 1
    2c98:	0c 94 c7 0a 	jmp	0x158e	; 0x158e <sysclk_enable_module>
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    2c9c:	80 34       	cpi	r24, 0x40	; 64
    2c9e:	92 40       	sbci	r25, 0x02	; 2
    2ca0:	61 f4       	brne	.+24     	; 0x2cba <adc_enable_clock+0x3e>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
    2ca2:	80 91 27 29 	lds	r24, 0x2927
    2ca6:	98 2f       	mov	r25, r24
    2ca8:	9f 5f       	subi	r25, 0xFF	; 255
    2caa:	90 93 27 29 	sts	0x2927, r25
    2cae:	81 11       	cpse	r24, r1
    2cb0:	04 c0       	rjmp	.+8      	; 0x2cba <adc_enable_clock+0x3e>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    2cb2:	62 e0       	ldi	r22, 0x02	; 2
    2cb4:	82 e0       	ldi	r24, 0x02	; 2
    2cb6:	0c 94 c7 0a 	jmp	0x158e	; 0x158e <sysclk_enable_module>
    2cba:	08 95       	ret

00002cbc <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    2cbc:	81 15       	cp	r24, r1
    2cbe:	22 e0       	ldi	r18, 0x02	; 2
    2cc0:	92 07       	cpc	r25, r18
    2cc2:	59 f4       	brne	.+22     	; 0x2cda <adc_disable_clock+0x1e>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    2cc4:	80 91 26 29 	lds	r24, 0x2926
    2cc8:	81 50       	subi	r24, 0x01	; 1
    2cca:	80 93 26 29 	sts	0x2926, r24
    2cce:	81 11       	cpse	r24, r1
    2cd0:	12 c0       	rjmp	.+36     	; 0x2cf6 <adc_disable_clock+0x3a>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2cd2:	62 e0       	ldi	r22, 0x02	; 2
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	0c 94 d3 0a 	jmp	0x15a6	; 0x15a6 <sysclk_disable_module>
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    2cda:	80 34       	cpi	r24, 0x40	; 64
    2cdc:	92 40       	sbci	r25, 0x02	; 2
    2cde:	59 f4       	brne	.+22     	; 0x2cf6 <adc_disable_clock+0x3a>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
    2ce0:	80 91 27 29 	lds	r24, 0x2927
    2ce4:	81 50       	subi	r24, 0x01	; 1
    2ce6:	80 93 27 29 	sts	0x2927, r24
    2cea:	81 11       	cpse	r24, r1
    2cec:	04 c0       	rjmp	.+8      	; 0x2cf6 <adc_disable_clock+0x3a>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    2cee:	62 e0       	ldi	r22, 0x02	; 2
    2cf0:	82 e0       	ldi	r24, 0x02	; 2
    2cf2:	0c 94 d3 0a 	jmp	0x15a6	; 0x15a6 <sysclk_disable_module>
    2cf6:	08 95       	ret

00002cf8 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    2cf8:	1f 93       	push	r17
    2cfa:	cf 93       	push	r28
    2cfc:	df 93       	push	r29
    2cfe:	ec 01       	movw	r28, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2d00:	1f b7       	in	r17, 0x3f	; 63
	cpu_irq_disable();
    2d02:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    2d04:	bb df       	rcall	.-138    	; 0x2c7c <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    2d06:	88 81       	ld	r24, Y
    2d08:	81 60       	ori	r24, 0x01	; 1
    2d0a:	88 83       	st	Y, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2d0c:	1f bf       	out	0x3f, r17	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2d0e:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    2d10:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    2d12:	e0 e6       	ldi	r30, 0x60	; 96
    2d14:	fa e2       	ldi	r31, 0x2A	; 42
    2d16:	90 81       	ld	r25, Z
    2d18:	9f 5f       	subi	r25, 0xFF	; 255
    2d1a:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2d1c:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    2d1e:	df 91       	pop	r29
    2d20:	cf 91       	pop	r28
    2d22:	1f 91       	pop	r17
    2d24:	08 95       	ret

00002d26 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    2d26:	1f 92       	push	r1
    2d28:	0f 92       	push	r0
    2d2a:	0f b6       	in	r0, 0x3f	; 63
    2d2c:	0f 92       	push	r0
    2d2e:	11 24       	eor	r1, r1
    2d30:	0b b6       	in	r0, 0x3b	; 59
    2d32:	0f 92       	push	r0
    2d34:	2f 93       	push	r18
    2d36:	3f 93       	push	r19
    2d38:	4f 93       	push	r20
    2d3a:	5f 93       	push	r21
    2d3c:	6f 93       	push	r22
    2d3e:	7f 93       	push	r23
    2d40:	8f 93       	push	r24
    2d42:	9f 93       	push	r25
    2d44:	af 93       	push	r26
    2d46:	bf 93       	push	r27
    2d48:	ef 93       	push	r30
    2d4a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    2d4c:	e0 e0       	ldi	r30, 0x00	; 0
    2d4e:	f2 e0       	ldi	r31, 0x02	; 2
    2d50:	44 a1       	ldd	r20, Z+36	; 0x24
    2d52:	55 a1       	ldd	r21, Z+37	; 0x25
    2d54:	e0 91 67 2a 	lds	r30, 0x2A67
    2d58:	f0 91 68 2a 	lds	r31, 0x2A68
    2d5c:	61 e0       	ldi	r22, 0x01	; 1
    2d5e:	80 e0       	ldi	r24, 0x00	; 0
    2d60:	92 e0       	ldi	r25, 0x02	; 2
    2d62:	19 95       	eicall
}
    2d64:	ff 91       	pop	r31
    2d66:	ef 91       	pop	r30
    2d68:	bf 91       	pop	r27
    2d6a:	af 91       	pop	r26
    2d6c:	9f 91       	pop	r25
    2d6e:	8f 91       	pop	r24
    2d70:	7f 91       	pop	r23
    2d72:	6f 91       	pop	r22
    2d74:	5f 91       	pop	r21
    2d76:	4f 91       	pop	r20
    2d78:	3f 91       	pop	r19
    2d7a:	2f 91       	pop	r18
    2d7c:	0f 90       	pop	r0
    2d7e:	0b be       	out	0x3b, r0	; 59
    2d80:	0f 90       	pop	r0
    2d82:	0f be       	out	0x3f, r0	; 63
    2d84:	0f 90       	pop	r0
    2d86:	1f 90       	pop	r1
    2d88:	18 95       	reti

00002d8a <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    2d8a:	1f 92       	push	r1
    2d8c:	0f 92       	push	r0
    2d8e:	0f b6       	in	r0, 0x3f	; 63
    2d90:	0f 92       	push	r0
    2d92:	11 24       	eor	r1, r1
    2d94:	0b b6       	in	r0, 0x3b	; 59
    2d96:	0f 92       	push	r0
    2d98:	2f 93       	push	r18
    2d9a:	3f 93       	push	r19
    2d9c:	4f 93       	push	r20
    2d9e:	5f 93       	push	r21
    2da0:	6f 93       	push	r22
    2da2:	7f 93       	push	r23
    2da4:	8f 93       	push	r24
    2da6:	9f 93       	push	r25
    2da8:	af 93       	push	r26
    2daa:	bf 93       	push	r27
    2dac:	ef 93       	push	r30
    2dae:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    2db0:	e0 e0       	ldi	r30, 0x00	; 0
    2db2:	f2 e0       	ldi	r31, 0x02	; 2
    2db4:	44 a5       	ldd	r20, Z+44	; 0x2c
    2db6:	55 a5       	ldd	r21, Z+45	; 0x2d
    2db8:	e0 91 67 2a 	lds	r30, 0x2A67
    2dbc:	f0 91 68 2a 	lds	r31, 0x2A68
    2dc0:	62 e0       	ldi	r22, 0x02	; 2
    2dc2:	80 e0       	ldi	r24, 0x00	; 0
    2dc4:	92 e0       	ldi	r25, 0x02	; 2
    2dc6:	19 95       	eicall
}
    2dc8:	ff 91       	pop	r31
    2dca:	ef 91       	pop	r30
    2dcc:	bf 91       	pop	r27
    2dce:	af 91       	pop	r26
    2dd0:	9f 91       	pop	r25
    2dd2:	8f 91       	pop	r24
    2dd4:	7f 91       	pop	r23
    2dd6:	6f 91       	pop	r22
    2dd8:	5f 91       	pop	r21
    2dda:	4f 91       	pop	r20
    2ddc:	3f 91       	pop	r19
    2dde:	2f 91       	pop	r18
    2de0:	0f 90       	pop	r0
    2de2:	0b be       	out	0x3b, r0	; 59
    2de4:	0f 90       	pop	r0
    2de6:	0f be       	out	0x3f, r0	; 63
    2de8:	0f 90       	pop	r0
    2dea:	1f 90       	pop	r1
    2dec:	18 95       	reti

00002dee <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    2dee:	1f 92       	push	r1
    2df0:	0f 92       	push	r0
    2df2:	0f b6       	in	r0, 0x3f	; 63
    2df4:	0f 92       	push	r0
    2df6:	11 24       	eor	r1, r1
    2df8:	0b b6       	in	r0, 0x3b	; 59
    2dfa:	0f 92       	push	r0
    2dfc:	2f 93       	push	r18
    2dfe:	3f 93       	push	r19
    2e00:	4f 93       	push	r20
    2e02:	5f 93       	push	r21
    2e04:	6f 93       	push	r22
    2e06:	7f 93       	push	r23
    2e08:	8f 93       	push	r24
    2e0a:	9f 93       	push	r25
    2e0c:	af 93       	push	r26
    2e0e:	bf 93       	push	r27
    2e10:	ef 93       	push	r30
    2e12:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    2e14:	e0 e0       	ldi	r30, 0x00	; 0
    2e16:	f2 e0       	ldi	r31, 0x02	; 2
    2e18:	44 a9       	ldd	r20, Z+52	; 0x34
    2e1a:	55 a9       	ldd	r21, Z+53	; 0x35
    2e1c:	e0 91 67 2a 	lds	r30, 0x2A67
    2e20:	f0 91 68 2a 	lds	r31, 0x2A68
    2e24:	64 e0       	ldi	r22, 0x04	; 4
    2e26:	80 e0       	ldi	r24, 0x00	; 0
    2e28:	92 e0       	ldi	r25, 0x02	; 2
    2e2a:	19 95       	eicall
}
    2e2c:	ff 91       	pop	r31
    2e2e:	ef 91       	pop	r30
    2e30:	bf 91       	pop	r27
    2e32:	af 91       	pop	r26
    2e34:	9f 91       	pop	r25
    2e36:	8f 91       	pop	r24
    2e38:	7f 91       	pop	r23
    2e3a:	6f 91       	pop	r22
    2e3c:	5f 91       	pop	r21
    2e3e:	4f 91       	pop	r20
    2e40:	3f 91       	pop	r19
    2e42:	2f 91       	pop	r18
    2e44:	0f 90       	pop	r0
    2e46:	0b be       	out	0x3b, r0	; 59
    2e48:	0f 90       	pop	r0
    2e4a:	0f be       	out	0x3f, r0	; 63
    2e4c:	0f 90       	pop	r0
    2e4e:	1f 90       	pop	r1
    2e50:	18 95       	reti

00002e52 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    2e52:	1f 92       	push	r1
    2e54:	0f 92       	push	r0
    2e56:	0f b6       	in	r0, 0x3f	; 63
    2e58:	0f 92       	push	r0
    2e5a:	11 24       	eor	r1, r1
    2e5c:	0b b6       	in	r0, 0x3b	; 59
    2e5e:	0f 92       	push	r0
    2e60:	2f 93       	push	r18
    2e62:	3f 93       	push	r19
    2e64:	4f 93       	push	r20
    2e66:	5f 93       	push	r21
    2e68:	6f 93       	push	r22
    2e6a:	7f 93       	push	r23
    2e6c:	8f 93       	push	r24
    2e6e:	9f 93       	push	r25
    2e70:	af 93       	push	r26
    2e72:	bf 93       	push	r27
    2e74:	ef 93       	push	r30
    2e76:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    2e78:	e0 e0       	ldi	r30, 0x00	; 0
    2e7a:	f2 e0       	ldi	r31, 0x02	; 2
    2e7c:	44 ad       	ldd	r20, Z+60	; 0x3c
    2e7e:	55 ad       	ldd	r21, Z+61	; 0x3d
    2e80:	e0 91 67 2a 	lds	r30, 0x2A67
    2e84:	f0 91 68 2a 	lds	r31, 0x2A68
    2e88:	68 e0       	ldi	r22, 0x08	; 8
    2e8a:	80 e0       	ldi	r24, 0x00	; 0
    2e8c:	92 e0       	ldi	r25, 0x02	; 2
    2e8e:	19 95       	eicall
}
    2e90:	ff 91       	pop	r31
    2e92:	ef 91       	pop	r30
    2e94:	bf 91       	pop	r27
    2e96:	af 91       	pop	r26
    2e98:	9f 91       	pop	r25
    2e9a:	8f 91       	pop	r24
    2e9c:	7f 91       	pop	r23
    2e9e:	6f 91       	pop	r22
    2ea0:	5f 91       	pop	r21
    2ea2:	4f 91       	pop	r20
    2ea4:	3f 91       	pop	r19
    2ea6:	2f 91       	pop	r18
    2ea8:	0f 90       	pop	r0
    2eaa:	0b be       	out	0x3b, r0	; 59
    2eac:	0f 90       	pop	r0
    2eae:	0f be       	out	0x3f, r0	; 63
    2eb0:	0f 90       	pop	r0
    2eb2:	1f 90       	pop	r1
    2eb4:	18 95       	reti

00002eb6 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    2eb6:	1f 92       	push	r1
    2eb8:	0f 92       	push	r0
    2eba:	0f b6       	in	r0, 0x3f	; 63
    2ebc:	0f 92       	push	r0
    2ebe:	11 24       	eor	r1, r1
    2ec0:	0b b6       	in	r0, 0x3b	; 59
    2ec2:	0f 92       	push	r0
    2ec4:	2f 93       	push	r18
    2ec6:	3f 93       	push	r19
    2ec8:	4f 93       	push	r20
    2eca:	5f 93       	push	r21
    2ecc:	6f 93       	push	r22
    2ece:	7f 93       	push	r23
    2ed0:	8f 93       	push	r24
    2ed2:	9f 93       	push	r25
    2ed4:	af 93       	push	r26
    2ed6:	bf 93       	push	r27
    2ed8:	ef 93       	push	r30
    2eda:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    2edc:	e0 e4       	ldi	r30, 0x40	; 64
    2ede:	f2 e0       	ldi	r31, 0x02	; 2
    2ee0:	44 a1       	ldd	r20, Z+36	; 0x24
    2ee2:	55 a1       	ldd	r21, Z+37	; 0x25
    2ee4:	e0 91 65 2a 	lds	r30, 0x2A65
    2ee8:	f0 91 66 2a 	lds	r31, 0x2A66
    2eec:	61 e0       	ldi	r22, 0x01	; 1
    2eee:	80 e4       	ldi	r24, 0x40	; 64
    2ef0:	92 e0       	ldi	r25, 0x02	; 2
    2ef2:	19 95       	eicall
}
    2ef4:	ff 91       	pop	r31
    2ef6:	ef 91       	pop	r30
    2ef8:	bf 91       	pop	r27
    2efa:	af 91       	pop	r26
    2efc:	9f 91       	pop	r25
    2efe:	8f 91       	pop	r24
    2f00:	7f 91       	pop	r23
    2f02:	6f 91       	pop	r22
    2f04:	5f 91       	pop	r21
    2f06:	4f 91       	pop	r20
    2f08:	3f 91       	pop	r19
    2f0a:	2f 91       	pop	r18
    2f0c:	0f 90       	pop	r0
    2f0e:	0b be       	out	0x3b, r0	; 59
    2f10:	0f 90       	pop	r0
    2f12:	0f be       	out	0x3f, r0	; 63
    2f14:	0f 90       	pop	r0
    2f16:	1f 90       	pop	r1
    2f18:	18 95       	reti

00002f1a <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    2f1a:	1f 92       	push	r1
    2f1c:	0f 92       	push	r0
    2f1e:	0f b6       	in	r0, 0x3f	; 63
    2f20:	0f 92       	push	r0
    2f22:	11 24       	eor	r1, r1
    2f24:	0b b6       	in	r0, 0x3b	; 59
    2f26:	0f 92       	push	r0
    2f28:	2f 93       	push	r18
    2f2a:	3f 93       	push	r19
    2f2c:	4f 93       	push	r20
    2f2e:	5f 93       	push	r21
    2f30:	6f 93       	push	r22
    2f32:	7f 93       	push	r23
    2f34:	8f 93       	push	r24
    2f36:	9f 93       	push	r25
    2f38:	af 93       	push	r26
    2f3a:	bf 93       	push	r27
    2f3c:	ef 93       	push	r30
    2f3e:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    2f40:	e0 e4       	ldi	r30, 0x40	; 64
    2f42:	f2 e0       	ldi	r31, 0x02	; 2
    2f44:	44 a5       	ldd	r20, Z+44	; 0x2c
    2f46:	55 a5       	ldd	r21, Z+45	; 0x2d
    2f48:	e0 91 65 2a 	lds	r30, 0x2A65
    2f4c:	f0 91 66 2a 	lds	r31, 0x2A66
    2f50:	62 e0       	ldi	r22, 0x02	; 2
    2f52:	80 e4       	ldi	r24, 0x40	; 64
    2f54:	92 e0       	ldi	r25, 0x02	; 2
    2f56:	19 95       	eicall
}
    2f58:	ff 91       	pop	r31
    2f5a:	ef 91       	pop	r30
    2f5c:	bf 91       	pop	r27
    2f5e:	af 91       	pop	r26
    2f60:	9f 91       	pop	r25
    2f62:	8f 91       	pop	r24
    2f64:	7f 91       	pop	r23
    2f66:	6f 91       	pop	r22
    2f68:	5f 91       	pop	r21
    2f6a:	4f 91       	pop	r20
    2f6c:	3f 91       	pop	r19
    2f6e:	2f 91       	pop	r18
    2f70:	0f 90       	pop	r0
    2f72:	0b be       	out	0x3b, r0	; 59
    2f74:	0f 90       	pop	r0
    2f76:	0f be       	out	0x3f, r0	; 63
    2f78:	0f 90       	pop	r0
    2f7a:	1f 90       	pop	r1
    2f7c:	18 95       	reti

00002f7e <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    2f7e:	1f 92       	push	r1
    2f80:	0f 92       	push	r0
    2f82:	0f b6       	in	r0, 0x3f	; 63
    2f84:	0f 92       	push	r0
    2f86:	11 24       	eor	r1, r1
    2f88:	0b b6       	in	r0, 0x3b	; 59
    2f8a:	0f 92       	push	r0
    2f8c:	2f 93       	push	r18
    2f8e:	3f 93       	push	r19
    2f90:	4f 93       	push	r20
    2f92:	5f 93       	push	r21
    2f94:	6f 93       	push	r22
    2f96:	7f 93       	push	r23
    2f98:	8f 93       	push	r24
    2f9a:	9f 93       	push	r25
    2f9c:	af 93       	push	r26
    2f9e:	bf 93       	push	r27
    2fa0:	ef 93       	push	r30
    2fa2:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    2fa4:	e0 e4       	ldi	r30, 0x40	; 64
    2fa6:	f2 e0       	ldi	r31, 0x02	; 2
    2fa8:	44 a9       	ldd	r20, Z+52	; 0x34
    2faa:	55 a9       	ldd	r21, Z+53	; 0x35
    2fac:	e0 91 65 2a 	lds	r30, 0x2A65
    2fb0:	f0 91 66 2a 	lds	r31, 0x2A66
    2fb4:	64 e0       	ldi	r22, 0x04	; 4
    2fb6:	80 e4       	ldi	r24, 0x40	; 64
    2fb8:	92 e0       	ldi	r25, 0x02	; 2
    2fba:	19 95       	eicall
}
    2fbc:	ff 91       	pop	r31
    2fbe:	ef 91       	pop	r30
    2fc0:	bf 91       	pop	r27
    2fc2:	af 91       	pop	r26
    2fc4:	9f 91       	pop	r25
    2fc6:	8f 91       	pop	r24
    2fc8:	7f 91       	pop	r23
    2fca:	6f 91       	pop	r22
    2fcc:	5f 91       	pop	r21
    2fce:	4f 91       	pop	r20
    2fd0:	3f 91       	pop	r19
    2fd2:	2f 91       	pop	r18
    2fd4:	0f 90       	pop	r0
    2fd6:	0b be       	out	0x3b, r0	; 59
    2fd8:	0f 90       	pop	r0
    2fda:	0f be       	out	0x3f, r0	; 63
    2fdc:	0f 90       	pop	r0
    2fde:	1f 90       	pop	r1
    2fe0:	18 95       	reti

00002fe2 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    2fe2:	1f 92       	push	r1
    2fe4:	0f 92       	push	r0
    2fe6:	0f b6       	in	r0, 0x3f	; 63
    2fe8:	0f 92       	push	r0
    2fea:	11 24       	eor	r1, r1
    2fec:	0b b6       	in	r0, 0x3b	; 59
    2fee:	0f 92       	push	r0
    2ff0:	2f 93       	push	r18
    2ff2:	3f 93       	push	r19
    2ff4:	4f 93       	push	r20
    2ff6:	5f 93       	push	r21
    2ff8:	6f 93       	push	r22
    2ffa:	7f 93       	push	r23
    2ffc:	8f 93       	push	r24
    2ffe:	9f 93       	push	r25
    3000:	af 93       	push	r26
    3002:	bf 93       	push	r27
    3004:	ef 93       	push	r30
    3006:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    3008:	e0 e4       	ldi	r30, 0x40	; 64
    300a:	f2 e0       	ldi	r31, 0x02	; 2
    300c:	44 ad       	ldd	r20, Z+60	; 0x3c
    300e:	55 ad       	ldd	r21, Z+61	; 0x3d
    3010:	e0 91 65 2a 	lds	r30, 0x2A65
    3014:	f0 91 66 2a 	lds	r31, 0x2A66
    3018:	68 e0       	ldi	r22, 0x08	; 8
    301a:	80 e4       	ldi	r24, 0x40	; 64
    301c:	92 e0       	ldi	r25, 0x02	; 2
    301e:	19 95       	eicall
}
    3020:	ff 91       	pop	r31
    3022:	ef 91       	pop	r30
    3024:	bf 91       	pop	r27
    3026:	af 91       	pop	r26
    3028:	9f 91       	pop	r25
    302a:	8f 91       	pop	r24
    302c:	7f 91       	pop	r23
    302e:	6f 91       	pop	r22
    3030:	5f 91       	pop	r21
    3032:	4f 91       	pop	r20
    3034:	3f 91       	pop	r19
    3036:	2f 91       	pop	r18
    3038:	0f 90       	pop	r0
    303a:	0b be       	out	0x3b, r0	; 59
    303c:	0f 90       	pop	r0
    303e:	0f be       	out	0x3f, r0	; 63
    3040:	0f 90       	pop	r0
    3042:	1f 90       	pop	r1
    3044:	18 95       	reti

00003046 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    3046:	df 92       	push	r13
    3048:	ef 92       	push	r14
    304a:	ff 92       	push	r15
    304c:	0f 93       	push	r16
    304e:	1f 93       	push	r17
    3050:	cf 93       	push	r28
    3052:	df 93       	push	r29
    3054:	ec 01       	movw	r28, r24
    3056:	8b 01       	movw	r16, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    3058:	c1 15       	cp	r28, r1
    305a:	82 e0       	ldi	r24, 0x02	; 2
    305c:	d8 07       	cpc	r29, r24
    305e:	69 f4       	brne	.+26     	; 0x307a <adc_write_configuration+0x34>
    3060:	61 e2       	ldi	r22, 0x21	; 33
    3062:	70 e0       	ldi	r23, 0x00	; 0
    3064:	82 e0       	ldi	r24, 0x02	; 2
    3066:	f6 d0       	rcall	.+492    	; 0x3254 <nvm_read_byte>
    3068:	d8 2e       	mov	r13, r24
    306a:	60 e2       	ldi	r22, 0x20	; 32
    306c:	70 e0       	ldi	r23, 0x00	; 0
    306e:	82 e0       	ldi	r24, 0x02	; 2
    3070:	f1 d0       	rcall	.+482    	; 0x3254 <nvm_read_byte>

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
		data <<= 8;
    3072:	fd 2c       	mov	r15, r13
    3074:	e1 2c       	mov	r14, r1
		data |= nvm_read_production_signature_row(ADCACAL0);
    3076:	e8 2a       	or	r14, r24
    3078:	11 c0       	rjmp	.+34     	; 0x309c <adc_write_configuration+0x56>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    307a:	c0 34       	cpi	r28, 0x40	; 64
    307c:	e2 e0       	ldi	r30, 0x02	; 2
    307e:	de 07       	cpc	r29, r30
    3080:	59 f5       	brne	.+86     	; 0x30d8 <adc_write_configuration+0x92>
    3082:	65 e2       	ldi	r22, 0x25	; 37
    3084:	70 e0       	ldi	r23, 0x00	; 0
    3086:	82 e0       	ldi	r24, 0x02	; 2
    3088:	e5 d0       	rcall	.+458    	; 0x3254 <nvm_read_byte>
    308a:	f8 2e       	mov	r15, r24
    308c:	64 e2       	ldi	r22, 0x24	; 36
    308e:	70 e0       	ldi	r23, 0x00	; 0
    3090:	82 e0       	ldi	r24, 0x02	; 2
    3092:	e0 d0       	rcall	.+448    	; 0x3254 <nvm_read_byte>
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
		data <<= 8;
    3094:	3f 2d       	mov	r19, r15
    3096:	20 e0       	ldi	r18, 0x00	; 0
		data |= nvm_read_production_signature_row(ADCBCAL0);
    3098:	79 01       	movw	r14, r18
    309a:	e8 2a       	or	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    309c:	df b6       	in	r13, 0x3f	; 63
	cpu_irq_disable();
    309e:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    30a0:	ce 01       	movw	r24, r28
    30a2:	ec dd       	rcall	.-1064   	; 0x2c7c <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    30a4:	28 81       	ld	r18, Y

	adc->CTRLA = ADC_FLUSH_bm;
    30a6:	82 e0       	ldi	r24, 0x02	; 2
    30a8:	88 83       	st	Y, r24
	adc->CAL = cal;
    30aa:	ec 86       	std	Y+12, r14	; 0x0c
    30ac:	fd 86       	std	Y+13, r15	; 0x0d
	adc->CMP = conf->cmp;
    30ae:	f8 01       	movw	r30, r16
    30b0:	85 81       	ldd	r24, Z+5	; 0x05
    30b2:	96 81       	ldd	r25, Z+6	; 0x06
    30b4:	88 8f       	std	Y+24, r24	; 0x18
    30b6:	99 8f       	std	Y+25, r25	; 0x19
	adc->REFCTRL = conf->refctrl;
    30b8:	82 81       	ldd	r24, Z+2	; 0x02
    30ba:	8a 83       	std	Y+2, r24	; 0x02
	adc->PRESCALER = conf->prescaler;
    30bc:	84 81       	ldd	r24, Z+4	; 0x04
    30be:	8c 83       	std	Y+4, r24	; 0x04
	adc->EVCTRL = conf->evctrl;
    30c0:	83 81       	ldd	r24, Z+3	; 0x03
    30c2:	8b 83       	std	Y+3, r24	; 0x03
	adc->CTRLB = conf->ctrlb;
    30c4:	81 81       	ldd	r24, Z+1	; 0x01
    30c6:	89 83       	std	Y+1, r24	; 0x01
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
	enable = adc->CTRLA & ADC_ENABLE_bm;
    30c8:	82 2f       	mov	r24, r18
    30ca:	81 70       	andi	r24, 0x01	; 1
	adc->REFCTRL = conf->refctrl;
	adc->PRESCALER = conf->prescaler;
	adc->EVCTRL = conf->evctrl;
	adc->CTRLB = conf->ctrlb;

	adc->CTRLA = enable | conf->ctrla;
    30cc:	90 81       	ld	r25, Z
    30ce:	89 2b       	or	r24, r25
    30d0:	88 83       	st	Y, r24

	adc_disable_clock(adc);
    30d2:	ce 01       	movw	r24, r28
    30d4:	f3 dd       	rcall	.-1050   	; 0x2cbc <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    30d6:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    30d8:	df 91       	pop	r29
    30da:	cf 91       	pop	r28
    30dc:	1f 91       	pop	r17
    30de:	0f 91       	pop	r16
    30e0:	ff 90       	pop	r15
    30e2:	ef 90       	pop	r14
    30e4:	df 90       	pop	r13
    30e6:	08 95       	ret

000030e8 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    30e8:	ff 92       	push	r15
    30ea:	0f 93       	push	r16
    30ec:	1f 93       	push	r17
    30ee:	cf 93       	push	r28
    30f0:	df 93       	push	r29
    30f2:	ec 01       	movw	r28, r24
    30f4:	8b 01       	movw	r16, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    30f6:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    30f8:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    30fa:	c0 dd       	rcall	.-1152   	; 0x2c7c <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    30fc:	88 81       	ld	r24, Y
    30fe:	80 7c       	andi	r24, 0xC0	; 192
    3100:	f8 01       	movw	r30, r16
    3102:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    3104:	88 8d       	ldd	r24, Y+24	; 0x18
    3106:	99 8d       	ldd	r25, Y+25	; 0x19
    3108:	85 83       	std	Z+5, r24	; 0x05
    310a:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    310c:	8a 81       	ldd	r24, Y+2	; 0x02
    310e:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    3110:	8c 81       	ldd	r24, Y+4	; 0x04
    3112:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    3114:	8b 81       	ldd	r24, Y+3	; 0x03
    3116:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    3118:	89 81       	ldd	r24, Y+1	; 0x01
    311a:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
    311c:	ce 01       	movw	r24, r28
    311e:	ce dd       	rcall	.-1124   	; 0x2cbc <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3120:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    3122:	df 91       	pop	r29
    3124:	cf 91       	pop	r28
    3126:	1f 91       	pop	r17
    3128:	0f 91       	pop	r16
    312a:	ff 90       	pop	r15
    312c:	08 95       	ret

0000312e <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    312e:	cf 92       	push	r12
    3130:	df 92       	push	r13
    3132:	ef 92       	push	r14
    3134:	ff 92       	push	r15
    3136:	0f 93       	push	r16
    3138:	1f 93       	push	r17
    313a:	cf 93       	push	r28
    313c:	df 93       	push	r29
    313e:	7c 01       	movw	r14, r24
    3140:	d6 2e       	mov	r13, r22
    3142:	8a 01       	movw	r16, r20
		ch_mask >>= 4;
	}

#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    3144:	86 2f       	mov	r24, r22
    3146:	83 70       	andi	r24, 0x03	; 3
    3148:	29 f4       	brne	.+10     	; 0x3154 <adcch_write_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
    314a:	96 2f       	mov	r25, r22
    314c:	96 95       	lsr	r25
    314e:	96 95       	lsr	r25
	}

#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    3150:	82 e0       	ldi	r24, 0x02	; 2
    3152:	02 c0       	rjmp	.+4      	; 0x3158 <adcch_write_configuration+0x2a>
		ch_mask >>= 4;
	}

#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    3154:	96 2f       	mov	r25, r22
 */
__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask);

__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    3156:	80 e0       	ldi	r24, 0x00	; 0
		ch_mask >>= 2;
	}

#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    3158:	90 ff       	sbrs	r25, 0
		index++;
    315a:	8f 5f       	subi	r24, 0xFF	; 255
	}

#endif

	return (ADC_CH_tmpfix_t *)(&adc->CH0 + index);
    315c:	e7 01       	movw	r28, r14
    315e:	a0 96       	adiw	r28, 0x20	; 32
    3160:	98 e0       	ldi	r25, 0x08	; 8
    3162:	89 9f       	mul	r24, r25
    3164:	c0 0d       	add	r28, r0
    3166:	d1 1d       	adc	r29, r1
    3168:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    316a:	cf b6       	in	r12, 0x3f	; 63
	cpu_irq_disable();
    316c:	f8 94       	cli
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    316e:	c7 01       	movw	r24, r14
    3170:	85 dd       	rcall	.-1270   	; 0x2c7c <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    3172:	f8 01       	movw	r30, r16
    3174:	80 81       	ld	r24, Z
    3176:	88 83       	st	Y, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    3178:	82 81       	ldd	r24, Z+2	; 0x02
    317a:	8a 83       	std	Y+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    317c:	81 81       	ldd	r24, Z+1	; 0x01
    317e:	89 83       	std	Y+1, r24	; 0x01
#if CONFIG_ADC_VERSION == 2
	if (ch_mask & ADC_CH0) {
    3180:	d0 fe       	sbrs	r13, 0
    3182:	02 c0       	rjmp	.+4      	; 0x3188 <adcch_write_configuration+0x5a>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    3184:	83 81       	ldd	r24, Z+3	; 0x03
    3186:	8e 83       	std	Y+6, r24	; 0x06
	}
#endif
	adc_disable_clock(adc);
    3188:	c7 01       	movw	r24, r14
    318a:	98 dd       	rcall	.-1232   	; 0x2cbc <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    318c:	cf be       	out	0x3f, r12	; 63

	cpu_irq_restore(flags);
}
    318e:	df 91       	pop	r29
    3190:	cf 91       	pop	r28
    3192:	1f 91       	pop	r17
    3194:	0f 91       	pop	r16
    3196:	ff 90       	pop	r15
    3198:	ef 90       	pop	r14
    319a:	df 90       	pop	r13
    319c:	cf 90       	pop	r12
    319e:	08 95       	ret

000031a0 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    31a0:	cf 92       	push	r12
    31a2:	df 92       	push	r13
    31a4:	ef 92       	push	r14
    31a6:	ff 92       	push	r15
    31a8:	0f 93       	push	r16
    31aa:	1f 93       	push	r17
    31ac:	cf 93       	push	r28
    31ae:	df 93       	push	r29
    31b0:	7c 01       	movw	r14, r24
    31b2:	d6 2e       	mov	r13, r22
    31b4:	ea 01       	movw	r28, r20
		ch_mask >>= 4;
	}

#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    31b6:	86 2f       	mov	r24, r22
    31b8:	83 70       	andi	r24, 0x03	; 3
    31ba:	29 f4       	brne	.+10     	; 0x31c6 <adcch_read_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
    31bc:	96 2f       	mov	r25, r22
    31be:	96 95       	lsr	r25
    31c0:	96 95       	lsr	r25
	}

#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    31c2:	82 e0       	ldi	r24, 0x02	; 2
    31c4:	02 c0       	rjmp	.+4      	; 0x31ca <adcch_read_configuration+0x2a>
		ch_mask >>= 4;
	}

#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    31c6:	96 2f       	mov	r25, r22
 */
__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask);

__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    31c8:	80 e0       	ldi	r24, 0x00	; 0
		ch_mask >>= 2;
	}

#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    31ca:	90 ff       	sbrs	r25, 0
		index++;
    31cc:	8f 5f       	subi	r24, 0xFF	; 255
	}

#endif

	return (ADC_CH_tmpfix_t *)(&adc->CH0 + index);
    31ce:	87 01       	movw	r16, r14
    31d0:	00 5e       	subi	r16, 0xE0	; 224
    31d2:	1f 4f       	sbci	r17, 0xFF	; 255
    31d4:	98 e0       	ldi	r25, 0x08	; 8
    31d6:	89 9f       	mul	r24, r25
    31d8:	00 0d       	add	r16, r0
    31da:	11 1d       	adc	r17, r1
    31dc:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    31de:	cf b6       	in	r12, 0x3f	; 63
	cpu_irq_disable();
    31e0:	f8 94       	cli

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    31e2:	c7 01       	movw	r24, r14
    31e4:	4b dd       	rcall	.-1386   	; 0x2c7c <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    31e6:	f8 01       	movw	r30, r16
    31e8:	80 81       	ld	r24, Z
    31ea:	88 83       	st	Y, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    31ec:	82 81       	ldd	r24, Z+2	; 0x02
    31ee:	8a 83       	std	Y+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    31f0:	81 81       	ldd	r24, Z+1	; 0x01
    31f2:	89 83       	std	Y+1, r24	; 0x01
#if CONFIG_ADC_VERSION == 2
	if (ch_mask & ADC_CH0) {
    31f4:	d0 fe       	sbrs	r13, 0
    31f6:	02 c0       	rjmp	.+4      	; 0x31fc <adcch_read_configuration+0x5c>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    31f8:	86 81       	ldd	r24, Z+6	; 0x06
    31fa:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
	adc_disable_clock(adc);
    31fc:	c7 01       	movw	r24, r14
    31fe:	5e dd       	rcall	.-1348   	; 0x2cbc <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3200:	cf be       	out	0x3f, r12	; 63

	cpu_irq_restore(flags);
}
    3202:	df 91       	pop	r29
    3204:	cf 91       	pop	r28
    3206:	1f 91       	pop	r17
    3208:	0f 91       	pop	r16
    320a:	ff 90       	pop	r15
    320c:	ef 90       	pop	r14
    320e:	df 90       	pop	r13
    3210:	cf 90       	pop	r12
    3212:	08 95       	ret

00003214 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    3214:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    3216:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    3218:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    321a:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    321c:	60 83       	st	Z, r22
	ret                             // Return to caller
    321e:	08 95       	ret

00003220 <nvm_eeprom_read_byte>:
 * \param  addr       EEPROM address, between 0 and EEPROM_SIZE
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t nvm_eeprom_read_byte(eeprom_addr_t addr)
{
    3220:	1f 93       	push	r17
    3222:	cf 93       	push	r28
    3224:	df 93       	push	r29
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3226:	e0 ec       	ldi	r30, 0xC0	; 192
    3228:	f1 e0       	ldi	r31, 0x01	; 1
    322a:	27 85       	ldd	r18, Z+15	; 0x0f
    322c:	22 23       	and	r18, r18
    322e:	ec f3       	brlt	.-6      	; 0x322a <nvm_eeprom_read_byte+0xa>

	/* Wait until NVM is ready */
	nvm_wait_until_ready();

	/* Set address to read from */
	NVM.ADDR2 = 0x00;
    3230:	c0 ec       	ldi	r28, 0xC0	; 192
    3232:	d1 e0       	ldi	r29, 0x01	; 1
    3234:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (addr >> 8) & 0xFF;
    3236:	99 83       	std	Y+1, r25	; 0x01
	NVM.ADDR0 = addr & 0xFF;
    3238:	88 83       	st	Y, r24
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
    323a:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    323c:	86 e0       	ldi	r24, 0x06	; 6
    323e:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    3240:	61 e0       	ldi	r22, 0x01	; 1
    3242:	8b ec       	ldi	r24, 0xCB	; 203
    3244:	91 e0       	ldi	r25, 0x01	; 1
    3246:	e6 df       	rcall	.-52     	; 0x3214 <ccp_write_io>
	NVM.CMD = old_cmd;
    3248:	1a 87       	std	Y+10, r17	; 0x0a

	/* Issue EEPROM Read command */
	nvm_issue_command(NVM_CMD_READ_EEPROM_gc);

	return NVM.DATA0;
    324a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    324c:	df 91       	pop	r29
    324e:	cf 91       	pop	r28
    3250:	1f 91       	pop	r17
    3252:	08 95       	ret

00003254 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    3254:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    3258:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    325a:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    325c:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    3260:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    3262:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    3266:	08 95       	ret

00003268 <rtc_set_time>:
 *
 * \param callback Callback function pointer
 */
void rtc_set_callback(rtc_callback_t callback)
{
	rtc_data.callback = callback;
    3268:	10 92 20 04 	sts	0x0420, r1
    326c:	e0 e2       	ldi	r30, 0x20	; 32
    326e:	f4 e0       	ldi	r31, 0x04	; 4
    3270:	21 81       	ldd	r18, Z+1	; 0x01
    3272:	20 fd       	sbrc	r18, 0
    3274:	fd cf       	rjmp	.-6      	; 0x3270 <rtc_set_time+0x8>
    3276:	e0 e2       	ldi	r30, 0x20	; 32
    3278:	f4 e0       	ldi	r31, 0x04	; 4
    327a:	64 83       	std	Z+4, r22	; 0x04
    327c:	75 83       	std	Z+5, r23	; 0x05
    327e:	86 83       	std	Z+6, r24	; 0x06
    3280:	97 83       	std	Z+7, r25	; 0x07
    3282:	81 e0       	ldi	r24, 0x01	; 1
    3284:	80 83       	st	Z, r24
    3286:	08 95       	ret

00003288 <rtc_get_time>:
    3288:	0f 93       	push	r16
    328a:	1f 93       	push	r17
    328c:	80 e1       	ldi	r24, 0x10	; 16
    328e:	e0 e2       	ldi	r30, 0x20	; 32
    3290:	f4 e0       	ldi	r31, 0x04	; 4
    3292:	81 83       	std	Z+1, r24	; 0x01
    3294:	81 81       	ldd	r24, Z+1	; 0x01
    3296:	84 fd       	sbrc	r24, 4
    3298:	fd cf       	rjmp	.-6      	; 0x3294 <rtc_get_time+0xc>
    329a:	e0 e2       	ldi	r30, 0x20	; 32
    329c:	f4 e0       	ldi	r31, 0x04	; 4
    329e:	04 81       	ldd	r16, Z+4	; 0x04
    32a0:	15 81       	ldd	r17, Z+5	; 0x05
    32a2:	26 81       	ldd	r18, Z+6	; 0x06
    32a4:	37 81       	ldd	r19, Z+7	; 0x07
    32a6:	60 2f       	mov	r22, r16
    32a8:	71 2f       	mov	r23, r17
    32aa:	82 2f       	mov	r24, r18
    32ac:	93 2f       	mov	r25, r19
    32ae:	1f 91       	pop	r17
    32b0:	0f 91       	pop	r16
    32b2:	08 95       	ret

000032b4 <rtc_vbat_system_check>:
 * when main system power is lost.
 *
 * \returns Battery backup system status.
 */
enum vbat_status_code rtc_vbat_system_check(bool first_time_startup)
{
    32b4:	cf 93       	push	r28
    32b6:	df 93       	push	r29
    32b8:	d8 2f       	mov	r29, r24
	enum vbat_status_code vbat_status;
	uint8_t flags = VBAT.STATUS;
    32ba:	e0 ef       	ldi	r30, 0xF0	; 240
    32bc:	f0 e0       	ldi	r31, 0x00	; 0
    32be:	c1 81       	ldd	r28, Z+1	; 0x01

	/* Ensure the module is clocked to be able to check the registers */
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    32c0:	64 e0       	ldi	r22, 0x04	; 4
    32c2:	80 e0       	ldi	r24, 0x00	; 0
    32c4:	0e 94 c7 0a 	call	0x158e	; 0x158e <sysclk_enable_module>
	/*
	 * Check if a sufficient voltage was detected on the VBAT input.
	 * The brown-out detector (BBBOD) will be sampled once when the
	 * device starts up and the result is visible as the BBPWR flag.
	 */
	if (flags & VBAT_BBPWR_bm) {
    32c8:	cc 23       	and	r28, r28
    32ca:	7c f0       	brlt	.+30     	; 0x32ea <rtc_vbat_system_check+0x36>
		/*
		 * We have sufficient power, now we check if a power-on-reset
		 * (BBPOR) was detected on VBAT. This is visible from the BBPORF
		 * flag which is also only updated once when the device starts.
		 */
		if (flags & VBAT_BBPORF_bm) {
    32cc:	c0 ff       	sbrs	r28, 0
    32ce:	04 c0       	rjmp	.+8      	; 0x32d8 <rtc_vbat_system_check+0x24>
			if (first_time_startup) {
    32d0:	dd 23       	and	r29, r29
    32d2:	69 f0       	breq	.+26     	; 0x32ee <rtc_vbat_system_check+0x3a>
				vbat_status = VBAT_STATUS_INIT;
    32d4:	82 e0       	ldi	r24, 0x02	; 2
    32d6:	10 c0       	rjmp	.+32     	; 0x32f8 <rtc_vbat_system_check+0x44>
			} else {
				vbat_status = VBAT_STATUS_BBPOR;
			}
		} else if (flags & VBAT_BBBORF_bm) {
    32d8:	c1 fd       	sbrc	r28, 1
    32da:	0b c0       	rjmp	.+22     	; 0x32f2 <rtc_vbat_system_check+0x3e>
			vbat_status = VBAT_STATUS_BBBOD;
		} else {
			VBAT.CTRL = VBAT_ACCEN_bm;
    32dc:	82 e0       	ldi	r24, 0x02	; 2
    32de:	80 93 f0 00 	sts	0x00F0, r24
			if (flags & VBAT_XOSCFAIL_bm) {
    32e2:	c2 ff       	sbrs	r28, 2
    32e4:	08 c0       	rjmp	.+16     	; 0x32f6 <rtc_vbat_system_check+0x42>
				vbat_status = VBAT_STATUS_XOSCFAIL;
    32e6:	85 e0       	ldi	r24, 0x05	; 5
    32e8:	07 c0       	rjmp	.+14     	; 0x32f8 <rtc_vbat_system_check+0x44>
	 * Check if a sufficient voltage was detected on the VBAT input.
	 * The brown-out detector (BBBOD) will be sampled once when the
	 * device starts up and the result is visible as the BBPWR flag.
	 */
	if (flags & VBAT_BBPWR_bm) {
		vbat_status = VBAT_STATUS_NO_POWER;
    32ea:	81 e0       	ldi	r24, 0x01	; 1
    32ec:	05 c0       	rjmp	.+10     	; 0x32f8 <rtc_vbat_system_check+0x44>
		 */
		if (flags & VBAT_BBPORF_bm) {
			if (first_time_startup) {
				vbat_status = VBAT_STATUS_INIT;
			} else {
				vbat_status = VBAT_STATUS_BBPOR;
    32ee:	83 e0       	ldi	r24, 0x03	; 3
    32f0:	03 c0       	rjmp	.+6      	; 0x32f8 <rtc_vbat_system_check+0x44>
			}
		} else if (flags & VBAT_BBBORF_bm) {
			vbat_status = VBAT_STATUS_BBBOD;
    32f2:	84 e0       	ldi	r24, 0x04	; 4
    32f4:	01 c0       	rjmp	.+2      	; 0x32f8 <rtc_vbat_system_check+0x44>
		} else {
			VBAT.CTRL = VBAT_ACCEN_bm;
			if (flags & VBAT_XOSCFAIL_bm) {
				vbat_status = VBAT_STATUS_XOSCFAIL;
			} else {
				vbat_status = VBAT_STATUS_OK;
    32f6:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
	return vbat_status;
}
    32f8:	df 91       	pop	r29
    32fa:	cf 91       	pop	r28
    32fc:	08 95       	ret

000032fe <rtc_init>:
 * \note When the backup system is used, the function \ref
 * rtc_vbat_system_check should be called to determine if a re-initialization
 * must be done.
 */
void rtc_init(void)
{
    32fe:	cf 93       	push	r28
    3300:	df 93       	push	r29
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    3302:	64 e0       	ldi	r22, 0x04	; 4
    3304:	80 e0       	ldi	r24, 0x00	; 0
    3306:	0e 94 c7 0a 	call	0x158e	; 0x158e <sysclk_enable_module>
 * \ref CONFIG_RTC32_CLOCK_1024HZ.
 */
static void vbat_init(void)
{
	// Enable access to VBAT
	VBAT.CTRL |= VBAT_ACCEN_bm;
    330a:	c0 ef       	ldi	r28, 0xF0	; 240
    330c:	d0 e0       	ldi	r29, 0x00	; 0
    330e:	88 81       	ld	r24, Y
    3310:	82 60       	ori	r24, 0x02	; 2
    3312:	88 83       	st	Y, r24

	ccp_write_io((void *)&VBAT.CTRL, VBAT_RESET_bm);
    3314:	61 e0       	ldi	r22, 0x01	; 1
    3316:	80 ef       	ldi	r24, 0xF0	; 240
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	7c df       	rcall	.-264    	; 0x3214 <ccp_write_io>

	VBAT.CTRL |= VBAT_XOSCFDEN_bm;
    331c:	88 81       	ld	r24, Y
    331e:	84 60       	ori	r24, 0x04	; 4
    3320:	88 83       	st	Y, r24
    3322:	80 e0       	ldi	r24, 0x00	; 0
    3324:	90 e0       	ldi	r25, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    3326:	01 96       	adiw	r24, 0x01	; 1
    3328:	80 32       	cpi	r24, 0x20	; 32
    332a:	23 e0       	ldi	r18, 0x03	; 3
    332c:	92 07       	cpc	r25, r18
    332e:	d9 f7       	brne	.-10     	; 0x3326 <rtc_init+0x28>
	/* This delay is needed to give the voltage in the backup system some
	* time to stabilize before we turn on the oscillator. If we do not
	* have this delay we may get a failure detection.
	*/
	delay_us(200);
	VBAT.CTRL |= VBAT_XOSCEN_bm | RTC32_CLOCK;
    3330:	e0 ef       	ldi	r30, 0xF0	; 240
    3332:	f0 e0       	ldi	r31, 0x00	; 0
    3334:	80 81       	ld	r24, Z
    3336:	88 60       	ori	r24, 0x08	; 8
    3338:	80 83       	st	Z, r24
	while (!(VBAT.STATUS & VBAT_XOSCRDY_bm));
    333a:	81 81       	ldd	r24, Z+1	; 0x01
    333c:	83 ff       	sbrs	r24, 3
    333e:	fd cf       	rjmp	.-6      	; 0x333a <rtc_init+0x3c>
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	// Set up VBAT system and start oscillator
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;
    3340:	10 92 20 04 	sts	0x0420, r1
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    3344:	e0 e2       	ldi	r30, 0x20	; 32
    3346:	f4 e0       	ldi	r31, 0x04	; 4
    3348:	81 81       	ldd	r24, Z+1	; 0x01
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;

	while (rtc_is_busy());
    334a:	80 fd       	sbrc	r24, 0
    334c:	fd cf       	rjmp	.-6      	; 0x3348 <rtc_init+0x4a>

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
    334e:	e0 e2       	ldi	r30, 0x20	; 32
    3350:	f4 e0       	ldi	r31, 0x04	; 4
    3352:	8f ef       	ldi	r24, 0xFF	; 255
    3354:	9f ef       	ldi	r25, 0xFF	; 255
    3356:	dc 01       	movw	r26, r24
    3358:	80 87       	std	Z+8, r24	; 0x08
    335a:	91 87       	std	Z+9, r25	; 0x09
    335c:	a2 87       	std	Z+10, r26	; 0x0a
    335e:	b3 87       	std	Z+11, r27	; 0x0b
	RTC32.CNT = 0;
    3360:	14 82       	std	Z+4, r1	; 0x04
    3362:	15 82       	std	Z+5, r1	; 0x05
    3364:	16 82       	std	Z+6, r1	; 0x06
    3366:	17 82       	std	Z+7, r1	; 0x07
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    3368:	81 81       	ldd	r24, Z+1	; 0x01

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
	RTC32.CNT = 0;

	while (rtc_is_busy());
    336a:	80 fd       	sbrc	r24, 0
    336c:	fd cf       	rjmp	.-6      	; 0x3368 <rtc_init+0x6a>

	RTC32.INTCTRL = 0;
    336e:	e0 e2       	ldi	r30, 0x20	; 32
    3370:	f4 e0       	ldi	r31, 0x04	; 4
    3372:	12 82       	std	Z+2, r1	; 0x02
	RTC32.CTRL = RTC32_ENABLE_bm;
    3374:	81 e0       	ldi	r24, 0x01	; 1
    3376:	80 83       	st	Z, r24
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    3378:	81 81       	ldd	r24, Z+1	; 0x01

	RTC32.INTCTRL = 0;
	RTC32.CTRL = RTC32_ENABLE_bm;

	// Make sure it's sync'ed before return
	while (rtc_is_busy());
    337a:	80 fd       	sbrc	r24, 0
    337c:	fd cf       	rjmp	.-6      	; 0x3378 <rtc_init+0x7a>
}
    337e:	df 91       	pop	r29
    3380:	cf 91       	pop	r28
    3382:	08 95       	ret

00003384 <__vector_11>:
 *
 * Disables the RTC32 interrupts, then calls the alarm callback function if one
 * has been set.
 */
ISR(RTC32_COMP_vect)
{
    3384:	1f 92       	push	r1
    3386:	0f 92       	push	r0
    3388:	0f b6       	in	r0, 0x3f	; 63
    338a:	0f 92       	push	r0
    338c:	11 24       	eor	r1, r1
    338e:	0b b6       	in	r0, 0x3b	; 59
    3390:	0f 92       	push	r0
    3392:	2f 93       	push	r18
    3394:	3f 93       	push	r19
    3396:	4f 93       	push	r20
    3398:	5f 93       	push	r21
    339a:	6f 93       	push	r22
    339c:	7f 93       	push	r23
    339e:	8f 93       	push	r24
    33a0:	9f 93       	push	r25
    33a2:	af 93       	push	r26
    33a4:	bf 93       	push	r27
    33a6:	cf 93       	push	r28
    33a8:	df 93       	push	r29
    33aa:	ef 93       	push	r30
    33ac:	ff 93       	push	r31
	RTC32.INTCTRL = 0;
    33ae:	e0 e2       	ldi	r30, 0x20	; 32
    33b0:	f4 e0       	ldi	r31, 0x04	; 4
    33b2:	12 82       	std	Z+2, r1	; 0x02
	if (rtc_data.callback)
    33b4:	c0 91 69 2a 	lds	r28, 0x2A69
    33b8:	d0 91 6a 2a 	lds	r29, 0x2A6A
    33bc:	20 97       	sbiw	r28, 0x00	; 0
    33be:	19 f0       	breq	.+6      	; 0x33c6 <__vector_11+0x42>
		rtc_data.callback(rtc_get_time());
    33c0:	63 df       	rcall	.-314    	; 0x3288 <rtc_get_time>
    33c2:	fe 01       	movw	r30, r28
    33c4:	19 95       	eicall
}
    33c6:	ff 91       	pop	r31
    33c8:	ef 91       	pop	r30
    33ca:	df 91       	pop	r29
    33cc:	cf 91       	pop	r28
    33ce:	bf 91       	pop	r27
    33d0:	af 91       	pop	r26
    33d2:	9f 91       	pop	r25
    33d4:	8f 91       	pop	r24
    33d6:	7f 91       	pop	r23
    33d8:	6f 91       	pop	r22
    33da:	5f 91       	pop	r21
    33dc:	4f 91       	pop	r20
    33de:	3f 91       	pop	r19
    33e0:	2f 91       	pop	r18
    33e2:	0f 90       	pop	r0
    33e4:	0b be       	out	0x3b, r0	; 59
    33e6:	0f 90       	pop	r0
    33e8:	0f be       	out	0x3f, r0	; 63
    33ea:	0f 90       	pop	r0
    33ec:	1f 90       	pop	r1
    33ee:	18 95       	reti

000033f0 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    33f0:	cf 92       	push	r12
    33f2:	df 92       	push	r13
    33f4:	ef 92       	push	r14
    33f6:	ff 92       	push	r15
    33f8:	0f 93       	push	r16
    33fa:	1f 93       	push	r17
    33fc:	cf 93       	push	r28
    33fe:	df 93       	push	r29
    3400:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
    3402:	d9 01       	movw	r26, r18
    3404:	c8 01       	movw	r24, r16
    3406:	b6 95       	lsr	r27
    3408:	a7 95       	ror	r26
    340a:	97 95       	ror	r25
    340c:	87 95       	ror	r24
    340e:	48 17       	cp	r20, r24
    3410:	59 07       	cpc	r21, r25
    3412:	6a 07       	cpc	r22, r26
    3414:	7b 07       	cpc	r23, r27
    3416:	78 f4       	brcc	.+30     	; 0x3436 <usart_spi_set_baudrate+0x46>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
    3418:	6a 01       	movw	r12, r20
    341a:	7b 01       	movw	r14, r22
    341c:	cc 0c       	add	r12, r12
    341e:	dd 1c       	adc	r13, r13
    3420:	ee 1c       	adc	r14, r14
    3422:	ff 1c       	adc	r15, r15
    3424:	c9 01       	movw	r24, r18
    3426:	b8 01       	movw	r22, r16
    3428:	a7 01       	movw	r20, r14
    342a:	96 01       	movw	r18, r12
    342c:	0e 94 25 29 	call	0x524a	; 0x524a <__udivmodsi4>
    3430:	21 50       	subi	r18, 0x01	; 1
    3432:	31 09       	sbc	r19, r1
    3434:	02 c0       	rjmp	.+4      	; 0x343a <usart_spi_set_baudrate+0x4a>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
    3436:	20 e0       	ldi	r18, 0x00	; 0
    3438:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
    343a:	83 2f       	mov	r24, r19
    343c:	99 27       	eor	r25, r25
    343e:	8f 70       	andi	r24, 0x0F	; 15
    3440:	99 27       	eor	r25, r25
    3442:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
    3444:	2e 83       	std	Y+6, r18	; 0x06
}
    3446:	df 91       	pop	r29
    3448:	cf 91       	pop	r28
    344a:	1f 91       	pop	r17
    344c:	0f 91       	pop	r16
    344e:	ff 90       	pop	r15
    3450:	ef 90       	pop	r14
    3452:	df 90       	pop	r13
    3454:	cf 90       	pop	r12
    3456:	08 95       	ret

00003458 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    3458:	0f 93       	push	r16
    345a:	1f 93       	push	r17
    345c:	cf 93       	push	r28
    345e:	df 93       	push	r29
    3460:	ec 01       	movw	r28, r24
    3462:	8b 01       	movw	r16, r22
 * \brief usart Pointer to an USART module.
 */
static inline void usart_enable_module_clock(USART_t *usart)
{
#ifdef USARTC0
	if ((uintptr_t)usart == (uintptr_t)&USARTC0) {
    3464:	c0 3a       	cpi	r28, 0xA0	; 160
    3466:	88 e0       	ldi	r24, 0x08	; 8
    3468:	d8 07       	cpc	r29, r24
    346a:	29 f4       	brne	.+10     	; 0x3476 <usart_init_spi+0x1e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    346c:	60 e1       	ldi	r22, 0x10	; 16
    346e:	83 e0       	ldi	r24, 0x03	; 3
    3470:	0e 94 c7 0a 	call	0x158e	; 0x158e <sysclk_enable_module>
    3474:	12 c0       	rjmp	.+36     	; 0x349a <usart_init_spi+0x42>
	}
#endif
#ifdef USARTC1
	if ((uintptr_t)usart == (uintptr_t)&USARTC1) {
    3476:	c0 3b       	cpi	r28, 0xB0	; 176
    3478:	e8 e0       	ldi	r30, 0x08	; 8
    347a:	de 07       	cpc	r29, r30
    347c:	29 f4       	brne	.+10     	; 0x3488 <usart_init_spi+0x30>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    347e:	60 e2       	ldi	r22, 0x20	; 32
    3480:	83 e0       	ldi	r24, 0x03	; 3
    3482:	0e 94 c7 0a 	call	0x158e	; 0x158e <sysclk_enable_module>
    3486:	12 c0       	rjmp	.+36     	; 0x34ac <usart_init_spi+0x54>
	}
#endif
#ifdef USARTD0
	if ((uintptr_t)usart == (uintptr_t)&USARTD0) {
    3488:	c0 3a       	cpi	r28, 0xA0	; 160
    348a:	f9 e0       	ldi	r31, 0x09	; 9
    348c:	df 07       	cpc	r29, r31
    348e:	29 f4       	brne	.+10     	; 0x349a <usart_init_spi+0x42>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    3490:	60 e1       	ldi	r22, 0x10	; 16
    3492:	84 e0       	ldi	r24, 0x04	; 4
    3494:	0e 94 c7 0a 	call	0x158e	; 0x158e <sysclk_enable_module>
    3498:	12 c0       	rjmp	.+36     	; 0x34be <usart_init_spi+0x66>
	}
#endif
#ifdef USARTD1
	if ((uintptr_t)usart == (uintptr_t)&USARTD1) {
    349a:	c0 3b       	cpi	r28, 0xB0	; 176
    349c:	89 e0       	ldi	r24, 0x09	; 9
    349e:	d8 07       	cpc	r29, r24
    34a0:	29 f4       	brne	.+10     	; 0x34ac <usart_init_spi+0x54>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    34a2:	60 e2       	ldi	r22, 0x20	; 32
    34a4:	84 e0       	ldi	r24, 0x04	; 4
    34a6:	0e 94 c7 0a 	call	0x158e	; 0x158e <sysclk_enable_module>
    34aa:	11 c0       	rjmp	.+34     	; 0x34ce <usart_init_spi+0x76>
	}
#endif
#ifdef USARTE0
	if ((uintptr_t)usart == (uintptr_t)&USARTE0) {
    34ac:	c0 3a       	cpi	r28, 0xA0	; 160
    34ae:	ea e0       	ldi	r30, 0x0A	; 10
    34b0:	de 07       	cpc	r29, r30
    34b2:	29 f4       	brne	.+10     	; 0x34be <usart_init_spi+0x66>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    34b4:	60 e1       	ldi	r22, 0x10	; 16
    34b6:	85 e0       	ldi	r24, 0x05	; 5
    34b8:	0e 94 c7 0a 	call	0x158e	; 0x158e <sysclk_enable_module>
    34bc:	08 c0       	rjmp	.+16     	; 0x34ce <usart_init_spi+0x76>
	if ((uintptr_t)usart == (uintptr_t)&USARTE1) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
	}
#endif
#ifdef USARTF0
	if ((uintptr_t)usart == (uintptr_t)&USARTF0) {
    34be:	c0 3a       	cpi	r28, 0xA0	; 160
    34c0:	fb e0       	ldi	r31, 0x0B	; 11
    34c2:	df 07       	cpc	r29, r31
    34c4:	21 f4       	brne	.+8      	; 0x34ce <usart_init_spi+0x76>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    34c6:	60 e1       	ldi	r22, 0x10	; 16
    34c8:	86 e0       	ldi	r24, 0x06	; 6
    34ca:	0e 94 c7 0a 	call	0x158e	; 0x158e <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    34ce:	8d 81       	ldd	r24, Y+5	; 0x05
    34d0:	80 6c       	ori	r24, 0xC0	; 192
    34d2:	8d 83       	std	Y+5, r24	; 0x05
{
	usart_enable_module_clock(usart);
	usart_set_mode(usart, USART_CMODE_MSPI_gc);
	port_pin_t sck_pin;

	if (opt->spimode == 1 || opt->spimode == 3) {
    34d4:	f8 01       	movw	r30, r16
    34d6:	84 81       	ldd	r24, Z+4	; 0x04
    34d8:	81 30       	cpi	r24, 0x01	; 1
    34da:	11 f0       	breq	.+4      	; 0x34e0 <usart_init_spi+0x88>
    34dc:	83 30       	cpi	r24, 0x03	; 3
    34de:	21 f4       	brne	.+8      	; 0x34e8 <usart_init_spi+0x90>
		/** \todo Fix when UCPHA_bm is added to header file. */
		usart->CTRLC |= 0x02;
    34e0:	8d 81       	ldd	r24, Y+5	; 0x05
    34e2:	82 60       	ori	r24, 0x02	; 2
    34e4:	8d 83       	std	Y+5, r24	; 0x05
    34e6:	03 c0       	rjmp	.+6      	; 0x34ee <usart_init_spi+0x96>
	} else {
		/** \todo Fix when UCPHA_bm is added to header file. */
		usart->CTRLC &= ~0x02;
    34e8:	8d 81       	ldd	r24, Y+5	; 0x05
    34ea:	8d 7f       	andi	r24, 0xFD	; 253
    34ec:	8d 83       	std	Y+5, r24	; 0x05
	}

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	if (opt->spimode == 2 || opt->spimode == 3) {
    34ee:	f8 01       	movw	r30, r16
    34f0:	84 81       	ldd	r24, Z+4	; 0x04
    34f2:	82 50       	subi	r24, 0x02	; 2
    34f4:	82 30       	cpi	r24, 0x02	; 2
    34f6:	08 f0       	brcs	.+2      	; 0x34fa <usart_init_spi+0xa2>
    34f8:	47 c0       	rjmp	.+142    	; 0x3588 <usart_init_spi+0x130>
#ifdef USARTC0
		if ((uint16_t)usart == (uint16_t)&USARTC0) {
    34fa:	c0 3a       	cpi	r28, 0xA0	; 160
    34fc:	f8 e0       	ldi	r31, 0x08	; 8
    34fe:	df 07       	cpc	r29, r31
    3500:	41 f4       	brne	.+16     	; 0x3512 <usart_init_spi+0xba>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
			ioport_configure_port_pin(ioport_pin_to_port(sck_pin),
    3502:	43 e0       	ldi	r20, 0x03	; 3
    3504:	50 e4       	ldi	r21, 0x40	; 64
    3506:	62 e0       	ldi	r22, 0x02	; 2
    3508:	80 e4       	ldi	r24, 0x40	; 64
    350a:	96 e0       	ldi	r25, 0x06	; 6
    350c:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <ioport_configure_port_pin>
    3510:	18 c0       	rjmp	.+48     	; 0x3542 <usart_init_spi+0xea>
					IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH |
					IOPORT_INV_ENABLED);
		}
#endif
#ifdef USARTC1
		if ((uint16_t)usart == (uint16_t)&USARTC1) {
    3512:	c0 3b       	cpi	r28, 0xB0	; 176
    3514:	88 e0       	ldi	r24, 0x08	; 8
    3516:	d8 07       	cpc	r29, r24
    3518:	41 f4       	brne	.+16     	; 0x352a <usart_init_spi+0xd2>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
			ioport_configure_port_pin(ioport_pin_to_port(sck_pin),
    351a:	43 e0       	ldi	r20, 0x03	; 3
    351c:	50 e4       	ldi	r21, 0x40	; 64
    351e:	60 e2       	ldi	r22, 0x20	; 32
    3520:	80 e4       	ldi	r24, 0x40	; 64
    3522:	96 e0       	ldi	r25, 0x06	; 6
    3524:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <ioport_configure_port_pin>
    3528:	18 c0       	rjmp	.+48     	; 0x355a <usart_init_spi+0x102>
					IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH |
					IOPORT_INV_ENABLED);
		}
#endif
#ifdef USARTD0
		if ((uint16_t)usart == (uint16_t)&USARTD0) {
    352a:	c0 3a       	cpi	r28, 0xA0	; 160
    352c:	e9 e0       	ldi	r30, 0x09	; 9
    352e:	de 07       	cpc	r29, r30
    3530:	41 f4       	brne	.+16     	; 0x3542 <usart_init_spi+0xea>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
			ioport_configure_port_pin(ioport_pin_to_port(sck_pin),
    3532:	43 e0       	ldi	r20, 0x03	; 3
    3534:	50 e4       	ldi	r21, 0x40	; 64
    3536:	62 e0       	ldi	r22, 0x02	; 2
    3538:	80 e6       	ldi	r24, 0x60	; 96
    353a:	96 e0       	ldi	r25, 0x06	; 6
    353c:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <ioport_configure_port_pin>
    3540:	18 c0       	rjmp	.+48     	; 0x3572 <usart_init_spi+0x11a>
					IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH |
					IOPORT_INV_ENABLED);
		}
#endif
#ifdef USARTD1
		if ((uint16_t)usart == (uint16_t)&USARTD1) {
    3542:	c0 3b       	cpi	r28, 0xB0	; 176
    3544:	f9 e0       	ldi	r31, 0x09	; 9
    3546:	df 07       	cpc	r29, r31
    3548:	41 f4       	brne	.+16     	; 0x355a <usart_init_spi+0x102>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
			ioport_configure_port_pin(ioport_pin_to_port(sck_pin),
    354a:	43 e0       	ldi	r20, 0x03	; 3
    354c:	50 e4       	ldi	r21, 0x40	; 64
    354e:	60 e2       	ldi	r22, 0x20	; 32
    3550:	80 e6       	ldi	r24, 0x60	; 96
    3552:	96 e0       	ldi	r25, 0x06	; 6
    3554:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <ioport_configure_port_pin>
    3558:	17 c0       	rjmp	.+46     	; 0x3588 <usart_init_spi+0x130>
					IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH |
					IOPORT_INV_ENABLED);
		}
#endif
#ifdef USARTE0
		if ((uint16_t)usart == (uint16_t)&USARTE0) {
    355a:	c0 3a       	cpi	r28, 0xA0	; 160
    355c:	8a e0       	ldi	r24, 0x0A	; 10
    355e:	d8 07       	cpc	r29, r24
    3560:	41 f4       	brne	.+16     	; 0x3572 <usart_init_spi+0x11a>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
			ioport_configure_port_pin(ioport_pin_to_port(sck_pin),
    3562:	43 e0       	ldi	r20, 0x03	; 3
    3564:	50 e4       	ldi	r21, 0x40	; 64
    3566:	62 e0       	ldi	r22, 0x02	; 2
    3568:	80 e8       	ldi	r24, 0x80	; 128
    356a:	96 e0       	ldi	r25, 0x06	; 6
    356c:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <ioport_configure_port_pin>
    3570:	0b c0       	rjmp	.+22     	; 0x3588 <usart_init_spi+0x130>
					IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH |
					IOPORT_INV_ENABLED);
		}
#endif
#ifdef USARTF0
		if ((uint16_t)usart == (uint16_t)&USARTF0) {
    3572:	c0 3a       	cpi	r28, 0xA0	; 160
    3574:	eb e0       	ldi	r30, 0x0B	; 11
    3576:	de 07       	cpc	r29, r30
    3578:	39 f4       	brne	.+14     	; 0x3588 <usart_init_spi+0x130>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
			ioport_configure_port_pin(ioport_pin_to_port(sck_pin),
    357a:	43 e0       	ldi	r20, 0x03	; 3
    357c:	50 e4       	ldi	r21, 0x40	; 64
    357e:	62 e0       	ldi	r22, 0x02	; 2
    3580:	80 ea       	ldi	r24, 0xA0	; 160
    3582:	96 e0       	ldi	r25, 0x06	; 6
    3584:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <ioport_configure_port_pin>
					IOPORT_INV_ENABLED);
		}
#endif
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    3588:	f8 01       	movw	r30, r16
    358a:	40 81       	ld	r20, Z
    358c:	51 81       	ldd	r21, Z+1	; 0x01
    358e:	62 81       	ldd	r22, Z+2	; 0x02
    3590:	73 81       	ldd	r23, Z+3	; 0x03
    3592:	00 e0       	ldi	r16, 0x00	; 0
    3594:	16 e3       	ldi	r17, 0x36	; 54
    3596:	2e e6       	ldi	r18, 0x6E	; 110
    3598:	31 e0       	ldi	r19, 0x01	; 1
    359a:	ce 01       	movw	r24, r28
    359c:	29 df       	rcall	.-430    	; 0x33f0 <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    359e:	8c 81       	ldd	r24, Y+4	; 0x04
    35a0:	88 60       	ori	r24, 0x08	; 8
    35a2:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    35a4:	8c 81       	ldd	r24, Y+4	; 0x04
    35a6:	80 61       	ori	r24, 0x10	; 16
    35a8:	8c 83       	std	Y+4, r24	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    35aa:	df 91       	pop	r29
    35ac:	cf 91       	pop	r28
    35ae:	1f 91       	pop	r17
    35b0:	0f 91       	pop	r16
    35b2:	08 95       	ret

000035b4 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    35b4:	81 11       	cpse	r24, r1
    35b6:	18 c0       	rjmp	.+48     	; 0x35e8 <udd_sleep_mode+0x34>
    35b8:	90 91 8c 29 	lds	r25, 0x298C
    35bc:	99 23       	and	r25, r25
    35be:	89 f0       	breq	.+34     	; 0x35e2 <udd_sleep_mode+0x2e>
    35c0:	9f b7       	in	r25, 0x3f	; 63
    35c2:	f8 94       	cli
    35c4:	e0 e6       	ldi	r30, 0x60	; 96
    35c6:	fa e2       	ldi	r31, 0x2A	; 42
    35c8:	20 81       	ld	r18, Z
    35ca:	21 50       	subi	r18, 0x01	; 1
    35cc:	20 83       	st	Z, r18
    35ce:	9f bf       	out	0x3f, r25	; 63
    35d0:	08 c0       	rjmp	.+16     	; 0x35e2 <udd_sleep_mode+0x2e>
    35d2:	9f b7       	in	r25, 0x3f	; 63
    35d4:	f8 94       	cli
    35d6:	e0 e6       	ldi	r30, 0x60	; 96
    35d8:	fa e2       	ldi	r31, 0x2A	; 42
    35da:	20 81       	ld	r18, Z
    35dc:	2f 5f       	subi	r18, 0xFF	; 255
    35de:	20 83       	st	Z, r18
    35e0:	9f bf       	out	0x3f, r25	; 63
    35e2:	80 93 8c 29 	sts	0x298C, r24
    35e6:	08 95       	ret
    35e8:	90 91 8c 29 	lds	r25, 0x298C
    35ec:	99 23       	and	r25, r25
    35ee:	89 f3       	breq	.-30     	; 0x35d2 <udd_sleep_mode+0x1e>
    35f0:	f8 cf       	rjmp	.-16     	; 0x35e2 <udd_sleep_mode+0x2e>

000035f2 <udd_ep_get_ctrl>:
    35f2:	28 2f       	mov	r18, r24
    35f4:	2f 70       	andi	r18, 0x0F	; 15
    35f6:	30 e0       	ldi	r19, 0x00	; 0
    35f8:	22 0f       	add	r18, r18
    35fa:	33 1f       	adc	r19, r19
    35fc:	99 27       	eor	r25, r25
    35fe:	87 fd       	sbrc	r24, 7
    3600:	90 95       	com	r25
    3602:	88 27       	eor	r24, r24
    3604:	99 0f       	add	r25, r25
    3606:	88 1f       	adc	r24, r24
    3608:	99 27       	eor	r25, r25
    360a:	28 0f       	add	r18, r24
    360c:	39 1f       	adc	r19, r25
    360e:	22 0f       	add	r18, r18
    3610:	33 1f       	adc	r19, r19
    3612:	22 0f       	add	r18, r18
    3614:	33 1f       	adc	r19, r19
    3616:	22 0f       	add	r18, r18
    3618:	33 1f       	adc	r19, r19
    361a:	2c 5c       	subi	r18, 0xCC	; 204
    361c:	36 4d       	sbci	r19, 0xD6	; 214
    361e:	82 2f       	mov	r24, r18
    3620:	93 2f       	mov	r25, r19
    3622:	08 95       	ret

00003624 <udd_ep_init>:
    3624:	cf 93       	push	r28
    3626:	df 93       	push	r29
    3628:	63 70       	andi	r22, 0x03	; 3
    362a:	61 30       	cpi	r22, 0x01	; 1
    362c:	11 f0       	breq	.+4      	; 0x3632 <udd_ep_init+0xe>
    362e:	28 f0       	brcs	.+10     	; 0x363a <udd_ep_init+0x16>
    3630:	02 c0       	rjmp	.+4      	; 0x3636 <udd_ep_init+0x12>
    3632:	d0 ec       	ldi	r29, 0xC0	; 192
    3634:	03 c0       	rjmp	.+6      	; 0x363c <udd_ep_init+0x18>
    3636:	d0 e8       	ldi	r29, 0x80	; 128
    3638:	01 c0       	rjmp	.+2      	; 0x363c <udd_ep_init+0x18>
    363a:	d0 e4       	ldi	r29, 0x40	; 64
    363c:	40 38       	cpi	r20, 0x80	; 128
    363e:	51 05       	cpc	r21, r1
    3640:	e1 f0       	breq	.+56     	; 0x367a <udd_ep_init+0x56>
    3642:	50 f4       	brcc	.+20     	; 0x3658 <udd_ep_init+0x34>
    3644:	40 32       	cpi	r20, 0x20	; 32
    3646:	51 05       	cpc	r21, r1
    3648:	a1 f0       	breq	.+40     	; 0x3672 <udd_ep_init+0x4e>
    364a:	40 34       	cpi	r20, 0x40	; 64
    364c:	51 05       	cpc	r21, r1
    364e:	99 f0       	breq	.+38     	; 0x3676 <udd_ep_init+0x52>
    3650:	40 31       	cpi	r20, 0x10	; 16
    3652:	51 05       	cpc	r21, r1
    3654:	61 f4       	brne	.+24     	; 0x366e <udd_ep_init+0x4a>
    3656:	19 c0       	rjmp	.+50     	; 0x368a <udd_ep_init+0x66>
    3658:	41 15       	cp	r20, r1
    365a:	92 e0       	ldi	r25, 0x02	; 2
    365c:	59 07       	cpc	r21, r25
    365e:	89 f0       	breq	.+34     	; 0x3682 <udd_ep_init+0x5e>
    3660:	4f 3f       	cpi	r20, 0xFF	; 255
    3662:	93 e0       	ldi	r25, 0x03	; 3
    3664:	59 07       	cpc	r21, r25
    3666:	79 f0       	breq	.+30     	; 0x3686 <udd_ep_init+0x62>
    3668:	41 15       	cp	r20, r1
    366a:	51 40       	sbci	r21, 0x01	; 1
    366c:	41 f0       	breq	.+16     	; 0x367e <udd_ep_init+0x5a>
    366e:	c0 e0       	ldi	r28, 0x00	; 0
    3670:	0d c0       	rjmp	.+26     	; 0x368c <udd_ep_init+0x68>
    3672:	c2 e0       	ldi	r28, 0x02	; 2
    3674:	0b c0       	rjmp	.+22     	; 0x368c <udd_ep_init+0x68>
    3676:	c3 e0       	ldi	r28, 0x03	; 3
    3678:	09 c0       	rjmp	.+18     	; 0x368c <udd_ep_init+0x68>
    367a:	c4 e0       	ldi	r28, 0x04	; 4
    367c:	07 c0       	rjmp	.+14     	; 0x368c <udd_ep_init+0x68>
    367e:	c5 e0       	ldi	r28, 0x05	; 5
    3680:	05 c0       	rjmp	.+10     	; 0x368c <udd_ep_init+0x68>
    3682:	c6 e0       	ldi	r28, 0x06	; 6
    3684:	03 c0       	rjmp	.+6      	; 0x368c <udd_ep_init+0x68>
    3686:	c7 e0       	ldi	r28, 0x07	; 7
    3688:	01 c0       	rjmp	.+2      	; 0x368c <udd_ep_init+0x68>
    368a:	c1 e0       	ldi	r28, 0x01	; 1
    368c:	b2 df       	rcall	.-156    	; 0x35f2 <udd_ep_get_ctrl>
    368e:	fc 01       	movw	r30, r24
    3690:	11 82       	std	Z+1, r1	; 0x01
    3692:	86 e0       	ldi	r24, 0x06	; 6
    3694:	80 83       	st	Z, r24
    3696:	cd 2b       	or	r28, r29
    3698:	c1 83       	std	Z+1, r28	; 0x01
    369a:	df 91       	pop	r29
    369c:	cf 91       	pop	r28
    369e:	08 95       	ret

000036a0 <udd_ctrl_init>:
    36a0:	0f 93       	push	r16
    36a2:	e8 ec       	ldi	r30, 0xC8	; 200
    36a4:	f4 e0       	ldi	r31, 0x04	; 4
    36a6:	80 81       	ld	r24, Z
    36a8:	8f 7d       	andi	r24, 0xDF	; 223
    36aa:	80 83       	st	Z, r24
    36ac:	80 81       	ld	r24, Z
    36ae:	8f 7d       	andi	r24, 0xDF	; 223
    36b0:	80 83       	st	Z, r24
    36b2:	ec e3       	ldi	r30, 0x3C	; 60
    36b4:	f9 e2       	ldi	r31, 0x29	; 41
    36b6:	02 e0       	ldi	r16, 0x02	; 2
    36b8:	05 93       	las	Z, r16
    36ba:	10 92 3e 29 	sts	0x293E, r1
    36be:	10 92 3f 29 	sts	0x293F, r1
    36c2:	00 e2       	ldi	r16, 0x20	; 32
    36c4:	06 93       	lac	Z, r16
    36c6:	00 e4       	ldi	r16, 0x40	; 64
    36c8:	06 93       	lac	Z, r16
    36ca:	e4 e3       	ldi	r30, 0x34	; 52
    36cc:	f9 e2       	ldi	r31, 0x29	; 41
    36ce:	00 e2       	ldi	r16, 0x20	; 32
    36d0:	06 93       	lac	Z, r16
    36d2:	00 e4       	ldi	r16, 0x40	; 64
    36d4:	06 93       	lac	Z, r16
    36d6:	10 92 77 2a 	sts	0x2A77, r1
    36da:	10 92 78 2a 	sts	0x2A78, r1
    36de:	10 92 79 2a 	sts	0x2A79, r1
    36e2:	10 92 7a 2a 	sts	0x2A7A, r1
    36e6:	10 92 75 2a 	sts	0x2A75, r1
    36ea:	10 92 76 2a 	sts	0x2A76, r1
    36ee:	10 92 4d 2a 	sts	0x2A4D, r1
    36f2:	0f 91       	pop	r16
    36f4:	08 95       	ret

000036f6 <udd_ctrl_stall_data>:
    36f6:	0f 93       	push	r16
    36f8:	85 e0       	ldi	r24, 0x05	; 5
    36fa:	80 93 4d 2a 	sts	0x2A4D, r24
    36fe:	ed e3       	ldi	r30, 0x3D	; 61
    3700:	f9 e2       	ldi	r31, 0x29	; 41
    3702:	04 e0       	ldi	r16, 0x04	; 4
    3704:	05 93       	las	Z, r16
    3706:	e5 e3       	ldi	r30, 0x35	; 53
    3708:	f9 e2       	ldi	r31, 0x29	; 41
    370a:	04 e0       	ldi	r16, 0x04	; 4
    370c:	05 93       	las	Z, r16
    370e:	0f 91       	pop	r16
    3710:	08 95       	ret

00003712 <udd_ctrl_send_zlp_in>:
    3712:	0f 93       	push	r16
    3714:	83 e0       	ldi	r24, 0x03	; 3
    3716:	80 93 4d 2a 	sts	0x2A4D, r24
    371a:	10 92 3e 29 	sts	0x293E, r1
    371e:	10 92 3f 29 	sts	0x293F, r1
    3722:	ec e3       	ldi	r30, 0x3C	; 60
    3724:	f9 e2       	ldi	r31, 0x29	; 41
    3726:	02 e0       	ldi	r16, 0x02	; 2
    3728:	06 93       	lac	Z, r16
    372a:	0f 91       	pop	r16
    372c:	08 95       	ret

0000372e <udd_ctrl_send_zlp_out>:
    372e:	0f 93       	push	r16
    3730:	84 e0       	ldi	r24, 0x04	; 4
    3732:	80 93 4d 2a 	sts	0x2A4D, r24
    3736:	e4 e3       	ldi	r30, 0x34	; 52
    3738:	f9 e2       	ldi	r31, 0x29	; 41
    373a:	02 e0       	ldi	r16, 0x02	; 2
    373c:	06 93       	lac	Z, r16
    373e:	0f 91       	pop	r16
    3740:	08 95       	ret

00003742 <udd_ctrl_endofrequest>:
    3742:	e0 91 77 2a 	lds	r30, 0x2A77
    3746:	f0 91 78 2a 	lds	r31, 0x2A78
    374a:	30 97       	sbiw	r30, 0x00	; 0
    374c:	09 f0       	breq	.+2      	; 0x3750 <udd_ctrl_endofrequest+0xe>
    374e:	19 95       	eicall
    3750:	08 95       	ret

00003752 <udd_ctrl_in_sent>:
    3752:	0f 93       	push	r16
    3754:	cf 93       	push	r28
    3756:	df 93       	push	r29
    3758:	80 91 4d 2a 	lds	r24, 0x2A4D
    375c:	83 30       	cpi	r24, 0x03	; 3
    375e:	19 f4       	brne	.+6      	; 0x3766 <udd_ctrl_in_sent+0x14>
    3760:	f0 df       	rcall	.-32     	; 0x3742 <udd_ctrl_endofrequest>
    3762:	9e df       	rcall	.-196    	; 0x36a0 <udd_ctrl_init>
    3764:	5a c0       	rjmp	.+180    	; 0x381a <udd_ctrl_in_sent+0xc8>
    3766:	80 91 50 2a 	lds	r24, 0x2A50
    376a:	90 91 51 2a 	lds	r25, 0x2A51
    376e:	c0 91 75 2a 	lds	r28, 0x2A75
    3772:	d0 91 76 2a 	lds	r29, 0x2A76
    3776:	c8 1b       	sub	r28, r24
    3778:	d9 0b       	sbc	r29, r25
    377a:	41 f5       	brne	.+80     	; 0x37cc <udd_ctrl_in_sent+0x7a>
    377c:	20 91 4e 2a 	lds	r18, 0x2A4E
    3780:	30 91 4f 2a 	lds	r19, 0x2A4F
    3784:	82 0f       	add	r24, r18
    3786:	93 1f       	adc	r25, r19
    3788:	80 93 4e 2a 	sts	0x2A4E, r24
    378c:	90 93 4f 2a 	sts	0x2A4F, r25
    3790:	20 91 71 2a 	lds	r18, 0x2A71
    3794:	30 91 72 2a 	lds	r19, 0x2A72
    3798:	82 17       	cp	r24, r18
    379a:	93 07       	cpc	r25, r19
    379c:	21 f0       	breq	.+8      	; 0x37a6 <udd_ctrl_in_sent+0x54>
    379e:	80 91 52 2a 	lds	r24, 0x2A52
    37a2:	88 23       	and	r24, r24
    37a4:	11 f0       	breq	.+4      	; 0x37aa <udd_ctrl_in_sent+0x58>
    37a6:	c3 df       	rcall	.-122    	; 0x372e <udd_ctrl_send_zlp_out>
    37a8:	38 c0       	rjmp	.+112    	; 0x381a <udd_ctrl_in_sent+0xc8>
    37aa:	e0 91 79 2a 	lds	r30, 0x2A79
    37ae:	f0 91 7a 2a 	lds	r31, 0x2A7A
    37b2:	30 97       	sbiw	r30, 0x00	; 0
    37b4:	99 f0       	breq	.+38     	; 0x37dc <udd_ctrl_in_sent+0x8a>
    37b6:	19 95       	eicall
    37b8:	88 23       	and	r24, r24
    37ba:	81 f0       	breq	.+32     	; 0x37dc <udd_ctrl_in_sent+0x8a>
    37bc:	10 92 50 2a 	sts	0x2A50, r1
    37c0:	10 92 51 2a 	sts	0x2A51, r1
    37c4:	c0 91 75 2a 	lds	r28, 0x2A75
    37c8:	d0 91 76 2a 	lds	r29, 0x2A76
    37cc:	c0 34       	cpi	r28, 0x40	; 64
    37ce:	d1 05       	cpc	r29, r1
    37d0:	28 f0       	brcs	.+10     	; 0x37dc <udd_ctrl_in_sent+0x8a>
    37d2:	10 92 52 2a 	sts	0x2A52, r1
    37d6:	c0 e4       	ldi	r28, 0x40	; 64
    37d8:	d0 e0       	ldi	r29, 0x00	; 0
    37da:	03 c0       	rjmp	.+6      	; 0x37e2 <udd_ctrl_in_sent+0x90>
    37dc:	81 e0       	ldi	r24, 0x01	; 1
    37de:	80 93 52 2a 	sts	0x2A52, r24
    37e2:	c0 93 3e 29 	sts	0x293E, r28
    37e6:	d0 93 3f 29 	sts	0x293F, r29
    37ea:	80 91 50 2a 	lds	r24, 0x2A50
    37ee:	90 91 51 2a 	lds	r25, 0x2A51
    37f2:	20 91 73 2a 	lds	r18, 0x2A73
    37f6:	30 91 74 2a 	lds	r19, 0x2A74
    37fa:	28 0f       	add	r18, r24
    37fc:	39 1f       	adc	r19, r25
    37fe:	20 93 40 29 	sts	0x2940, r18
    3802:	30 93 41 29 	sts	0x2941, r19
    3806:	c8 0f       	add	r28, r24
    3808:	d9 1f       	adc	r29, r25
    380a:	c0 93 50 2a 	sts	0x2A50, r28
    380e:	d0 93 51 2a 	sts	0x2A51, r29
    3812:	ec e3       	ldi	r30, 0x3C	; 60
    3814:	f9 e2       	ldi	r31, 0x29	; 41
    3816:	02 e0       	ldi	r16, 0x02	; 2
    3818:	06 93       	lac	Z, r16
    381a:	df 91       	pop	r29
    381c:	cf 91       	pop	r28
    381e:	0f 91       	pop	r16
    3820:	08 95       	ret

00003822 <udd_ep_get_size>:
    3822:	fc 01       	movw	r30, r24
    3824:	81 81       	ldd	r24, Z+1	; 0x01
    3826:	87 70       	andi	r24, 0x07	; 7
    3828:	84 30       	cpi	r24, 0x04	; 4
    382a:	a9 f0       	breq	.+42     	; 0x3856 <udd_ep_get_size+0x34>
    382c:	30 f4       	brcc	.+12     	; 0x383a <udd_ep_get_size+0x18>
    382e:	82 30       	cpi	r24, 0x02	; 2
    3830:	61 f0       	breq	.+24     	; 0x384a <udd_ep_get_size+0x28>
    3832:	70 f4       	brcc	.+28     	; 0x3850 <udd_ep_get_size+0x2e>
    3834:	81 30       	cpi	r24, 0x01	; 1
    3836:	31 f4       	brne	.+12     	; 0x3844 <udd_ep_get_size+0x22>
    3838:	1a c0       	rjmp	.+52     	; 0x386e <udd_ep_get_size+0x4c>
    383a:	86 30       	cpi	r24, 0x06	; 6
    383c:	91 f0       	breq	.+36     	; 0x3862 <udd_ep_get_size+0x40>
    383e:	70 f0       	brcs	.+28     	; 0x385c <udd_ep_get_size+0x3a>
    3840:	87 30       	cpi	r24, 0x07	; 7
    3842:	91 f0       	breq	.+36     	; 0x3868 <udd_ep_get_size+0x46>
    3844:	28 e0       	ldi	r18, 0x08	; 8
    3846:	30 e0       	ldi	r19, 0x00	; 0
    3848:	14 c0       	rjmp	.+40     	; 0x3872 <udd_ep_get_size+0x50>
    384a:	20 e2       	ldi	r18, 0x20	; 32
    384c:	30 e0       	ldi	r19, 0x00	; 0
    384e:	11 c0       	rjmp	.+34     	; 0x3872 <udd_ep_get_size+0x50>
    3850:	20 e4       	ldi	r18, 0x40	; 64
    3852:	30 e0       	ldi	r19, 0x00	; 0
    3854:	0e c0       	rjmp	.+28     	; 0x3872 <udd_ep_get_size+0x50>
    3856:	20 e8       	ldi	r18, 0x80	; 128
    3858:	30 e0       	ldi	r19, 0x00	; 0
    385a:	0b c0       	rjmp	.+22     	; 0x3872 <udd_ep_get_size+0x50>
    385c:	20 e0       	ldi	r18, 0x00	; 0
    385e:	31 e0       	ldi	r19, 0x01	; 1
    3860:	08 c0       	rjmp	.+16     	; 0x3872 <udd_ep_get_size+0x50>
    3862:	20 e0       	ldi	r18, 0x00	; 0
    3864:	32 e0       	ldi	r19, 0x02	; 2
    3866:	05 c0       	rjmp	.+10     	; 0x3872 <udd_ep_get_size+0x50>
    3868:	2f ef       	ldi	r18, 0xFF	; 255
    386a:	33 e0       	ldi	r19, 0x03	; 3
    386c:	02 c0       	rjmp	.+4      	; 0x3872 <udd_ep_get_size+0x50>
    386e:	20 e1       	ldi	r18, 0x10	; 16
    3870:	30 e0       	ldi	r19, 0x00	; 0
    3872:	82 2f       	mov	r24, r18
    3874:	93 2f       	mov	r25, r19
    3876:	08 95       	ret

00003878 <udd_ep_get_job>:
    3878:	28 2f       	mov	r18, r24
    387a:	2f 70       	andi	r18, 0x0F	; 15
    387c:	30 e0       	ldi	r19, 0x00	; 0
    387e:	22 0f       	add	r18, r18
    3880:	33 1f       	adc	r19, r19
    3882:	99 27       	eor	r25, r25
    3884:	87 fd       	sbrc	r24, 7
    3886:	90 95       	com	r25
    3888:	88 27       	eor	r24, r24
    388a:	99 0f       	add	r25, r25
    388c:	88 1f       	adc	r24, r24
    388e:	99 27       	eor	r25, r25
    3890:	28 0f       	add	r18, r24
    3892:	39 1f       	adc	r19, r25
    3894:	22 50       	subi	r18, 0x02	; 2
    3896:	31 09       	sbc	r19, r1
    3898:	c9 01       	movw	r24, r18
    389a:	88 0f       	add	r24, r24
    389c:	99 1f       	adc	r25, r25
    389e:	88 0f       	add	r24, r24
    38a0:	99 1f       	adc	r25, r25
    38a2:	88 0f       	add	r24, r24
    38a4:	99 1f       	adc	r25, r25
    38a6:	28 0f       	add	r18, r24
    38a8:	39 1f       	adc	r19, r25
    38aa:	28 59       	subi	r18, 0x98	; 152
    38ac:	36 4d       	sbci	r19, 0xD6	; 214
    38ae:	82 2f       	mov	r24, r18
    38b0:	93 2f       	mov	r25, r19
    38b2:	08 95       	ret

000038b4 <udd_ctrl_interrupt_tc_setup>:
    38b4:	0f 93       	push	r16
    38b6:	80 91 cc 04 	lds	r24, 0x04CC
    38ba:	80 ff       	sbrs	r24, 0
    38bc:	64 c0       	rjmp	.+200    	; 0x3986 <udd_ctrl_interrupt_tc_setup+0xd2>
    38be:	81 e0       	ldi	r24, 0x01	; 1
    38c0:	80 93 cc 04 	sts	0x04CC, r24
    38c4:	e4 e3       	ldi	r30, 0x34	; 52
    38c6:	f9 e2       	ldi	r31, 0x29	; 41
    38c8:	00 e8       	ldi	r16, 0x80	; 128
    38ca:	06 93       	lac	Z, r16
    38cc:	ec e3       	ldi	r30, 0x3C	; 60
    38ce:	f9 e2       	ldi	r31, 0x29	; 41
    38d0:	00 e8       	ldi	r16, 0x80	; 128
    38d2:	06 93       	lac	Z, r16
    38d4:	80 93 ca 04 	sts	0x04CA, r24
    38d8:	e4 e3       	ldi	r30, 0x34	; 52
    38da:	f9 e2       	ldi	r31, 0x29	; 41
    38dc:	00 e1       	ldi	r16, 0x10	; 16
    38de:	06 93       	lac	Z, r16
    38e0:	80 91 4d 2a 	lds	r24, 0x2A4D
    38e4:	88 23       	and	r24, r24
    38e6:	29 f0       	breq	.+10     	; 0x38f2 <udd_ctrl_interrupt_tc_setup+0x3e>
    38e8:	83 50       	subi	r24, 0x03	; 3
    38ea:	82 30       	cpi	r24, 0x02	; 2
    38ec:	08 f4       	brcc	.+2      	; 0x38f0 <udd_ctrl_interrupt_tc_setup+0x3c>
    38ee:	29 df       	rcall	.-430    	; 0x3742 <udd_ctrl_endofrequest>
    38f0:	d7 de       	rcall	.-594    	; 0x36a0 <udd_ctrl_init>
    38f2:	80 91 36 29 	lds	r24, 0x2936
    38f6:	90 91 37 29 	lds	r25, 0x2937
    38fa:	08 97       	sbiw	r24, 0x08	; 8
    38fc:	09 f0       	breq	.+2      	; 0x3900 <udd_ctrl_interrupt_tc_setup+0x4c>
    38fe:	45 c0       	rjmp	.+138    	; 0x398a <udd_ctrl_interrupt_tc_setup+0xd6>
    3900:	88 e0       	ldi	r24, 0x08	; 8
    3902:	ed e0       	ldi	r30, 0x0D	; 13
    3904:	fa e2       	ldi	r31, 0x2A	; 42
    3906:	ab e6       	ldi	r26, 0x6B	; 107
    3908:	ba e2       	ldi	r27, 0x2A	; 42
    390a:	01 90       	ld	r0, Z+
    390c:	0d 92       	st	X+, r0
    390e:	8a 95       	dec	r24
    3910:	e1 f7       	brne	.-8      	; 0x390a <udd_ctrl_interrupt_tc_setup+0x56>
    3912:	e8 ec       	ldi	r30, 0xC8	; 200
    3914:	f4 e0       	ldi	r31, 0x04	; 4
    3916:	80 81       	ld	r24, Z
    3918:	80 62       	ori	r24, 0x20	; 32
    391a:	80 83       	st	Z, r24
    391c:	80 81       	ld	r24, Z
    391e:	80 62       	ori	r24, 0x20	; 32
    3920:	80 83       	st	Z, r24
    3922:	0e 94 53 13 	call	0x26a6	; 0x26a6 <udc_process_setup>
    3926:	81 11       	cpse	r24, r1
    3928:	03 c0       	rjmp	.+6      	; 0x3930 <udd_ctrl_interrupt_tc_setup+0x7c>
    392a:	e5 de       	rcall	.-566    	; 0x36f6 <udd_ctrl_stall_data>
    392c:	81 e0       	ldi	r24, 0x01	; 1
    392e:	2e c0       	rjmp	.+92     	; 0x398c <udd_ctrl_interrupt_tc_setup+0xd8>
    3930:	80 91 6b 2a 	lds	r24, 0x2A6B
    3934:	88 23       	and	r24, r24
    3936:	74 f4       	brge	.+28     	; 0x3954 <udd_ctrl_interrupt_tc_setup+0xa0>
    3938:	10 92 4e 2a 	sts	0x2A4E, r1
    393c:	10 92 4f 2a 	sts	0x2A4F, r1
    3940:	10 92 50 2a 	sts	0x2A50, r1
    3944:	10 92 51 2a 	sts	0x2A51, r1
    3948:	82 e0       	ldi	r24, 0x02	; 2
    394a:	80 93 4d 2a 	sts	0x2A4D, r24
    394e:	01 df       	rcall	.-510    	; 0x3752 <udd_ctrl_in_sent>
    3950:	81 e0       	ldi	r24, 0x01	; 1
    3952:	1c c0       	rjmp	.+56     	; 0x398c <udd_ctrl_interrupt_tc_setup+0xd8>
    3954:	80 91 71 2a 	lds	r24, 0x2A71
    3958:	90 91 72 2a 	lds	r25, 0x2A72
    395c:	89 2b       	or	r24, r25
    395e:	19 f4       	brne	.+6      	; 0x3966 <udd_ctrl_interrupt_tc_setup+0xb2>
    3960:	d8 de       	rcall	.-592    	; 0x3712 <udd_ctrl_send_zlp_in>
    3962:	81 e0       	ldi	r24, 0x01	; 1
    3964:	13 c0       	rjmp	.+38     	; 0x398c <udd_ctrl_interrupt_tc_setup+0xd8>
    3966:	10 92 4e 2a 	sts	0x2A4E, r1
    396a:	10 92 4f 2a 	sts	0x2A4F, r1
    396e:	10 92 50 2a 	sts	0x2A50, r1
    3972:	10 92 51 2a 	sts	0x2A51, r1
    3976:	81 e0       	ldi	r24, 0x01	; 1
    3978:	80 93 4d 2a 	sts	0x2A4D, r24
    397c:	e4 e3       	ldi	r30, 0x34	; 52
    397e:	f9 e2       	ldi	r31, 0x29	; 41
    3980:	02 e0       	ldi	r16, 0x02	; 2
    3982:	06 93       	lac	Z, r16
    3984:	03 c0       	rjmp	.+6      	; 0x398c <udd_ctrl_interrupt_tc_setup+0xd8>
    3986:	80 e0       	ldi	r24, 0x00	; 0
    3988:	01 c0       	rjmp	.+2      	; 0x398c <udd_ctrl_interrupt_tc_setup+0xd8>
    398a:	81 e0       	ldi	r24, 0x01	; 1
    398c:	0f 91       	pop	r16
    398e:	08 95       	ret

00003990 <udd_ep_trans_complet>:
    3990:	bf 92       	push	r11
    3992:	cf 92       	push	r12
    3994:	df 92       	push	r13
    3996:	ef 92       	push	r14
    3998:	ff 92       	push	r15
    399a:	0f 93       	push	r16
    399c:	1f 93       	push	r17
    399e:	cf 93       	push	r28
    39a0:	df 93       	push	r29
    39a2:	b8 2e       	mov	r11, r24
    39a4:	69 df       	rcall	.-302    	; 0x3878 <udd_ep_get_job>
    39a6:	ec 01       	movw	r28, r24
    39a8:	8b 2d       	mov	r24, r11
    39aa:	23 de       	rcall	.-954    	; 0x35f2 <udd_ep_get_ctrl>
    39ac:	7c 01       	movw	r14, r24
    39ae:	39 df       	rcall	.-398    	; 0x3822 <udd_ep_get_size>
    39b0:	6c 01       	movw	r12, r24
    39b2:	bb 20       	and	r11, r11
    39b4:	0c f0       	brlt	.+2      	; 0x39b8 <udd_ep_trans_complet+0x28>
    39b6:	5f c0       	rjmp	.+190    	; 0x3a76 <udd_ep_trans_complet+0xe6>
    39b8:	d7 01       	movw	r26, r14
    39ba:	16 96       	adiw	r26, 0x06	; 6
    39bc:	2d 91       	ld	r18, X+
    39be:	3c 91       	ld	r19, X
    39c0:	17 97       	sbiw	r26, 0x07	; 7
    39c2:	8d 81       	ldd	r24, Y+5	; 0x05
    39c4:	9e 81       	ldd	r25, Y+6	; 0x06
    39c6:	28 0f       	add	r18, r24
    39c8:	39 1f       	adc	r19, r25
    39ca:	2d 83       	std	Y+5, r18	; 0x05
    39cc:	3e 83       	std	Y+6, r19	; 0x06
    39ce:	8b 81       	ldd	r24, Y+3	; 0x03
    39d0:	9c 81       	ldd	r25, Y+4	; 0x04
    39d2:	28 17       	cp	r18, r24
    39d4:	39 07       	cpc	r19, r25
    39d6:	09 f4       	brne	.+2      	; 0x39da <udd_ep_trans_complet+0x4a>
    39d8:	3c c0       	rjmp	.+120    	; 0x3a52 <udd_ep_trans_complet+0xc2>
    39da:	fc 01       	movw	r30, r24
    39dc:	e2 1b       	sub	r30, r18
    39de:	f3 0b       	sbc	r31, r19
    39e0:	9f 01       	movw	r18, r30
    39e2:	21 15       	cp	r18, r1
    39e4:	f4 e0       	ldi	r31, 0x04	; 4
    39e6:	3f 07       	cpc	r19, r31
    39e8:	40 f0       	brcs	.+16     	; 0x39fa <udd_ep_trans_complet+0x6a>
    39ea:	2f ef       	ldi	r18, 0xFF	; 255
    39ec:	33 e0       	ldi	r19, 0x03	; 3
    39ee:	c9 01       	movw	r24, r18
    39f0:	b6 01       	movw	r22, r12
    39f2:	0e 94 11 29 	call	0x5222	; 0x5222 <__udivmodhi4>
    39f6:	28 1b       	sub	r18, r24
    39f8:	39 0b       	sbc	r19, r25
    39fa:	88 81       	ld	r24, Y
    39fc:	81 ff       	sbrs	r24, 1
    39fe:	0c c0       	rjmp	.+24     	; 0x3a18 <udd_ep_trans_complet+0x88>
    3a00:	c9 01       	movw	r24, r18
    3a02:	b6 01       	movw	r22, r12
    3a04:	0e 94 11 29 	call	0x5222	; 0x5222 <__udivmodhi4>
    3a08:	41 e0       	ldi	r20, 0x01	; 1
    3a0a:	50 e0       	ldi	r21, 0x00	; 0
    3a0c:	89 2b       	or	r24, r25
    3a0e:	11 f0       	breq	.+4      	; 0x3a14 <udd_ep_trans_complet+0x84>
    3a10:	40 e0       	ldi	r20, 0x00	; 0
    3a12:	50 e0       	ldi	r21, 0x00	; 0
    3a14:	ca 01       	movw	r24, r20
    3a16:	02 c0       	rjmp	.+4      	; 0x3a1c <udd_ep_trans_complet+0x8c>
    3a18:	80 e0       	ldi	r24, 0x00	; 0
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	98 81       	ld	r25, Y
    3a1e:	80 fb       	bst	r24, 0
    3a20:	91 f9       	bld	r25, 1
    3a22:	98 83       	st	Y, r25
    3a24:	d7 01       	movw	r26, r14
    3a26:	16 96       	adiw	r26, 0x06	; 6
    3a28:	1d 92       	st	X+, r1
    3a2a:	1c 92       	st	X, r1
    3a2c:	17 97       	sbiw	r26, 0x07	; 7
    3a2e:	12 96       	adiw	r26, 0x02	; 2
    3a30:	2d 93       	st	X+, r18
    3a32:	3c 93       	st	X, r19
    3a34:	13 97       	sbiw	r26, 0x03	; 3
    3a36:	29 81       	ldd	r18, Y+1	; 0x01
    3a38:	3a 81       	ldd	r19, Y+2	; 0x02
    3a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a3c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a3e:	82 0f       	add	r24, r18
    3a40:	93 1f       	adc	r25, r19
    3a42:	14 96       	adiw	r26, 0x04	; 4
    3a44:	8d 93       	st	X+, r24
    3a46:	9c 93       	st	X, r25
    3a48:	15 97       	sbiw	r26, 0x05	; 5
    3a4a:	f7 01       	movw	r30, r14
    3a4c:	02 e0       	ldi	r16, 0x02	; 2
    3a4e:	06 93       	lac	Z, r16
    3a50:	9c c0       	rjmp	.+312    	; 0x3b8a <udd_ep_trans_complet+0x1fa>
    3a52:	88 81       	ld	r24, Y
    3a54:	81 ff       	sbrs	r24, 1
    3a56:	8b c0       	rjmp	.+278    	; 0x3b6e <udd_ep_trans_complet+0x1de>
    3a58:	8d 7f       	andi	r24, 0xFD	; 253
    3a5a:	88 83       	st	Y, r24
    3a5c:	d7 01       	movw	r26, r14
    3a5e:	16 96       	adiw	r26, 0x06	; 6
    3a60:	1d 92       	st	X+, r1
    3a62:	1c 92       	st	X, r1
    3a64:	17 97       	sbiw	r26, 0x07	; 7
    3a66:	12 96       	adiw	r26, 0x02	; 2
    3a68:	1d 92       	st	X+, r1
    3a6a:	1c 92       	st	X, r1
    3a6c:	13 97       	sbiw	r26, 0x03	; 3
    3a6e:	f7 01       	movw	r30, r14
    3a70:	02 e0       	ldi	r16, 0x02	; 2
    3a72:	06 93       	lac	Z, r16
    3a74:	8a c0       	rjmp	.+276    	; 0x3b8a <udd_ep_trans_complet+0x1fa>
    3a76:	d7 01       	movw	r26, r14
    3a78:	12 96       	adiw	r26, 0x02	; 2
    3a7a:	0d 91       	ld	r16, X+
    3a7c:	1c 91       	ld	r17, X
    3a7e:	13 97       	sbiw	r26, 0x03	; 3
    3a80:	88 81       	ld	r24, Y
    3a82:	82 ff       	sbrs	r24, 2
    3a84:	19 c0       	rjmp	.+50     	; 0x3ab8 <udd_ep_trans_complet+0x128>
    3a86:	29 81       	ldd	r18, Y+1	; 0x01
    3a88:	3a 81       	ldd	r19, Y+2	; 0x02
    3a8a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a8c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a8e:	28 0f       	add	r18, r24
    3a90:	39 1f       	adc	r19, r25
    3a92:	8b 81       	ldd	r24, Y+3	; 0x03
    3a94:	9c 81       	ldd	r25, Y+4	; 0x04
    3a96:	b6 01       	movw	r22, r12
    3a98:	0e 94 11 29 	call	0x5222	; 0x5222 <__udivmodhi4>
    3a9c:	b0 e4       	ldi	r27, 0x40	; 64
    3a9e:	bb 9e       	mul	r11, r27
    3aa0:	f0 01       	movw	r30, r0
    3aa2:	11 24       	eor	r1, r1
    3aa4:	e3 5b       	subi	r30, 0xB3	; 179
    3aa6:	f6 4d       	sbci	r31, 0xD6	; 214
    3aa8:	48 2f       	mov	r20, r24
    3aaa:	59 2f       	mov	r21, r25
    3aac:	6e 2f       	mov	r22, r30
    3aae:	7f 2f       	mov	r23, r31
    3ab0:	82 2f       	mov	r24, r18
    3ab2:	93 2f       	mov	r25, r19
    3ab4:	0e 94 ce 2a 	call	0x559c	; 0x559c <memcpy>
    3ab8:	2d 81       	ldd	r18, Y+5	; 0x05
    3aba:	3e 81       	ldd	r19, Y+6	; 0x06
    3abc:	20 0f       	add	r18, r16
    3abe:	31 1f       	adc	r19, r17
    3ac0:	2d 83       	std	Y+5, r18	; 0x05
    3ac2:	3e 83       	std	Y+6, r19	; 0x06
    3ac4:	eb 81       	ldd	r30, Y+3	; 0x03
    3ac6:	fc 81       	ldd	r31, Y+4	; 0x04
    3ac8:	e2 17       	cp	r30, r18
    3aca:	f3 07       	cpc	r31, r19
    3acc:	10 f4       	brcc	.+4      	; 0x3ad2 <udd_ep_trans_complet+0x142>
    3ace:	ed 83       	std	Y+5, r30	; 0x05
    3ad0:	fe 83       	std	Y+6, r31	; 0x06
    3ad2:	d7 01       	movw	r26, r14
    3ad4:	16 96       	adiw	r26, 0x06	; 6
    3ad6:	2d 91       	ld	r18, X+
    3ad8:	3c 91       	ld	r19, X
    3ada:	17 97       	sbiw	r26, 0x07	; 7
    3adc:	20 17       	cp	r18, r16
    3ade:	31 07       	cpc	r19, r17
    3ae0:	09 f0       	breq	.+2      	; 0x3ae4 <udd_ep_trans_complet+0x154>
    3ae2:	45 c0       	rjmp	.+138    	; 0x3b6e <udd_ep_trans_complet+0x1de>
    3ae4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ae6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ae8:	e8 17       	cp	r30, r24
    3aea:	f9 07       	cpc	r31, r25
    3aec:	09 f4       	brne	.+2      	; 0x3af0 <udd_ep_trans_complet+0x160>
    3aee:	3f c0       	rjmp	.+126    	; 0x3b6e <udd_ep_trans_complet+0x1de>
    3af0:	e8 1b       	sub	r30, r24
    3af2:	f9 0b       	sbc	r31, r25
    3af4:	e1 15       	cp	r30, r1
    3af6:	b4 e0       	ldi	r27, 0x04	; 4
    3af8:	fb 07       	cpc	r31, r27
    3afa:	48 f0       	brcs	.+18     	; 0x3b0e <udd_ep_trans_complet+0x17e>
    3afc:	ef ef       	ldi	r30, 0xFF	; 255
    3afe:	f3 e0       	ldi	r31, 0x03	; 3
    3b00:	cf 01       	movw	r24, r30
    3b02:	b6 01       	movw	r22, r12
    3b04:	0e 94 11 29 	call	0x5222	; 0x5222 <__udivmodhi4>
    3b08:	e8 1b       	sub	r30, r24
    3b0a:	f9 0b       	sbc	r31, r25
    3b0c:	06 c0       	rjmp	.+12     	; 0x3b1a <udd_ep_trans_complet+0x18a>
    3b0e:	cf 01       	movw	r24, r30
    3b10:	b6 01       	movw	r22, r12
    3b12:	0e 94 11 29 	call	0x5222	; 0x5222 <__udivmodhi4>
    3b16:	e8 1b       	sub	r30, r24
    3b18:	f9 0b       	sbc	r31, r25
    3b1a:	d7 01       	movw	r26, r14
    3b1c:	12 96       	adiw	r26, 0x02	; 2
    3b1e:	1d 92       	st	X+, r1
    3b20:	1c 92       	st	X, r1
    3b22:	13 97       	sbiw	r26, 0x03	; 3
    3b24:	ec 15       	cp	r30, r12
    3b26:	fd 05       	cpc	r31, r13
    3b28:	78 f4       	brcc	.+30     	; 0x3b48 <udd_ep_trans_complet+0x1b8>
    3b2a:	88 81       	ld	r24, Y
    3b2c:	84 60       	ori	r24, 0x04	; 4
    3b2e:	88 83       	st	Y, r24
    3b30:	b0 e4       	ldi	r27, 0x40	; 64
    3b32:	bb 9e       	mul	r11, r27
    3b34:	c0 01       	movw	r24, r0
    3b36:	11 24       	eor	r1, r1
    3b38:	83 5b       	subi	r24, 0xB3	; 179
    3b3a:	96 4d       	sbci	r25, 0xD6	; 214
    3b3c:	f7 01       	movw	r30, r14
    3b3e:	84 83       	std	Z+4, r24	; 0x04
    3b40:	95 83       	std	Z+5, r25	; 0x05
    3b42:	c6 82       	std	Z+6, r12	; 0x06
    3b44:	d7 82       	std	Z+7, r13	; 0x07
    3b46:	0f c0       	rjmp	.+30     	; 0x3b66 <udd_ep_trans_complet+0x1d6>
    3b48:	29 81       	ldd	r18, Y+1	; 0x01
    3b4a:	3a 81       	ldd	r19, Y+2	; 0x02
    3b4c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b4e:	9e 81       	ldd	r25, Y+6	; 0x06
    3b50:	82 0f       	add	r24, r18
    3b52:	93 1f       	adc	r25, r19
    3b54:	d7 01       	movw	r26, r14
    3b56:	14 96       	adiw	r26, 0x04	; 4
    3b58:	8d 93       	st	X+, r24
    3b5a:	9c 93       	st	X, r25
    3b5c:	15 97       	sbiw	r26, 0x05	; 5
    3b5e:	16 96       	adiw	r26, 0x06	; 6
    3b60:	ed 93       	st	X+, r30
    3b62:	fc 93       	st	X, r31
    3b64:	17 97       	sbiw	r26, 0x07	; 7
    3b66:	f7 01       	movw	r30, r14
    3b68:	02 e0       	ldi	r16, 0x02	; 2
    3b6a:	06 93       	lac	Z, r16
    3b6c:	0e c0       	rjmp	.+28     	; 0x3b8a <udd_ep_trans_complet+0x1fa>
    3b6e:	88 81       	ld	r24, Y
    3b70:	80 ff       	sbrs	r24, 0
    3b72:	0b c0       	rjmp	.+22     	; 0x3b8a <udd_ep_trans_complet+0x1fa>
    3b74:	8e 7f       	andi	r24, 0xFE	; 254
    3b76:	88 83       	st	Y, r24
    3b78:	ef 81       	ldd	r30, Y+7	; 0x07
    3b7a:	f8 85       	ldd	r31, Y+8	; 0x08
    3b7c:	30 97       	sbiw	r30, 0x00	; 0
    3b7e:	29 f0       	breq	.+10     	; 0x3b8a <udd_ep_trans_complet+0x1fa>
    3b80:	6d 81       	ldd	r22, Y+5	; 0x05
    3b82:	7e 81       	ldd	r23, Y+6	; 0x06
    3b84:	4b 2d       	mov	r20, r11
    3b86:	80 e0       	ldi	r24, 0x00	; 0
    3b88:	19 95       	eicall
    3b8a:	df 91       	pop	r29
    3b8c:	cf 91       	pop	r28
    3b8e:	1f 91       	pop	r17
    3b90:	0f 91       	pop	r16
    3b92:	ff 90       	pop	r15
    3b94:	ef 90       	pop	r14
    3b96:	df 90       	pop	r13
    3b98:	cf 90       	pop	r12
    3b9a:	bf 90       	pop	r11
    3b9c:	08 95       	ret

00003b9e <udd_enable>:
    3b9e:	cf 93       	push	r28
    3ba0:	df 93       	push	r29
    3ba2:	c0 e6       	ldi	r28, 0x60	; 96
    3ba4:	d0 e0       	ldi	r29, 0x00	; 0
    3ba6:	18 82       	st	Y, r1
    3ba8:	80 e3       	ldi	r24, 0x30	; 48
    3baa:	0e 94 de 0a 	call	0x15bc	; 0x15bc <sysclk_enable_usb>
    3bae:	e0 ec       	ldi	r30, 0xC0	; 192
    3bb0:	f4 e0       	ldi	r31, 0x04	; 4
    3bb2:	80 81       	ld	r24, Z
    3bb4:	80 64       	ori	r24, 0x40	; 64
    3bb6:	80 83       	st	Z, r24
    3bb8:	81 e0       	ldi	r24, 0x01	; 1
    3bba:	88 83       	st	Y, r24
    3bbc:	cf b7       	in	r28, 0x3f	; 63
    3bbe:	f8 94       	cli
    3bc0:	10 92 35 29 	sts	0x2935, r1
    3bc4:	10 92 3d 29 	sts	0x293D, r1
    3bc8:	10 92 45 29 	sts	0x2945, r1
    3bcc:	10 92 4d 29 	sts	0x294D, r1
    3bd0:	10 92 55 29 	sts	0x2955, r1
    3bd4:	10 92 5d 29 	sts	0x295D, r1
    3bd8:	e8 e6       	ldi	r30, 0x68	; 104
    3bda:	f9 e2       	ldi	r31, 0x29	; 41
    3bdc:	80 81       	ld	r24, Z
    3bde:	8e 7f       	andi	r24, 0xFE	; 254
    3be0:	80 83       	st	Z, r24
    3be2:	e1 e7       	ldi	r30, 0x71	; 113
    3be4:	f9 e2       	ldi	r31, 0x29	; 41
    3be6:	80 81       	ld	r24, Z
    3be8:	8e 7f       	andi	r24, 0xFE	; 254
    3bea:	80 83       	st	Z, r24
    3bec:	ea e7       	ldi	r30, 0x7A	; 122
    3bee:	f9 e2       	ldi	r31, 0x29	; 41
    3bf0:	80 81       	ld	r24, Z
    3bf2:	8e 7f       	andi	r24, 0xFE	; 254
    3bf4:	80 83       	st	Z, r24
    3bf6:	e3 e8       	ldi	r30, 0x83	; 131
    3bf8:	f9 e2       	ldi	r31, 0x29	; 41
    3bfa:	80 81       	ld	r24, Z
    3bfc:	8e 7f       	andi	r24, 0xFE	; 254
    3bfe:	80 83       	st	Z, r24
    3c00:	6a e1       	ldi	r22, 0x1A	; 26
    3c02:	70 e0       	ldi	r23, 0x00	; 0
    3c04:	82 e0       	ldi	r24, 0x02	; 2
    3c06:	26 db       	rcall	.-2484   	; 0x3254 <nvm_read_byte>
    3c08:	8f 3f       	cpi	r24, 0xFF	; 255
    3c0a:	19 f0       	breq	.+6      	; 0x3c12 <udd_enable+0x74>
    3c0c:	80 93 fa 04 	sts	0x04FA, r24
    3c10:	03 c0       	rjmp	.+6      	; 0x3c18 <udd_enable+0x7a>
    3c12:	8f e1       	ldi	r24, 0x1F	; 31
    3c14:	80 93 fa 04 	sts	0x04FA, r24
    3c18:	6b e1       	ldi	r22, 0x1B	; 27
    3c1a:	70 e0       	ldi	r23, 0x00	; 0
    3c1c:	82 e0       	ldi	r24, 0x02	; 2
    3c1e:	1a db       	rcall	.-2508   	; 0x3254 <nvm_read_byte>
    3c20:	8f 3f       	cpi	r24, 0xFF	; 255
    3c22:	19 f0       	breq	.+6      	; 0x3c2a <udd_enable+0x8c>
    3c24:	80 93 fb 04 	sts	0x04FB, r24
    3c28:	03 c0       	rjmp	.+6      	; 0x3c30 <udd_enable+0x92>
    3c2a:	8f e1       	ldi	r24, 0x1F	; 31
    3c2c:	80 93 fb 04 	sts	0x04FB, r24
    3c30:	e0 ec       	ldi	r30, 0xC0	; 192
    3c32:	f4 e0       	ldi	r31, 0x04	; 4
    3c34:	80 81       	ld	r24, Z
    3c36:	82 60       	ori	r24, 0x02	; 2
    3c38:	80 83       	st	Z, r24
    3c3a:	80 81       	ld	r24, Z
    3c3c:	80 68       	ori	r24, 0x80	; 128
    3c3e:	80 83       	st	Z, r24
    3c40:	80 81       	ld	r24, Z
    3c42:	80 61       	ori	r24, 0x10	; 16
    3c44:	80 83       	st	Z, r24
    3c46:	84 e3       	ldi	r24, 0x34	; 52
    3c48:	99 e2       	ldi	r25, 0x29	; 41
    3c4a:	86 83       	std	Z+6, r24	; 0x06
    3c4c:	97 83       	std	Z+7, r25	; 0x07
    3c4e:	80 81       	ld	r24, Z
    3c50:	80 62       	ori	r24, 0x20	; 32
    3c52:	80 83       	st	Z, r24
    3c54:	8f ef       	ldi	r24, 0xFF	; 255
    3c56:	80 93 c5 04 	sts	0x04C5, r24
    3c5a:	e8 ec       	ldi	r30, 0xC8	; 200
    3c5c:	f4 e0       	ldi	r31, 0x04	; 4
    3c5e:	80 81       	ld	r24, Z
    3c60:	81 60       	ori	r24, 0x01	; 1
    3c62:	80 83       	st	Z, r24
    3c64:	10 92 8c 29 	sts	0x298C, r1
    3c68:	8f b7       	in	r24, 0x3f	; 63
    3c6a:	f8 94       	cli
    3c6c:	e4 e6       	ldi	r30, 0x64	; 100
    3c6e:	fa e2       	ldi	r31, 0x2A	; 42
    3c70:	90 81       	ld	r25, Z
    3c72:	9f 5f       	subi	r25, 0xFF	; 255
    3c74:	90 83       	st	Z, r25
    3c76:	8f bf       	out	0x3f, r24	; 63
    3c78:	cf bf       	out	0x3f, r28	; 63
    3c7a:	df 91       	pop	r29
    3c7c:	cf 91       	pop	r28
    3c7e:	08 95       	ret

00003c80 <udd_attach>:
    3c80:	cf 93       	push	r28
    3c82:	cf b7       	in	r28, 0x3f	; 63
    3c84:	f8 94       	cli
    3c86:	81 e0       	ldi	r24, 0x01	; 1
    3c88:	95 dc       	rcall	.-1750   	; 0x35b4 <udd_sleep_mode>
    3c8a:	ea ec       	ldi	r30, 0xCA	; 202
    3c8c:	f4 e0       	ldi	r31, 0x04	; 4
    3c8e:	80 e4       	ldi	r24, 0x40	; 64
    3c90:	80 83       	st	Z, r24
    3c92:	80 e2       	ldi	r24, 0x20	; 32
    3c94:	80 83       	st	Z, r24
    3c96:	e1 ec       	ldi	r30, 0xC1	; 193
    3c98:	f4 e0       	ldi	r31, 0x04	; 4
    3c9a:	80 81       	ld	r24, Z
    3c9c:	81 60       	ori	r24, 0x01	; 1
    3c9e:	80 83       	st	Z, r24
    3ca0:	a9 ec       	ldi	r26, 0xC9	; 201
    3ca2:	b4 e0       	ldi	r27, 0x04	; 4
    3ca4:	8c 91       	ld	r24, X
    3ca6:	82 60       	ori	r24, 0x02	; 2
    3ca8:	8c 93       	st	X, r24
    3caa:	e8 ec       	ldi	r30, 0xC8	; 200
    3cac:	f4 e0       	ldi	r31, 0x04	; 4
    3cae:	80 81       	ld	r24, Z
    3cb0:	80 64       	ori	r24, 0x40	; 64
    3cb2:	80 83       	st	Z, r24
    3cb4:	8c 91       	ld	r24, X
    3cb6:	81 60       	ori	r24, 0x01	; 1
    3cb8:	8c 93       	st	X, r24
    3cba:	80 81       	ld	r24, Z
    3cbc:	80 68       	ori	r24, 0x80	; 128
    3cbe:	80 83       	st	Z, r24
    3cc0:	cf bf       	out	0x3f, r28	; 63
    3cc2:	cf 91       	pop	r28
    3cc4:	08 95       	ret

00003cc6 <udd_is_high_speed>:
    3cc6:	80 e0       	ldi	r24, 0x00	; 0
    3cc8:	08 95       	ret

00003cca <udd_set_address>:
    3cca:	80 93 c3 04 	sts	0x04C3, r24
    3cce:	08 95       	ret

00003cd0 <udd_getaddress>:
    3cd0:	80 91 c3 04 	lds	r24, 0x04C3
    3cd4:	08 95       	ret

00003cd6 <udd_get_frame_number>:
    3cd6:	20 91 64 29 	lds	r18, 0x2964
    3cda:	30 91 65 29 	lds	r19, 0x2965
    3cde:	82 2f       	mov	r24, r18
    3ce0:	93 2f       	mov	r25, r19
    3ce2:	08 95       	ret

00003ce4 <udd_get_micro_frame_number>:
    3ce4:	80 e0       	ldi	r24, 0x00	; 0
    3ce6:	90 e0       	ldi	r25, 0x00	; 0
    3ce8:	08 95       	ret

00003cea <udd_set_setup_payload>:
    3cea:	80 93 73 2a 	sts	0x2A73, r24
    3cee:	90 93 74 2a 	sts	0x2A74, r25
    3cf2:	60 93 75 2a 	sts	0x2A75, r22
    3cf6:	70 93 76 2a 	sts	0x2A76, r23
    3cfa:	08 95       	ret

00003cfc <udd_ep_alloc>:
    3cfc:	ef 92       	push	r14
    3cfe:	ff 92       	push	r15
    3d00:	0f 93       	push	r16
    3d02:	1f 93       	push	r17
    3d04:	cf 93       	push	r28
    3d06:	df 93       	push	r29
    3d08:	f8 2e       	mov	r15, r24
    3d0a:	e6 2e       	mov	r14, r22
    3d0c:	8a 01       	movw	r16, r20
    3d0e:	71 dc       	rcall	.-1822   	; 0x35f2 <udd_ep_get_ctrl>
    3d10:	ec 01       	movw	r28, r24
    3d12:	89 81       	ldd	r24, Y+1	; 0x01
    3d14:	80 7c       	andi	r24, 0xC0	; 192
    3d16:	89 f4       	brne	.+34     	; 0x3d3a <udd_ep_alloc+0x3e>
    3d18:	a8 01       	movw	r20, r16
    3d1a:	6e 2d       	mov	r22, r14
    3d1c:	8f 2d       	mov	r24, r15
    3d1e:	82 dc       	rcall	.-1788   	; 0x3624 <udd_ep_init>
    3d20:	89 81       	ldd	r24, Y+1	; 0x01
    3d22:	80 7c       	andi	r24, 0xC0	; 192
    3d24:	80 3c       	cpi	r24, 0xC0	; 192
    3d26:	21 f4       	brne	.+8      	; 0x3d30 <udd_ep_alloc+0x34>
    3d28:	89 81       	ldd	r24, Y+1	; 0x01
    3d2a:	87 70       	andi	r24, 0x07	; 7
    3d2c:	87 30       	cpi	r24, 0x07	; 7
    3d2e:	39 f0       	breq	.+14     	; 0x3d3e <udd_ep_alloc+0x42>
    3d30:	89 81       	ldd	r24, Y+1	; 0x01
    3d32:	80 62       	ori	r24, 0x20	; 32
    3d34:	89 83       	std	Y+1, r24	; 0x01
    3d36:	81 e0       	ldi	r24, 0x01	; 1
    3d38:	03 c0       	rjmp	.+6      	; 0x3d40 <udd_ep_alloc+0x44>
    3d3a:	80 e0       	ldi	r24, 0x00	; 0
    3d3c:	01 c0       	rjmp	.+2      	; 0x3d40 <udd_ep_alloc+0x44>
    3d3e:	81 e0       	ldi	r24, 0x01	; 1
    3d40:	df 91       	pop	r29
    3d42:	cf 91       	pop	r28
    3d44:	1f 91       	pop	r17
    3d46:	0f 91       	pop	r16
    3d48:	ff 90       	pop	r15
    3d4a:	ef 90       	pop	r14
    3d4c:	08 95       	ret

00003d4e <udd_ep_is_halted>:
    3d4e:	51 dc       	rcall	.-1886   	; 0x35f2 <udd_ep_get_ctrl>
    3d50:	fc 01       	movw	r30, r24
    3d52:	81 81       	ldd	r24, Z+1	; 0x01
    3d54:	82 fb       	bst	r24, 2
    3d56:	88 27       	eor	r24, r24
    3d58:	80 f9       	bld	r24, 0
    3d5a:	08 95       	ret

00003d5c <udd_ep_clear_halt>:
    3d5c:	cf 93       	push	r28
    3d5e:	c8 2f       	mov	r28, r24
    3d60:	48 dc       	rcall	.-1904   	; 0x35f2 <udd_ep_get_ctrl>
    3d62:	fc 01       	movw	r30, r24
    3d64:	81 81       	ldd	r24, Z+1	; 0x01
    3d66:	82 ff       	sbrs	r24, 2
    3d68:	0f c0       	rjmp	.+30     	; 0x3d88 <udd_ep_clear_halt+0x2c>
    3d6a:	81 81       	ldd	r24, Z+1	; 0x01
    3d6c:	8b 7f       	andi	r24, 0xFB	; 251
    3d6e:	81 83       	std	Z+1, r24	; 0x01
    3d70:	8c 2f       	mov	r24, r28
    3d72:	82 dd       	rcall	.-1276   	; 0x3878 <udd_ep_get_job>
    3d74:	fc 01       	movw	r30, r24
    3d76:	80 81       	ld	r24, Z
    3d78:	80 ff       	sbrs	r24, 0
    3d7a:	06 c0       	rjmp	.+12     	; 0x3d88 <udd_ep_clear_halt+0x2c>
    3d7c:	8e 7f       	andi	r24, 0xFE	; 254
    3d7e:	80 83       	st	Z, r24
    3d80:	07 80       	ldd	r0, Z+7	; 0x07
    3d82:	f0 85       	ldd	r31, Z+8	; 0x08
    3d84:	e0 2d       	mov	r30, r0
    3d86:	19 95       	eicall
    3d88:	81 e0       	ldi	r24, 0x01	; 1
    3d8a:	cf 91       	pop	r28
    3d8c:	08 95       	ret

00003d8e <udd_ep_run>:
    3d8e:	8f 92       	push	r8
    3d90:	9f 92       	push	r9
    3d92:	af 92       	push	r10
    3d94:	bf 92       	push	r11
    3d96:	cf 92       	push	r12
    3d98:	df 92       	push	r13
    3d9a:	ef 92       	push	r14
    3d9c:	ff 92       	push	r15
    3d9e:	0f 93       	push	r16
    3da0:	1f 93       	push	r17
    3da2:	cf 93       	push	r28
    3da4:	df 93       	push	r29
    3da6:	98 2e       	mov	r9, r24
    3da8:	86 2e       	mov	r8, r22
    3daa:	5a 01       	movw	r10, r20
    3dac:	69 01       	movw	r12, r18
    3dae:	64 dd       	rcall	.-1336   	; 0x3878 <udd_ep_get_job>
    3db0:	7c 01       	movw	r14, r24
    3db2:	89 2d       	mov	r24, r9
    3db4:	1e dc       	rcall	.-1988   	; 0x35f2 <udd_ep_get_ctrl>
    3db6:	ec 01       	movw	r28, r24
    3db8:	89 81       	ldd	r24, Y+1	; 0x01
    3dba:	80 7c       	andi	r24, 0xC0	; 192
    3dbc:	09 f4       	brne	.+2      	; 0x3dc0 <udd_ep_run+0x32>
    3dbe:	4e c0       	rjmp	.+156    	; 0x3e5c <udd_ep_run+0xce>
    3dc0:	89 81       	ldd	r24, Y+1	; 0x01
    3dc2:	80 7c       	andi	r24, 0xC0	; 192
    3dc4:	80 3c       	cpi	r24, 0xC0	; 192
    3dc6:	19 f0       	breq	.+6      	; 0x3dce <udd_ep_run+0x40>
    3dc8:	89 81       	ldd	r24, Y+1	; 0x01
    3dca:	82 fd       	sbrc	r24, 2
    3dcc:	49 c0       	rjmp	.+146    	; 0x3e60 <udd_ep_run+0xd2>
    3dce:	8f b7       	in	r24, 0x3f	; 63
    3dd0:	f8 94       	cli
    3dd2:	f7 01       	movw	r30, r14
    3dd4:	90 81       	ld	r25, Z
    3dd6:	90 ff       	sbrs	r25, 0
    3dd8:	03 c0       	rjmp	.+6      	; 0x3de0 <udd_ep_run+0x52>
    3dda:	8f bf       	out	0x3f, r24	; 63
    3ddc:	80 e0       	ldi	r24, 0x00	; 0
    3dde:	41 c0       	rjmp	.+130    	; 0x3e62 <udd_ep_run+0xd4>
    3de0:	f7 01       	movw	r30, r14
    3de2:	90 81       	ld	r25, Z
    3de4:	91 60       	ori	r25, 0x01	; 1
    3de6:	90 83       	st	Z, r25
    3de8:	8f bf       	out	0x3f, r24	; 63
    3dea:	a1 82       	std	Z+1, r10	; 0x01
    3dec:	b2 82       	std	Z+2, r11	; 0x02
    3dee:	c3 82       	std	Z+3, r12	; 0x03
    3df0:	d4 82       	std	Z+4, r13	; 0x04
    3df2:	15 82       	std	Z+5, r1	; 0x05
    3df4:	16 82       	std	Z+6, r1	; 0x06
    3df6:	07 83       	std	Z+7, r16	; 0x07
    3df8:	10 87       	std	Z+8, r17	; 0x08
    3dfa:	81 10       	cpse	r8, r1
    3dfc:	08 c0       	rjmp	.+16     	; 0x3e0e <udd_ep_run+0x80>
    3dfe:	21 e0       	ldi	r18, 0x01	; 1
    3e00:	30 e0       	ldi	r19, 0x00	; 0
    3e02:	c1 14       	cp	r12, r1
    3e04:	d1 04       	cpc	r13, r1
    3e06:	29 f0       	breq	.+10     	; 0x3e12 <udd_ep_run+0x84>
    3e08:	20 e0       	ldi	r18, 0x00	; 0
    3e0a:	30 e0       	ldi	r19, 0x00	; 0
    3e0c:	02 c0       	rjmp	.+4      	; 0x3e12 <udd_ep_run+0x84>
    3e0e:	21 e0       	ldi	r18, 0x01	; 1
    3e10:	30 e0       	ldi	r19, 0x00	; 0
    3e12:	f7 01       	movw	r30, r14
    3e14:	80 81       	ld	r24, Z
    3e16:	20 fb       	bst	r18, 0
    3e18:	81 f9       	bld	r24, 1
    3e1a:	8b 7f       	andi	r24, 0xFB	; 251
    3e1c:	80 83       	st	Z, r24
    3e1e:	99 20       	and	r9, r9
    3e20:	1c f4       	brge	.+6      	; 0x3e28 <udd_ep_run+0x9a>
    3e22:	1e 82       	std	Y+6, r1	; 0x06
    3e24:	1f 82       	std	Y+7, r1	; 0x07
    3e26:	16 c0       	rjmp	.+44     	; 0x3e54 <udd_ep_run+0xc6>
    3e28:	89 81       	ldd	r24, Y+1	; 0x01
    3e2a:	80 7c       	andi	r24, 0xC0	; 192
    3e2c:	80 3c       	cpi	r24, 0xC0	; 192
    3e2e:	71 f4       	brne	.+28     	; 0x3e4c <udd_ep_run+0xbe>
    3e30:	ce 01       	movw	r24, r28
    3e32:	f7 dc       	rcall	.-1554   	; 0x3822 <udd_ep_get_size>
    3e34:	bc 01       	movw	r22, r24
    3e36:	c6 01       	movw	r24, r12
    3e38:	0e 94 11 29 	call	0x5222	; 0x5222 <__udivmodhi4>
    3e3c:	89 2b       	or	r24, r25
    3e3e:	31 f0       	breq	.+12     	; 0x3e4c <udd_ep_run+0xbe>
    3e40:	f7 01       	movw	r30, r14
    3e42:	80 81       	ld	r24, Z
    3e44:	8e 7f       	andi	r24, 0xFE	; 254
    3e46:	80 83       	st	Z, r24
    3e48:	80 e0       	ldi	r24, 0x00	; 0
    3e4a:	0b c0       	rjmp	.+22     	; 0x3e62 <udd_ep_run+0xd4>
    3e4c:	1a 82       	std	Y+2, r1	; 0x02
    3e4e:	1b 82       	std	Y+3, r1	; 0x03
    3e50:	1e 82       	std	Y+6, r1	; 0x06
    3e52:	1f 82       	std	Y+7, r1	; 0x07
    3e54:	89 2d       	mov	r24, r9
    3e56:	9c dd       	rcall	.-1224   	; 0x3990 <udd_ep_trans_complet>
    3e58:	81 e0       	ldi	r24, 0x01	; 1
    3e5a:	03 c0       	rjmp	.+6      	; 0x3e62 <udd_ep_run+0xd4>
    3e5c:	80 e0       	ldi	r24, 0x00	; 0
    3e5e:	01 c0       	rjmp	.+2      	; 0x3e62 <udd_ep_run+0xd4>
    3e60:	80 e0       	ldi	r24, 0x00	; 0
    3e62:	df 91       	pop	r29
    3e64:	cf 91       	pop	r28
    3e66:	1f 91       	pop	r17
    3e68:	0f 91       	pop	r16
    3e6a:	ff 90       	pop	r15
    3e6c:	ef 90       	pop	r14
    3e6e:	df 90       	pop	r13
    3e70:	cf 90       	pop	r12
    3e72:	bf 90       	pop	r11
    3e74:	af 90       	pop	r10
    3e76:	9f 90       	pop	r9
    3e78:	8f 90       	pop	r8
    3e7a:	08 95       	ret

00003e7c <udd_ep_abort>:
    3e7c:	0f 93       	push	r16
    3e7e:	1f 93       	push	r17
    3e80:	cf 93       	push	r28
    3e82:	df 93       	push	r29
    3e84:	18 2f       	mov	r17, r24
    3e86:	b5 db       	rcall	.-2198   	; 0x35f2 <udd_ep_get_ctrl>
    3e88:	ec 01       	movw	r28, r24
    3e8a:	81 2f       	mov	r24, r17
    3e8c:	f5 dc       	rcall	.-1558   	; 0x3878 <udd_ep_get_job>
    3e8e:	dc 01       	movw	r26, r24
    3e90:	fe 01       	movw	r30, r28
    3e92:	02 e0       	ldi	r16, 0x02	; 2
    3e94:	05 93       	las	Z, r16
    3e96:	8c 91       	ld	r24, X
    3e98:	80 ff       	sbrs	r24, 0
    3e9a:	12 c0       	rjmp	.+36     	; 0x3ec0 <udd_ep_abort+0x44>
    3e9c:	8e 7f       	andi	r24, 0xFE	; 254
    3e9e:	8c 93       	st	X, r24
    3ea0:	17 96       	adiw	r26, 0x07	; 7
    3ea2:	ed 91       	ld	r30, X+
    3ea4:	fc 91       	ld	r31, X
    3ea6:	18 97       	sbiw	r26, 0x08	; 8
    3ea8:	30 97       	sbiw	r30, 0x00	; 0
    3eaa:	51 f0       	breq	.+20     	; 0x3ec0 <udd_ep_abort+0x44>
    3eac:	11 23       	and	r17, r17
    3eae:	1c f4       	brge	.+6      	; 0x3eb6 <udd_ep_abort+0x3a>
    3eb0:	6e 81       	ldd	r22, Y+6	; 0x06
    3eb2:	7f 81       	ldd	r23, Y+7	; 0x07
    3eb4:	02 c0       	rjmp	.+4      	; 0x3eba <udd_ep_abort+0x3e>
    3eb6:	6a 81       	ldd	r22, Y+2	; 0x02
    3eb8:	7b 81       	ldd	r23, Y+3	; 0x03
    3eba:	41 2f       	mov	r20, r17
    3ebc:	81 e0       	ldi	r24, 0x01	; 1
    3ebe:	19 95       	eicall
    3ec0:	df 91       	pop	r29
    3ec2:	cf 91       	pop	r28
    3ec4:	1f 91       	pop	r17
    3ec6:	0f 91       	pop	r16
    3ec8:	08 95       	ret

00003eca <udd_ep_set_halt>:
    3eca:	0f 93       	push	r16
    3ecc:	cf 93       	push	r28
    3ece:	c8 2f       	mov	r28, r24
    3ed0:	90 db       	rcall	.-2272   	; 0x35f2 <udd_ep_get_ctrl>
    3ed2:	fc 01       	movw	r30, r24
    3ed4:	81 81       	ldd	r24, Z+1	; 0x01
    3ed6:	84 60       	ori	r24, 0x04	; 4
    3ed8:	81 83       	std	Z+1, r24	; 0x01
    3eda:	01 e0       	ldi	r16, 0x01	; 1
    3edc:	06 93       	lac	Z, r16
    3ede:	8c 2f       	mov	r24, r28
    3ee0:	cd df       	rcall	.-102    	; 0x3e7c <udd_ep_abort>
    3ee2:	81 e0       	ldi	r24, 0x01	; 1
    3ee4:	cf 91       	pop	r28
    3ee6:	0f 91       	pop	r16
    3ee8:	08 95       	ret

00003eea <udd_ep_free>:
    3eea:	cf 93       	push	r28
    3eec:	c8 2f       	mov	r28, r24
    3eee:	c6 df       	rcall	.-116    	; 0x3e7c <udd_ep_abort>
    3ef0:	8c 2f       	mov	r24, r28
    3ef2:	7f db       	rcall	.-2306   	; 0x35f2 <udd_ep_get_ctrl>
    3ef4:	fc 01       	movw	r30, r24
    3ef6:	11 82       	std	Z+1, r1	; 0x01
    3ef8:	cf 91       	pop	r28
    3efa:	08 95       	ret

00003efc <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    3efc:	1f 92       	push	r1
    3efe:	0f 92       	push	r0
    3f00:	0f b6       	in	r0, 0x3f	; 63
    3f02:	0f 92       	push	r0
    3f04:	11 24       	eor	r1, r1
    3f06:	0b b6       	in	r0, 0x3b	; 59
    3f08:	0f 92       	push	r0
    3f0a:	0f 93       	push	r16
    3f0c:	2f 93       	push	r18
    3f0e:	3f 93       	push	r19
    3f10:	4f 93       	push	r20
    3f12:	5f 93       	push	r21
    3f14:	6f 93       	push	r22
    3f16:	7f 93       	push	r23
    3f18:	8f 93       	push	r24
    3f1a:	9f 93       	push	r25
    3f1c:	af 93       	push	r26
    3f1e:	bf 93       	push	r27
    3f20:	ef 93       	push	r30
    3f22:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    3f24:	80 91 cb 04 	lds	r24, 0x04CB
    3f28:	88 23       	and	r24, r24
    3f2a:	34 f4       	brge	.+12     	; 0x3f38 <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    3f2c:	80 e8       	ldi	r24, 0x80	; 128
    3f2e:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    3f32:	0e 94 24 13 	call	0x2648	; 0x2648 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    3f36:	7e c0       	rjmp	.+252    	; 0x4034 <__vector_125+0x138>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    3f38:	80 91 cb 04 	lds	r24, 0x04CB
    3f3c:	82 ff       	sbrs	r24, 2
    3f3e:	20 c0       	rjmp	.+64     	; 0x3f80 <__vector_125+0x84>
		udd_ack_underflow_event();
    3f40:	84 e0       	ldi	r24, 0x04	; 4
    3f42:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    3f46:	80 91 3c 29 	lds	r24, 0x293C
    3f4a:	86 ff       	sbrs	r24, 6
    3f4c:	73 c0       	rjmp	.+230    	; 0x4034 <__vector_125+0x138>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    3f4e:	80 91 cc 04 	lds	r24, 0x04CC
    3f52:	81 fd       	sbrc	r24, 1
    3f54:	6f c0       	rjmp	.+222    	; 0x4034 <__vector_125+0x138>
    3f56:	ae dc       	rcall	.-1700   	; 0x38b4 <udd_ctrl_interrupt_tc_setup>
    3f58:	81 11       	cpse	r24, r1
    3f5a:	6c c0       	rjmp	.+216    	; 0x4034 <__vector_125+0x138>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    3f5c:	80 91 4d 2a 	lds	r24, 0x2A4D
    3f60:	81 30       	cpi	r24, 0x01	; 1
    3f62:	11 f4       	brne	.+4      	; 0x3f68 <__vector_125+0x6c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    3f64:	d6 db       	rcall	.-2132   	; 0x3712 <udd_ctrl_send_zlp_in>
    3f66:	66 c0       	rjmp	.+204    	; 0x4034 <__vector_125+0x138>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    3f68:	84 30       	cpi	r24, 0x04	; 4
    3f6a:	09 f0       	breq	.+2      	; 0x3f6e <__vector_125+0x72>
    3f6c:	63 c0       	rjmp	.+198    	; 0x4034 <__vector_125+0x138>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    3f6e:	ed e3       	ldi	r30, 0x3D	; 61
    3f70:	f9 e2       	ldi	r31, 0x29	; 41
    3f72:	04 e0       	ldi	r16, 0x04	; 4
    3f74:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    3f76:	e5 e3       	ldi	r30, 0x35	; 53
    3f78:	f9 e2       	ldi	r31, 0x29	; 41
    3f7a:	04 e0       	ldi	r16, 0x04	; 4
    3f7c:	05 93       	las	Z, r16
    3f7e:	5a c0       	rjmp	.+180    	; 0x4034 <__vector_125+0x138>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    3f80:	80 91 cb 04 	lds	r24, 0x04CB
    3f84:	81 ff       	sbrs	r24, 1
    3f86:	51 c0       	rjmp	.+162    	; 0x402a <__vector_125+0x12e>
		udd_ack_overflow_event();
    3f88:	82 e0       	ldi	r24, 0x02	; 2
    3f8a:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    3f8e:	80 91 34 29 	lds	r24, 0x2934
    3f92:	86 ff       	sbrs	r24, 6
    3f94:	4f c0       	rjmp	.+158    	; 0x4034 <__vector_125+0x138>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    3f96:	80 91 cc 04 	lds	r24, 0x04CC
    3f9a:	81 fd       	sbrc	r24, 1
    3f9c:	4b c0       	rjmp	.+150    	; 0x4034 <__vector_125+0x138>
    3f9e:	8a dc       	rcall	.-1772   	; 0x38b4 <udd_ctrl_interrupt_tc_setup>
    3fa0:	81 11       	cpse	r24, r1
    3fa2:	48 c0       	rjmp	.+144    	; 0x4034 <__vector_125+0x138>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    3fa4:	80 91 4d 2a 	lds	r24, 0x2A4D
    3fa8:	82 30       	cpi	r24, 0x02	; 2
    3faa:	11 f4       	brne	.+4      	; 0x3fb0 <__vector_125+0xb4>
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
    3fac:	c0 db       	rcall	.-2176   	; 0x372e <udd_ctrl_send_zlp_out>
    3fae:	42 c0       	rjmp	.+132    	; 0x4034 <__vector_125+0x138>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    3fb0:	83 30       	cpi	r24, 0x03	; 3
    3fb2:	09 f0       	breq	.+2      	; 0x3fb6 <__vector_125+0xba>
    3fb4:	3f c0       	rjmp	.+126    	; 0x4034 <__vector_125+0x138>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    3fb6:	ed e3       	ldi	r30, 0x3D	; 61
    3fb8:	f9 e2       	ldi	r31, 0x29	; 41
    3fba:	04 e0       	ldi	r16, 0x04	; 4
    3fbc:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    3fbe:	e5 e3       	ldi	r30, 0x35	; 53
    3fc0:	f9 e2       	ldi	r31, 0x29	; 41
    3fc2:	04 e0       	ldi	r16, 0x04	; 4
    3fc4:	05 93       	las	Z, r16
    3fc6:	36 c0       	rjmp	.+108    	; 0x4034 <__vector_125+0x138>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    3fc8:	80 e1       	ldi	r24, 0x10	; 16
    3fca:	80 93 ca 04 	sts	0x04CA, r24
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    3fce:	81 e0       	ldi	r24, 0x01	; 1
    3fd0:	55 df       	rcall	.-342    	; 0x3e7c <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    3fd2:	81 e8       	ldi	r24, 0x81	; 129
    3fd4:	53 df       	rcall	.-346    	; 0x3e7c <udd_ep_abort>
		}
#endif
		udc_reset();
    3fd6:	0e 94 fd 12 	call	0x25fa	; 0x25fa <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    3fda:	10 92 c3 04 	sts	0x04C3, r1
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
    3fde:	40 e4       	ldi	r20, 0x40	; 64
    3fe0:	50 e0       	ldi	r21, 0x00	; 0
    3fe2:	60 e0       	ldi	r22, 0x00	; 0
    3fe4:	80 e0       	ldi	r24, 0x00	; 0
    3fe6:	1e db       	rcall	.-2500   	; 0x3624 <udd_ep_init>
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
    3fe8:	40 e4       	ldi	r20, 0x40	; 64
    3fea:	50 e0       	ldi	r21, 0x00	; 0
    3fec:	60 e0       	ldi	r22, 0x00	; 0
    3fee:	80 e8       	ldi	r24, 0x80	; 128
    3ff0:	19 db       	rcall	.-2510   	; 0x3624 <udd_ep_init>
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    3ff2:	8d e0       	ldi	r24, 0x0D	; 13
    3ff4:	9a e2       	ldi	r25, 0x2A	; 42
    3ff6:	80 93 38 29 	sts	0x2938, r24
    3ffa:	90 93 39 29 	sts	0x2939, r25
		// Reset endpoint control management
		udd_ctrl_init();
    3ffe:	50 db       	rcall	.-2400   	; 0x36a0 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    4000:	19 c0       	rjmp	.+50     	; 0x4034 <__vector_125+0x138>
	}

	if (udd_is_suspend_event()) {
    4002:	80 91 cb 04 	lds	r24, 0x04CB
    4006:	86 ff       	sbrs	r24, 6
    4008:	06 c0       	rjmp	.+12     	; 0x4016 <__vector_125+0x11a>
		udd_ack_suspend_event();
    400a:	80 e4       	ldi	r24, 0x40	; 64
    400c:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    4010:	80 e0       	ldi	r24, 0x00	; 0
    4012:	d0 da       	rcall	.-2656   	; 0x35b4 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    4014:	0f c0       	rjmp	.+30     	; 0x4034 <__vector_125+0x138>
	}

	if (udd_is_resume_event()) {
    4016:	80 91 cb 04 	lds	r24, 0x04CB
    401a:	85 ff       	sbrs	r24, 5
    401c:	0b c0       	rjmp	.+22     	; 0x4034 <__vector_125+0x138>
		udd_ack_resume_event();
    401e:	80 e2       	ldi	r24, 0x20	; 32
    4020:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    4024:	81 e0       	ldi	r24, 0x01	; 1
    4026:	c6 da       	rcall	.-2676   	; 0x35b4 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    4028:	05 c0       	rjmp	.+10     	; 0x4034 <__vector_125+0x138>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    402a:	80 91 cb 04 	lds	r24, 0x04CB
    402e:	84 fd       	sbrc	r24, 4
    4030:	cb cf       	rjmp	.-106    	; 0x3fc8 <__vector_125+0xcc>
    4032:	e7 cf       	rjmp	.-50     	; 0x4002 <__vector_125+0x106>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    4034:	ff 91       	pop	r31
    4036:	ef 91       	pop	r30
    4038:	bf 91       	pop	r27
    403a:	af 91       	pop	r26
    403c:	9f 91       	pop	r25
    403e:	8f 91       	pop	r24
    4040:	7f 91       	pop	r23
    4042:	6f 91       	pop	r22
    4044:	5f 91       	pop	r21
    4046:	4f 91       	pop	r20
    4048:	3f 91       	pop	r19
    404a:	2f 91       	pop	r18
    404c:	0f 91       	pop	r16
    404e:	0f 90       	pop	r0
    4050:	0b be       	out	0x3b, r0	; 59
    4052:	0f 90       	pop	r0
    4054:	0f be       	out	0x3f, r0	; 63
    4056:	0f 90       	pop	r0
    4058:	1f 90       	pop	r1
    405a:	18 95       	reti

0000405c <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    405c:	1f 92       	push	r1
    405e:	0f 92       	push	r0
    4060:	0f b6       	in	r0, 0x3f	; 63
    4062:	0f 92       	push	r0
    4064:	11 24       	eor	r1, r1
    4066:	0b b6       	in	r0, 0x3b	; 59
    4068:	0f 92       	push	r0
    406a:	0f 93       	push	r16
    406c:	1f 93       	push	r17
    406e:	2f 93       	push	r18
    4070:	3f 93       	push	r19
    4072:	4f 93       	push	r20
    4074:	5f 93       	push	r21
    4076:	6f 93       	push	r22
    4078:	7f 93       	push	r23
    407a:	8f 93       	push	r24
    407c:	9f 93       	push	r25
    407e:	af 93       	push	r26
    4080:	bf 93       	push	r27
    4082:	cf 93       	push	r28
    4084:	df 93       	push	r29
    4086:	ef 93       	push	r30
    4088:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    408a:	80 91 cc 04 	lds	r24, 0x04CC
    408e:	81 fd       	sbrc	r24, 1
    4090:	03 c0       	rjmp	.+6      	; 0x4098 <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    4092:	10 dc       	rcall	.-2016   	; 0x38b4 <udd_ctrl_interrupt_tc_setup>
    4094:	81 11       	cpse	r24, r1
    4096:	ab c0       	rjmp	.+342    	; 0x41ee <__vector_126+0x192>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    4098:	82 e0       	ldi	r24, 0x02	; 2
    409a:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    409e:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    40a2:	81 95       	neg	r24
    40a4:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    40a6:	e4 e3       	ldi	r30, 0x34	; 52
    40a8:	f9 e2       	ldi	r31, 0x29	; 41
    40aa:	e8 1b       	sub	r30, r24
    40ac:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    40ae:	20 81       	ld	r18, Z
    40b0:	31 81       	ldd	r19, Z+1	; 0x01
    40b2:	24 53       	subi	r18, 0x34	; 52
    40b4:	39 42       	sbci	r19, 0x29	; 41
    40b6:	36 95       	lsr	r19
    40b8:	27 95       	ror	r18
    40ba:	36 95       	lsr	r19
    40bc:	27 95       	ror	r18
    40be:	36 95       	lsr	r19
    40c0:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    40c2:	82 2f       	mov	r24, r18
    40c4:	86 95       	lsr	r24
    40c6:	20 ff       	sbrs	r18, 0
    40c8:	02 c0       	rjmp	.+4      	; 0x40ce <__vector_126+0x72>
    40ca:	c0 e8       	ldi	r28, 0x80	; 128
    40cc:	01 c0       	rjmp	.+2      	; 0x40d0 <__vector_126+0x74>
    40ce:	c0 e0       	ldi	r28, 0x00	; 0
    40d0:	c8 0f       	add	r28, r24
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    40d2:	8c 2f       	mov	r24, r28
    40d4:	8e da       	rcall	.-2788   	; 0x35f2 <udd_ep_get_ctrl>
    40d6:	fc 01       	movw	r30, r24
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    40d8:	80 81       	ld	r24, Z
    40da:	85 ff       	sbrs	r24, 5
    40dc:	88 c0       	rjmp	.+272    	; 0x41ee <__vector_126+0x192>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    40de:	00 e2       	ldi	r16, 0x20	; 32
    40e0:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    40e2:	c1 11       	cpse	r28, r1
    40e4:	7e c0       	rjmp	.+252    	; 0x41e2 <__vector_126+0x186>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    40e6:	80 91 4d 2a 	lds	r24, 0x2A4D
    40ea:	84 30       	cpi	r24, 0x04	; 4
    40ec:	19 f4       	brne	.+6      	; 0x40f4 <__vector_126+0x98>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    40ee:	29 db       	rcall	.-2478   	; 0x3742 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    40f0:	d7 da       	rcall	.-2642   	; 0x36a0 <udd_ctrl_init>
    40f2:	7d c0       	rjmp	.+250    	; 0x41ee <__vector_126+0x192>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    40f4:	c0 91 36 29 	lds	r28, 0x2936
    40f8:	d0 91 37 29 	lds	r29, 0x2937

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    40fc:	80 91 75 2a 	lds	r24, 0x2A75
    4100:	90 91 76 2a 	lds	r25, 0x2A76
    4104:	00 91 50 2a 	lds	r16, 0x2A50
    4108:	10 91 51 2a 	lds	r17, 0x2A51
    410c:	98 01       	movw	r18, r16
    410e:	2c 0f       	add	r18, r28
    4110:	3d 1f       	adc	r19, r29
    4112:	82 17       	cp	r24, r18
    4114:	93 07       	cpc	r25, r19
    4116:	18 f4       	brcc	.+6      	; 0x411e <__vector_126+0xc2>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    4118:	ec 01       	movw	r28, r24
    411a:	c0 1b       	sub	r28, r16
    411c:	d1 0b       	sbc	r29, r17
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    411e:	20 91 73 2a 	lds	r18, 0x2A73
    4122:	30 91 74 2a 	lds	r19, 0x2A74
    4126:	20 0f       	add	r18, r16
    4128:	31 1f       	adc	r19, r17
    412a:	8d e0       	ldi	r24, 0x0D	; 13
    412c:	9a e2       	ldi	r25, 0x2A	; 42
    412e:	4c 2f       	mov	r20, r28
    4130:	5d 2f       	mov	r21, r29
    4132:	68 2f       	mov	r22, r24
    4134:	79 2f       	mov	r23, r25
    4136:	82 2f       	mov	r24, r18
    4138:	93 2f       	mov	r25, r19
    413a:	0e 94 ce 2a 	call	0x559c	; 0x559c <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    413e:	0c 0f       	add	r16, r28
    4140:	1d 1f       	adc	r17, r29
    4142:	00 93 50 2a 	sts	0x2A50, r16
    4146:	10 93 51 2a 	sts	0x2A51, r17

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    414a:	c0 34       	cpi	r28, 0x40	; 64
    414c:	d1 05       	cpc	r29, r1
    414e:	69 f4       	brne	.+26     	; 0x416a <__vector_126+0x10e>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    4150:	80 91 4e 2a 	lds	r24, 0x2A4E
    4154:	90 91 4f 2a 	lds	r25, 0x2A4F
    4158:	80 0f       	add	r24, r16
    415a:	91 1f       	adc	r25, r17

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    415c:	20 91 71 2a 	lds	r18, 0x2A71
    4160:	30 91 72 2a 	lds	r19, 0x2A72
    4164:	82 17       	cp	r24, r18
    4166:	93 07       	cpc	r25, r19
    4168:	88 f0       	brcs	.+34     	; 0x418c <__vector_126+0x130>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    416a:	00 93 75 2a 	sts	0x2A75, r16
    416e:	10 93 76 2a 	sts	0x2A76, r17
		if (NULL != udd_g_ctrlreq.over_under_run) {
    4172:	e0 91 79 2a 	lds	r30, 0x2A79
    4176:	f0 91 7a 2a 	lds	r31, 0x2A7A
    417a:	30 97       	sbiw	r30, 0x00	; 0
    417c:	29 f0       	breq	.+10     	; 0x4188 <__vector_126+0x12c>
			if (!udd_g_ctrlreq.over_under_run()) {
    417e:	19 95       	eicall
    4180:	81 11       	cpse	r24, r1
    4182:	02 c0       	rjmp	.+4      	; 0x4188 <__vector_126+0x12c>
				// Stall ZLP
				udd_ctrl_stall_data();
    4184:	b8 da       	rcall	.-2704   	; 0x36f6 <udd_ctrl_stall_data>
    4186:	33 c0       	rjmp	.+102    	; 0x41ee <__vector_126+0x192>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    4188:	c4 da       	rcall	.-2680   	; 0x3712 <udd_ctrl_send_zlp_in>
    418a:	31 c0       	rjmp	.+98     	; 0x41ee <__vector_126+0x192>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    418c:	80 91 75 2a 	lds	r24, 0x2A75
    4190:	90 91 76 2a 	lds	r25, 0x2A76
    4194:	08 17       	cp	r16, r24
    4196:	19 07       	cpc	r17, r25
    4198:	f9 f4       	brne	.+62     	; 0x41d8 <__vector_126+0x17c>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    419a:	e0 91 79 2a 	lds	r30, 0x2A79
    419e:	f0 91 7a 2a 	lds	r31, 0x2A7A
    41a2:	30 97       	sbiw	r30, 0x00	; 0
    41a4:	11 f4       	brne	.+4      	; 0x41aa <__vector_126+0x14e>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    41a6:	a7 da       	rcall	.-2738   	; 0x36f6 <udd_ctrl_stall_data>
    41a8:	22 c0       	rjmp	.+68     	; 0x41ee <__vector_126+0x192>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    41aa:	19 95       	eicall
    41ac:	81 11       	cpse	r24, r1
    41ae:	02 c0       	rjmp	.+4      	; 0x41b4 <__vector_126+0x158>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    41b0:	a2 da       	rcall	.-2748   	; 0x36f6 <udd_ctrl_stall_data>
    41b2:	1d c0       	rjmp	.+58     	; 0x41ee <__vector_126+0x192>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    41b4:	20 91 4e 2a 	lds	r18, 0x2A4E
    41b8:	30 91 4f 2a 	lds	r19, 0x2A4F
    41bc:	80 91 50 2a 	lds	r24, 0x2A50
    41c0:	90 91 51 2a 	lds	r25, 0x2A51
    41c4:	82 0f       	add	r24, r18
    41c6:	93 1f       	adc	r25, r19
    41c8:	80 93 4e 2a 	sts	0x2A4E, r24
    41cc:	90 93 4f 2a 	sts	0x2A4F, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    41d0:	10 92 50 2a 	sts	0x2A50, r1
    41d4:	10 92 51 2a 	sts	0x2A51, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    41d8:	e4 e3       	ldi	r30, 0x34	; 52
    41da:	f9 e2       	ldi	r31, 0x29	; 41
    41dc:	02 e0       	ldi	r16, 0x02	; 2
    41de:	06 93       	lac	Z, r16
    41e0:	06 c0       	rjmp	.+12     	; 0x41ee <__vector_126+0x192>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    41e2:	c0 38       	cpi	r28, 0x80	; 128
    41e4:	11 f4       	brne	.+4      	; 0x41ea <__vector_126+0x18e>
		udd_ctrl_in_sent();
    41e6:	b5 da       	rcall	.-2710   	; 0x3752 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    41e8:	02 c0       	rjmp	.+4      	; 0x41ee <__vector_126+0x192>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    41ea:	8c 2f       	mov	r24, r28
    41ec:	d1 db       	rcall	.-2142   	; 0x3990 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    41ee:	ff 91       	pop	r31
    41f0:	ef 91       	pop	r30
    41f2:	df 91       	pop	r29
    41f4:	cf 91       	pop	r28
    41f6:	bf 91       	pop	r27
    41f8:	af 91       	pop	r26
    41fa:	9f 91       	pop	r25
    41fc:	8f 91       	pop	r24
    41fe:	7f 91       	pop	r23
    4200:	6f 91       	pop	r22
    4202:	5f 91       	pop	r21
    4204:	4f 91       	pop	r20
    4206:	3f 91       	pop	r19
    4208:	2f 91       	pop	r18
    420a:	1f 91       	pop	r17
    420c:	0f 91       	pop	r16
    420e:	0f 90       	pop	r0
    4210:	0b be       	out	0x3b, r0	; 59
    4212:	0f 90       	pop	r0
    4214:	0f be       	out	0x3f, r0	; 63
    4216:	0f 90       	pop	r0
    4218:	1f 90       	pop	r1
    421a:	18 95       	reti

0000421c <cdc_start>:
		help++;
	}
}

void cdc_start(void)
{
    421c:	ef 92       	push	r14
    421e:	ff 92       	push	r15
    4220:	0f 93       	push	r16
    4222:	1f 93       	push	r17
    4224:	cf 93       	push	r28
    4226:	df 93       	push	r29
    4228:	cd b7       	in	r28, 0x3d	; 61
    422a:	de b7       	in	r29, 0x3e	; 62
    422c:	60 97       	sbiw	r28, 0x10	; 16
    422e:	cd bf       	out	0x3d, r28	; 61
    4230:	de bf       	out	0x3e, r29	; 62
	uint8_t i;
	uint8_t temp;
	uint8_t nibble_to_ascii[16] = "0123456789ABCDEF";
    4232:	80 e1       	ldi	r24, 0x10	; 16
    4234:	e4 e2       	ldi	r30, 0x24	; 36
    4236:	f1 e2       	ldi	r31, 0x21	; 33
    4238:	de 01       	movw	r26, r28
    423a:	11 96       	adiw	r26, 0x01	; 1
    423c:	01 90       	ld	r0, Z+
    423e:	0d 92       	st	X+, r0
    4240:	8a 95       	dec	r24
    4242:	e1 f7       	brne	.-8      	; 0x423c <cdc_start+0x20>
    4244:	0f 2e       	mov	r0, r31
    4246:	fc e7       	ldi	r31, 0x7C	; 124
    4248:	ef 2e       	mov	r14, r31
    424a:	fa e2       	ldi	r31, 0x2A	; 42
    424c:	ff 2e       	mov	r15, r31
    424e:	f0 2d       	mov	r31, r0
    4250:	08 e0       	ldi	r16, 0x08	; 8
    4252:	10 e0       	ldi	r17, 0x00	; 0
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_user_signature_row(uint16_t address)
{
	return nvm_read_byte(NVM_CMD_READ_USER_SIG_ROW_gc, address);
    4254:	b8 01       	movw	r22, r16
    4256:	81 e0       	ldi	r24, 0x01	; 1
    4258:	0e 94 2a 19 	call	0x3254	; 0x3254 <nvm_read_byte>
		udi_cdc_putc(val);
		help++;
	}
}

void cdc_start(void)
    425c:	f7 01       	movw	r30, r14
    425e:	31 97       	sbiw	r30, 0x01	; 1
	 */
	for (i = 0; i < USER_SIGNATURE_USBID_SIZE / 2; i++) {
		temp = nvm_read_user_signature_row(
				i + USER_SIGNATURE_USBID_POS);
		// Upper nibble
		cdc_serial_number[i * 2] = nibble_to_ascii[(temp & 0xF0) >> 4];
    4260:	98 2f       	mov	r25, r24
    4262:	92 95       	swap	r25
    4264:	9f 70       	andi	r25, 0x0F	; 15
    4266:	a1 e0       	ldi	r26, 0x01	; 1
    4268:	b0 e0       	ldi	r27, 0x00	; 0
    426a:	ac 0f       	add	r26, r28
    426c:	bd 1f       	adc	r27, r29
    426e:	a9 0f       	add	r26, r25
    4270:	b1 1d       	adc	r27, r1
    4272:	9c 91       	ld	r25, X
    4274:	90 83       	st	Z, r25
		// Lower nibble
		cdc_serial_number[(i * 2) + 1] = nibble_to_ascii[temp & 0x0F];
    4276:	8f 70       	andi	r24, 0x0F	; 15
    4278:	e1 e0       	ldi	r30, 0x01	; 1
    427a:	f0 e0       	ldi	r31, 0x00	; 0
    427c:	ec 0f       	add	r30, r28
    427e:	fd 1f       	adc	r31, r29
    4280:	e8 0f       	add	r30, r24
    4282:	f1 1d       	adc	r31, r1
    4284:	80 81       	ld	r24, Z
    4286:	f7 01       	movw	r30, r14
    4288:	80 83       	st	Z, r24
    428a:	0f 5f       	subi	r16, 0xFF	; 255
    428c:	1f 4f       	sbci	r17, 0xFF	; 255
    428e:	f2 e0       	ldi	r31, 0x02	; 2
    4290:	ef 0e       	add	r14, r31
    4292:	f1 1c       	adc	r15, r1
	uint8_t nibble_to_ascii[16] = "0123456789ABCDEF";

	/* Copy serial number from user signature row and convert to ASCII
	 * The 6 byte id results in a 12 byte string (1 character per nibble)
	 */
	for (i = 0; i < USER_SIGNATURE_USBID_SIZE / 2; i++) {
    4294:	0e 30       	cpi	r16, 0x0E	; 14
    4296:	11 05       	cpc	r17, r1
    4298:	e9 f6       	brne	.-70     	; 0x4254 <cdc_start+0x38>
		cdc_serial_number[i * 2] = nibble_to_ascii[(temp & 0xF0) >> 4];
		// Lower nibble
		cdc_serial_number[(i * 2) + 1] = nibble_to_ascii[temp & 0x0F];
	}

	udc_start();
    429a:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <udc_start>
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
    429e:	f0 dc       	rcall	.-1568   	; 0x3c80 <udd_attach>
	udc_attach();
}
    42a0:	60 96       	adiw	r28, 0x10	; 16
    42a2:	cd bf       	out	0x3d, r28	; 61
    42a4:	de bf       	out	0x3e, r29	; 62
    42a6:	df 91       	pop	r29
    42a8:	cf 91       	pop	r28
    42aa:	1f 91       	pop	r17
    42ac:	0f 91       	pop	r16
    42ae:	ff 90       	pop	r15
    42b0:	ef 90       	pop	r14
    42b2:	08 95       	ret

000042b4 <cdc_set_dtr>:

void cdc_set_dtr(bool enable)
{
	cdc_opened = enable;
    42b4:	80 93 53 2a 	sts	0x2A53, r24
    42b8:	08 95       	ret

000042ba <cdc_getkey>:
{
	char key;
	static uint8_t esc_state = 0;

	// If the cdc was opened, print out the help
	if (cdc_opened) {
    42ba:	80 91 53 2a 	lds	r24, 0x2A53
    42be:	81 11       	cpse	r24, r1
		cdc_opened = false;
    42c0:	10 92 53 2a 	sts	0x2A53, r1
		//cdc_put_help();
	}

	if (!udi_cdc_is_rx_ready()) {
    42c4:	0e 94 36 11 	call	0x226c	; 0x226c <udi_cdc_is_rx_ready>
    42c8:	88 23       	and	r24, r24
    42ca:	f1 f0       	breq	.+60     	; 0x4308 <cdc_getkey+0x4e>
		return KEYBOARD_NO_KEY;
	}

	key = udi_cdc_getc();
    42cc:	0e 94 83 11 	call	0x2306	; 0x2306 <udi_cdc_getc>

	if (esc_state == 1) {
    42d0:	90 91 54 2a 	lds	r25, 0x2A54
    42d4:	91 30       	cpi	r25, 0x01	; 1
    42d6:	49 f4       	brne	.+18     	; 0x42ea <cdc_getkey+0x30>
		if (key == 0x5b) {
    42d8:	8b 35       	cpi	r24, 0x5B	; 91
    42da:	21 f4       	brne	.+8      	; 0x42e4 <cdc_getkey+0x2a>
			esc_state = 2;
    42dc:	92 e0       	ldi	r25, 0x02	; 2
    42de:	90 93 54 2a 	sts	0x2A54, r25
    42e2:	08 95       	ret
		} else {
			esc_state = 0;
    42e4:	10 92 54 2a 	sts	0x2A54, r1
    42e8:	08 c0       	rjmp	.+16     	; 0x42fa <cdc_getkey+0x40>
		}
	} else if (esc_state == 2) {
    42ea:	92 30       	cpi	r25, 0x02	; 2
    42ec:	31 f4       	brne	.+12     	; 0x42fa <cdc_getkey+0x40>
		esc_state = 0;
    42ee:	10 92 54 2a 	sts	0x2A54, r1
		// Translate up/down arrow keys to keycodes
		switch (key) {
    42f2:	81 34       	cpi	r24, 0x41	; 65
    42f4:	59 f0       	breq	.+22     	; 0x430c <cdc_getkey+0x52>
    42f6:	82 34       	cpi	r24, 0x42	; 66
    42f8:	59 f0       	breq	.+22     	; 0x4310 <cdc_getkey+0x56>
			break;
		}
	}

	// Check for escape sequence
	if (key == 0x1b) {
    42fa:	8b 31       	cpi	r24, 0x1B	; 27
    42fc:	51 f4       	brne	.+20     	; 0x4312 <cdc_getkey+0x58>
		esc_state = 1;
    42fe:	81 e0       	ldi	r24, 0x01	; 1
    4300:	80 93 54 2a 	sts	0x2A54, r24
		return KEYBOARD_NO_KEY;
    4304:	80 e0       	ldi	r24, 0x00	; 0
    4306:	08 95       	ret
		cdc_opened = false;
		//cdc_put_help();
	}

	if (!udi_cdc_is_rx_ready()) {
		return KEYBOARD_NO_KEY;
    4308:	80 e0       	ldi	r24, 0x00	; 0
    430a:	08 95       	ret
	} else if (esc_state == 2) {
		esc_state = 0;
		// Translate up/down arrow keys to keycodes
		switch (key) {
		case 'A':
			key = KEYBOARD_UP;
    430c:	86 e2       	ldi	r24, 0x26	; 38
    430e:	08 95       	ret
			break;
		case 'B':
			key = KEYBOARD_DOWN;
    4310:	88 e2       	ldi	r24, 0x28	; 40
		return KEYBOARD_NO_KEY;
	}

	// Just return any other key directly
	return key;
}
    4312:	08 95       	ret

00004314 <keyboard_get_key_state>:
 * \brief Check the status of the keyboard
 *
 * \param keybuffer  a keyboard_event struct to store keyboard status
 */
void keyboard_get_key_state(struct keyboard_event *keybuffer)
{
    4314:	cf 93       	push	r28
    4316:	df 93       	push	r29
    4318:	ec 01       	movw	r28, r24

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    431a:	e0 e8       	ldi	r30, 0x80	; 128
    431c:	f6 e0       	ldi	r31, 0x06	; 6
    431e:	80 85       	ldd	r24, Z+8	; 0x08
	// Variable to hold the key mask
	static uint8_t key_state;
	char key;

	if ((gpio_pin_is_low(GPIO_PUSH_BUTTON_0)) &&
    4320:	85 fd       	sbrc	r24, 5
    4322:	0c c0       	rjmp	.+24     	; 0x433c <keyboard_get_key_state+0x28>
			!(key_state & KEYBOARD_ENTER_MASK)) {
    4324:	80 91 55 2a 	lds	r24, 0x2A55
{
	// Variable to hold the key mask
	static uint8_t key_state;
	char key;

	if ((gpio_pin_is_low(GPIO_PUSH_BUTTON_0)) &&
    4328:	80 fd       	sbrc	r24, 0
    432a:	08 c0       	rjmp	.+16     	; 0x433c <keyboard_get_key_state+0x28>
			!(key_state & KEYBOARD_ENTER_MASK)) {
		// Key pressed
		key_state |= KEYBOARD_ENTER_MASK;
    432c:	81 60       	ori	r24, 0x01	; 1
    432e:	80 93 55 2a 	sts	0x2A55, r24
		keybuffer->keycode = KEYBOARD_ENTER;
    4332:	8d e0       	ldi	r24, 0x0D	; 13
    4334:	88 83       	st	Y, r24
		keybuffer->type = KEYBOARD_PRESS;
    4336:	81 e0       	ldi	r24, 0x01	; 1
    4338:	89 83       	std	Y+1, r24	; 0x01
    433a:	7c c0       	rjmp	.+248    	; 0x4434 <keyboard_get_key_state+0x120>
    433c:	e0 e8       	ldi	r30, 0x80	; 128
    433e:	f6 e0       	ldi	r31, 0x06	; 6
    4340:	80 85       	ldd	r24, Z+8	; 0x08
	} else if ((gpio_pin_is_high(GPIO_PUSH_BUTTON_0))
    4342:	85 ff       	sbrs	r24, 5
    4344:	0c c0       	rjmp	.+24     	; 0x435e <keyboard_get_key_state+0x4a>
			&& (key_state & KEYBOARD_ENTER_MASK)) {
    4346:	80 91 55 2a 	lds	r24, 0x2A55
    434a:	80 ff       	sbrs	r24, 0
    434c:	08 c0       	rjmp	.+16     	; 0x435e <keyboard_get_key_state+0x4a>
		// Key released
		key_state &= ~KEYBOARD_ENTER_MASK;
    434e:	8e 7f       	andi	r24, 0xFE	; 254
    4350:	80 93 55 2a 	sts	0x2A55, r24
		keybuffer->keycode = KEYBOARD_ENTER;
    4354:	8d e0       	ldi	r24, 0x0D	; 13
    4356:	88 83       	st	Y, r24
		keybuffer->type = KEYBOARD_RELEASE;
    4358:	82 e0       	ldi	r24, 0x02	; 2
    435a:	89 83       	std	Y+1, r24	; 0x01
    435c:	6b c0       	rjmp	.+214    	; 0x4434 <keyboard_get_key_state+0x120>
    435e:	e0 ea       	ldi	r30, 0xA0	; 160
    4360:	f6 e0       	ldi	r31, 0x06	; 6
    4362:	80 85       	ldd	r24, Z+8	; 0x08
	} else if ((gpio_pin_is_low(GPIO_PUSH_BUTTON_1)) &&
    4364:	81 fd       	sbrc	r24, 1
    4366:	0c c0       	rjmp	.+24     	; 0x4380 <keyboard_get_key_state+0x6c>
			!(key_state & KEYBOARD_UP_MASK)) {
    4368:	80 91 55 2a 	lds	r24, 0x2A55
			&& (key_state & KEYBOARD_ENTER_MASK)) {
		// Key released
		key_state &= ~KEYBOARD_ENTER_MASK;
		keybuffer->keycode = KEYBOARD_ENTER;
		keybuffer->type = KEYBOARD_RELEASE;
	} else if ((gpio_pin_is_low(GPIO_PUSH_BUTTON_1)) &&
    436c:	81 fd       	sbrc	r24, 1
    436e:	08 c0       	rjmp	.+16     	; 0x4380 <keyboard_get_key_state+0x6c>
			!(key_state & KEYBOARD_UP_MASK)) {
		// Key pressed
		key_state |= KEYBOARD_UP_MASK;
    4370:	82 60       	ori	r24, 0x02	; 2
    4372:	80 93 55 2a 	sts	0x2A55, r24
		keybuffer->keycode = KEYBOARD_UP;
    4376:	86 e2       	ldi	r24, 0x26	; 38
    4378:	88 83       	st	Y, r24
		keybuffer->type = KEYBOARD_PRESS;
    437a:	81 e0       	ldi	r24, 0x01	; 1
    437c:	89 83       	std	Y+1, r24	; 0x01
    437e:	5a c0       	rjmp	.+180    	; 0x4434 <keyboard_get_key_state+0x120>
    4380:	e0 ea       	ldi	r30, 0xA0	; 160
    4382:	f6 e0       	ldi	r31, 0x06	; 6
    4384:	80 85       	ldd	r24, Z+8	; 0x08
	} else if ((gpio_pin_is_high(GPIO_PUSH_BUTTON_1))
    4386:	81 ff       	sbrs	r24, 1
    4388:	0c c0       	rjmp	.+24     	; 0x43a2 <keyboard_get_key_state+0x8e>
			&& (key_state & KEYBOARD_UP_MASK)) {
    438a:	80 91 55 2a 	lds	r24, 0x2A55
    438e:	81 ff       	sbrs	r24, 1
    4390:	08 c0       	rjmp	.+16     	; 0x43a2 <keyboard_get_key_state+0x8e>
		// Key released
		key_state &= ~KEYBOARD_UP_MASK;
    4392:	8d 7f       	andi	r24, 0xFD	; 253
    4394:	80 93 55 2a 	sts	0x2A55, r24
		keybuffer->keycode = KEYBOARD_UP;
    4398:	86 e2       	ldi	r24, 0x26	; 38
    439a:	88 83       	st	Y, r24
		keybuffer->type = KEYBOARD_RELEASE;
    439c:	82 e0       	ldi	r24, 0x02	; 2
    439e:	89 83       	std	Y+1, r24	; 0x01
    43a0:	49 c0       	rjmp	.+146    	; 0x4434 <keyboard_get_key_state+0x120>
    43a2:	e0 ea       	ldi	r30, 0xA0	; 160
    43a4:	f6 e0       	ldi	r31, 0x06	; 6
    43a6:	80 85       	ldd	r24, Z+8	; 0x08
	} else if ((gpio_pin_is_low(GPIO_PUSH_BUTTON_2)) &&
    43a8:	82 fd       	sbrc	r24, 2
    43aa:	0c c0       	rjmp	.+24     	; 0x43c4 <keyboard_get_key_state+0xb0>
			!(key_state & KEYBOARD_DOWN_MASK)) {
    43ac:	80 91 55 2a 	lds	r24, 0x2A55
			&& (key_state & KEYBOARD_UP_MASK)) {
		// Key released
		key_state &= ~KEYBOARD_UP_MASK;
		keybuffer->keycode = KEYBOARD_UP;
		keybuffer->type = KEYBOARD_RELEASE;
	} else if ((gpio_pin_is_low(GPIO_PUSH_BUTTON_2)) &&
    43b0:	82 fd       	sbrc	r24, 2
    43b2:	08 c0       	rjmp	.+16     	; 0x43c4 <keyboard_get_key_state+0xb0>
			!(key_state & KEYBOARD_DOWN_MASK)) {
		// Key pressed
		key_state |= KEYBOARD_DOWN_MASK;
    43b4:	84 60       	ori	r24, 0x04	; 4
    43b6:	80 93 55 2a 	sts	0x2A55, r24
		keybuffer->keycode = KEYBOARD_DOWN;
    43ba:	88 e2       	ldi	r24, 0x28	; 40
    43bc:	88 83       	st	Y, r24
		keybuffer->type = KEYBOARD_PRESS;
    43be:	81 e0       	ldi	r24, 0x01	; 1
    43c0:	89 83       	std	Y+1, r24	; 0x01
    43c2:	38 c0       	rjmp	.+112    	; 0x4434 <keyboard_get_key_state+0x120>
    43c4:	e0 ea       	ldi	r30, 0xA0	; 160
    43c6:	f6 e0       	ldi	r31, 0x06	; 6
    43c8:	80 85       	ldd	r24, Z+8	; 0x08
	} else if ((gpio_pin_is_high(GPIO_PUSH_BUTTON_2))
    43ca:	82 ff       	sbrs	r24, 2
    43cc:	0c c0       	rjmp	.+24     	; 0x43e6 <keyboard_get_key_state+0xd2>
			&& (key_state & KEYBOARD_DOWN_MASK)) {
    43ce:	80 91 55 2a 	lds	r24, 0x2A55
    43d2:	82 ff       	sbrs	r24, 2
    43d4:	08 c0       	rjmp	.+16     	; 0x43e6 <keyboard_get_key_state+0xd2>
		// Key released
		key_state &= ~KEYBOARD_DOWN_MASK;
    43d6:	8b 7f       	andi	r24, 0xFB	; 251
    43d8:	80 93 55 2a 	sts	0x2A55, r24
		keybuffer->keycode = KEYBOARD_DOWN;
    43dc:	88 e2       	ldi	r24, 0x28	; 40
    43de:	88 83       	st	Y, r24
		keybuffer->type = KEYBOARD_RELEASE;
    43e0:	82 e0       	ldi	r24, 0x02	; 2
    43e2:	89 83       	std	Y+1, r24	; 0x01
    43e4:	27 c0       	rjmp	.+78     	; 0x4434 <keyboard_get_key_state+0x120>

	// touch key
	} else if ((check_touch_key_pressed()) &&
    43e6:	51 d3       	rcall	.+1698   	; 0x4a8a <check_touch_key_pressed>
    43e8:	88 23       	and	r24, r24
    43ea:	61 f0       	breq	.+24     	; 0x4404 <keyboard_get_key_state+0xf0>
			!(key_state & KEYBOARD_BACK_MASK)) {
    43ec:	80 91 55 2a 	lds	r24, 0x2A55
		key_state &= ~KEYBOARD_DOWN_MASK;
		keybuffer->keycode = KEYBOARD_DOWN;
		keybuffer->type = KEYBOARD_RELEASE;

	// touch key
	} else if ((check_touch_key_pressed()) &&
    43f0:	83 fd       	sbrc	r24, 3
    43f2:	08 c0       	rjmp	.+16     	; 0x4404 <keyboard_get_key_state+0xf0>
			!(key_state & KEYBOARD_BACK_MASK)) {
		// Touch key pressed
		key_state |= KEYBOARD_BACK_MASK;
    43f4:	88 60       	ori	r24, 0x08	; 8
    43f6:	80 93 55 2a 	sts	0x2A55, r24
		keybuffer->keycode = KEYBOARD_BACK;
    43fa:	88 e0       	ldi	r24, 0x08	; 8
    43fc:	88 83       	st	Y, r24
		keybuffer->type = KEYBOARD_PRESS;
    43fe:	81 e0       	ldi	r24, 0x01	; 1
    4400:	89 83       	std	Y+1, r24	; 0x01
    4402:	18 c0       	rjmp	.+48     	; 0x4434 <keyboard_get_key_state+0x120>
	} else if ((!check_touch_key_pressed()) &&
    4404:	42 d3       	rcall	.+1668   	; 0x4a8a <check_touch_key_pressed>
    4406:	81 11       	cpse	r24, r1
    4408:	0c c0       	rjmp	.+24     	; 0x4422 <keyboard_get_key_state+0x10e>
			(key_state & KEYBOARD_BACK_MASK)) {
    440a:	80 91 55 2a 	lds	r24, 0x2A55
			!(key_state & KEYBOARD_BACK_MASK)) {
		// Touch key pressed
		key_state |= KEYBOARD_BACK_MASK;
		keybuffer->keycode = KEYBOARD_BACK;
		keybuffer->type = KEYBOARD_PRESS;
	} else if ((!check_touch_key_pressed()) &&
    440e:	83 ff       	sbrs	r24, 3
    4410:	08 c0       	rjmp	.+16     	; 0x4422 <keyboard_get_key_state+0x10e>
			(key_state & KEYBOARD_BACK_MASK)) {
		// Touch key released
		key_state &= ~KEYBOARD_BACK_MASK;
    4412:	87 7f       	andi	r24, 0xF7	; 247
    4414:	80 93 55 2a 	sts	0x2A55, r24
		keybuffer->keycode = KEYBOARD_BACK;
    4418:	88 e0       	ldi	r24, 0x08	; 8
    441a:	88 83       	st	Y, r24
		keybuffer->type = KEYBOARD_RELEASE;
    441c:	82 e0       	ldi	r24, 0x02	; 2
    441e:	89 83       	std	Y+1, r24	; 0x01
    4420:	09 c0       	rjmp	.+18     	; 0x4434 <keyboard_get_key_state+0x120>
	} else if ((key = cdc_getkey()) != KEYBOARD_NO_KEY) {
    4422:	4b df       	rcall	.-362    	; 0x42ba <cdc_getkey>
    4424:	88 23       	and	r24, r24
    4426:	21 f0       	breq	.+8      	; 0x4430 <keyboard_get_key_state+0x11c>
		keybuffer->keycode = key;
    4428:	88 83       	st	Y, r24
		keybuffer->type = KEYBOARD_RELEASE;
    442a:	82 e0       	ldi	r24, 0x02	; 2
    442c:	89 83       	std	Y+1, r24	; 0x01
    442e:	02 c0       	rjmp	.+4      	; 0x4434 <keyboard_get_key_state+0x120>
	} else {
		keybuffer->keycode = KEYBOARD_NO_KEY;
    4430:	18 82       	st	Y, r1
		keybuffer->type = KEYBOARD_NO_EVENT;
    4432:	19 82       	std	Y+1, r1	; 0x01
	}
}
    4434:	df 91       	pop	r29
    4436:	cf 91       	pop	r28
    4438:	08 95       	ret

0000443a <adcb_handler>:
		keyboard_get_key_state(&input);
		if (input.type == KEYBOARD_RELEASE) {
			break;
		}
	}
}
    443a:	61 30       	cpi	r22, 0x01	; 1
    443c:	61 f5       	brne	.+88     	; 0x4496 <adcb_handler+0x5c>
    443e:	80 91 59 2a 	lds	r24, 0x2A59
    4442:	8f 5f       	subi	r24, 0xFF	; 255
    4444:	80 93 59 2a 	sts	0x2A59, r24
    4448:	81 30       	cpi	r24, 0x01	; 1
    444a:	39 f4       	brne	.+14     	; 0x445a <adcb_handler+0x20>
    444c:	40 93 56 2a 	sts	0x2A56, r20
    4450:	50 93 57 2a 	sts	0x2A57, r21
    4454:	10 92 58 2a 	sts	0x2A58, r1
    4458:	0c c0       	rjmp	.+24     	; 0x4472 <adcb_handler+0x38>
    445a:	80 91 56 2a 	lds	r24, 0x2A56
    445e:	90 91 57 2a 	lds	r25, 0x2A57
    4462:	48 0f       	add	r20, r24
    4464:	59 1f       	adc	r21, r25
    4466:	56 95       	lsr	r21
    4468:	47 95       	ror	r20
    446a:	40 93 56 2a 	sts	0x2A56, r20
    446e:	50 93 57 2a 	sts	0x2A57, r21
    4472:	80 91 59 2a 	lds	r24, 0x2A59
    4476:	84 30       	cpi	r24, 0x04	; 4
    4478:	31 f4       	brne	.+12     	; 0x4486 <adcb_handler+0x4c>
    447a:	10 92 59 2a 	sts	0x2A59, r1
    447e:	81 e0       	ldi	r24, 0x01	; 1
    4480:	80 93 58 2a 	sts	0x2A58, r24
    4484:	08 95       	ret
    4486:	8f b7       	in	r24, 0x3f	; 63
    4488:	f8 94       	cli
    448a:	e0 e4       	ldi	r30, 0x40	; 64
    448c:	f2 e0       	ldi	r31, 0x02	; 2
    448e:	90 81       	ld	r25, Z
    4490:	94 60       	ori	r25, 0x04	; 4
    4492:	90 83       	st	Z, r25
    4494:	8f bf       	out	0x3f, r24	; 63
    4496:	08 95       	ret

00004498 <cdc_putstr>:
    4498:	cf 93       	push	r28
    449a:	df 93       	push	r29
    449c:	ec 01       	movw	r28, r24
    449e:	88 81       	ld	r24, Y
    44a0:	88 23       	and	r24, r24
    44a2:	49 f0       	breq	.+18     	; 0x44b6 <cdc_putstr+0x1e>
    44a4:	21 96       	adiw	r28, 0x01	; 1
    44a6:	99 27       	eor	r25, r25
    44a8:	87 fd       	sbrc	r24, 7
    44aa:	90 95       	com	r25
    44ac:	0e 94 fd 11 	call	0x23fa	; 0x23fa <udi_cdc_putc>
    44b0:	89 91       	ld	r24, Y+
    44b2:	81 11       	cpse	r24, r1
    44b4:	f8 cf       	rjmp	.-16     	; 0x44a6 <cdc_putstr+0xe>
    44b6:	df 91       	pop	r29
    44b8:	cf 91       	pop	r28
    44ba:	08 95       	ret

000044bc <adcb_ch0_get_raw_value>:
#define ADCB_CH0_MAX_SAMPLES 4

int16_t adcb_ch0_get_raw_value(void)
{
	return adc_sensor_sample;
}
    44bc:	80 91 56 2a 	lds	r24, 0x2A56
    44c0:	90 91 57 2a 	lds	r25, 0x2A57
    44c4:	08 95       	ret

000044c6 <temp_pol_rec>:

const double neg_temp_coeff[9] = {0, 2.5173462E1, -1.1662878E0, -1.0833638E0, -8.9773540E-1, -3.7342377E-1, -8.6632643E-2, -1.0450598E-2, -5.1920577E-4};
const double pos_temp_coeff[9] = {0, 2.508355E1, 7.860106E-2, -2.503131E-1, 8.315270E-2, -1.228034E-2, 9.804036E-4, -4.413030E-5, 1.057734E-6, -1.052755E-8};

double temp_pol_rec(double* coeff, double v, int n)
{	
    44c6:	8f 92       	push	r8
    44c8:	9f 92       	push	r9
    44ca:	af 92       	push	r10
    44cc:	bf 92       	push	r11
    44ce:	cf 92       	push	r12
    44d0:	df 92       	push	r13
    44d2:	ef 92       	push	r14
    44d4:	ff 92       	push	r15
    44d6:	0f 93       	push	r16
    44d8:	1f 93       	push	r17
    44da:	cf 93       	push	r28
    44dc:	df 93       	push	r29
    44de:	8c 01       	movw	r16, r24
    44e0:	6a 01       	movw	r12, r20
    44e2:	7b 01       	movw	r14, r22
    44e4:	e9 01       	movw	r28, r18
	int max_n = 9;
	double sum = 0;
	if (n < max_n)
    44e6:	29 30       	cpi	r18, 0x09	; 9
    44e8:	31 05       	cpc	r19, r1
    44ea:	64 f4       	brge	.+24     	; 0x4504 <temp_pol_rec+0x3e>
	{
		sum += temp_pol_rec(coeff, v, n + 1);
    44ec:	2f 5f       	subi	r18, 0xFF	; 255
    44ee:	3f 4f       	sbci	r19, 0xFF	; 255
    44f0:	ea df       	rcall	.-44     	; 0x44c6 <temp_pol_rec>
    44f2:	20 e0       	ldi	r18, 0x00	; 0
    44f4:	30 e0       	ldi	r19, 0x00	; 0
    44f6:	a9 01       	movw	r20, r18
    44f8:	19 d3       	rcall	.+1586   	; 0x4b2c <__addsf3>
    44fa:	86 2e       	mov	r8, r22
    44fc:	97 2e       	mov	r9, r23
    44fe:	a8 2e       	mov	r10, r24
    4500:	b9 2e       	mov	r11, r25
    4502:	04 c0       	rjmp	.+8      	; 0x450c <temp_pol_rec+0x46>
const double pos_temp_coeff[9] = {0, 2.508355E1, 7.860106E-2, -2.503131E-1, 8.315270E-2, -1.228034E-2, 9.804036E-4, -4.413030E-5, 1.057734E-6, -1.052755E-8};

double temp_pol_rec(double* coeff, double v, int n)
{	
	int max_n = 9;
	double sum = 0;
    4504:	81 2c       	mov	r8, r1
    4506:	91 2c       	mov	r9, r1
    4508:	a1 2c       	mov	r10, r1
    450a:	b1 2c       	mov	r11, r1
	if (n < max_n)
	{
		sum += temp_pol_rec(coeff, v, n + 1);
	}
	
	sum += coeff[n]*pow(v, n);
    450c:	be 01       	movw	r22, r28
    450e:	88 27       	eor	r24, r24
    4510:	77 fd       	sbrc	r23, 7
    4512:	80 95       	com	r24
    4514:	98 2f       	mov	r25, r24
    4516:	09 d4       	rcall	.+2066   	; 0x4d2a <__floatsisf>
    4518:	9b 01       	movw	r18, r22
    451a:	ac 01       	movw	r20, r24
    451c:	c7 01       	movw	r24, r14
    451e:	b6 01       	movw	r22, r12
    4520:	f7 d4       	rcall	.+2542   	; 0x4f10 <pow>
    4522:	cc 0f       	add	r28, r28
    4524:	dd 1f       	adc	r29, r29
    4526:	cc 0f       	add	r28, r28
    4528:	dd 1f       	adc	r29, r29
    452a:	c0 0f       	add	r28, r16
    452c:	d1 1f       	adc	r29, r17
    452e:	28 81       	ld	r18, Y
    4530:	39 81       	ldd	r19, Y+1	; 0x01
    4532:	4a 81       	ldd	r20, Y+2	; 0x02
    4534:	5b 81       	ldd	r21, Y+3	; 0x03
    4536:	89 d4       	rcall	.+2322   	; 0x4e4a <__mulsf3>
    4538:	28 2d       	mov	r18, r8
    453a:	39 2d       	mov	r19, r9
    453c:	4a 2d       	mov	r20, r10
    453e:	5b 2d       	mov	r21, r11
    4540:	f5 d2       	rcall	.+1514   	; 0x4b2c <__addsf3>
	
	return sum;
}	
    4542:	df 91       	pop	r29
    4544:	cf 91       	pop	r28
    4546:	1f 91       	pop	r17
    4548:	0f 91       	pop	r16
    454a:	ff 90       	pop	r15
    454c:	ef 90       	pop	r14
    454e:	df 90       	pop	r13
    4550:	cf 90       	pop	r12
    4552:	bf 90       	pop	r11
    4554:	af 90       	pop	r10
    4556:	9f 90       	pop	r9
    4558:	8f 90       	pop	r8
    455a:	08 95       	ret

0000455c <thermoel_to_temp>:
/************************************************************************/
/* This function converts a thermoelectric temperature to a temperature 
 * in the range -200C to +500C                                          */
/************************************************************************/
int16_t thermoel_to_temp(double v)
{
    455c:	cf 92       	push	r12
    455e:	df 92       	push	r13
    4560:	ef 92       	push	r14
    4562:	ff 92       	push	r15
    4564:	6b 01       	movw	r12, r22
    4566:	7c 01       	movw	r14, r24
	double* temp_coeff;
	
	if (v >= 0)
    4568:	20 e0       	ldi	r18, 0x00	; 0
    456a:	30 e0       	ldi	r19, 0x00	; 0
    456c:	a9 01       	movw	r20, r18
    456e:	69 d4       	rcall	.+2258   	; 0x4e42 <__gesf2>
    4570:	88 23       	and	r24, r24
    4572:	1c f0       	brlt	.+6      	; 0x457a <thermoel_to_temp+0x1e>
	{
		temp_coeff = &pos_temp_coeff;
    4574:	8e e5       	ldi	r24, 0x5E	; 94
    4576:	91 e2       	ldi	r25, 0x21	; 33
    4578:	02 c0       	rjmp	.+4      	; 0x457e <thermoel_to_temp+0x22>
	}
	else
	{
		temp_coeff = &neg_temp_coeff;
    457a:	82 e8       	ldi	r24, 0x82	; 130
    457c:	91 e2       	ldi	r25, 0x21	; 33
	}
	
	int16_t temp = (int16_t)temp_pol_rec(temp_coeff, v, 0);
    457e:	20 e0       	ldi	r18, 0x00	; 0
    4580:	30 e0       	ldi	r19, 0x00	; 0
    4582:	b7 01       	movw	r22, r14
    4584:	a6 01       	movw	r20, r12
    4586:	9f df       	rcall	.-194    	; 0x44c6 <temp_pol_rec>
    4588:	9d d3       	rcall	.+1850   	; 0x4cc4 <__fixsfsi>
	
	return temp;
}
    458a:	86 2f       	mov	r24, r22
    458c:	97 2f       	mov	r25, r23
    458e:	ff 90       	pop	r15
    4590:	ef 90       	pop	r14
    4592:	df 90       	pop	r13
    4594:	cf 90       	pop	r12
    4596:	08 95       	ret

00004598 <adcb_ch0_get_temperature>:
int16_t adcb_ch0_get_temperature(void)
{
	int delta_v = 0.1;
	int16_t top = 4095;	//12-bit max value
	double vref = 2.5;
	int16_t res = adcb_ch0_get_raw_value();
    4598:	91 df       	rcall	.-222    	; 0x44bc <adcb_ch0_get_raw_value>
	
	// Calculate vinp
	double vinp = ((double)res/(double)(top+1))*vref - delta_v;
    459a:	bc 01       	movw	r22, r24
    459c:	88 27       	eor	r24, r24
    459e:	77 fd       	sbrc	r23, 7
    45a0:	80 95       	com	r24
    45a2:	98 2f       	mov	r25, r24
    45a4:	c2 d3       	rcall	.+1924   	; 0x4d2a <__floatsisf>
    45a6:	20 e0       	ldi	r18, 0x00	; 0
    45a8:	30 e0       	ldi	r19, 0x00	; 0
    45aa:	40 e8       	ldi	r20, 0x80	; 128
    45ac:	59 e3       	ldi	r21, 0x39	; 57
    45ae:	4d d4       	rcall	.+2202   	; 0x4e4a <__mulsf3>
    45b0:	20 e0       	ldi	r18, 0x00	; 0
    45b2:	30 e0       	ldi	r19, 0x00	; 0
    45b4:	40 e2       	ldi	r20, 0x20	; 32
    45b6:	50 e4       	ldi	r21, 0x40	; 64
    45b8:	48 d4       	rcall	.+2192   	; 0x4e4a <__mulsf3>

	double off = 0.498;
	double gain = 227.2;
	
	double v_tc = (vinp - off)/gain;
    45ba:	2b ed       	ldi	r18, 0xDB	; 219
    45bc:	39 ef       	ldi	r19, 0xF9	; 249
    45be:	4e ef       	ldi	r20, 0xFE	; 254
    45c0:	5e e3       	ldi	r21, 0x3E	; 62
    45c2:	b3 d2       	rcall	.+1382   	; 0x4b2a <__subsf3>
    45c4:	23 e3       	ldi	r18, 0x33	; 51
    45c6:	33 e3       	ldi	r19, 0x33	; 51
    45c8:	43 e6       	ldi	r20, 0x63	; 99
    45ca:	53 e4       	ldi	r21, 0x43	; 67
    45cc:	13 d3       	rcall	.+1574   	; 0x4bf4 <__divsf3>
	
	int16_t t = thermoel_to_temp(v_tc);
	
	return (int16_t)t;	
}
    45ce:	c6 cf       	rjmp	.-116    	; 0x455c <thermoel_to_temp>

000045d0 <adcb_data_is_ready>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    45d0:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    45d2:	f8 94       	cli
	irqflags_t irqflags;
	/* We will need to save and turn of global interrupts to make sure that we
	read the latest adcb value and not the next one if a conversation finish
	before one have time read the data. */
	irqflags = cpu_irq_save();
	if (adc_sensor_data_ready) {
    45d4:	90 91 58 2a 	lds	r25, 0x2A58
    45d8:	99 23       	and	r25, r25
    45da:	29 f0       	breq	.+10     	; 0x45e6 <adcb_data_is_ready+0x16>
		adc_sensor_data_ready = false;
    45dc:	10 92 58 2a 	sts	0x2A58, r1
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    45e0:	8f bf       	out	0x3f, r24	; 63
		cpu_irq_restore(irqflags);
		return true;
    45e2:	81 e0       	ldi	r24, 0x01	; 1
    45e4:	08 95       	ret
    45e6:	8f bf       	out	0x3f, r24	; 63
	} else {
		cpu_irq_restore(irqflags);
		return false;
    45e8:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    45ea:	08 95       	ret

000045ec <temp_disp_init>:
/************************************************************************/
/*  Temperature display function. Applies to ADCA as well as this test  */
/************************************************************************/

void temp_disp_init()
{	
    45ec:	0f 93       	push	r16

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    45ee:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    45f0:	f8 94       	cli
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
    45f2:	e0 e4       	ldi	r30, 0x40	; 64
    45f4:	f2 e0       	ldi	r31, 0x02	; 2
    45f6:	90 81       	ld	r25, Z
    45f8:	94 60       	ori	r25, 0x04	; 4
    45fa:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    45fc:	8f bf       	out	0x3f, r24	; 63
	*/
	// Initiate a ADCB reading
	adcb_ch0_measure();
	
	// Struct for holding the temperature scale background
	tempscale.type = GFX_MONO_BITMAP_RAM;
    45fe:	10 92 8d 2a 	sts	0x2A8D, r1
	tempscale.width = 6;
    4602:	86 e0       	ldi	r24, 0x06	; 6
    4604:	80 93 8b 2a 	sts	0x2A8B, r24
	tempscale.height = 32;
    4608:	80 e2       	ldi	r24, 0x20	; 32
    460a:	80 93 8c 2a 	sts	0x2A8C, r24
	tempscale.data.pixmap = tempscale_img;
    460e:	82 ec       	ldi	r24, 0xC2	; 194
    4610:	90 e2       	ldi	r25, 0x20	; 32
    4612:	80 93 8e 2a 	sts	0x2A8E, r24
    4616:	90 93 8f 2a 	sts	0x2A8F, r25

	// Screen border
	gfx_mono_draw_rect(0, 0, 128, 32, GFX_PIXEL_SET);
    461a:	01 e0       	ldi	r16, 0x01	; 1
    461c:	20 e2       	ldi	r18, 0x20	; 32
    461e:	40 e8       	ldi	r20, 0x80	; 128
    4620:	60 e0       	ldi	r22, 0x00	; 0
    4622:	80 e0       	ldi	r24, 0x00	; 0
    4624:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <gfx_mono_generic_draw_rect>
	// Clear screen
	gfx_mono_draw_filled_rect(1, 1, 126, 30, GFX_PIXEL_CLR);
    4628:	00 e0       	ldi	r16, 0x00	; 0
    462a:	2e e1       	ldi	r18, 0x1E	; 30
    462c:	4e e7       	ldi	r20, 0x7E	; 126
    462e:	61 e0       	ldi	r22, 0x01	; 1
    4630:	81 e0       	ldi	r24, 0x01	; 1
    4632:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <gfx_mono_generic_draw_filled_rect>
	
	//Paint thermometer on screen
	gfx_mono_put_bitmap(&tempscale, 10, 0);
    4636:	40 e0       	ldi	r20, 0x00	; 0
    4638:	6a e0       	ldi	r22, 0x0A	; 10
    463a:	8b e8       	ldi	r24, 0x8B	; 139
    463c:	9a e2       	ldi	r25, 0x2A	; 42
    463e:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <gfx_mono_generic_put_bitmap>
	while (!ntc_data_is_ready());
	// Read the temperature once the ADC reading is done
	temperature = ntc_get_temperature();
	*/
	// Wait for ADCB date to ready
	while (!adcb_data_is_ready());
    4642:	c6 df       	rcall	.-116    	; 0x45d0 <adcb_data_is_ready>
    4644:	88 23       	and	r24, r24
    4646:	e9 f3       	breq	.-6      	; 0x4642 <temp_disp_init+0x56>
	temperature = adcb_ch0_get_temperature();//adcb_ch0_get_raw_value();
    4648:	a7 df       	rcall	.-178    	; 0x4598 <adcb_ch0_get_temperature>
    464a:	80 93 88 2a 	sts	0x2A88, r24
    464e:	90 93 89 2a 	sts	0x2A89, r25
	
	
	// Convert the temperature into the thermometer scale
	temp_scale = -0.36 * temperature + 20.25;
    4652:	bc 01       	movw	r22, r24
    4654:	88 27       	eor	r24, r24
    4656:	77 fd       	sbrc	r23, 7
    4658:	80 95       	com	r24
    465a:	98 2f       	mov	r25, r24
    465c:	66 d3       	rcall	.+1740   	; 0x4d2a <__floatsisf>
    465e:	2c ee       	ldi	r18, 0xEC	; 236
    4660:	31 e5       	ldi	r19, 0x51	; 81
    4662:	48 eb       	ldi	r20, 0xB8	; 184
    4664:	5e eb       	ldi	r21, 0xBE	; 190
    4666:	f1 d3       	rcall	.+2018   	; 0x4e4a <__mulsf3>
    4668:	20 e0       	ldi	r18, 0x00	; 0
    466a:	30 e0       	ldi	r19, 0x00	; 0
    466c:	42 ea       	ldi	r20, 0xA2	; 162
    466e:	51 e4       	ldi	r21, 0x41	; 65
    4670:	5d d2       	rcall	.+1210   	; 0x4b2c <__addsf3>
    4672:	2d d3       	rcall	.+1626   	; 0x4cce <__fixunssfsi>
    4674:	26 2f       	mov	r18, r22
    4676:	60 93 8a 2a 	sts	0x2A8A, r22
	if (temp_scale <= 0) {
		temp_scale = 0;
	}
	
	// Draw the scale element on top of the background temperature image
	gfx_mono_draw_filled_rect(12, 3, 2, temp_scale,
    467a:	00 e0       	ldi	r16, 0x00	; 0
    467c:	42 e0       	ldi	r20, 0x02	; 2
    467e:	63 e0       	ldi	r22, 0x03	; 3
    4680:	8c e0       	ldi	r24, 0x0C	; 12
    4682:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <gfx_mono_generic_draw_filled_rect>
	GFX_PIXEL_CLR);
	
	snprintf(temperature_string, sizeof(temperature_string), "%3i Celsius",
    4686:	80 91 89 2a 	lds	r24, 0x2A89
    468a:	8f 93       	push	r24
    468c:	80 91 88 2a 	lds	r24, 0x2A88
    4690:	8f 93       	push	r24
    4692:	88 e4       	ldi	r24, 0x48	; 72
    4694:	91 e2       	ldi	r25, 0x21	; 33
    4696:	9f 93       	push	r25
    4698:	8f 93       	push	r24
    469a:	1f 92       	push	r1
    469c:	8f e0       	ldi	r24, 0x0F	; 15
    469e:	8f 93       	push	r24
    46a0:	80 e9       	ldi	r24, 0x90	; 144
    46a2:	9a e2       	ldi	r25, 0x2A	; 42
    46a4:	9f 93       	push	r25
    46a6:	8f 93       	push	r24
    46a8:	a8 d7       	rcall	.+3920   	; 0x55fa <snprintf>
	temperature);

	// Draw the Celsius string
	gfx_mono_draw_string(temperature_string, 22, 13, &sysfont);
    46aa:	27 e0       	ldi	r18, 0x07	; 7
    46ac:	30 e2       	ldi	r19, 0x20	; 32
    46ae:	4d e0       	ldi	r20, 0x0D	; 13
    46b0:	66 e1       	ldi	r22, 0x16	; 22
    46b2:	80 e9       	ldi	r24, 0x90	; 144
    46b4:	9a e2       	ldi	r25, 0x2A	; 42
    46b6:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <gfx_mono_draw_string>
    46ba:	8d b7       	in	r24, 0x3d	; 61
    46bc:	9e b7       	in	r25, 0x3e	; 62
    46be:	08 96       	adiw	r24, 0x08	; 8
    46c0:	8d bf       	out	0x3d, r24	; 61
    46c2:	9e bf       	out	0x3e, r25	; 62
}
    46c4:	0f 91       	pop	r16
    46c6:	08 95       	ret

000046c8 <adc_b_sensors_init>:
/* Initializes the adc_b for reading external sensors.
   Should be moved to own file with headers etc. when completed and tested
                                                                        */
/************************************************************************/
void adc_b_sensors_init()
{
    46c8:	cf 93       	push	r28
    46ca:	df 93       	push	r29
    46cc:	cd b7       	in	r28, 0x3d	; 61
    46ce:	de b7       	in	r29, 0x3e	; 62
    46d0:	2b 97       	sbiw	r28, 0x0b	; 11
    46d2:	cd bf       	out	0x3d, r28	; 61
    46d4:	de bf       	out	0x3e, r29	; 62
	struct adc_config adc_conf;
	struct adc_channel_config adc_ch_conf;

	/* Clear the ADC configuration structs */
	adc_read_configuration(&ADCB, &adc_conf);
    46d6:	be 01       	movw	r22, r28
    46d8:	6f 5f       	subi	r22, 0xFF	; 255
    46da:	7f 4f       	sbci	r23, 0xFF	; 255
    46dc:	80 e4       	ldi	r24, 0x40	; 64
    46de:	92 e0       	ldi	r25, 0x02	; 2
    46e0:	0e 94 74 18 	call	0x30e8	; 0x30e8 <adc_read_configuration>
	adcch_read_configuration(&ADCB, ADC_CH0, &adc_ch_conf);
    46e4:	ae 01       	movw	r20, r28
    46e6:	48 5f       	subi	r20, 0xF8	; 248
    46e8:	5f 4f       	sbci	r21, 0xFF	; 255
    46ea:	61 e0       	ldi	r22, 0x01	; 1
    46ec:	80 e4       	ldi	r24, 0x40	; 64
    46ee:	92 e0       	ldi	r25, 0x02	; 2
    46f0:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <adcch_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    46f4:	8a 81       	ldd	r24, Y+2	; 0x02
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    46f6:	9b 81       	ldd	r25, Y+3	; 0x03
    46f8:	9f 78       	andi	r25, 0x8F	; 143
	conf->refctrl |= ref;
    46fa:	90 63       	ori	r25, 0x30	; 48
    46fc:	9b 83       	std	Y+3, r25	; 0x03
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    46fe:	96 e0       	ldi	r25, 0x06	; 6
    4700:	9d 83       	std	Y+5, r25	; 0x05
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    4702:	81 7e       	andi	r24, 0xE1	; 225
    4704:	8a 83       	std	Y+2, r24	; 0x02
		conf->evctrl = ADC_EVACT_NONE_gc;
    4706:	1c 82       	std	Y+4, r1	; 0x04
	*/
	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_OFF, ADC_RES_12,
			ADC_REF_AREFB);	// Reference voltage might have to be set to ..._AREFB_gc instead
	adc_set_clock_rate(&adc_conf, 125000UL);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 0, 0);
	adc_write_configuration(&ADCB, &adc_conf);
    4708:	be 01       	movw	r22, r28
    470a:	6f 5f       	subi	r22, 0xFF	; 255
    470c:	7f 4f       	sbci	r23, 0xFF	; 255
    470e:	80 e4       	ldi	r24, 0x40	; 64
    4710:	92 e0       	ldi	r25, 0x02	; 2
    4712:	0e 94 23 18 	call	0x3046	; 0x3046 <adc_write_configuration>
	adc_set_callback(&ADCB, &adcb_handler);
    4716:	6d e1       	ldi	r22, 0x1D	; 29
    4718:	72 e2       	ldi	r23, 0x22	; 34
    471a:	80 e4       	ldi	r24, 0x40	; 64
    471c:	92 e0       	ldi	r25, 0x02	; 2
    471e:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <adc_set_callback>

	/* Configure for single-ended measurement. */
	if (neg == ADCCH_NEG_NONE) {
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    4722:	81 e0       	ldi	r24, 0x01	; 1
    4724:	88 87       	std	Y+8, r24	; 0x08
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    4726:	88 e0       	ldi	r24, 0x08	; 8
    4728:	89 87       	std	Y+9, r24	; 0x09
 *
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_enable_interrupt(struct adc_channel_config *ch_conf)
{
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
    472a:	8a 85       	ldd	r24, Y+10	; 0x0a
    472c:	80 7f       	andi	r24, 0xF0	; 240
	ch_conf->intctrl |= CONFIG_ADC_INTLVL;
    472e:	81 60       	ori	r24, 0x01	; 1
    4730:	8a 87       	std	Y+10, r24	; 0x0a
	 * - interrupts enabled
	 */
	adcch_set_input(&adc_ch_conf, ADCCH_POS_PIN1, ADCCH_NEG_NONE, 1);
	adcch_set_interrupt_mode(&adc_ch_conf, ADCCH_MODE_COMPLETE);
	adcch_enable_interrupt(&adc_ch_conf);
	adcch_write_configuration(&ADCB, ADC_CH0, &adc_ch_conf);
    4732:	ae 01       	movw	r20, r28
    4734:	48 5f       	subi	r20, 0xF8	; 248
    4736:	5f 4f       	sbci	r21, 0xFF	; 255
    4738:	61 e0       	ldi	r22, 0x01	; 1
    473a:	80 e4       	ldi	r24, 0x40	; 64
    473c:	92 e0       	ldi	r25, 0x02	; 2
    473e:	0e 94 97 18 	call	0x312e	; 0x312e <adcch_write_configuration>
	
	// Enable ADC
	adc_enable(&ADCB);
    4742:	80 e4       	ldi	r24, 0x40	; 64
    4744:	92 e0       	ldi	r25, 0x02	; 2
    4746:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <adc_enable>
}
    474a:	2b 96       	adiw	r28, 0x0b	; 11
    474c:	cd bf       	out	0x3d, r28	; 61
    474e:	de bf       	out	0x3e, r29	; 62
    4750:	df 91       	pop	r29
    4752:	cf 91       	pop	r28
    4754:	08 95       	ret

00004756 <main>:
 * set timezone from EEPROM if it is set. If it is not set it will open the
 * timezone selector to select the local timezone. It then runs the menu system
 * in an infinite while loop.
 */
int main(void)
{
    4756:	cf 93       	push	r28
    4758:	df 93       	push	r29
    475a:	1f 92       	push	r1
    475c:	1f 92       	push	r1
    475e:	cd b7       	in	r28, 0x3d	; 61
    4760:	de b7       	in	r29, 0x3e	; 62
	uint8_t menu_status;
	struct keyboard_event input;
	uint32_t rtc_timestamp;

	sysclk_init();
    4762:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <sysclk_init>
	board_init();
    4766:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <board_init>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    476a:	87 e0       	ldi	r24, 0x07	; 7
    476c:	e0 ea       	ldi	r30, 0xA0	; 160
    476e:	f0 e0       	ldi	r31, 0x00	; 0
    4770:	82 83       	std	Z+2, r24	; 0x02
	pmic_init();
	gfx_mono_init();
    4772:	0e 94 27 0c 	call	0x184e	; 0x184e <gfx_mono_st7565r_init>
	touch_init();
    4776:	3a d1       	rcall	.+628    	; 0x49ec <touch_init>
	//adc_sensors_init();
	
	//TODO: Evaluate initialization
	adc_b_sensors_init();	//Initialize ADCB
    4778:	a7 df       	rcall	.-178    	; 0x46c8 <adc_b_sensors_init>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    477a:	80 e1       	ldi	r24, 0x10	; 16
    477c:	e0 e8       	ldi	r30, 0x80	; 128
    477e:	f6 e0       	ldi	r31, 0x06	; 6
    4780:	85 83       	std	Z+5, r24	; 0x05

	// Enable display backlight
	gpio_set_pin_high(NHD_C12832A1Z_BACKLIGHT);

	// Workaround for known issue: Enable RTC32 sysclk
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    4782:	64 e0       	ldi	r22, 0x04	; 4
    4784:	80 e0       	ldi	r24, 0x00	; 0
    4786:	0e 94 c7 0a 	call	0x158e	; 0x158e <sysclk_enable_module>
	while (RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm) {
    478a:	e0 e2       	ldi	r30, 0x20	; 32
    478c:	f4 e0       	ldi	r31, 0x04	; 4
    478e:	81 81       	ldd	r24, Z+1	; 0x01
    4790:	80 fd       	sbrc	r24, 0
    4792:	fd cf       	rjmp	.-6      	; 0x478e <main+0x38>
		// Wait for RTC32 sysclk to become stable
	}

	// If we have battery power and RTC is running, don't initialize RTC32
	if (rtc_vbat_system_check(false) != VBAT_STATUS_OK) {
    4794:	80 e0       	ldi	r24, 0x00	; 0
    4796:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <rtc_vbat_system_check>
    479a:	88 23       	and	r24, r24
    479c:	49 f0       	breq	.+18     	; 0x47b0 <main+0x5a>
		rtc_init();
    479e:	0e 94 7f 19 	call	0x32fe	; 0x32fe <rtc_init>

		// Set current time to after production date
		rtc_timestamp = production_date_get_timestamp() + 1;
    47a2:	c5 d0       	rcall	.+394    	; 0x492e <production_date_get_timestamp>
    47a4:	6f 5f       	subi	r22, 0xFF	; 255
    47a6:	7f 4f       	sbci	r23, 0xFF	; 255
    47a8:	8f 4f       	sbci	r24, 0xFF	; 255
    47aa:	9f 4f       	sbci	r25, 0xFF	; 255
		rtc_set_time(rtc_timestamp);
    47ac:	0e 94 34 19 	call	0x3268	; 0x3268 <rtc_set_time>
	}

	// Get current time
	rtc_timestamp = rtc_get_time();
    47b0:	0e 94 44 19 	call	0x3288	; 0x3288 <rtc_get_time>
	// Make sure RTC has not been set to a too early date .
	if (rtc_timestamp < FIRST_POSSIBLE_TIMESTAMP) {
    47b4:	60 38       	cpi	r22, 0x80	; 128
    47b6:	7e 46       	sbci	r23, 0x6E	; 110
    47b8:	8e 41       	sbci	r24, 0x1E	; 30
    47ba:	9d 44       	sbci	r25, 0x4D	; 77
    47bc:	30 f4       	brcc	.+12     	; 0x47ca <main+0x74>
		// Set time to 01.01.2011 00:00:00
		rtc_set_time(FIRST_POSSIBLE_TIMESTAMP);
    47be:	60 e8       	ldi	r22, 0x80	; 128
    47c0:	7e e6       	ldi	r23, 0x6E	; 110
    47c2:	8e e1       	ldi	r24, 0x1E	; 30
    47c4:	9d e4       	ldi	r25, 0x4D	; 77
    47c6:	0e 94 34 19 	call	0x3268	; 0x3268 <rtc_set_time>
	}

	// Initialize USB CDC class
	cdc_start();
    47ca:	28 dd       	rcall	.-1456   	; 0x421c <cdc_start>

	cpu_irq_enable();
    47cc:	78 94       	sei

	// Display a splash screen showing button functions
	//button_splash();

	// Set timezone from EEPROM or to a default value
	timezone_init();
    47ce:	7e d1       	rcall	.+764    	; 0x4acc <timezone_init>
	
	
	// ADDED: Initializing temperature display 
	temp_disp_init();
    47d0:	0d df       	rcall	.-486    	; 0x45ec <temp_disp_init>
	}
}

static void cdc_putuint32(uint32_t value) {
	char* buffer = (char*)calloc(10,sizeof(char));
	sprintf(buffer,"%u", value);
    47d2:	0f 2e       	mov	r0, r31
    47d4:	fb e5       	ldi	r31, 0x5B	; 91
    47d6:	8f 2e       	mov	r8, r31
    47d8:	f1 e2       	ldi	r31, 0x21	; 33
    47da:	9f 2e       	mov	r9, r31
    47dc:	f0 2d       	mov	r31, r0
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
    47de:	68 94       	set
    47e0:	ee 24       	eor	r14, r14
    47e2:	e6 f8       	bld	r14, 6
    47e4:	ff 24       	eor	r15, r15
    47e6:	f1 f8       	bld	r15, 1
				
				// Draw the scale element on top of the background temperature image
				gfx_mono_draw_filled_rect(12, 3, 2, temp_scale,
				GFX_PIXEL_CLR);
				
				snprintf(temperature_string, sizeof(temperature_string), "%3i Celsius",
    47e8:	0f 2e       	mov	r0, r31
    47ea:	f8 e4       	ldi	r31, 0x48	; 72
    47ec:	af 2e       	mov	r10, r31
    47ee:	f1 e2       	ldi	r31, 0x21	; 33
    47f0:	bf 2e       	mov	r11, r31
    47f2:	f0 2d       	mov	r31, r0
    47f4:	1f e0       	ldi	r17, 0x0F	; 15
    47f6:	0f 2e       	mov	r0, r31
    47f8:	f0 e9       	ldi	r31, 0x90	; 144
    47fa:	cf 2e       	mov	r12, r31
    47fc:	fa e2       	ldi	r31, 0x2A	; 42
    47fe:	df 2e       	mov	r13, r31
    4800:	f0 2d       	mov	r31, r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4802:	8f e7       	ldi	r24, 0x7F	; 127
    4804:	94 e8       	ldi	r25, 0x84	; 132
    4806:	ee e1       	ldi	r30, 0x1E	; 30
    4808:	81 50       	subi	r24, 0x01	; 1
    480a:	90 40       	sbci	r25, 0x00	; 0
    480c:	e0 40       	sbci	r30, 0x00	; 0
    480e:	e1 f7       	brne	.-8      	; 0x4808 <main+0xb2>
    4810:	00 c0       	rjmp	.+0      	; 0x4812 <main+0xbc>
    4812:	00 00       	nop

		do {			
			do {
				//START TEMP PRINT
				_delay_ms(10000);	//NOTE: ms actually means microseconds in this case
				rtc_timestamp = rtc_get_time();
    4814:	0e 94 44 19 	call	0x3288	; 0x3288 <rtc_get_time>
    4818:	06 2f       	mov	r16, r22
    481a:	57 2e       	mov	r5, r23
    481c:	48 2e       	mov	r4, r24
    481e:	39 2e       	mov	r3, r25
				{
					//TEST: Print temperature to udi_cdc
					
					//ID
					char * logid = "NTC_OC";
					cdc_putstr(logid);	//Identify sample as on-chip NTC temp.
    4820:	84 e5       	ldi	r24, 0x54	; 84
    4822:	91 e2       	ldi	r25, 0x21	; 33
    4824:	39 de       	rcall	.-910    	; 0x4498 <cdc_putstr>
					
					//Data separator character
					udi_cdc_putc(',');
    4826:	8c e2       	ldi	r24, 0x2C	; 44
    4828:	90 e0       	ldi	r25, 0x00	; 0
    482a:	0e 94 fd 11 	call	0x23fa	; 0x23fa <udi_cdc_putc>
		i++;
	}
}

static void cdc_putuint32(uint32_t value) {
	char* buffer = (char*)calloc(10,sizeof(char));
    482e:	61 e0       	ldi	r22, 0x01	; 1
    4830:	70 e0       	ldi	r23, 0x00	; 0
    4832:	8a e0       	ldi	r24, 0x0A	; 10
    4834:	90 e0       	ldi	r25, 0x00	; 0
    4836:	5c d5       	rcall	.+2744   	; 0x52f0 <calloc>
    4838:	68 2e       	mov	r6, r24
    483a:	79 2e       	mov	r7, r25
	sprintf(buffer,"%u", value);
    483c:	3f 92       	push	r3
    483e:	4f 92       	push	r4
    4840:	5f 92       	push	r5
    4842:	0f 93       	push	r16
    4844:	9f 92       	push	r9
    4846:	8f 92       	push	r8
    4848:	9f 93       	push	r25
    484a:	8f 93       	push	r24
    484c:	0c d7       	rcall	.+3608   	; 0x5666 <sprintf>
	cdc_putstr(buffer);
    484e:	86 2d       	mov	r24, r6
    4850:	97 2d       	mov	r25, r7
    4852:	22 de       	rcall	.-956    	; 0x4498 <cdc_putstr>
	free(buffer);
    4854:	86 2d       	mov	r24, r6
    4856:	97 2d       	mov	r25, r7
    4858:	02 d6       	rcall	.+3076   	; 0x545e <free>
					
					//Timestamp
					cdc_putuint32(rtc_timestamp);
					
					//Data separator character
					udi_cdc_putc(',');
    485a:	8c e2       	ldi	r24, 0x2C	; 44
    485c:	90 e0       	ldi	r25, 0x00	; 0
    485e:	0e 94 fd 11 	call	0x23fa	; 0x23fa <udi_cdc_putc>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    4862:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    4864:	f8 94       	cli
    4866:	f7 01       	movw	r30, r14
    4868:	90 81       	ld	r25, Z
    486a:	94 60       	ori	r25, 0x04	; 4
    486c:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    486e:	8f bf       	out	0x3f, r24	; 63
    4870:	cd bf       	out	0x3d, r28	; 61
    4872:	de bf       	out	0x3e, r29	; 62
					//Temperature
					//ntc_measure();
					// Testing
					adcb_ch0_measure();
					//int8_t temp = ntc_get_temperature();
					while (!adcb_data_is_ready());
    4874:	ad de       	rcall	.-678    	; 0x45d0 <adcb_data_is_ready>
    4876:	88 23       	and	r24, r24
    4878:	e9 f3       	breq	.-6      	; 0x4874 <main+0x11e>
					int16_t temp = adcb_ch0_get_temperature();
    487a:	8e de       	rcall	.-740    	; 0x4598 <adcb_ch0_get_temperature>
	return char_int;	
}

static char * cdc_putint16(int16_t intval) {
	char * char_int;
	itoa(intval, char_int, 10);
    487c:	4a e0       	ldi	r20, 0x0A	; 10
    487e:	50 e0       	ldi	r21, 0x00	; 0
    4880:	61 2c       	mov	r6, r1
    4882:	71 2c       	mov	r7, r1
    4884:	b3 01       	movw	r22, r6
    4886:	9a d6       	rcall	.+3380   	; 0x55bc <itoa>
					adcb_ch0_measure();
					//int8_t temp = ntc_get_temperature();
					while (!adcb_data_is_ready());
					int16_t temp = adcb_ch0_get_temperature();
					char * temp_s = cdc_putint16(temp);
					cdc_putstr(temp_s);	//temperature in string form
    4888:	c3 01       	movw	r24, r6
    488a:	06 de       	rcall	.-1012   	; 0x4498 <cdc_putstr>
					udi_cdc_putc('\r');	//return
    488c:	8d e0       	ldi	r24, 0x0D	; 13
    488e:	90 e0       	ldi	r25, 0x00	; 0
    4890:	0e 94 fd 11 	call	0x23fa	; 0x23fa <udi_cdc_putc>
					udi_cdc_putc('\n');	//newline
    4894:	8a e0       	ldi	r24, 0x0A	; 10
    4896:	90 e0       	ldi	r25, 0x00	; 0
    4898:	0e 94 fd 11 	call	0x23fa	; 0x23fa <udi_cdc_putc>
				//END TEMP PRINT
				
				//START Drawing Temperature:
				
				//Paint thermometer on screen
				gfx_mono_put_bitmap(&tempscale, 10, 0);
    489c:	40 e0       	ldi	r20, 0x00	; 0
    489e:	6a e0       	ldi	r22, 0x0A	; 10
    48a0:	8b e8       	ldi	r24, 0x8B	; 139
    48a2:	9a e2       	ldi	r25, 0x2A	; 42
    48a4:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <gfx_mono_generic_put_bitmap>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    48a8:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    48aa:	f8 94       	cli
    48ac:	f7 01       	movw	r30, r14
    48ae:	90 81       	ld	r25, Z
    48b0:	94 60       	ori	r25, 0x04	; 4
    48b2:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    48b4:	8f bf       	out	0x3f, r24	; 63
				// Read the temperature once the ADC reading is done
				temperature = ntc_get_temperature();
				*/
				// ADCB-Testing
				adcb_ch0_measure();
				while (!adcb_data_is_ready());
    48b6:	8c de       	rcall	.-744    	; 0x45d0 <adcb_data_is_ready>
    48b8:	88 23       	and	r24, r24
    48ba:	e9 f3       	breq	.-6      	; 0x48b6 <main+0x160>
				int16_t temp = adcb_ch0_get_temperature();
    48bc:	6d de       	rcall	.-806    	; 0x4598 <adcb_ch0_get_temperature>
				
				temperature = temp;
    48be:	80 93 88 2a 	sts	0x2A88, r24
    48c2:	90 93 89 2a 	sts	0x2A89, r25
				// Convert the temperature into the thermometer scale
				temp_scale = -0.36 * temperature + 20.25;
    48c6:	bc 01       	movw	r22, r24
    48c8:	88 27       	eor	r24, r24
    48ca:	77 fd       	sbrc	r23, 7
    48cc:	80 95       	com	r24
    48ce:	98 2f       	mov	r25, r24
    48d0:	2c d2       	rcall	.+1112   	; 0x4d2a <__floatsisf>
    48d2:	2c ee       	ldi	r18, 0xEC	; 236
    48d4:	31 e5       	ldi	r19, 0x51	; 81
    48d6:	48 eb       	ldi	r20, 0xB8	; 184
    48d8:	5e eb       	ldi	r21, 0xBE	; 190
    48da:	b7 d2       	rcall	.+1390   	; 0x4e4a <__mulsf3>
    48dc:	20 e0       	ldi	r18, 0x00	; 0
    48de:	30 e0       	ldi	r19, 0x00	; 0
    48e0:	42 ea       	ldi	r20, 0xA2	; 162
    48e2:	51 e4       	ldi	r21, 0x41	; 65
    48e4:	23 d1       	rcall	.+582    	; 0x4b2c <__addsf3>
    48e6:	f3 d1       	rcall	.+998    	; 0x4cce <__fixunssfsi>
    48e8:	26 2f       	mov	r18, r22
    48ea:	60 93 8a 2a 	sts	0x2A8A, r22
				if (temp_scale <= 0) {
					temp_scale = 0;
				}
				
				// Draw the scale element on top of the background temperature image
				gfx_mono_draw_filled_rect(12, 3, 2, temp_scale,
    48ee:	00 e0       	ldi	r16, 0x00	; 0
    48f0:	42 e0       	ldi	r20, 0x02	; 2
    48f2:	63 e0       	ldi	r22, 0x03	; 3
    48f4:	8c e0       	ldi	r24, 0x0C	; 12
    48f6:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <gfx_mono_generic_draw_filled_rect>
				GFX_PIXEL_CLR);
				
				snprintf(temperature_string, sizeof(temperature_string), "%3i Celsius",
    48fa:	80 91 89 2a 	lds	r24, 0x2A89
    48fe:	8f 93       	push	r24
    4900:	80 91 88 2a 	lds	r24, 0x2A88
    4904:	8f 93       	push	r24
    4906:	bf 92       	push	r11
    4908:	af 92       	push	r10
    490a:	1f 92       	push	r1
    490c:	1f 93       	push	r17
    490e:	df 92       	push	r13
    4910:	cf 92       	push	r12
    4912:	73 d6       	rcall	.+3302   	; 0x55fa <snprintf>
				temperature);

				// Draw the Celsius string
				gfx_mono_draw_string(temperature_string, 22, 13, &sysfont);
    4914:	27 e0       	ldi	r18, 0x07	; 7
    4916:	30 e2       	ldi	r19, 0x20	; 32
    4918:	4d e0       	ldi	r20, 0x0D	; 13
    491a:	66 e1       	ldi	r22, 0x16	; 22
    491c:	c6 01       	movw	r24, r12
    491e:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <gfx_mono_draw_string>
				//END Draw temperature
				
				keyboard_get_key_state(&input);
    4922:	ce 01       	movw	r24, r28
    4924:	01 96       	adiw	r24, 0x01	; 1
    4926:	f6 dc       	rcall	.-1556   	; 0x4314 <keyboard_get_key_state>
    4928:	cd bf       	out	0x3d, r28	; 61
    492a:	de bf       	out	0x3e, r29	; 62
    492c:	6a cf       	rjmp	.-300    	; 0x4802 <main+0xac>

0000492e <production_date_get_timestamp>:
 * UNIX time format.
 *
 * \return Production date timestamp
 */
uint32_t production_date_get_timestamp(void)
{
    492e:	0f 93       	push	r16
    4930:	1f 93       	push	r17
    4932:	cf 93       	push	r28
    4934:	df 93       	push	r29
    4936:	60 e1       	ldi	r22, 0x10	; 16
    4938:	70 e0       	ldi	r23, 0x00	; 0
    493a:	81 e0       	ldi	r24, 0x01	; 1
    493c:	0e 94 2a 19 	call	0x3254	; 0x3254 <nvm_read_byte>
    4940:	d8 2f       	mov	r29, r24
    4942:	61 e1       	ldi	r22, 0x11	; 17
    4944:	70 e0       	ldi	r23, 0x00	; 0
    4946:	81 e0       	ldi	r24, 0x01	; 1
    4948:	0e 94 2a 19 	call	0x3254	; 0x3254 <nvm_read_byte>
    494c:	08 2f       	mov	r16, r24
    494e:	62 e1       	ldi	r22, 0x12	; 18
    4950:	70 e0       	ldi	r23, 0x00	; 0
    4952:	81 e0       	ldi	r24, 0x01	; 1
    4954:	0e 94 2a 19 	call	0x3254	; 0x3254 <nvm_read_byte>
    4958:	c8 2f       	mov	r28, r24
    495a:	63 e1       	ldi	r22, 0x13	; 19
    495c:	70 e0       	ldi	r23, 0x00	; 0
    495e:	81 e0       	ldi	r24, 0x01	; 1
    4960:	0e 94 2a 19 	call	0x3254	; 0x3254 <nvm_read_byte>
	// Read timestamp from signature
	uint32_t production_date_timestamp =                             \
		(uint32_t) nvm_read_user_signature_row(                      \
				PRODUCTION_DATE_ADDRESS)          << 24 |            \
		(uint32_t) nvm_read_user_signature_row(                      \
    4964:	10 e0       	ldi	r17, 0x00	; 0
    4966:	20 e0       	ldi	r18, 0x00	; 0
    4968:	30 e0       	ldi	r19, 0x00	; 0
				PRODUCTION_DATE_ADDRESS + 1)      << 16 |            \
    496a:	98 01       	movw	r18, r16
    496c:	11 27       	eor	r17, r17
    496e:	00 27       	eor	r16, r16
uint32_t production_date_get_timestamp(void)
{
	// Read timestamp from signature
	uint32_t production_date_timestamp =                             \
		(uint32_t) nvm_read_user_signature_row(                      \
				PRODUCTION_DATE_ADDRESS)          << 24 |            \
    4970:	3d 2b       	or	r19, r29
		(uint32_t) nvm_read_user_signature_row(                      \
				PRODUCTION_DATE_ADDRESS + 1)      << 16 |            \
    4972:	08 2b       	or	r16, r24
 * \return Production date timestamp
 */
uint32_t production_date_get_timestamp(void)
{
	// Read timestamp from signature
	uint32_t production_date_timestamp =                             \
    4974:	1c 2b       	or	r17, r28
				PRODUCTION_DATE_ADDRESS + 2)      <<  8 |            \
		(uint32_t) nvm_read_user_signature_row(                      \
				PRODUCTION_DATE_ADDRESS + 3);

	// Check if timestamp is invalid
	if ((production_date_timestamp == 0xFFFFFFFF) ||
    4976:	d9 01       	movw	r26, r18
    4978:	c8 01       	movw	r24, r16
    497a:	80 58       	subi	r24, 0x80	; 128
    497c:	9e 46       	sbci	r25, 0x6E	; 110
    497e:	ae 41       	sbci	r26, 0x1E	; 30
    4980:	bd 44       	sbci	r27, 0x4D	; 77
    4982:	8f 37       	cpi	r24, 0x7F	; 127
    4984:	91 49       	sbci	r25, 0x91	; 145
    4986:	a1 4e       	sbci	r26, 0xE1	; 225
    4988:	b2 4b       	sbci	r27, 0xB2	; 178
    498a:	20 f0       	brcs	.+8      	; 0x4994 <production_date_get_timestamp+0x66>
			(production_date_timestamp < FIRST_POSSIBLE_TIMESTAMP)) {
		production_date_timestamp = FIRST_POSSIBLE_TIMESTAMP;
    498c:	00 e8       	ldi	r16, 0x80	; 128
    498e:	1e e6       	ldi	r17, 0x6E	; 110
    4990:	2e e1       	ldi	r18, 0x1E	; 30
    4992:	3d e4       	ldi	r19, 0x4D	; 77
	}

	return production_date_timestamp;
}
    4994:	60 2f       	mov	r22, r16
    4996:	71 2f       	mov	r23, r17
    4998:	82 2f       	mov	r24, r18
    499a:	93 2f       	mov	r25, r19
    499c:	df 91       	pop	r29
    499e:	cf 91       	pop	r28
    49a0:	1f 91       	pop	r17
    49a2:	0f 91       	pop	r16
    49a4:	08 95       	ret

000049a6 <__vector_22>:
	/*  Set Compare A interrupt to low level   */
	TCC1.INTCTRLB = 1;
}

ISR(TCC1_CCA_vect)
{
    49a6:	1f 92       	push	r1
    49a8:	0f 92       	push	r0
    49aa:	0f b6       	in	r0, 0x3f	; 63
    49ac:	0f 92       	push	r0
    49ae:	11 24       	eor	r1, r1
    49b0:	2f 93       	push	r18
    49b2:	3f 93       	push	r19
    49b4:	8f 93       	push	r24
    49b6:	9f 93       	push	r25
    time_to_measure_touch = true;
    49b8:	81 e0       	ldi	r24, 0x01	; 1
    49ba:	80 93 5c 2a 	sts	0x2A5C, r24
    current_time_ms_touch += qt_measurement_period_msec;
    49be:	20 91 5a 2a 	lds	r18, 0x2A5A
    49c2:	30 91 5b 2a 	lds	r19, 0x2A5B
    49c6:	80 91 da 20 	lds	r24, 0x20DA
    49ca:	90 91 db 20 	lds	r25, 0x20DB
    49ce:	82 0f       	add	r24, r18
    49d0:	93 1f       	adc	r25, r19
    49d2:	80 93 5a 2a 	sts	0x2A5A, r24
    49d6:	90 93 5b 2a 	sts	0x2A5B, r25
}
    49da:	9f 91       	pop	r25
    49dc:	8f 91       	pop	r24
    49de:	3f 91       	pop	r19
    49e0:	2f 91       	pop	r18
    49e2:	0f 90       	pop	r0
    49e4:	0f be       	out	0x3f, r0	; 63
    49e6:	0f 90       	pop	r0
    49e8:	1f 90       	pop	r1
    49ea:	18 95       	reti

000049ec <touch_init>:
 */
void touch_init(void)
{

#ifdef QTOUCH_STUDIO_MASKS
	SNS_array[0][0]= 0x40;
    49ec:	80 e4       	ldi	r24, 0x40	; 64
    49ee:	80 93 ea 21 	sts	0x21EA, r24
	SNS_array[0][1]= 0x0;
    49f2:	10 92 eb 21 	sts	0x21EB, r1
	SNS_array[1][0]= 0x0;
    49f6:	10 92 ec 21 	sts	0x21EC, r1
	SNS_array[1][1]= 0x0;
    49fa:	10 92 ed 21 	sts	0x21ED, r1

	SNSK_array[0][0]= 0x80;
    49fe:	80 e8       	ldi	r24, 0x80	; 128
    4a00:	80 93 ee 21 	sts	0x21EE, r24
	SNSK_array[0][1]= 0x0;
    4a04:	10 92 ef 21 	sts	0x21EF, r1
	SNSK_array[1][0]= 0x0;
    4a08:	10 92 f0 21 	sts	0x21F0, r1
	SNSK_array[1][1]= 0x0;
    4a0c:	10 92 f1 21 	sts	0x21F1, r1
	 * When using "pin configurability" this will result in channel 0
	 * because it is the first and only channel that is used.
	 * For the standard qtouch library setup we would need to use
	 * channel 3 since we are using the last two pins on the port.
	 */
	 qt_enable_key(CHANNEL_0, NO_AKS_GROUP, 10, HYST_6_25);
    4a10:	23 e0       	ldi	r18, 0x03	; 3
    4a12:	4a e0       	ldi	r20, 0x0A	; 10
    4a14:	60 e0       	ldi	r22, 0x00	; 0
    4a16:	80 e0       	ldi	r24, 0x00	; 0
    4a18:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <qt_enable_key>
	SNSK_array[1][0]= 0x0;
	SNSK_array[1][1]= 0x0;
#endif

	config_sensor();
	qt_init_sensing();
    4a1c:	60 e0       	ldi	r22, 0x00	; 0
    4a1e:	70 e0       	ldi	r23, 0x00	; 0
    4a20:	88 e9       	ldi	r24, 0x98	; 152
    4a22:	93 e0       	ldi	r25, 0x03	; 3
    4a24:	0e 94 8c 05 	call	0xb18	; 0xb18 <qt_init_sensing_with_burst>

/** \brief Passes default parameters from config file to touch library
 */
static void qt_set_parameters( void )
{
    qt_config_data.qt_di              = DEF_QT_DI;
    4a28:	84 e0       	ldi	r24, 0x04	; 4
    4a2a:	80 93 ad 21 	sts	0x21AD, r24
    qt_config_data.qt_neg_drift_rate  = DEF_QT_NEG_DRIFT_RATE;
    4a2e:	84 e1       	ldi	r24, 0x14	; 20
    4a30:	80 93 b0 21 	sts	0x21B0, r24
    qt_config_data.qt_pos_drift_rate  = DEF_QT_POS_DRIFT_RATE;
    4a34:	95 e0       	ldi	r25, 0x05	; 5
    4a36:	90 93 b1 21 	sts	0x21B1, r25
    qt_config_data.qt_max_on_duration = DEF_QT_MAX_ON_DURATION;
    4a3a:	10 92 af 21 	sts	0x21AF, r1
    qt_config_data.qt_drift_hold_time = DEF_QT_DRIFT_HOLD_TIME;
    4a3e:	80 93 ae 21 	sts	0x21AE, r24
    qt_config_data.qt_recal_threshold = DEF_QT_RECAL_THRESHOLD;
    4a42:	61 e0       	ldi	r22, 0x01	; 1
    4a44:	60 93 ac 21 	sts	0x21AC, r22
    qt_config_data.qt_pos_recal_delay = DEF_QT_POS_RECAL_DELAY;
    4a48:	83 e0       	ldi	r24, 0x03	; 3
    4a4a:	80 93 b2 21 	sts	0x21B2, r24
	 qt_enable_key(CHANNEL_0, NO_AKS_GROUP, 10, HYST_6_25);
}

static void init_timer_isr( void )
{
	PR.PRPC &= ~(0x02);
    4a4e:	e0 e7       	ldi	r30, 0x70	; 112
    4a50:	f0 e0       	ldi	r31, 0x00	; 0
    4a52:	83 81       	ldd	r24, Z+3	; 0x03
    4a54:	8d 7f       	andi	r24, 0xFD	; 253
    4a56:	83 83       	std	Z+3, r24	; 0x03
	/* We divide the peripheral 2MHz clock by 2 to get 1MHz*/
	TCC1.CTRLA = 2;
    4a58:	e0 e4       	ldi	r30, 0x40	; 64
    4a5a:	f8 e0       	ldi	r31, 0x08	; 8
    4a5c:	82 e0       	ldi	r24, 0x02	; 2
    4a5e:	80 83       	st	Z, r24
	/* 1000 counts is 1ms at 1MHz input clock */
	TCC1.PER = 1000 * qt_measurement_period_msec;
    4a60:	40 91 da 20 	lds	r20, 0x20DA
    4a64:	50 91 db 20 	lds	r21, 0x20DB
    4a68:	28 ee       	ldi	r18, 0xE8	; 232
    4a6a:	33 e0       	ldi	r19, 0x03	; 3
    4a6c:	42 9f       	mul	r20, r18
    4a6e:	c0 01       	movw	r24, r0
    4a70:	43 9f       	mul	r20, r19
    4a72:	90 0d       	add	r25, r0
    4a74:	52 9f       	mul	r21, r18
    4a76:	90 0d       	add	r25, r0
    4a78:	11 24       	eor	r1, r1
    4a7a:	86 a3       	std	Z+38, r24	; 0x26
    4a7c:	97 a3       	std	Z+39, r25	; 0x27
	/*  Set Compare A interrupt to low level   */
	TCC1.INTCTRLB = 1;
    4a7e:	67 83       	std	Z+7, r22	; 0x07
	/* Set up callback function. This function is called after the library
	 * has made capacitive measurements, but before it has processed them.
	 * The user can use this hook to apply filter functions to the measured
	 * signal values.(Possibly to fix sensor layout faults)
	 */
	qt_filter_callback = 0;
    4a80:	10 92 c6 21 	sts	0x21C6, r1
    4a84:	10 92 c7 21 	sts	0x21C7, r1
    4a88:	08 95       	ret

00004a8a <check_touch_key_pressed>:
#ifdef _DEBUG_INTERFACE_
    /* Process commands from PC */
    QDebug_ProcessCommands();
#endif

	if (time_to_measure_touch)
    4a8a:	80 91 5c 2a 	lds	r24, 0x2A5C
    4a8e:	88 23       	and	r24, r24
    4a90:	51 f0       	breq	.+20     	; 0x4aa6 <check_touch_key_pressed+0x1c>
	{
		time_to_measure_touch = false;
    4a92:	10 92 5c 2a 	sts	0x2A5C, r1

		do {
			status_flag = qt_measure_sensors( current_time_ms_touch );
    4a96:	80 91 5a 2a 	lds	r24, 0x2A5A
    4a9a:	90 91 5b 2a 	lds	r25, 0x2A5B
    4a9e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <qt_measure_sensors>
#endif
		/* Time-critical host application code should be placed here since
		 * a full burst cycle may delay critical task in the main application
		 */

		}while (burst_flag) ;
    4aa2:	90 fd       	sbrc	r25, 0
    4aa4:	f8 cf       	rjmp	.-16     	; 0x4a96 <check_touch_key_pressed+0xc>
#ifdef _DEBUG_INTERFACE_
		/* Process commands from PC */
		QDebug_ProcessCommands();
#endif
	}
	if(GET_SENSOR_STATE(0))
    4aa6:	80 91 c3 21 	lds	r24, 0x21C3
    4aaa:	80 95       	com	r24
		return 0;
	else
		return 1;
}
    4aac:	81 70       	andi	r24, 0x01	; 1
    4aae:	08 95       	ret

00004ab0 <tz_index_to_minutes>:
 * \retval timezone offset (minutes)
 */
int8_t timezone_get_minutes(void)
{
	return tz_minutes;
}
    4ab0:	82 30       	cpi	r24, 0x02	; 2
    4ab2:	31 f0       	breq	.+12     	; 0x4ac0 <tz_index_to_minutes+0x10>
    4ab4:	83 30       	cpi	r24, 0x03	; 3
    4ab6:	31 f0       	breq	.+12     	; 0x4ac4 <tz_index_to_minutes+0x14>
    4ab8:	81 30       	cpi	r24, 0x01	; 1
    4aba:	31 f0       	breq	.+12     	; 0x4ac8 <tz_index_to_minutes+0x18>
    4abc:	80 e0       	ldi	r24, 0x00	; 0
    4abe:	08 95       	ret
    4ac0:	8e e1       	ldi	r24, 0x1E	; 30
    4ac2:	08 95       	ret
    4ac4:	8d e2       	ldi	r24, 0x2D	; 45
    4ac6:	08 95       	ret
    4ac8:	8f e0       	ldi	r24, 0x0F	; 15
    4aca:	08 95       	ret

00004acc <timezone_init>:
 * If this is the case it will be set, and used by the date&time application.
 * If it is not set, the "select timezone" application will be started to set
 * it
 */
void timezone_init(void)
{
    4acc:	cf 93       	push	r28
    4ace:	df 93       	push	r29
	uint8_t temp;
	uint8_t invalid_tz = false;

	// Read timezone (hours) from EEPROM
	temp = nvm_eeprom_read_byte(TZ_HOURS_EEPROM_ADDR);
    4ad0:	84 e0       	ldi	r24, 0x04	; 4
    4ad2:	90 e0       	ldi	r25, 0x00	; 0
    4ad4:	0e 94 10 19 	call	0x3220	; 0x3220 <nvm_eeprom_read_byte>

	// convert tz_hours_menu index to actual timezone offset
	tz_hours = ((int8_t)temp) - 12;
    4ad8:	98 2f       	mov	r25, r24
    4ada:	9c 50       	subi	r25, 0x0C	; 12
    4adc:	90 93 5d 2a 	sts	0x2A5D, r25
	
	// Check if the timezone is valid
	if((tz_hours <= 12) && (tz_hours >= -12)) {
    4ae0:	89 31       	cpi	r24, 0x19	; 25
    4ae2:	20 f4       	brcc	.+8      	; 0x4aec <timezone_init+0x20>
		// Set timezone menu selection to the selected timezone
		tz_hours_menu.current_selection = temp;
    4ae4:	80 93 f0 20 	sts	0x20F0, r24
 * it
 */
void timezone_init(void)
{
	uint8_t temp;
	uint8_t invalid_tz = false;
    4ae8:	d0 e0       	ldi	r29, 0x00	; 0
    4aea:	06 c0       	rjmp	.+12     	; 0x4af8 <timezone_init+0x2c>
	} else {
		/*
		 * Timezone is outside the range; reset to default and set
		 * invalid.
		 */
		tz_hours = 0;
    4aec:	10 92 5d 2a 	sts	0x2A5D, r1
		tz_hours_menu.current_selection = 12;
    4af0:	8c e0       	ldi	r24, 0x0C	; 12
    4af2:	80 93 f0 20 	sts	0x20F0, r24
		invalid_tz = true;
    4af6:	d1 e0       	ldi	r29, 0x01	; 1
	}

	temp = nvm_eeprom_read_byte(TZ_MINUTES_EEPROM_ADDR);
    4af8:	85 e0       	ldi	r24, 0x05	; 5
    4afa:	90 e0       	ldi	r25, 0x00	; 0
    4afc:	0e 94 10 19 	call	0x3220	; 0x3220 <nvm_eeprom_read_byte>
    4b00:	c8 2f       	mov	r28, r24

	// Check if we have a valid timezone_minutes_menu index
	if(temp < 4) {
    4b02:	84 30       	cpi	r24, 0x04	; 4
    4b04:	40 f4       	brcc	.+16     	; 0x4b16 <timezone_init+0x4a>
		// Convert to actual minutes from stored menu index
		tz_minutes = tz_index_to_minutes(temp);
    4b06:	d4 df       	rcall	.-88     	; 0x4ab0 <tz_index_to_minutes>
    4b08:	80 93 5e 2a 	sts	0x2A5E, r24
		// Set the selection in tz_minutes_menu to selected timezone
		tz_minutes_menu.current_selection = temp;
    4b0c:	c0 93 e1 20 	sts	0x20E1, r28
		tz_minutes_menu.current_selection = 0;
		invalid_tz = true;
	}

	// If hours or minutes timezone offset was invalid
	if(invalid_tz == true) {
    4b10:	d1 30       	cpi	r29, 0x01	; 1
    4b12:	41 f4       	brne	.+16     	; 0x4b24 <timezone_init+0x58>
    4b14:	02 c0       	rjmp	.+4      	; 0x4b1a <timezone_init+0x4e>
		// Set the selection in tz_minutes_menu to selected timezone
		tz_minutes_menu.current_selection = temp;
	} else {
		// Outside the range, reset to default and set invalid
		tz_minutes = 0;
		tz_minutes_menu.current_selection = 0;
    4b16:	10 92 e1 20 	sts	0x20E1, r1
		 * timezone selection.
		 */
		//timezone_select_application();
		
		//Setting Timezone to GMT +1, +0 minutes
		tz_hours = 1;
    4b1a:	81 e0       	ldi	r24, 0x01	; 1
    4b1c:	80 93 5d 2a 	sts	0x2A5D, r24
		tz_minutes = 0;
    4b20:	10 92 5e 2a 	sts	0x2A5E, r1
	}
}
    4b24:	df 91       	pop	r29
    4b26:	cf 91       	pop	r28
    4b28:	08 95       	ret

00004b2a <__subsf3>:
    4b2a:	50 58       	subi	r21, 0x80	; 128

00004b2c <__addsf3>:
    4b2c:	bb 27       	eor	r27, r27
    4b2e:	aa 27       	eor	r26, r26
    4b30:	0e d0       	rcall	.+28     	; 0x4b4e <__addsf3x>
    4b32:	4d c1       	rjmp	.+666    	; 0x4dce <__fp_round>
    4b34:	3e d1       	rcall	.+636    	; 0x4db2 <__fp_pscA>
    4b36:	30 f0       	brcs	.+12     	; 0x4b44 <__addsf3+0x18>
    4b38:	43 d1       	rcall	.+646    	; 0x4dc0 <__fp_pscB>
    4b3a:	20 f0       	brcs	.+8      	; 0x4b44 <__addsf3+0x18>
    4b3c:	31 f4       	brne	.+12     	; 0x4b4a <__addsf3+0x1e>
    4b3e:	9f 3f       	cpi	r25, 0xFF	; 255
    4b40:	11 f4       	brne	.+4      	; 0x4b46 <__addsf3+0x1a>
    4b42:	1e f4       	brtc	.+6      	; 0x4b4a <__addsf3+0x1e>
    4b44:	33 c1       	rjmp	.+614    	; 0x4dac <__fp_nan>
    4b46:	0e f4       	brtc	.+2      	; 0x4b4a <__addsf3+0x1e>
    4b48:	e0 95       	com	r30
    4b4a:	e7 fb       	bst	r30, 7
    4b4c:	29 c1       	rjmp	.+594    	; 0x4da0 <__fp_inf>

00004b4e <__addsf3x>:
    4b4e:	e9 2f       	mov	r30, r25
    4b50:	4f d1       	rcall	.+670    	; 0x4df0 <__fp_split3>
    4b52:	80 f3       	brcs	.-32     	; 0x4b34 <__addsf3+0x8>
    4b54:	ba 17       	cp	r27, r26
    4b56:	62 07       	cpc	r22, r18
    4b58:	73 07       	cpc	r23, r19
    4b5a:	84 07       	cpc	r24, r20
    4b5c:	95 07       	cpc	r25, r21
    4b5e:	18 f0       	brcs	.+6      	; 0x4b66 <__addsf3x+0x18>
    4b60:	71 f4       	brne	.+28     	; 0x4b7e <__addsf3x+0x30>
    4b62:	9e f5       	brtc	.+102    	; 0x4bca <__addsf3x+0x7c>
    4b64:	67 c1       	rjmp	.+718    	; 0x4e34 <__fp_zero>
    4b66:	0e f4       	brtc	.+2      	; 0x4b6a <__addsf3x+0x1c>
    4b68:	e0 95       	com	r30
    4b6a:	0b 2e       	mov	r0, r27
    4b6c:	ba 2f       	mov	r27, r26
    4b6e:	a0 2d       	mov	r26, r0
    4b70:	0b 01       	movw	r0, r22
    4b72:	b9 01       	movw	r22, r18
    4b74:	90 01       	movw	r18, r0
    4b76:	0c 01       	movw	r0, r24
    4b78:	ca 01       	movw	r24, r20
    4b7a:	a0 01       	movw	r20, r0
    4b7c:	11 24       	eor	r1, r1
    4b7e:	ff 27       	eor	r31, r31
    4b80:	59 1b       	sub	r21, r25
    4b82:	99 f0       	breq	.+38     	; 0x4baa <__addsf3x+0x5c>
    4b84:	59 3f       	cpi	r21, 0xF9	; 249
    4b86:	50 f4       	brcc	.+20     	; 0x4b9c <__addsf3x+0x4e>
    4b88:	50 3e       	cpi	r21, 0xE0	; 224
    4b8a:	68 f1       	brcs	.+90     	; 0x4be6 <__addsf3x+0x98>
    4b8c:	1a 16       	cp	r1, r26
    4b8e:	f0 40       	sbci	r31, 0x00	; 0
    4b90:	a2 2f       	mov	r26, r18
    4b92:	23 2f       	mov	r18, r19
    4b94:	34 2f       	mov	r19, r20
    4b96:	44 27       	eor	r20, r20
    4b98:	58 5f       	subi	r21, 0xF8	; 248
    4b9a:	f3 cf       	rjmp	.-26     	; 0x4b82 <__addsf3x+0x34>
    4b9c:	46 95       	lsr	r20
    4b9e:	37 95       	ror	r19
    4ba0:	27 95       	ror	r18
    4ba2:	a7 95       	ror	r26
    4ba4:	f0 40       	sbci	r31, 0x00	; 0
    4ba6:	53 95       	inc	r21
    4ba8:	c9 f7       	brne	.-14     	; 0x4b9c <__addsf3x+0x4e>
    4baa:	7e f4       	brtc	.+30     	; 0x4bca <__addsf3x+0x7c>
    4bac:	1f 16       	cp	r1, r31
    4bae:	ba 0b       	sbc	r27, r26
    4bb0:	62 0b       	sbc	r22, r18
    4bb2:	73 0b       	sbc	r23, r19
    4bb4:	84 0b       	sbc	r24, r20
    4bb6:	ba f0       	brmi	.+46     	; 0x4be6 <__addsf3x+0x98>
    4bb8:	91 50       	subi	r25, 0x01	; 1
    4bba:	a1 f0       	breq	.+40     	; 0x4be4 <__addsf3x+0x96>
    4bbc:	ff 0f       	add	r31, r31
    4bbe:	bb 1f       	adc	r27, r27
    4bc0:	66 1f       	adc	r22, r22
    4bc2:	77 1f       	adc	r23, r23
    4bc4:	88 1f       	adc	r24, r24
    4bc6:	c2 f7       	brpl	.-16     	; 0x4bb8 <__addsf3x+0x6a>
    4bc8:	0e c0       	rjmp	.+28     	; 0x4be6 <__addsf3x+0x98>
    4bca:	ba 0f       	add	r27, r26
    4bcc:	62 1f       	adc	r22, r18
    4bce:	73 1f       	adc	r23, r19
    4bd0:	84 1f       	adc	r24, r20
    4bd2:	48 f4       	brcc	.+18     	; 0x4be6 <__addsf3x+0x98>
    4bd4:	87 95       	ror	r24
    4bd6:	77 95       	ror	r23
    4bd8:	67 95       	ror	r22
    4bda:	b7 95       	ror	r27
    4bdc:	f7 95       	ror	r31
    4bde:	9e 3f       	cpi	r25, 0xFE	; 254
    4be0:	08 f0       	brcs	.+2      	; 0x4be4 <__addsf3x+0x96>
    4be2:	b3 cf       	rjmp	.-154    	; 0x4b4a <__addsf3+0x1e>
    4be4:	93 95       	inc	r25
    4be6:	88 0f       	add	r24, r24
    4be8:	08 f0       	brcs	.+2      	; 0x4bec <__addsf3x+0x9e>
    4bea:	99 27       	eor	r25, r25
    4bec:	ee 0f       	add	r30, r30
    4bee:	97 95       	ror	r25
    4bf0:	87 95       	ror	r24
    4bf2:	08 95       	ret

00004bf4 <__divsf3>:
    4bf4:	0c d0       	rcall	.+24     	; 0x4c0e <__divsf3x>
    4bf6:	eb c0       	rjmp	.+470    	; 0x4dce <__fp_round>
    4bf8:	e3 d0       	rcall	.+454    	; 0x4dc0 <__fp_pscB>
    4bfa:	40 f0       	brcs	.+16     	; 0x4c0c <__divsf3+0x18>
    4bfc:	da d0       	rcall	.+436    	; 0x4db2 <__fp_pscA>
    4bfe:	30 f0       	brcs	.+12     	; 0x4c0c <__divsf3+0x18>
    4c00:	21 f4       	brne	.+8      	; 0x4c0a <__divsf3+0x16>
    4c02:	5f 3f       	cpi	r21, 0xFF	; 255
    4c04:	19 f0       	breq	.+6      	; 0x4c0c <__divsf3+0x18>
    4c06:	cc c0       	rjmp	.+408    	; 0x4da0 <__fp_inf>
    4c08:	51 11       	cpse	r21, r1
    4c0a:	15 c1       	rjmp	.+554    	; 0x4e36 <__fp_szero>
    4c0c:	cf c0       	rjmp	.+414    	; 0x4dac <__fp_nan>

00004c0e <__divsf3x>:
    4c0e:	f0 d0       	rcall	.+480    	; 0x4df0 <__fp_split3>
    4c10:	98 f3       	brcs	.-26     	; 0x4bf8 <__divsf3+0x4>

00004c12 <__divsf3_pse>:
    4c12:	99 23       	and	r25, r25
    4c14:	c9 f3       	breq	.-14     	; 0x4c08 <__divsf3+0x14>
    4c16:	55 23       	and	r21, r21
    4c18:	b1 f3       	breq	.-20     	; 0x4c06 <__divsf3+0x12>
    4c1a:	95 1b       	sub	r25, r21
    4c1c:	55 0b       	sbc	r21, r21
    4c1e:	bb 27       	eor	r27, r27
    4c20:	aa 27       	eor	r26, r26
    4c22:	62 17       	cp	r22, r18
    4c24:	73 07       	cpc	r23, r19
    4c26:	84 07       	cpc	r24, r20
    4c28:	38 f0       	brcs	.+14     	; 0x4c38 <__divsf3_pse+0x26>
    4c2a:	9f 5f       	subi	r25, 0xFF	; 255
    4c2c:	5f 4f       	sbci	r21, 0xFF	; 255
    4c2e:	22 0f       	add	r18, r18
    4c30:	33 1f       	adc	r19, r19
    4c32:	44 1f       	adc	r20, r20
    4c34:	aa 1f       	adc	r26, r26
    4c36:	a9 f3       	breq	.-22     	; 0x4c22 <__divsf3_pse+0x10>
    4c38:	33 d0       	rcall	.+102    	; 0x4ca0 <__divsf3_pse+0x8e>
    4c3a:	0e 2e       	mov	r0, r30
    4c3c:	3a f0       	brmi	.+14     	; 0x4c4c <__divsf3_pse+0x3a>
    4c3e:	e0 e8       	ldi	r30, 0x80	; 128
    4c40:	30 d0       	rcall	.+96     	; 0x4ca2 <__divsf3_pse+0x90>
    4c42:	91 50       	subi	r25, 0x01	; 1
    4c44:	50 40       	sbci	r21, 0x00	; 0
    4c46:	e6 95       	lsr	r30
    4c48:	00 1c       	adc	r0, r0
    4c4a:	ca f7       	brpl	.-14     	; 0x4c3e <__divsf3_pse+0x2c>
    4c4c:	29 d0       	rcall	.+82     	; 0x4ca0 <__divsf3_pse+0x8e>
    4c4e:	fe 2f       	mov	r31, r30
    4c50:	27 d0       	rcall	.+78     	; 0x4ca0 <__divsf3_pse+0x8e>
    4c52:	66 0f       	add	r22, r22
    4c54:	77 1f       	adc	r23, r23
    4c56:	88 1f       	adc	r24, r24
    4c58:	bb 1f       	adc	r27, r27
    4c5a:	26 17       	cp	r18, r22
    4c5c:	37 07       	cpc	r19, r23
    4c5e:	48 07       	cpc	r20, r24
    4c60:	ab 07       	cpc	r26, r27
    4c62:	b0 e8       	ldi	r27, 0x80	; 128
    4c64:	09 f0       	breq	.+2      	; 0x4c68 <__divsf3_pse+0x56>
    4c66:	bb 0b       	sbc	r27, r27
    4c68:	80 2d       	mov	r24, r0
    4c6a:	bf 01       	movw	r22, r30
    4c6c:	ff 27       	eor	r31, r31
    4c6e:	93 58       	subi	r25, 0x83	; 131
    4c70:	5f 4f       	sbci	r21, 0xFF	; 255
    4c72:	2a f0       	brmi	.+10     	; 0x4c7e <__divsf3_pse+0x6c>
    4c74:	9e 3f       	cpi	r25, 0xFE	; 254
    4c76:	51 05       	cpc	r21, r1
    4c78:	68 f0       	brcs	.+26     	; 0x4c94 <__divsf3_pse+0x82>
    4c7a:	92 c0       	rjmp	.+292    	; 0x4da0 <__fp_inf>
    4c7c:	dc c0       	rjmp	.+440    	; 0x4e36 <__fp_szero>
    4c7e:	5f 3f       	cpi	r21, 0xFF	; 255
    4c80:	ec f3       	brlt	.-6      	; 0x4c7c <__divsf3_pse+0x6a>
    4c82:	98 3e       	cpi	r25, 0xE8	; 232
    4c84:	dc f3       	brlt	.-10     	; 0x4c7c <__divsf3_pse+0x6a>
    4c86:	86 95       	lsr	r24
    4c88:	77 95       	ror	r23
    4c8a:	67 95       	ror	r22
    4c8c:	b7 95       	ror	r27
    4c8e:	f7 95       	ror	r31
    4c90:	9f 5f       	subi	r25, 0xFF	; 255
    4c92:	c9 f7       	brne	.-14     	; 0x4c86 <__divsf3_pse+0x74>
    4c94:	88 0f       	add	r24, r24
    4c96:	91 1d       	adc	r25, r1
    4c98:	96 95       	lsr	r25
    4c9a:	87 95       	ror	r24
    4c9c:	97 f9       	bld	r25, 7
    4c9e:	08 95       	ret
    4ca0:	e1 e0       	ldi	r30, 0x01	; 1
    4ca2:	66 0f       	add	r22, r22
    4ca4:	77 1f       	adc	r23, r23
    4ca6:	88 1f       	adc	r24, r24
    4ca8:	bb 1f       	adc	r27, r27
    4caa:	62 17       	cp	r22, r18
    4cac:	73 07       	cpc	r23, r19
    4cae:	84 07       	cpc	r24, r20
    4cb0:	ba 07       	cpc	r27, r26
    4cb2:	20 f0       	brcs	.+8      	; 0x4cbc <__divsf3_pse+0xaa>
    4cb4:	62 1b       	sub	r22, r18
    4cb6:	73 0b       	sbc	r23, r19
    4cb8:	84 0b       	sbc	r24, r20
    4cba:	ba 0b       	sbc	r27, r26
    4cbc:	ee 1f       	adc	r30, r30
    4cbe:	88 f7       	brcc	.-30     	; 0x4ca2 <__divsf3_pse+0x90>
    4cc0:	e0 95       	com	r30
    4cc2:	08 95       	ret

00004cc4 <__fixsfsi>:
    4cc4:	04 d0       	rcall	.+8      	; 0x4cce <__fixunssfsi>
    4cc6:	68 94       	set
    4cc8:	b1 11       	cpse	r27, r1
    4cca:	b5 c0       	rjmp	.+362    	; 0x4e36 <__fp_szero>
    4ccc:	08 95       	ret

00004cce <__fixunssfsi>:
    4cce:	98 d0       	rcall	.+304    	; 0x4e00 <__fp_splitA>
    4cd0:	88 f0       	brcs	.+34     	; 0x4cf4 <__fixunssfsi+0x26>
    4cd2:	9f 57       	subi	r25, 0x7F	; 127
    4cd4:	90 f0       	brcs	.+36     	; 0x4cfa <__fixunssfsi+0x2c>
    4cd6:	b9 2f       	mov	r27, r25
    4cd8:	99 27       	eor	r25, r25
    4cda:	b7 51       	subi	r27, 0x17	; 23
    4cdc:	a0 f0       	brcs	.+40     	; 0x4d06 <__fixunssfsi+0x38>
    4cde:	d1 f0       	breq	.+52     	; 0x4d14 <__fixunssfsi+0x46>
    4ce0:	66 0f       	add	r22, r22
    4ce2:	77 1f       	adc	r23, r23
    4ce4:	88 1f       	adc	r24, r24
    4ce6:	99 1f       	adc	r25, r25
    4ce8:	1a f0       	brmi	.+6      	; 0x4cf0 <__fixunssfsi+0x22>
    4cea:	ba 95       	dec	r27
    4cec:	c9 f7       	brne	.-14     	; 0x4ce0 <__fixunssfsi+0x12>
    4cee:	12 c0       	rjmp	.+36     	; 0x4d14 <__fixunssfsi+0x46>
    4cf0:	b1 30       	cpi	r27, 0x01	; 1
    4cf2:	81 f0       	breq	.+32     	; 0x4d14 <__fixunssfsi+0x46>
    4cf4:	9f d0       	rcall	.+318    	; 0x4e34 <__fp_zero>
    4cf6:	b1 e0       	ldi	r27, 0x01	; 1
    4cf8:	08 95       	ret
    4cfa:	9c c0       	rjmp	.+312    	; 0x4e34 <__fp_zero>
    4cfc:	67 2f       	mov	r22, r23
    4cfe:	78 2f       	mov	r23, r24
    4d00:	88 27       	eor	r24, r24
    4d02:	b8 5f       	subi	r27, 0xF8	; 248
    4d04:	39 f0       	breq	.+14     	; 0x4d14 <__fixunssfsi+0x46>
    4d06:	b9 3f       	cpi	r27, 0xF9	; 249
    4d08:	cc f3       	brlt	.-14     	; 0x4cfc <__fixunssfsi+0x2e>
    4d0a:	86 95       	lsr	r24
    4d0c:	77 95       	ror	r23
    4d0e:	67 95       	ror	r22
    4d10:	b3 95       	inc	r27
    4d12:	d9 f7       	brne	.-10     	; 0x4d0a <__fixunssfsi+0x3c>
    4d14:	3e f4       	brtc	.+14     	; 0x4d24 <__fixunssfsi+0x56>
    4d16:	90 95       	com	r25
    4d18:	80 95       	com	r24
    4d1a:	70 95       	com	r23
    4d1c:	61 95       	neg	r22
    4d1e:	7f 4f       	sbci	r23, 0xFF	; 255
    4d20:	8f 4f       	sbci	r24, 0xFF	; 255
    4d22:	9f 4f       	sbci	r25, 0xFF	; 255
    4d24:	08 95       	ret

00004d26 <__floatunsisf>:
    4d26:	e8 94       	clt
    4d28:	09 c0       	rjmp	.+18     	; 0x4d3c <__floatsisf+0x12>

00004d2a <__floatsisf>:
    4d2a:	97 fb       	bst	r25, 7
    4d2c:	3e f4       	brtc	.+14     	; 0x4d3c <__floatsisf+0x12>
    4d2e:	90 95       	com	r25
    4d30:	80 95       	com	r24
    4d32:	70 95       	com	r23
    4d34:	61 95       	neg	r22
    4d36:	7f 4f       	sbci	r23, 0xFF	; 255
    4d38:	8f 4f       	sbci	r24, 0xFF	; 255
    4d3a:	9f 4f       	sbci	r25, 0xFF	; 255
    4d3c:	99 23       	and	r25, r25
    4d3e:	a9 f0       	breq	.+42     	; 0x4d6a <__floatsisf+0x40>
    4d40:	f9 2f       	mov	r31, r25
    4d42:	96 e9       	ldi	r25, 0x96	; 150
    4d44:	bb 27       	eor	r27, r27
    4d46:	93 95       	inc	r25
    4d48:	f6 95       	lsr	r31
    4d4a:	87 95       	ror	r24
    4d4c:	77 95       	ror	r23
    4d4e:	67 95       	ror	r22
    4d50:	b7 95       	ror	r27
    4d52:	f1 11       	cpse	r31, r1
    4d54:	f8 cf       	rjmp	.-16     	; 0x4d46 <__floatsisf+0x1c>
    4d56:	fa f4       	brpl	.+62     	; 0x4d96 <__floatsisf+0x6c>
    4d58:	bb 0f       	add	r27, r27
    4d5a:	11 f4       	brne	.+4      	; 0x4d60 <__floatsisf+0x36>
    4d5c:	60 ff       	sbrs	r22, 0
    4d5e:	1b c0       	rjmp	.+54     	; 0x4d96 <__floatsisf+0x6c>
    4d60:	6f 5f       	subi	r22, 0xFF	; 255
    4d62:	7f 4f       	sbci	r23, 0xFF	; 255
    4d64:	8f 4f       	sbci	r24, 0xFF	; 255
    4d66:	9f 4f       	sbci	r25, 0xFF	; 255
    4d68:	16 c0       	rjmp	.+44     	; 0x4d96 <__floatsisf+0x6c>
    4d6a:	88 23       	and	r24, r24
    4d6c:	11 f0       	breq	.+4      	; 0x4d72 <__floatsisf+0x48>
    4d6e:	96 e9       	ldi	r25, 0x96	; 150
    4d70:	11 c0       	rjmp	.+34     	; 0x4d94 <__floatsisf+0x6a>
    4d72:	77 23       	and	r23, r23
    4d74:	21 f0       	breq	.+8      	; 0x4d7e <__floatsisf+0x54>
    4d76:	9e e8       	ldi	r25, 0x8E	; 142
    4d78:	87 2f       	mov	r24, r23
    4d7a:	76 2f       	mov	r23, r22
    4d7c:	05 c0       	rjmp	.+10     	; 0x4d88 <__floatsisf+0x5e>
    4d7e:	66 23       	and	r22, r22
    4d80:	71 f0       	breq	.+28     	; 0x4d9e <__floatsisf+0x74>
    4d82:	96 e8       	ldi	r25, 0x86	; 134
    4d84:	86 2f       	mov	r24, r22
    4d86:	70 e0       	ldi	r23, 0x00	; 0
    4d88:	60 e0       	ldi	r22, 0x00	; 0
    4d8a:	2a f0       	brmi	.+10     	; 0x4d96 <__floatsisf+0x6c>
    4d8c:	9a 95       	dec	r25
    4d8e:	66 0f       	add	r22, r22
    4d90:	77 1f       	adc	r23, r23
    4d92:	88 1f       	adc	r24, r24
    4d94:	da f7       	brpl	.-10     	; 0x4d8c <__floatsisf+0x62>
    4d96:	88 0f       	add	r24, r24
    4d98:	96 95       	lsr	r25
    4d9a:	87 95       	ror	r24
    4d9c:	97 f9       	bld	r25, 7
    4d9e:	08 95       	ret

00004da0 <__fp_inf>:
    4da0:	97 f9       	bld	r25, 7
    4da2:	9f 67       	ori	r25, 0x7F	; 127
    4da4:	80 e8       	ldi	r24, 0x80	; 128
    4da6:	70 e0       	ldi	r23, 0x00	; 0
    4da8:	60 e0       	ldi	r22, 0x00	; 0
    4daa:	08 95       	ret

00004dac <__fp_nan>:
    4dac:	9f ef       	ldi	r25, 0xFF	; 255
    4dae:	80 ec       	ldi	r24, 0xC0	; 192
    4db0:	08 95       	ret

00004db2 <__fp_pscA>:
    4db2:	00 24       	eor	r0, r0
    4db4:	0a 94       	dec	r0
    4db6:	16 16       	cp	r1, r22
    4db8:	17 06       	cpc	r1, r23
    4dba:	18 06       	cpc	r1, r24
    4dbc:	09 06       	cpc	r0, r25
    4dbe:	08 95       	ret

00004dc0 <__fp_pscB>:
    4dc0:	00 24       	eor	r0, r0
    4dc2:	0a 94       	dec	r0
    4dc4:	12 16       	cp	r1, r18
    4dc6:	13 06       	cpc	r1, r19
    4dc8:	14 06       	cpc	r1, r20
    4dca:	05 06       	cpc	r0, r21
    4dcc:	08 95       	ret

00004dce <__fp_round>:
    4dce:	09 2e       	mov	r0, r25
    4dd0:	03 94       	inc	r0
    4dd2:	00 0c       	add	r0, r0
    4dd4:	11 f4       	brne	.+4      	; 0x4dda <__fp_round+0xc>
    4dd6:	88 23       	and	r24, r24
    4dd8:	52 f0       	brmi	.+20     	; 0x4dee <__fp_round+0x20>
    4dda:	bb 0f       	add	r27, r27
    4ddc:	40 f4       	brcc	.+16     	; 0x4dee <__fp_round+0x20>
    4dde:	bf 2b       	or	r27, r31
    4de0:	11 f4       	brne	.+4      	; 0x4de6 <__fp_round+0x18>
    4de2:	60 ff       	sbrs	r22, 0
    4de4:	04 c0       	rjmp	.+8      	; 0x4dee <__fp_round+0x20>
    4de6:	6f 5f       	subi	r22, 0xFF	; 255
    4de8:	7f 4f       	sbci	r23, 0xFF	; 255
    4dea:	8f 4f       	sbci	r24, 0xFF	; 255
    4dec:	9f 4f       	sbci	r25, 0xFF	; 255
    4dee:	08 95       	ret

00004df0 <__fp_split3>:
    4df0:	57 fd       	sbrc	r21, 7
    4df2:	90 58       	subi	r25, 0x80	; 128
    4df4:	44 0f       	add	r20, r20
    4df6:	55 1f       	adc	r21, r21
    4df8:	59 f0       	breq	.+22     	; 0x4e10 <__fp_splitA+0x10>
    4dfa:	5f 3f       	cpi	r21, 0xFF	; 255
    4dfc:	71 f0       	breq	.+28     	; 0x4e1a <__fp_splitA+0x1a>
    4dfe:	47 95       	ror	r20

00004e00 <__fp_splitA>:
    4e00:	88 0f       	add	r24, r24
    4e02:	97 fb       	bst	r25, 7
    4e04:	99 1f       	adc	r25, r25
    4e06:	61 f0       	breq	.+24     	; 0x4e20 <__fp_splitA+0x20>
    4e08:	9f 3f       	cpi	r25, 0xFF	; 255
    4e0a:	79 f0       	breq	.+30     	; 0x4e2a <__fp_splitA+0x2a>
    4e0c:	87 95       	ror	r24
    4e0e:	08 95       	ret
    4e10:	12 16       	cp	r1, r18
    4e12:	13 06       	cpc	r1, r19
    4e14:	14 06       	cpc	r1, r20
    4e16:	55 1f       	adc	r21, r21
    4e18:	f2 cf       	rjmp	.-28     	; 0x4dfe <__fp_split3+0xe>
    4e1a:	46 95       	lsr	r20
    4e1c:	f1 df       	rcall	.-30     	; 0x4e00 <__fp_splitA>
    4e1e:	08 c0       	rjmp	.+16     	; 0x4e30 <__fp_splitA+0x30>
    4e20:	16 16       	cp	r1, r22
    4e22:	17 06       	cpc	r1, r23
    4e24:	18 06       	cpc	r1, r24
    4e26:	99 1f       	adc	r25, r25
    4e28:	f1 cf       	rjmp	.-30     	; 0x4e0c <__fp_splitA+0xc>
    4e2a:	86 95       	lsr	r24
    4e2c:	71 05       	cpc	r23, r1
    4e2e:	61 05       	cpc	r22, r1
    4e30:	08 94       	sec
    4e32:	08 95       	ret

00004e34 <__fp_zero>:
    4e34:	e8 94       	clt

00004e36 <__fp_szero>:
    4e36:	bb 27       	eor	r27, r27
    4e38:	66 27       	eor	r22, r22
    4e3a:	77 27       	eor	r23, r23
    4e3c:	cb 01       	movw	r24, r22
    4e3e:	97 f9       	bld	r25, 7
    4e40:	08 95       	ret

00004e42 <__gesf2>:
    4e42:	e3 d0       	rcall	.+454    	; 0x500a <__fp_cmp>
    4e44:	08 f4       	brcc	.+2      	; 0x4e48 <__gesf2+0x6>
    4e46:	8f ef       	ldi	r24, 0xFF	; 255
    4e48:	08 95       	ret

00004e4a <__mulsf3>:
    4e4a:	0b d0       	rcall	.+22     	; 0x4e62 <__mulsf3x>
    4e4c:	c0 cf       	rjmp	.-128    	; 0x4dce <__fp_round>
    4e4e:	b1 df       	rcall	.-158    	; 0x4db2 <__fp_pscA>
    4e50:	28 f0       	brcs	.+10     	; 0x4e5c <__mulsf3+0x12>
    4e52:	b6 df       	rcall	.-148    	; 0x4dc0 <__fp_pscB>
    4e54:	18 f0       	brcs	.+6      	; 0x4e5c <__mulsf3+0x12>
    4e56:	95 23       	and	r25, r21
    4e58:	09 f0       	breq	.+2      	; 0x4e5c <__mulsf3+0x12>
    4e5a:	a2 cf       	rjmp	.-188    	; 0x4da0 <__fp_inf>
    4e5c:	a7 cf       	rjmp	.-178    	; 0x4dac <__fp_nan>
    4e5e:	11 24       	eor	r1, r1
    4e60:	ea cf       	rjmp	.-44     	; 0x4e36 <__fp_szero>

00004e62 <__mulsf3x>:
    4e62:	c6 df       	rcall	.-116    	; 0x4df0 <__fp_split3>
    4e64:	a0 f3       	brcs	.-24     	; 0x4e4e <__mulsf3+0x4>

00004e66 <__mulsf3_pse>:
    4e66:	95 9f       	mul	r25, r21
    4e68:	d1 f3       	breq	.-12     	; 0x4e5e <__mulsf3+0x14>
    4e6a:	95 0f       	add	r25, r21
    4e6c:	50 e0       	ldi	r21, 0x00	; 0
    4e6e:	55 1f       	adc	r21, r21
    4e70:	62 9f       	mul	r22, r18
    4e72:	f0 01       	movw	r30, r0
    4e74:	72 9f       	mul	r23, r18
    4e76:	bb 27       	eor	r27, r27
    4e78:	f0 0d       	add	r31, r0
    4e7a:	b1 1d       	adc	r27, r1
    4e7c:	63 9f       	mul	r22, r19
    4e7e:	aa 27       	eor	r26, r26
    4e80:	f0 0d       	add	r31, r0
    4e82:	b1 1d       	adc	r27, r1
    4e84:	aa 1f       	adc	r26, r26
    4e86:	64 9f       	mul	r22, r20
    4e88:	66 27       	eor	r22, r22
    4e8a:	b0 0d       	add	r27, r0
    4e8c:	a1 1d       	adc	r26, r1
    4e8e:	66 1f       	adc	r22, r22
    4e90:	82 9f       	mul	r24, r18
    4e92:	22 27       	eor	r18, r18
    4e94:	b0 0d       	add	r27, r0
    4e96:	a1 1d       	adc	r26, r1
    4e98:	62 1f       	adc	r22, r18
    4e9a:	73 9f       	mul	r23, r19
    4e9c:	b0 0d       	add	r27, r0
    4e9e:	a1 1d       	adc	r26, r1
    4ea0:	62 1f       	adc	r22, r18
    4ea2:	83 9f       	mul	r24, r19
    4ea4:	a0 0d       	add	r26, r0
    4ea6:	61 1d       	adc	r22, r1
    4ea8:	22 1f       	adc	r18, r18
    4eaa:	74 9f       	mul	r23, r20
    4eac:	33 27       	eor	r19, r19
    4eae:	a0 0d       	add	r26, r0
    4eb0:	61 1d       	adc	r22, r1
    4eb2:	23 1f       	adc	r18, r19
    4eb4:	84 9f       	mul	r24, r20
    4eb6:	60 0d       	add	r22, r0
    4eb8:	21 1d       	adc	r18, r1
    4eba:	82 2f       	mov	r24, r18
    4ebc:	76 2f       	mov	r23, r22
    4ebe:	6a 2f       	mov	r22, r26
    4ec0:	11 24       	eor	r1, r1
    4ec2:	9f 57       	subi	r25, 0x7F	; 127
    4ec4:	50 40       	sbci	r21, 0x00	; 0
    4ec6:	8a f0       	brmi	.+34     	; 0x4eea <__mulsf3_pse+0x84>
    4ec8:	e1 f0       	breq	.+56     	; 0x4f02 <__mulsf3_pse+0x9c>
    4eca:	88 23       	and	r24, r24
    4ecc:	4a f0       	brmi	.+18     	; 0x4ee0 <__mulsf3_pse+0x7a>
    4ece:	ee 0f       	add	r30, r30
    4ed0:	ff 1f       	adc	r31, r31
    4ed2:	bb 1f       	adc	r27, r27
    4ed4:	66 1f       	adc	r22, r22
    4ed6:	77 1f       	adc	r23, r23
    4ed8:	88 1f       	adc	r24, r24
    4eda:	91 50       	subi	r25, 0x01	; 1
    4edc:	50 40       	sbci	r21, 0x00	; 0
    4ede:	a9 f7       	brne	.-22     	; 0x4eca <__mulsf3_pse+0x64>
    4ee0:	9e 3f       	cpi	r25, 0xFE	; 254
    4ee2:	51 05       	cpc	r21, r1
    4ee4:	70 f0       	brcs	.+28     	; 0x4f02 <__mulsf3_pse+0x9c>
    4ee6:	5c cf       	rjmp	.-328    	; 0x4da0 <__fp_inf>
    4ee8:	a6 cf       	rjmp	.-180    	; 0x4e36 <__fp_szero>
    4eea:	5f 3f       	cpi	r21, 0xFF	; 255
    4eec:	ec f3       	brlt	.-6      	; 0x4ee8 <__mulsf3_pse+0x82>
    4eee:	98 3e       	cpi	r25, 0xE8	; 232
    4ef0:	dc f3       	brlt	.-10     	; 0x4ee8 <__mulsf3_pse+0x82>
    4ef2:	86 95       	lsr	r24
    4ef4:	77 95       	ror	r23
    4ef6:	67 95       	ror	r22
    4ef8:	b7 95       	ror	r27
    4efa:	f7 95       	ror	r31
    4efc:	e7 95       	ror	r30
    4efe:	9f 5f       	subi	r25, 0xFF	; 255
    4f00:	c1 f7       	brne	.-16     	; 0x4ef2 <__mulsf3_pse+0x8c>
    4f02:	fe 2b       	or	r31, r30
    4f04:	88 0f       	add	r24, r24
    4f06:	91 1d       	adc	r25, r1
    4f08:	96 95       	lsr	r25
    4f0a:	87 95       	ror	r24
    4f0c:	97 f9       	bld	r25, 7
    4f0e:	08 95       	ret

00004f10 <pow>:
    4f10:	fa 01       	movw	r30, r20
    4f12:	ee 0f       	add	r30, r30
    4f14:	ff 1f       	adc	r31, r31
    4f16:	30 96       	adiw	r30, 0x00	; 0
    4f18:	21 05       	cpc	r18, r1
    4f1a:	31 05       	cpc	r19, r1
    4f1c:	99 f1       	breq	.+102    	; 0x4f84 <pow+0x74>
    4f1e:	61 15       	cp	r22, r1
    4f20:	71 05       	cpc	r23, r1
    4f22:	61 f4       	brne	.+24     	; 0x4f3c <pow+0x2c>
    4f24:	80 38       	cpi	r24, 0x80	; 128
    4f26:	bf e3       	ldi	r27, 0x3F	; 63
    4f28:	9b 07       	cpc	r25, r27
    4f2a:	49 f1       	breq	.+82     	; 0x4f7e <pow+0x6e>
    4f2c:	68 94       	set
    4f2e:	90 38       	cpi	r25, 0x80	; 128
    4f30:	81 05       	cpc	r24, r1
    4f32:	61 f0       	breq	.+24     	; 0x4f4c <pow+0x3c>
    4f34:	80 38       	cpi	r24, 0x80	; 128
    4f36:	bf ef       	ldi	r27, 0xFF	; 255
    4f38:	9b 07       	cpc	r25, r27
    4f3a:	41 f0       	breq	.+16     	; 0x4f4c <pow+0x3c>
    4f3c:	99 23       	and	r25, r25
    4f3e:	42 f5       	brpl	.+80     	; 0x4f90 <pow+0x80>
    4f40:	ff 3f       	cpi	r31, 0xFF	; 255
    4f42:	e1 05       	cpc	r30, r1
    4f44:	31 05       	cpc	r19, r1
    4f46:	21 05       	cpc	r18, r1
    4f48:	11 f1       	breq	.+68     	; 0x4f8e <pow+0x7e>
    4f4a:	e8 94       	clt
    4f4c:	08 94       	sec
    4f4e:	e7 95       	ror	r30
    4f50:	d9 01       	movw	r26, r18
    4f52:	aa 23       	and	r26, r26
    4f54:	29 f4       	brne	.+10     	; 0x4f60 <pow+0x50>
    4f56:	ab 2f       	mov	r26, r27
    4f58:	be 2f       	mov	r27, r30
    4f5a:	f8 5f       	subi	r31, 0xF8	; 248
    4f5c:	d0 f3       	brcs	.-12     	; 0x4f52 <pow+0x42>
    4f5e:	10 c0       	rjmp	.+32     	; 0x4f80 <pow+0x70>
    4f60:	ff 5f       	subi	r31, 0xFF	; 255
    4f62:	70 f4       	brcc	.+28     	; 0x4f80 <pow+0x70>
    4f64:	a6 95       	lsr	r26
    4f66:	e0 f7       	brcc	.-8      	; 0x4f60 <pow+0x50>
    4f68:	f7 39       	cpi	r31, 0x97	; 151
    4f6a:	50 f0       	brcs	.+20     	; 0x4f80 <pow+0x70>
    4f6c:	19 f0       	breq	.+6      	; 0x4f74 <pow+0x64>
    4f6e:	ff 3a       	cpi	r31, 0xAF	; 175
    4f70:	38 f4       	brcc	.+14     	; 0x4f80 <pow+0x70>
    4f72:	9f 77       	andi	r25, 0x7F	; 127
    4f74:	9f 93       	push	r25
    4f76:	0c d0       	rcall	.+24     	; 0x4f90 <pow+0x80>
    4f78:	0f 90       	pop	r0
    4f7a:	07 fc       	sbrc	r0, 7
    4f7c:	90 58       	subi	r25, 0x80	; 128
    4f7e:	08 95       	ret
    4f80:	3e f0       	brts	.+14     	; 0x4f90 <pow+0x80>
    4f82:	14 cf       	rjmp	.-472    	; 0x4dac <__fp_nan>
    4f84:	60 e0       	ldi	r22, 0x00	; 0
    4f86:	70 e0       	ldi	r23, 0x00	; 0
    4f88:	80 e8       	ldi	r24, 0x80	; 128
    4f8a:	9f e3       	ldi	r25, 0x3F	; 63
    4f8c:	08 95       	ret
    4f8e:	4f e7       	ldi	r20, 0x7F	; 127
    4f90:	9f 77       	andi	r25, 0x7F	; 127
    4f92:	5f 93       	push	r21
    4f94:	4f 93       	push	r20
    4f96:	3f 93       	push	r19
    4f98:	2f 93       	push	r18
    4f9a:	c2 d0       	rcall	.+388    	; 0x5120 <log>
    4f9c:	2f 91       	pop	r18
    4f9e:	3f 91       	pop	r19
    4fa0:	4f 91       	pop	r20
    4fa2:	5f 91       	pop	r21
    4fa4:	52 df       	rcall	.-348    	; 0x4e4a <__mulsf3>
    4fa6:	05 c0       	rjmp	.+10     	; 0x4fb2 <exp>
    4fa8:	19 f4       	brne	.+6      	; 0x4fb0 <pow+0xa0>
    4faa:	0e f0       	brts	.+2      	; 0x4fae <pow+0x9e>
    4fac:	f9 ce       	rjmp	.-526    	; 0x4da0 <__fp_inf>
    4fae:	42 cf       	rjmp	.-380    	; 0x4e34 <__fp_zero>
    4fb0:	fd ce       	rjmp	.-518    	; 0x4dac <__fp_nan>

00004fb2 <exp>:
    4fb2:	26 df       	rcall	.-436    	; 0x4e00 <__fp_splitA>
    4fb4:	c8 f3       	brcs	.-14     	; 0x4fa8 <pow+0x98>
    4fb6:	96 38       	cpi	r25, 0x86	; 134
    4fb8:	c0 f7       	brcc	.-16     	; 0x4faa <pow+0x9a>
    4fba:	07 f8       	bld	r0, 7
    4fbc:	0f 92       	push	r0
    4fbe:	e8 94       	clt
    4fc0:	2b e3       	ldi	r18, 0x3B	; 59
    4fc2:	3a ea       	ldi	r19, 0xAA	; 170
    4fc4:	48 eb       	ldi	r20, 0xB8	; 184
    4fc6:	5f e7       	ldi	r21, 0x7F	; 127
    4fc8:	4e df       	rcall	.-356    	; 0x4e66 <__mulsf3_pse>
    4fca:	0f 92       	push	r0
    4fcc:	0f 92       	push	r0
    4fce:	0f 92       	push	r0
    4fd0:	4d b7       	in	r20, 0x3d	; 61
    4fd2:	5e b7       	in	r21, 0x3e	; 62
    4fd4:	0f 92       	push	r0
    4fd6:	e4 d0       	rcall	.+456    	; 0x51a0 <modf>
    4fd8:	ec ef       	ldi	r30, 0xFC	; 252
    4fda:	f1 e0       	ldi	r31, 0x01	; 1
    4fdc:	3a d0       	rcall	.+116    	; 0x5052 <__fp_powser>
    4fde:	4f 91       	pop	r20
    4fe0:	5f 91       	pop	r21
    4fe2:	ef 91       	pop	r30
    4fe4:	ff 91       	pop	r31
    4fe6:	e5 95       	asr	r30
    4fe8:	ee 1f       	adc	r30, r30
    4fea:	ff 1f       	adc	r31, r31
    4fec:	49 f0       	breq	.+18     	; 0x5000 <exp+0x4e>
    4fee:	fe 57       	subi	r31, 0x7E	; 126
    4ff0:	e0 68       	ori	r30, 0x80	; 128
    4ff2:	44 27       	eor	r20, r20
    4ff4:	ee 0f       	add	r30, r30
    4ff6:	44 1f       	adc	r20, r20
    4ff8:	fa 95       	dec	r31
    4ffa:	e1 f7       	brne	.-8      	; 0x4ff4 <exp+0x42>
    4ffc:	41 95       	neg	r20
    4ffe:	55 0b       	sbc	r21, r21
    5000:	56 d0       	rcall	.+172    	; 0x50ae <ldexp>
    5002:	0f 90       	pop	r0
    5004:	07 fe       	sbrs	r0, 7
    5006:	4a c0       	rjmp	.+148    	; 0x509c <inverse>
    5008:	08 95       	ret

0000500a <__fp_cmp>:
    500a:	99 0f       	add	r25, r25
    500c:	00 08       	sbc	r0, r0
    500e:	55 0f       	add	r21, r21
    5010:	aa 0b       	sbc	r26, r26
    5012:	e0 e8       	ldi	r30, 0x80	; 128
    5014:	fe ef       	ldi	r31, 0xFE	; 254
    5016:	16 16       	cp	r1, r22
    5018:	17 06       	cpc	r1, r23
    501a:	e8 07       	cpc	r30, r24
    501c:	f9 07       	cpc	r31, r25
    501e:	c0 f0       	brcs	.+48     	; 0x5050 <__fp_cmp+0x46>
    5020:	12 16       	cp	r1, r18
    5022:	13 06       	cpc	r1, r19
    5024:	e4 07       	cpc	r30, r20
    5026:	f5 07       	cpc	r31, r21
    5028:	98 f0       	brcs	.+38     	; 0x5050 <__fp_cmp+0x46>
    502a:	62 1b       	sub	r22, r18
    502c:	73 0b       	sbc	r23, r19
    502e:	84 0b       	sbc	r24, r20
    5030:	95 0b       	sbc	r25, r21
    5032:	39 f4       	brne	.+14     	; 0x5042 <__fp_cmp+0x38>
    5034:	0a 26       	eor	r0, r26
    5036:	61 f0       	breq	.+24     	; 0x5050 <__fp_cmp+0x46>
    5038:	23 2b       	or	r18, r19
    503a:	24 2b       	or	r18, r20
    503c:	25 2b       	or	r18, r21
    503e:	21 f4       	brne	.+8      	; 0x5048 <__fp_cmp+0x3e>
    5040:	08 95       	ret
    5042:	0a 26       	eor	r0, r26
    5044:	09 f4       	brne	.+2      	; 0x5048 <__fp_cmp+0x3e>
    5046:	a1 40       	sbci	r26, 0x01	; 1
    5048:	a6 95       	lsr	r26
    504a:	8f ef       	ldi	r24, 0xFF	; 255
    504c:	81 1d       	adc	r24, r1
    504e:	81 1d       	adc	r24, r1
    5050:	08 95       	ret

00005052 <__fp_powser>:
    5052:	df 93       	push	r29
    5054:	cf 93       	push	r28
    5056:	1f 93       	push	r17
    5058:	0f 93       	push	r16
    505a:	ff 92       	push	r15
    505c:	ef 92       	push	r14
    505e:	df 92       	push	r13
    5060:	7b 01       	movw	r14, r22
    5062:	8c 01       	movw	r16, r24
    5064:	68 94       	set
    5066:	05 c0       	rjmp	.+10     	; 0x5072 <__fp_powser+0x20>
    5068:	da 2e       	mov	r13, r26
    506a:	ef 01       	movw	r28, r30
    506c:	fa de       	rcall	.-524    	; 0x4e62 <__mulsf3x>
    506e:	fe 01       	movw	r30, r28
    5070:	e8 94       	clt
    5072:	a5 91       	lpm	r26, Z+
    5074:	25 91       	lpm	r18, Z+
    5076:	35 91       	lpm	r19, Z+
    5078:	45 91       	lpm	r20, Z+
    507a:	55 91       	lpm	r21, Z+
    507c:	ae f3       	brts	.-22     	; 0x5068 <__fp_powser+0x16>
    507e:	ef 01       	movw	r28, r30
    5080:	66 dd       	rcall	.-1332   	; 0x4b4e <__addsf3x>
    5082:	fe 01       	movw	r30, r28
    5084:	97 01       	movw	r18, r14
    5086:	a8 01       	movw	r20, r16
    5088:	da 94       	dec	r13
    508a:	79 f7       	brne	.-34     	; 0x506a <__fp_powser+0x18>
    508c:	df 90       	pop	r13
    508e:	ef 90       	pop	r14
    5090:	ff 90       	pop	r15
    5092:	0f 91       	pop	r16
    5094:	1f 91       	pop	r17
    5096:	cf 91       	pop	r28
    5098:	df 91       	pop	r29
    509a:	08 95       	ret

0000509c <inverse>:
    509c:	9b 01       	movw	r18, r22
    509e:	ac 01       	movw	r20, r24
    50a0:	60 e0       	ldi	r22, 0x00	; 0
    50a2:	70 e0       	ldi	r23, 0x00	; 0
    50a4:	80 e8       	ldi	r24, 0x80	; 128
    50a6:	9f e3       	ldi	r25, 0x3F	; 63
    50a8:	a5 cd       	rjmp	.-1206   	; 0x4bf4 <__divsf3>
    50aa:	7a ce       	rjmp	.-780    	; 0x4da0 <__fp_inf>
    50ac:	ac c0       	rjmp	.+344    	; 0x5206 <__fp_mpack>

000050ae <ldexp>:
    50ae:	a8 de       	rcall	.-688    	; 0x4e00 <__fp_splitA>
    50b0:	e8 f3       	brcs	.-6      	; 0x50ac <inverse+0x10>
    50b2:	99 23       	and	r25, r25
    50b4:	d9 f3       	breq	.-10     	; 0x50ac <inverse+0x10>
    50b6:	94 0f       	add	r25, r20
    50b8:	51 1d       	adc	r21, r1
    50ba:	bb f3       	brvs	.-18     	; 0x50aa <inverse+0xe>
    50bc:	91 50       	subi	r25, 0x01	; 1
    50be:	50 40       	sbci	r21, 0x00	; 0
    50c0:	94 f0       	brlt	.+36     	; 0x50e6 <ldexp+0x38>
    50c2:	59 f0       	breq	.+22     	; 0x50da <ldexp+0x2c>
    50c4:	88 23       	and	r24, r24
    50c6:	32 f0       	brmi	.+12     	; 0x50d4 <ldexp+0x26>
    50c8:	66 0f       	add	r22, r22
    50ca:	77 1f       	adc	r23, r23
    50cc:	88 1f       	adc	r24, r24
    50ce:	91 50       	subi	r25, 0x01	; 1
    50d0:	50 40       	sbci	r21, 0x00	; 0
    50d2:	c1 f7       	brne	.-16     	; 0x50c4 <ldexp+0x16>
    50d4:	9e 3f       	cpi	r25, 0xFE	; 254
    50d6:	51 05       	cpc	r21, r1
    50d8:	44 f7       	brge	.-48     	; 0x50aa <inverse+0xe>
    50da:	88 0f       	add	r24, r24
    50dc:	91 1d       	adc	r25, r1
    50de:	96 95       	lsr	r25
    50e0:	87 95       	ror	r24
    50e2:	97 f9       	bld	r25, 7
    50e4:	08 95       	ret
    50e6:	5f 3f       	cpi	r21, 0xFF	; 255
    50e8:	ac f0       	brlt	.+42     	; 0x5114 <ldexp+0x66>
    50ea:	98 3e       	cpi	r25, 0xE8	; 232
    50ec:	9c f0       	brlt	.+38     	; 0x5114 <ldexp+0x66>
    50ee:	bb 27       	eor	r27, r27
    50f0:	86 95       	lsr	r24
    50f2:	77 95       	ror	r23
    50f4:	67 95       	ror	r22
    50f6:	b7 95       	ror	r27
    50f8:	08 f4       	brcc	.+2      	; 0x50fc <ldexp+0x4e>
    50fa:	b1 60       	ori	r27, 0x01	; 1
    50fc:	93 95       	inc	r25
    50fe:	c1 f7       	brne	.-16     	; 0x50f0 <ldexp+0x42>
    5100:	bb 0f       	add	r27, r27
    5102:	58 f7       	brcc	.-42     	; 0x50da <ldexp+0x2c>
    5104:	11 f4       	brne	.+4      	; 0x510a <ldexp+0x5c>
    5106:	60 ff       	sbrs	r22, 0
    5108:	e8 cf       	rjmp	.-48     	; 0x50da <ldexp+0x2c>
    510a:	6f 5f       	subi	r22, 0xFF	; 255
    510c:	7f 4f       	sbci	r23, 0xFF	; 255
    510e:	8f 4f       	sbci	r24, 0xFF	; 255
    5110:	9f 4f       	sbci	r25, 0xFF	; 255
    5112:	e3 cf       	rjmp	.-58     	; 0x50da <ldexp+0x2c>
    5114:	90 ce       	rjmp	.-736    	; 0x4e36 <__fp_szero>
    5116:	0e f0       	brts	.+2      	; 0x511a <ldexp+0x6c>
    5118:	76 c0       	rjmp	.+236    	; 0x5206 <__fp_mpack>
    511a:	48 ce       	rjmp	.-880    	; 0x4dac <__fp_nan>
    511c:	68 94       	set
    511e:	40 ce       	rjmp	.-896    	; 0x4da0 <__fp_inf>

00005120 <log>:
    5120:	6f de       	rcall	.-802    	; 0x4e00 <__fp_splitA>
    5122:	c8 f3       	brcs	.-14     	; 0x5116 <ldexp+0x68>
    5124:	99 23       	and	r25, r25
    5126:	d1 f3       	breq	.-12     	; 0x511c <ldexp+0x6e>
    5128:	c6 f3       	brts	.-16     	; 0x511a <ldexp+0x6c>
    512a:	df 93       	push	r29
    512c:	cf 93       	push	r28
    512e:	1f 93       	push	r17
    5130:	0f 93       	push	r16
    5132:	ff 92       	push	r15
    5134:	c9 2f       	mov	r28, r25
    5136:	dd 27       	eor	r29, r29
    5138:	88 23       	and	r24, r24
    513a:	2a f0       	brmi	.+10     	; 0x5146 <log+0x26>
    513c:	21 97       	sbiw	r28, 0x01	; 1
    513e:	66 0f       	add	r22, r22
    5140:	77 1f       	adc	r23, r23
    5142:	88 1f       	adc	r24, r24
    5144:	da f7       	brpl	.-10     	; 0x513c <log+0x1c>
    5146:	20 e0       	ldi	r18, 0x00	; 0
    5148:	30 e0       	ldi	r19, 0x00	; 0
    514a:	40 e8       	ldi	r20, 0x80	; 128
    514c:	5f eb       	ldi	r21, 0xBF	; 191
    514e:	9f e3       	ldi	r25, 0x3F	; 63
    5150:	88 39       	cpi	r24, 0x98	; 152
    5152:	20 f0       	brcs	.+8      	; 0x515c <log+0x3c>
    5154:	80 3e       	cpi	r24, 0xE0	; 224
    5156:	30 f0       	brcs	.+12     	; 0x5164 <log+0x44>
    5158:	21 96       	adiw	r28, 0x01	; 1
    515a:	8f 77       	andi	r24, 0x7F	; 127
    515c:	e7 dc       	rcall	.-1586   	; 0x4b2c <__addsf3>
    515e:	e4 e2       	ldi	r30, 0x24	; 36
    5160:	f2 e0       	ldi	r31, 0x02	; 2
    5162:	03 c0       	rjmp	.+6      	; 0x516a <log+0x4a>
    5164:	e3 dc       	rcall	.-1594   	; 0x4b2c <__addsf3>
    5166:	e1 e5       	ldi	r30, 0x51	; 81
    5168:	f2 e0       	ldi	r31, 0x02	; 2
    516a:	73 df       	rcall	.-282    	; 0x5052 <__fp_powser>
    516c:	8b 01       	movw	r16, r22
    516e:	be 01       	movw	r22, r28
    5170:	ec 01       	movw	r28, r24
    5172:	fb 2e       	mov	r15, r27
    5174:	6f 57       	subi	r22, 0x7F	; 127
    5176:	71 09       	sbc	r23, r1
    5178:	75 95       	asr	r23
    517a:	77 1f       	adc	r23, r23
    517c:	88 0b       	sbc	r24, r24
    517e:	99 0b       	sbc	r25, r25
    5180:	d4 dd       	rcall	.-1112   	; 0x4d2a <__floatsisf>
    5182:	28 e1       	ldi	r18, 0x18	; 24
    5184:	32 e7       	ldi	r19, 0x72	; 114
    5186:	41 e3       	ldi	r20, 0x31	; 49
    5188:	5f e3       	ldi	r21, 0x3F	; 63
    518a:	6b de       	rcall	.-810    	; 0x4e62 <__mulsf3x>
    518c:	af 2d       	mov	r26, r15
    518e:	98 01       	movw	r18, r16
    5190:	ae 01       	movw	r20, r28
    5192:	ff 90       	pop	r15
    5194:	0f 91       	pop	r16
    5196:	1f 91       	pop	r17
    5198:	cf 91       	pop	r28
    519a:	df 91       	pop	r29
    519c:	d8 dc       	rcall	.-1616   	; 0x4b4e <__addsf3x>
    519e:	17 ce       	rjmp	.-978    	; 0x4dce <__fp_round>

000051a0 <modf>:
    51a0:	fa 01       	movw	r30, r20
    51a2:	dc 01       	movw	r26, r24
    51a4:	aa 0f       	add	r26, r26
    51a6:	bb 1f       	adc	r27, r27
    51a8:	9b 01       	movw	r18, r22
    51aa:	ac 01       	movw	r20, r24
    51ac:	bf 57       	subi	r27, 0x7F	; 127
    51ae:	28 f4       	brcc	.+10     	; 0x51ba <modf+0x1a>
    51b0:	22 27       	eor	r18, r18
    51b2:	33 27       	eor	r19, r19
    51b4:	44 27       	eor	r20, r20
    51b6:	50 78       	andi	r21, 0x80	; 128
    51b8:	1f c0       	rjmp	.+62     	; 0x51f8 <modf+0x58>
    51ba:	b7 51       	subi	r27, 0x17	; 23
    51bc:	88 f4       	brcc	.+34     	; 0x51e0 <modf+0x40>
    51be:	ab 2f       	mov	r26, r27
    51c0:	00 24       	eor	r0, r0
    51c2:	46 95       	lsr	r20
    51c4:	37 95       	ror	r19
    51c6:	27 95       	ror	r18
    51c8:	01 1c       	adc	r0, r1
    51ca:	a3 95       	inc	r26
    51cc:	d2 f3       	brmi	.-12     	; 0x51c2 <modf+0x22>
    51ce:	00 20       	and	r0, r0
    51d0:	69 f0       	breq	.+26     	; 0x51ec <modf+0x4c>
    51d2:	22 0f       	add	r18, r18
    51d4:	33 1f       	adc	r19, r19
    51d6:	44 1f       	adc	r20, r20
    51d8:	b3 95       	inc	r27
    51da:	da f3       	brmi	.-10     	; 0x51d2 <modf+0x32>
    51dc:	0d d0       	rcall	.+26     	; 0x51f8 <modf+0x58>
    51de:	a5 cc       	rjmp	.-1718   	; 0x4b2a <__subsf3>
    51e0:	61 30       	cpi	r22, 0x01	; 1
    51e2:	71 05       	cpc	r23, r1
    51e4:	a0 e8       	ldi	r26, 0x80	; 128
    51e6:	8a 07       	cpc	r24, r26
    51e8:	b9 46       	sbci	r27, 0x69	; 105
    51ea:	30 f4       	brcc	.+12     	; 0x51f8 <modf+0x58>
    51ec:	9b 01       	movw	r18, r22
    51ee:	ac 01       	movw	r20, r24
    51f0:	66 27       	eor	r22, r22
    51f2:	77 27       	eor	r23, r23
    51f4:	88 27       	eor	r24, r24
    51f6:	90 78       	andi	r25, 0x80	; 128
    51f8:	30 96       	adiw	r30, 0x00	; 0
    51fa:	21 f0       	breq	.+8      	; 0x5204 <modf+0x64>
    51fc:	20 83       	st	Z, r18
    51fe:	31 83       	std	Z+1, r19	; 0x01
    5200:	42 83       	std	Z+2, r20	; 0x02
    5202:	53 83       	std	Z+3, r21	; 0x03
    5204:	08 95       	ret

00005206 <__fp_mpack>:
    5206:	9f 3f       	cpi	r25, 0xFF	; 255
    5208:	31 f0       	breq	.+12     	; 0x5216 <__fp_mpack_finite+0xc>

0000520a <__fp_mpack_finite>:
    520a:	91 50       	subi	r25, 0x01	; 1
    520c:	20 f4       	brcc	.+8      	; 0x5216 <__fp_mpack_finite+0xc>
    520e:	87 95       	ror	r24
    5210:	77 95       	ror	r23
    5212:	67 95       	ror	r22
    5214:	b7 95       	ror	r27
    5216:	88 0f       	add	r24, r24
    5218:	91 1d       	adc	r25, r1
    521a:	96 95       	lsr	r25
    521c:	87 95       	ror	r24
    521e:	97 f9       	bld	r25, 7
    5220:	08 95       	ret

00005222 <__udivmodhi4>:
    5222:	aa 1b       	sub	r26, r26
    5224:	bb 1b       	sub	r27, r27
    5226:	51 e1       	ldi	r21, 0x11	; 17
    5228:	07 c0       	rjmp	.+14     	; 0x5238 <__udivmodhi4_ep>

0000522a <__udivmodhi4_loop>:
    522a:	aa 1f       	adc	r26, r26
    522c:	bb 1f       	adc	r27, r27
    522e:	a6 17       	cp	r26, r22
    5230:	b7 07       	cpc	r27, r23
    5232:	10 f0       	brcs	.+4      	; 0x5238 <__udivmodhi4_ep>
    5234:	a6 1b       	sub	r26, r22
    5236:	b7 0b       	sbc	r27, r23

00005238 <__udivmodhi4_ep>:
    5238:	88 1f       	adc	r24, r24
    523a:	99 1f       	adc	r25, r25
    523c:	5a 95       	dec	r21
    523e:	a9 f7       	brne	.-22     	; 0x522a <__udivmodhi4_loop>
    5240:	80 95       	com	r24
    5242:	90 95       	com	r25
    5244:	bc 01       	movw	r22, r24
    5246:	cd 01       	movw	r24, r26
    5248:	08 95       	ret

0000524a <__udivmodsi4>:
    524a:	a1 e2       	ldi	r26, 0x21	; 33
    524c:	1a 2e       	mov	r1, r26
    524e:	aa 1b       	sub	r26, r26
    5250:	bb 1b       	sub	r27, r27
    5252:	fd 01       	movw	r30, r26
    5254:	0d c0       	rjmp	.+26     	; 0x5270 <__udivmodsi4_ep>

00005256 <__udivmodsi4_loop>:
    5256:	aa 1f       	adc	r26, r26
    5258:	bb 1f       	adc	r27, r27
    525a:	ee 1f       	adc	r30, r30
    525c:	ff 1f       	adc	r31, r31
    525e:	a2 17       	cp	r26, r18
    5260:	b3 07       	cpc	r27, r19
    5262:	e4 07       	cpc	r30, r20
    5264:	f5 07       	cpc	r31, r21
    5266:	20 f0       	brcs	.+8      	; 0x5270 <__udivmodsi4_ep>
    5268:	a2 1b       	sub	r26, r18
    526a:	b3 0b       	sbc	r27, r19
    526c:	e4 0b       	sbc	r30, r20
    526e:	f5 0b       	sbc	r31, r21

00005270 <__udivmodsi4_ep>:
    5270:	66 1f       	adc	r22, r22
    5272:	77 1f       	adc	r23, r23
    5274:	88 1f       	adc	r24, r24
    5276:	99 1f       	adc	r25, r25
    5278:	1a 94       	dec	r1
    527a:	69 f7       	brne	.-38     	; 0x5256 <__udivmodsi4_loop>
    527c:	60 95       	com	r22
    527e:	70 95       	com	r23
    5280:	80 95       	com	r24
    5282:	90 95       	com	r25
    5284:	9b 01       	movw	r18, r22
    5286:	ac 01       	movw	r20, r24
    5288:	bd 01       	movw	r22, r26
    528a:	cf 01       	movw	r24, r30
    528c:	08 95       	ret

0000528e <__prologue_saves__>:
    528e:	2f 92       	push	r2
    5290:	3f 92       	push	r3
    5292:	4f 92       	push	r4
    5294:	5f 92       	push	r5
    5296:	6f 92       	push	r6
    5298:	7f 92       	push	r7
    529a:	8f 92       	push	r8
    529c:	9f 92       	push	r9
    529e:	af 92       	push	r10
    52a0:	bf 92       	push	r11
    52a2:	cf 92       	push	r12
    52a4:	df 92       	push	r13
    52a6:	ef 92       	push	r14
    52a8:	ff 92       	push	r15
    52aa:	0f 93       	push	r16
    52ac:	1f 93       	push	r17
    52ae:	cf 93       	push	r28
    52b0:	df 93       	push	r29
    52b2:	cd b7       	in	r28, 0x3d	; 61
    52b4:	de b7       	in	r29, 0x3e	; 62
    52b6:	ca 1b       	sub	r28, r26
    52b8:	db 0b       	sbc	r29, r27
    52ba:	cd bf       	out	0x3d, r28	; 61
    52bc:	de bf       	out	0x3e, r29	; 62
    52be:	19 94       	eijmp

000052c0 <__epilogue_restores__>:
    52c0:	2a 88       	ldd	r2, Y+18	; 0x12
    52c2:	39 88       	ldd	r3, Y+17	; 0x11
    52c4:	48 88       	ldd	r4, Y+16	; 0x10
    52c6:	5f 84       	ldd	r5, Y+15	; 0x0f
    52c8:	6e 84       	ldd	r6, Y+14	; 0x0e
    52ca:	7d 84       	ldd	r7, Y+13	; 0x0d
    52cc:	8c 84       	ldd	r8, Y+12	; 0x0c
    52ce:	9b 84       	ldd	r9, Y+11	; 0x0b
    52d0:	aa 84       	ldd	r10, Y+10	; 0x0a
    52d2:	b9 84       	ldd	r11, Y+9	; 0x09
    52d4:	c8 84       	ldd	r12, Y+8	; 0x08
    52d6:	df 80       	ldd	r13, Y+7	; 0x07
    52d8:	ee 80       	ldd	r14, Y+6	; 0x06
    52da:	fd 80       	ldd	r15, Y+5	; 0x05
    52dc:	0c 81       	ldd	r16, Y+4	; 0x04
    52de:	1b 81       	ldd	r17, Y+3	; 0x03
    52e0:	aa 81       	ldd	r26, Y+2	; 0x02
    52e2:	b9 81       	ldd	r27, Y+1	; 0x01
    52e4:	ce 0f       	add	r28, r30
    52e6:	d1 1d       	adc	r29, r1
    52e8:	cd bf       	out	0x3d, r28	; 61
    52ea:	de bf       	out	0x3e, r29	; 62
    52ec:	ed 01       	movw	r28, r26
    52ee:	08 95       	ret

000052f0 <calloc>:
    52f0:	0f 93       	push	r16
    52f2:	1f 93       	push	r17
    52f4:	cf 93       	push	r28
    52f6:	df 93       	push	r29
    52f8:	68 9f       	mul	r22, r24
    52fa:	80 01       	movw	r16, r0
    52fc:	69 9f       	mul	r22, r25
    52fe:	10 0d       	add	r17, r0
    5300:	78 9f       	mul	r23, r24
    5302:	10 0d       	add	r17, r0
    5304:	11 24       	eor	r1, r1
    5306:	c8 01       	movw	r24, r16
    5308:	0f d0       	rcall	.+30     	; 0x5328 <malloc>
    530a:	c8 2f       	mov	r28, r24
    530c:	d9 2f       	mov	r29, r25
    530e:	20 97       	sbiw	r28, 0x00	; 0
    5310:	29 f0       	breq	.+10     	; 0x531c <calloc+0x2c>
    5312:	a8 01       	movw	r20, r16
    5314:	60 e0       	ldi	r22, 0x00	; 0
    5316:	70 e0       	ldi	r23, 0x00	; 0
    5318:	8c 2f       	mov	r24, r28
    531a:	49 d1       	rcall	.+658    	; 0x55ae <memset>
    531c:	ce 01       	movw	r24, r28
    531e:	df 91       	pop	r29
    5320:	cf 91       	pop	r28
    5322:	1f 91       	pop	r17
    5324:	0f 91       	pop	r16
    5326:	08 95       	ret

00005328 <malloc>:
    5328:	0f 93       	push	r16
    532a:	1f 93       	push	r17
    532c:	cf 93       	push	r28
    532e:	df 93       	push	r29
    5330:	82 30       	cpi	r24, 0x02	; 2
    5332:	91 05       	cpc	r25, r1
    5334:	10 f4       	brcc	.+4      	; 0x533a <malloc+0x12>
    5336:	82 e0       	ldi	r24, 0x02	; 2
    5338:	90 e0       	ldi	r25, 0x00	; 0
    533a:	e0 91 a1 2a 	lds	r30, 0x2AA1
    533e:	f0 91 a2 2a 	lds	r31, 0x2AA2
    5342:	20 e0       	ldi	r18, 0x00	; 0
    5344:	30 e0       	ldi	r19, 0x00	; 0
    5346:	c0 e0       	ldi	r28, 0x00	; 0
    5348:	d0 e0       	ldi	r29, 0x00	; 0
    534a:	23 c0       	rjmp	.+70     	; 0x5392 <malloc+0x6a>
    534c:	40 81       	ld	r20, Z
    534e:	51 81       	ldd	r21, Z+1	; 0x01
    5350:	48 17       	cp	r20, r24
    5352:	59 07       	cpc	r21, r25
    5354:	a8 f0       	brcs	.+42     	; 0x5380 <malloc+0x58>
    5356:	48 17       	cp	r20, r24
    5358:	59 07       	cpc	r21, r25
    535a:	61 f4       	brne	.+24     	; 0x5374 <malloc+0x4c>
    535c:	82 81       	ldd	r24, Z+2	; 0x02
    535e:	93 81       	ldd	r25, Z+3	; 0x03
    5360:	20 97       	sbiw	r28, 0x00	; 0
    5362:	19 f0       	breq	.+6      	; 0x536a <malloc+0x42>
    5364:	8a 83       	std	Y+2, r24	; 0x02
    5366:	9b 83       	std	Y+3, r25	; 0x03
    5368:	2e c0       	rjmp	.+92     	; 0x53c6 <malloc+0x9e>
    536a:	80 93 a1 2a 	sts	0x2AA1, r24
    536e:	90 93 a2 2a 	sts	0x2AA2, r25
    5372:	29 c0       	rjmp	.+82     	; 0x53c6 <malloc+0x9e>
    5374:	21 15       	cp	r18, r1
    5376:	31 05       	cpc	r19, r1
    5378:	29 f0       	breq	.+10     	; 0x5384 <malloc+0x5c>
    537a:	42 17       	cp	r20, r18
    537c:	53 07       	cpc	r21, r19
    537e:	10 f0       	brcs	.+4      	; 0x5384 <malloc+0x5c>
    5380:	a9 01       	movw	r20, r18
    5382:	02 c0       	rjmp	.+4      	; 0x5388 <malloc+0x60>
    5384:	be 01       	movw	r22, r28
    5386:	df 01       	movw	r26, r30
    5388:	02 81       	ldd	r16, Z+2	; 0x02
    538a:	13 81       	ldd	r17, Z+3	; 0x03
    538c:	ef 01       	movw	r28, r30
    538e:	9a 01       	movw	r18, r20
    5390:	f8 01       	movw	r30, r16
    5392:	30 97       	sbiw	r30, 0x00	; 0
    5394:	d9 f6       	brne	.-74     	; 0x534c <malloc+0x24>
    5396:	21 15       	cp	r18, r1
    5398:	31 05       	cpc	r19, r1
    539a:	09 f1       	breq	.+66     	; 0x53de <malloc+0xb6>
    539c:	28 1b       	sub	r18, r24
    539e:	39 0b       	sbc	r19, r25
    53a0:	24 30       	cpi	r18, 0x04	; 4
    53a2:	31 05       	cpc	r19, r1
    53a4:	90 f4       	brcc	.+36     	; 0x53ca <malloc+0xa2>
    53a6:	12 96       	adiw	r26, 0x02	; 2
    53a8:	8d 91       	ld	r24, X+
    53aa:	9c 91       	ld	r25, X
    53ac:	13 97       	sbiw	r26, 0x03	; 3
    53ae:	61 15       	cp	r22, r1
    53b0:	71 05       	cpc	r23, r1
    53b2:	21 f0       	breq	.+8      	; 0x53bc <malloc+0x94>
    53b4:	fb 01       	movw	r30, r22
    53b6:	82 83       	std	Z+2, r24	; 0x02
    53b8:	93 83       	std	Z+3, r25	; 0x03
    53ba:	04 c0       	rjmp	.+8      	; 0x53c4 <malloc+0x9c>
    53bc:	80 93 a1 2a 	sts	0x2AA1, r24
    53c0:	90 93 a2 2a 	sts	0x2AA2, r25
    53c4:	fd 01       	movw	r30, r26
    53c6:	32 96       	adiw	r30, 0x02	; 2
    53c8:	44 c0       	rjmp	.+136    	; 0x5452 <malloc+0x12a>
    53ca:	fd 01       	movw	r30, r26
    53cc:	e2 0f       	add	r30, r18
    53ce:	f3 1f       	adc	r31, r19
    53d0:	81 93       	st	Z+, r24
    53d2:	91 93       	st	Z+, r25
    53d4:	22 50       	subi	r18, 0x02	; 2
    53d6:	31 09       	sbc	r19, r1
    53d8:	2d 93       	st	X+, r18
    53da:	3c 93       	st	X, r19
    53dc:	3a c0       	rjmp	.+116    	; 0x5452 <malloc+0x12a>
    53de:	20 91 9f 2a 	lds	r18, 0x2A9F
    53e2:	30 91 a0 2a 	lds	r19, 0x2AA0
    53e6:	23 2b       	or	r18, r19
    53e8:	41 f4       	brne	.+16     	; 0x53fa <malloc+0xd2>
    53ea:	20 91 03 20 	lds	r18, 0x2003
    53ee:	30 91 04 20 	lds	r19, 0x2004
    53f2:	20 93 9f 2a 	sts	0x2A9F, r18
    53f6:	30 93 a0 2a 	sts	0x2AA0, r19
    53fa:	20 91 01 20 	lds	r18, 0x2001
    53fe:	30 91 02 20 	lds	r19, 0x2002
    5402:	21 15       	cp	r18, r1
    5404:	31 05       	cpc	r19, r1
    5406:	41 f4       	brne	.+16     	; 0x5418 <malloc+0xf0>
    5408:	2d b7       	in	r18, 0x3d	; 61
    540a:	3e b7       	in	r19, 0x3e	; 62
    540c:	40 91 05 20 	lds	r20, 0x2005
    5410:	50 91 06 20 	lds	r21, 0x2006
    5414:	24 1b       	sub	r18, r20
    5416:	35 0b       	sbc	r19, r21
    5418:	e0 91 9f 2a 	lds	r30, 0x2A9F
    541c:	f0 91 a0 2a 	lds	r31, 0x2AA0
    5420:	e2 17       	cp	r30, r18
    5422:	f3 07       	cpc	r31, r19
    5424:	a0 f4       	brcc	.+40     	; 0x544e <malloc+0x126>
    5426:	2e 1b       	sub	r18, r30
    5428:	3f 0b       	sbc	r19, r31
    542a:	28 17       	cp	r18, r24
    542c:	39 07       	cpc	r19, r25
    542e:	78 f0       	brcs	.+30     	; 0x544e <malloc+0x126>
    5430:	ac 01       	movw	r20, r24
    5432:	4e 5f       	subi	r20, 0xFE	; 254
    5434:	5f 4f       	sbci	r21, 0xFF	; 255
    5436:	24 17       	cp	r18, r20
    5438:	35 07       	cpc	r19, r21
    543a:	48 f0       	brcs	.+18     	; 0x544e <malloc+0x126>
    543c:	4e 0f       	add	r20, r30
    543e:	5f 1f       	adc	r21, r31
    5440:	40 93 9f 2a 	sts	0x2A9F, r20
    5444:	50 93 a0 2a 	sts	0x2AA0, r21
    5448:	81 93       	st	Z+, r24
    544a:	91 93       	st	Z+, r25
    544c:	02 c0       	rjmp	.+4      	; 0x5452 <malloc+0x12a>
    544e:	e0 e0       	ldi	r30, 0x00	; 0
    5450:	f0 e0       	ldi	r31, 0x00	; 0
    5452:	cf 01       	movw	r24, r30
    5454:	df 91       	pop	r29
    5456:	cf 91       	pop	r28
    5458:	1f 91       	pop	r17
    545a:	0f 91       	pop	r16
    545c:	08 95       	ret

0000545e <free>:
    545e:	ef 92       	push	r14
    5460:	ff 92       	push	r15
    5462:	0f 93       	push	r16
    5464:	1f 93       	push	r17
    5466:	cf 93       	push	r28
    5468:	df 93       	push	r29
    546a:	00 97       	sbiw	r24, 0x00	; 0
    546c:	09 f4       	brne	.+2      	; 0x5470 <free+0x12>
    546e:	8f c0       	rjmp	.+286    	; 0x558e <free+0x130>
    5470:	dc 01       	movw	r26, r24
    5472:	12 97       	sbiw	r26, 0x02	; 2
    5474:	12 96       	adiw	r26, 0x02	; 2
    5476:	1d 92       	st	X+, r1
    5478:	1c 92       	st	X, r1
    547a:	13 97       	sbiw	r26, 0x03	; 3
    547c:	e0 90 a1 2a 	lds	r14, 0x2AA1
    5480:	f0 90 a2 2a 	lds	r15, 0x2AA2
    5484:	e1 14       	cp	r14, r1
    5486:	f1 04       	cpc	r15, r1
    5488:	89 f4       	brne	.+34     	; 0x54ac <free+0x4e>
    548a:	2d 91       	ld	r18, X+
    548c:	3c 91       	ld	r19, X
    548e:	11 97       	sbiw	r26, 0x01	; 1
    5490:	28 0f       	add	r18, r24
    5492:	39 1f       	adc	r19, r25
    5494:	80 91 9f 2a 	lds	r24, 0x2A9F
    5498:	90 91 a0 2a 	lds	r25, 0x2AA0
    549c:	82 17       	cp	r24, r18
    549e:	93 07       	cpc	r25, r19
    54a0:	89 f5       	brne	.+98     	; 0x5504 <free+0xa6>
    54a2:	a0 93 9f 2a 	sts	0x2A9F, r26
    54a6:	b0 93 a0 2a 	sts	0x2AA0, r27
    54aa:	71 c0       	rjmp	.+226    	; 0x558e <free+0x130>
    54ac:	e7 01       	movw	r28, r14
    54ae:	20 e0       	ldi	r18, 0x00	; 0
    54b0:	30 e0       	ldi	r19, 0x00	; 0
    54b2:	01 c0       	rjmp	.+2      	; 0x54b6 <free+0x58>
    54b4:	ea 01       	movw	r28, r20
    54b6:	ca 17       	cp	r28, r26
    54b8:	db 07       	cpc	r29, r27
    54ba:	38 f4       	brcc	.+14     	; 0x54ca <free+0x6c>
    54bc:	4a 81       	ldd	r20, Y+2	; 0x02
    54be:	5b 81       	ldd	r21, Y+3	; 0x03
    54c0:	9e 01       	movw	r18, r28
    54c2:	41 15       	cp	r20, r1
    54c4:	51 05       	cpc	r21, r1
    54c6:	b1 f7       	brne	.-20     	; 0x54b4 <free+0x56>
    54c8:	22 c0       	rjmp	.+68     	; 0x550e <free+0xb0>
    54ca:	bc 01       	movw	r22, r24
    54cc:	62 50       	subi	r22, 0x02	; 2
    54ce:	71 09       	sbc	r23, r1
    54d0:	fb 01       	movw	r30, r22
    54d2:	c2 83       	std	Z+2, r28	; 0x02
    54d4:	d3 83       	std	Z+3, r29	; 0x03
    54d6:	00 81       	ld	r16, Z
    54d8:	11 81       	ldd	r17, Z+1	; 0x01
    54da:	ac 01       	movw	r20, r24
    54dc:	40 0f       	add	r20, r16
    54de:	51 1f       	adc	r21, r17
    54e0:	4c 17       	cp	r20, r28
    54e2:	5d 07       	cpc	r21, r29
    54e4:	61 f4       	brne	.+24     	; 0x54fe <free+0xa0>
    54e6:	48 81       	ld	r20, Y
    54e8:	59 81       	ldd	r21, Y+1	; 0x01
    54ea:	40 0f       	add	r20, r16
    54ec:	51 1f       	adc	r21, r17
    54ee:	4e 5f       	subi	r20, 0xFE	; 254
    54f0:	5f 4f       	sbci	r21, 0xFF	; 255
    54f2:	40 83       	st	Z, r20
    54f4:	51 83       	std	Z+1, r21	; 0x01
    54f6:	4a 81       	ldd	r20, Y+2	; 0x02
    54f8:	5b 81       	ldd	r21, Y+3	; 0x03
    54fa:	42 83       	std	Z+2, r20	; 0x02
    54fc:	53 83       	std	Z+3, r21	; 0x03
    54fe:	21 15       	cp	r18, r1
    5500:	31 05       	cpc	r19, r1
    5502:	29 f4       	brne	.+10     	; 0x550e <free+0xb0>
    5504:	a0 93 a1 2a 	sts	0x2AA1, r26
    5508:	b0 93 a2 2a 	sts	0x2AA2, r27
    550c:	40 c0       	rjmp	.+128    	; 0x558e <free+0x130>
    550e:	f9 01       	movw	r30, r18
    5510:	a2 83       	std	Z+2, r26	; 0x02
    5512:	b3 83       	std	Z+3, r27	; 0x03
    5514:	e9 01       	movw	r28, r18
    5516:	69 91       	ld	r22, Y+
    5518:	79 91       	ld	r23, Y+
    551a:	c6 0f       	add	r28, r22
    551c:	d7 1f       	adc	r29, r23
    551e:	ac 17       	cp	r26, r28
    5520:	bd 07       	cpc	r27, r29
    5522:	79 f4       	brne	.+30     	; 0x5542 <free+0xe4>
    5524:	dc 01       	movw	r26, r24
    5526:	5e 91       	ld	r21, -X
    5528:	4e 91       	ld	r20, -X
    552a:	46 0f       	add	r20, r22
    552c:	57 1f       	adc	r21, r23
    552e:	4e 5f       	subi	r20, 0xFE	; 254
    5530:	5f 4f       	sbci	r21, 0xFF	; 255
    5532:	40 83       	st	Z, r20
    5534:	51 83       	std	Z+1, r21	; 0x01
    5536:	12 96       	adiw	r26, 0x02	; 2
    5538:	8d 91       	ld	r24, X+
    553a:	9c 91       	ld	r25, X
    553c:	13 97       	sbiw	r26, 0x03	; 3
    553e:	82 83       	std	Z+2, r24	; 0x02
    5540:	93 83       	std	Z+3, r25	; 0x03
    5542:	a0 e0       	ldi	r26, 0x00	; 0
    5544:	b0 e0       	ldi	r27, 0x00	; 0
    5546:	02 c0       	rjmp	.+4      	; 0x554c <free+0xee>
    5548:	d7 01       	movw	r26, r14
    554a:	7c 01       	movw	r14, r24
    554c:	f7 01       	movw	r30, r14
    554e:	82 81       	ldd	r24, Z+2	; 0x02
    5550:	93 81       	ldd	r25, Z+3	; 0x03
    5552:	00 97       	sbiw	r24, 0x00	; 0
    5554:	c9 f7       	brne	.-14     	; 0x5548 <free+0xea>
    5556:	c7 01       	movw	r24, r14
    5558:	02 96       	adiw	r24, 0x02	; 2
    555a:	20 81       	ld	r18, Z
    555c:	31 81       	ldd	r19, Z+1	; 0x01
    555e:	82 0f       	add	r24, r18
    5560:	93 1f       	adc	r25, r19
    5562:	20 91 9f 2a 	lds	r18, 0x2A9F
    5566:	30 91 a0 2a 	lds	r19, 0x2AA0
    556a:	28 17       	cp	r18, r24
    556c:	39 07       	cpc	r19, r25
    556e:	79 f4       	brne	.+30     	; 0x558e <free+0x130>
    5570:	10 97       	sbiw	r26, 0x00	; 0
    5572:	29 f4       	brne	.+10     	; 0x557e <free+0x120>
    5574:	10 92 a1 2a 	sts	0x2AA1, r1
    5578:	10 92 a2 2a 	sts	0x2AA2, r1
    557c:	04 c0       	rjmp	.+8      	; 0x5586 <free+0x128>
    557e:	12 96       	adiw	r26, 0x02	; 2
    5580:	1d 92       	st	X+, r1
    5582:	1c 92       	st	X, r1
    5584:	13 97       	sbiw	r26, 0x03	; 3
    5586:	e0 92 9f 2a 	sts	0x2A9F, r14
    558a:	f0 92 a0 2a 	sts	0x2AA0, r15
    558e:	df 91       	pop	r29
    5590:	cf 91       	pop	r28
    5592:	1f 91       	pop	r17
    5594:	0f 91       	pop	r16
    5596:	ff 90       	pop	r15
    5598:	ef 90       	pop	r14
    559a:	08 95       	ret

0000559c <memcpy>:
    559c:	fb 01       	movw	r30, r22
    559e:	dc 01       	movw	r26, r24
    55a0:	02 c0       	rjmp	.+4      	; 0x55a6 <memcpy+0xa>
    55a2:	01 90       	ld	r0, Z+
    55a4:	0d 92       	st	X+, r0
    55a6:	41 50       	subi	r20, 0x01	; 1
    55a8:	50 40       	sbci	r21, 0x00	; 0
    55aa:	d8 f7       	brcc	.-10     	; 0x55a2 <memcpy+0x6>
    55ac:	08 95       	ret

000055ae <memset>:
    55ae:	dc 01       	movw	r26, r24
    55b0:	01 c0       	rjmp	.+2      	; 0x55b4 <memset+0x6>
    55b2:	6d 93       	st	X+, r22
    55b4:	41 50       	subi	r20, 0x01	; 1
    55b6:	50 40       	sbci	r21, 0x00	; 0
    55b8:	e0 f7       	brcc	.-8      	; 0x55b2 <memset+0x4>
    55ba:	08 95       	ret

000055bc <itoa>:
    55bc:	fb 01       	movw	r30, r22
    55be:	9f 01       	movw	r18, r30
    55c0:	e8 94       	clt
    55c2:	42 30       	cpi	r20, 0x02	; 2
    55c4:	bc f0       	brlt	.+46     	; 0x55f4 <itoa+0x38>
    55c6:	45 32       	cpi	r20, 0x25	; 37
    55c8:	ac f4       	brge	.+42     	; 0x55f4 <itoa+0x38>
    55ca:	4a 30       	cpi	r20, 0x0A	; 10
    55cc:	29 f4       	brne	.+10     	; 0x55d8 <itoa+0x1c>
    55ce:	97 fb       	bst	r25, 7
    55d0:	1e f4       	brtc	.+6      	; 0x55d8 <itoa+0x1c>
    55d2:	90 95       	com	r25
    55d4:	81 95       	neg	r24
    55d6:	9f 4f       	sbci	r25, 0xFF	; 255
    55d8:	64 2f       	mov	r22, r20
    55da:	77 27       	eor	r23, r23
    55dc:	22 de       	rcall	.-956    	; 0x5222 <__udivmodhi4>
    55de:	80 5d       	subi	r24, 0xD0	; 208
    55e0:	8a 33       	cpi	r24, 0x3A	; 58
    55e2:	0c f0       	brlt	.+2      	; 0x55e6 <itoa+0x2a>
    55e4:	89 5d       	subi	r24, 0xD9	; 217
    55e6:	81 93       	st	Z+, r24
    55e8:	cb 01       	movw	r24, r22
    55ea:	00 97       	sbiw	r24, 0x00	; 0
    55ec:	a9 f7       	brne	.-22     	; 0x55d8 <itoa+0x1c>
    55ee:	16 f4       	brtc	.+4      	; 0x55f4 <itoa+0x38>
    55f0:	5d e2       	ldi	r21, 0x2D	; 45
    55f2:	51 93       	st	Z+, r21
    55f4:	10 82       	st	Z, r1
    55f6:	c9 01       	movw	r24, r18
    55f8:	66 c2       	rjmp	.+1228   	; 0x5ac6 <strrev>

000055fa <snprintf>:
    55fa:	0f 93       	push	r16
    55fc:	1f 93       	push	r17
    55fe:	cf 93       	push	r28
    5600:	df 93       	push	r29
    5602:	cd b7       	in	r28, 0x3d	; 61
    5604:	de b7       	in	r29, 0x3e	; 62
    5606:	2e 97       	sbiw	r28, 0x0e	; 14
    5608:	cd bf       	out	0x3d, r28	; 61
    560a:	de bf       	out	0x3e, r29	; 62
    560c:	0e 89       	ldd	r16, Y+22	; 0x16
    560e:	1f 89       	ldd	r17, Y+23	; 0x17
    5610:	88 8d       	ldd	r24, Y+24	; 0x18
    5612:	99 8d       	ldd	r25, Y+25	; 0x19
    5614:	26 e0       	ldi	r18, 0x06	; 6
    5616:	2c 83       	std	Y+4, r18	; 0x04
    5618:	09 83       	std	Y+1, r16	; 0x01
    561a:	1a 83       	std	Y+2, r17	; 0x02
    561c:	97 ff       	sbrs	r25, 7
    561e:	02 c0       	rjmp	.+4      	; 0x5624 <snprintf+0x2a>
    5620:	80 e0       	ldi	r24, 0x00	; 0
    5622:	90 e8       	ldi	r25, 0x80	; 128
    5624:	01 97       	sbiw	r24, 0x01	; 1
    5626:	8d 83       	std	Y+5, r24	; 0x05
    5628:	9e 83       	std	Y+6, r25	; 0x06
    562a:	ce 01       	movw	r24, r28
    562c:	4c 96       	adiw	r24, 0x1c	; 28
    562e:	ac 01       	movw	r20, r24
    5630:	6a 8d       	ldd	r22, Y+26	; 0x1a
    5632:	7b 8d       	ldd	r23, Y+27	; 0x1b
    5634:	ce 01       	movw	r24, r28
    5636:	01 96       	adiw	r24, 0x01	; 1
    5638:	3e d0       	rcall	.+124    	; 0x56b6 <vfprintf>
    563a:	4d 81       	ldd	r20, Y+5	; 0x05
    563c:	5e 81       	ldd	r21, Y+6	; 0x06
    563e:	57 fd       	sbrc	r21, 7
    5640:	0a c0       	rjmp	.+20     	; 0x5656 <snprintf+0x5c>
    5642:	2f 81       	ldd	r18, Y+7	; 0x07
    5644:	38 85       	ldd	r19, Y+8	; 0x08
    5646:	42 17       	cp	r20, r18
    5648:	53 07       	cpc	r21, r19
    564a:	0c f4       	brge	.+2      	; 0x564e <snprintf+0x54>
    564c:	9a 01       	movw	r18, r20
    564e:	f8 01       	movw	r30, r16
    5650:	e2 0f       	add	r30, r18
    5652:	f3 1f       	adc	r31, r19
    5654:	10 82       	st	Z, r1
    5656:	2e 96       	adiw	r28, 0x0e	; 14
    5658:	cd bf       	out	0x3d, r28	; 61
    565a:	de bf       	out	0x3e, r29	; 62
    565c:	df 91       	pop	r29
    565e:	cf 91       	pop	r28
    5660:	1f 91       	pop	r17
    5662:	0f 91       	pop	r16
    5664:	08 95       	ret

00005666 <sprintf>:
    5666:	0f 93       	push	r16
    5668:	1f 93       	push	r17
    566a:	cf 93       	push	r28
    566c:	df 93       	push	r29
    566e:	cd b7       	in	r28, 0x3d	; 61
    5670:	de b7       	in	r29, 0x3e	; 62
    5672:	2e 97       	sbiw	r28, 0x0e	; 14
    5674:	cd bf       	out	0x3d, r28	; 61
    5676:	de bf       	out	0x3e, r29	; 62
    5678:	0e 89       	ldd	r16, Y+22	; 0x16
    567a:	1f 89       	ldd	r17, Y+23	; 0x17
    567c:	86 e0       	ldi	r24, 0x06	; 6
    567e:	8c 83       	std	Y+4, r24	; 0x04
    5680:	09 83       	std	Y+1, r16	; 0x01
    5682:	1a 83       	std	Y+2, r17	; 0x02
    5684:	8f ef       	ldi	r24, 0xFF	; 255
    5686:	9f e7       	ldi	r25, 0x7F	; 127
    5688:	8d 83       	std	Y+5, r24	; 0x05
    568a:	9e 83       	std	Y+6, r25	; 0x06
    568c:	ce 01       	movw	r24, r28
    568e:	4a 96       	adiw	r24, 0x1a	; 26
    5690:	ac 01       	movw	r20, r24
    5692:	68 8d       	ldd	r22, Y+24	; 0x18
    5694:	79 8d       	ldd	r23, Y+25	; 0x19
    5696:	ce 01       	movw	r24, r28
    5698:	01 96       	adiw	r24, 0x01	; 1
    569a:	0d d0       	rcall	.+26     	; 0x56b6 <vfprintf>
    569c:	ef 81       	ldd	r30, Y+7	; 0x07
    569e:	f8 85       	ldd	r31, Y+8	; 0x08
    56a0:	e0 0f       	add	r30, r16
    56a2:	f1 1f       	adc	r31, r17
    56a4:	10 82       	st	Z, r1
    56a6:	2e 96       	adiw	r28, 0x0e	; 14
    56a8:	cd bf       	out	0x3d, r28	; 61
    56aa:	de bf       	out	0x3e, r29	; 62
    56ac:	df 91       	pop	r29
    56ae:	cf 91       	pop	r28
    56b0:	1f 91       	pop	r17
    56b2:	0f 91       	pop	r16
    56b4:	08 95       	ret

000056b6 <vfprintf>:
    56b6:	2f 92       	push	r2
    56b8:	3f 92       	push	r3
    56ba:	4f 92       	push	r4
    56bc:	5f 92       	push	r5
    56be:	6f 92       	push	r6
    56c0:	7f 92       	push	r7
    56c2:	8f 92       	push	r8
    56c4:	9f 92       	push	r9
    56c6:	af 92       	push	r10
    56c8:	bf 92       	push	r11
    56ca:	cf 92       	push	r12
    56cc:	df 92       	push	r13
    56ce:	ef 92       	push	r14
    56d0:	ff 92       	push	r15
    56d2:	0f 93       	push	r16
    56d4:	1f 93       	push	r17
    56d6:	cf 93       	push	r28
    56d8:	df 93       	push	r29
    56da:	cd b7       	in	r28, 0x3d	; 61
    56dc:	de b7       	in	r29, 0x3e	; 62
    56de:	2c 97       	sbiw	r28, 0x0c	; 12
    56e0:	cd bf       	out	0x3d, r28	; 61
    56e2:	de bf       	out	0x3e, r29	; 62
    56e4:	7c 01       	movw	r14, r24
    56e6:	6b 01       	movw	r12, r22
    56e8:	8a 01       	movw	r16, r20
    56ea:	fc 01       	movw	r30, r24
    56ec:	16 82       	std	Z+6, r1	; 0x06
    56ee:	17 82       	std	Z+7, r1	; 0x07
    56f0:	83 81       	ldd	r24, Z+3	; 0x03
    56f2:	81 ff       	sbrs	r24, 1
    56f4:	b9 c1       	rjmp	.+882    	; 0x5a68 <vfprintf+0x3b2>
    56f6:	88 24       	eor	r8, r8
    56f8:	83 94       	inc	r8
    56fa:	91 2c       	mov	r9, r1
    56fc:	8c 0e       	add	r8, r28
    56fe:	9d 1e       	adc	r9, r29
    5700:	f7 01       	movw	r30, r14
    5702:	93 81       	ldd	r25, Z+3	; 0x03
    5704:	f6 01       	movw	r30, r12
    5706:	93 fd       	sbrc	r25, 3
    5708:	85 91       	lpm	r24, Z+
    570a:	93 ff       	sbrs	r25, 3
    570c:	81 91       	ld	r24, Z+
    570e:	6f 01       	movw	r12, r30
    5710:	88 23       	and	r24, r24
    5712:	09 f4       	brne	.+2      	; 0x5716 <vfprintf+0x60>
    5714:	a5 c1       	rjmp	.+842    	; 0x5a60 <vfprintf+0x3aa>
    5716:	85 32       	cpi	r24, 0x25	; 37
    5718:	39 f4       	brne	.+14     	; 0x5728 <vfprintf+0x72>
    571a:	93 fd       	sbrc	r25, 3
    571c:	85 91       	lpm	r24, Z+
    571e:	93 ff       	sbrs	r25, 3
    5720:	81 91       	ld	r24, Z+
    5722:	6f 01       	movw	r12, r30
    5724:	85 32       	cpi	r24, 0x25	; 37
    5726:	21 f4       	brne	.+8      	; 0x5730 <vfprintf+0x7a>
    5728:	b7 01       	movw	r22, r14
    572a:	90 e0       	ldi	r25, 0x00	; 0
    572c:	dc d1       	rcall	.+952    	; 0x5ae6 <fputc>
    572e:	e8 cf       	rjmp	.-48     	; 0x5700 <vfprintf+0x4a>
    5730:	51 2c       	mov	r5, r1
    5732:	31 2c       	mov	r3, r1
    5734:	20 e0       	ldi	r18, 0x00	; 0
    5736:	20 32       	cpi	r18, 0x20	; 32
    5738:	a8 f4       	brcc	.+42     	; 0x5764 <vfprintf+0xae>
    573a:	8b 32       	cpi	r24, 0x2B	; 43
    573c:	61 f0       	breq	.+24     	; 0x5756 <vfprintf+0xa0>
    573e:	28 f4       	brcc	.+10     	; 0x574a <vfprintf+0x94>
    5740:	80 32       	cpi	r24, 0x20	; 32
    5742:	51 f0       	breq	.+20     	; 0x5758 <vfprintf+0xa2>
    5744:	83 32       	cpi	r24, 0x23	; 35
    5746:	71 f4       	brne	.+28     	; 0x5764 <vfprintf+0xae>
    5748:	0b c0       	rjmp	.+22     	; 0x5760 <vfprintf+0xaa>
    574a:	8d 32       	cpi	r24, 0x2D	; 45
    574c:	39 f0       	breq	.+14     	; 0x575c <vfprintf+0xa6>
    574e:	80 33       	cpi	r24, 0x30	; 48
    5750:	49 f4       	brne	.+18     	; 0x5764 <vfprintf+0xae>
    5752:	21 60       	ori	r18, 0x01	; 1
    5754:	28 c0       	rjmp	.+80     	; 0x57a6 <vfprintf+0xf0>
    5756:	22 60       	ori	r18, 0x02	; 2
    5758:	24 60       	ori	r18, 0x04	; 4
    575a:	25 c0       	rjmp	.+74     	; 0x57a6 <vfprintf+0xf0>
    575c:	28 60       	ori	r18, 0x08	; 8
    575e:	23 c0       	rjmp	.+70     	; 0x57a6 <vfprintf+0xf0>
    5760:	20 61       	ori	r18, 0x10	; 16
    5762:	21 c0       	rjmp	.+66     	; 0x57a6 <vfprintf+0xf0>
    5764:	27 fd       	sbrc	r18, 7
    5766:	27 c0       	rjmp	.+78     	; 0x57b6 <vfprintf+0x100>
    5768:	38 2f       	mov	r19, r24
    576a:	30 53       	subi	r19, 0x30	; 48
    576c:	3a 30       	cpi	r19, 0x0A	; 10
    576e:	78 f4       	brcc	.+30     	; 0x578e <vfprintf+0xd8>
    5770:	26 ff       	sbrs	r18, 6
    5772:	06 c0       	rjmp	.+12     	; 0x5780 <vfprintf+0xca>
    5774:	fa e0       	ldi	r31, 0x0A	; 10
    5776:	5f 9e       	mul	r5, r31
    5778:	30 0d       	add	r19, r0
    577a:	11 24       	eor	r1, r1
    577c:	53 2e       	mov	r5, r19
    577e:	13 c0       	rjmp	.+38     	; 0x57a6 <vfprintf+0xf0>
    5780:	8a e0       	ldi	r24, 0x0A	; 10
    5782:	38 9e       	mul	r3, r24
    5784:	30 0d       	add	r19, r0
    5786:	11 24       	eor	r1, r1
    5788:	33 2e       	mov	r3, r19
    578a:	20 62       	ori	r18, 0x20	; 32
    578c:	0c c0       	rjmp	.+24     	; 0x57a6 <vfprintf+0xf0>
    578e:	8e 32       	cpi	r24, 0x2E	; 46
    5790:	21 f4       	brne	.+8      	; 0x579a <vfprintf+0xe4>
    5792:	26 fd       	sbrc	r18, 6
    5794:	65 c1       	rjmp	.+714    	; 0x5a60 <vfprintf+0x3aa>
    5796:	20 64       	ori	r18, 0x40	; 64
    5798:	06 c0       	rjmp	.+12     	; 0x57a6 <vfprintf+0xf0>
    579a:	8c 36       	cpi	r24, 0x6C	; 108
    579c:	11 f4       	brne	.+4      	; 0x57a2 <vfprintf+0xec>
    579e:	20 68       	ori	r18, 0x80	; 128
    57a0:	02 c0       	rjmp	.+4      	; 0x57a6 <vfprintf+0xf0>
    57a2:	88 36       	cpi	r24, 0x68	; 104
    57a4:	41 f4       	brne	.+16     	; 0x57b6 <vfprintf+0x100>
    57a6:	f6 01       	movw	r30, r12
    57a8:	93 fd       	sbrc	r25, 3
    57aa:	85 91       	lpm	r24, Z+
    57ac:	93 ff       	sbrs	r25, 3
    57ae:	81 91       	ld	r24, Z+
    57b0:	6f 01       	movw	r12, r30
    57b2:	81 11       	cpse	r24, r1
    57b4:	c0 cf       	rjmp	.-128    	; 0x5736 <vfprintf+0x80>
    57b6:	98 2f       	mov	r25, r24
    57b8:	95 54       	subi	r25, 0x45	; 69
    57ba:	93 30       	cpi	r25, 0x03	; 3
    57bc:	18 f0       	brcs	.+6      	; 0x57c4 <vfprintf+0x10e>
    57be:	90 52       	subi	r25, 0x20	; 32
    57c0:	93 30       	cpi	r25, 0x03	; 3
    57c2:	28 f4       	brcc	.+10     	; 0x57ce <vfprintf+0x118>
    57c4:	0c 5f       	subi	r16, 0xFC	; 252
    57c6:	1f 4f       	sbci	r17, 0xFF	; 255
    57c8:	ff e3       	ldi	r31, 0x3F	; 63
    57ca:	f9 83       	std	Y+1, r31	; 0x01
    57cc:	0d c0       	rjmp	.+26     	; 0x57e8 <vfprintf+0x132>
    57ce:	83 36       	cpi	r24, 0x63	; 99
    57d0:	31 f0       	breq	.+12     	; 0x57de <vfprintf+0x128>
    57d2:	83 37       	cpi	r24, 0x73	; 115
    57d4:	71 f0       	breq	.+28     	; 0x57f2 <vfprintf+0x13c>
    57d6:	83 35       	cpi	r24, 0x53	; 83
    57d8:	09 f0       	breq	.+2      	; 0x57dc <vfprintf+0x126>
    57da:	5a c0       	rjmp	.+180    	; 0x5890 <vfprintf+0x1da>
    57dc:	22 c0       	rjmp	.+68     	; 0x5822 <vfprintf+0x16c>
    57de:	f8 01       	movw	r30, r16
    57e0:	80 81       	ld	r24, Z
    57e2:	89 83       	std	Y+1, r24	; 0x01
    57e4:	0e 5f       	subi	r16, 0xFE	; 254
    57e6:	1f 4f       	sbci	r17, 0xFF	; 255
    57e8:	44 24       	eor	r4, r4
    57ea:	43 94       	inc	r4
    57ec:	51 2c       	mov	r5, r1
    57ee:	54 01       	movw	r10, r8
    57f0:	14 c0       	rjmp	.+40     	; 0x581a <vfprintf+0x164>
    57f2:	38 01       	movw	r6, r16
    57f4:	f2 e0       	ldi	r31, 0x02	; 2
    57f6:	6f 0e       	add	r6, r31
    57f8:	71 1c       	adc	r7, r1
    57fa:	f8 01       	movw	r30, r16
    57fc:	a0 80       	ld	r10, Z
    57fe:	b1 80       	ldd	r11, Z+1	; 0x01
    5800:	26 ff       	sbrs	r18, 6
    5802:	03 c0       	rjmp	.+6      	; 0x580a <vfprintf+0x154>
    5804:	65 2d       	mov	r22, r5
    5806:	70 e0       	ldi	r23, 0x00	; 0
    5808:	02 c0       	rjmp	.+4      	; 0x580e <vfprintf+0x158>
    580a:	6f ef       	ldi	r22, 0xFF	; 255
    580c:	7f ef       	ldi	r23, 0xFF	; 255
    580e:	c5 01       	movw	r24, r10
    5810:	2c 87       	std	Y+12, r18	; 0x0c
    5812:	4e d1       	rcall	.+668    	; 0x5ab0 <strnlen>
    5814:	2c 01       	movw	r4, r24
    5816:	83 01       	movw	r16, r6
    5818:	2c 85       	ldd	r18, Y+12	; 0x0c
    581a:	6f e7       	ldi	r22, 0x7F	; 127
    581c:	26 2e       	mov	r2, r22
    581e:	22 22       	and	r2, r18
    5820:	17 c0       	rjmp	.+46     	; 0x5850 <vfprintf+0x19a>
    5822:	38 01       	movw	r6, r16
    5824:	f2 e0       	ldi	r31, 0x02	; 2
    5826:	6f 0e       	add	r6, r31
    5828:	71 1c       	adc	r7, r1
    582a:	f8 01       	movw	r30, r16
    582c:	a0 80       	ld	r10, Z
    582e:	b1 80       	ldd	r11, Z+1	; 0x01
    5830:	26 ff       	sbrs	r18, 6
    5832:	03 c0       	rjmp	.+6      	; 0x583a <vfprintf+0x184>
    5834:	65 2d       	mov	r22, r5
    5836:	70 e0       	ldi	r23, 0x00	; 0
    5838:	02 c0       	rjmp	.+4      	; 0x583e <vfprintf+0x188>
    583a:	6f ef       	ldi	r22, 0xFF	; 255
    583c:	7f ef       	ldi	r23, 0xFF	; 255
    583e:	c5 01       	movw	r24, r10
    5840:	2c 87       	std	Y+12, r18	; 0x0c
    5842:	2b d1       	rcall	.+598    	; 0x5a9a <strnlen_P>
    5844:	2c 01       	movw	r4, r24
    5846:	2c 85       	ldd	r18, Y+12	; 0x0c
    5848:	50 e8       	ldi	r21, 0x80	; 128
    584a:	25 2e       	mov	r2, r21
    584c:	22 2a       	or	r2, r18
    584e:	83 01       	movw	r16, r6
    5850:	23 fc       	sbrc	r2, 3
    5852:	1a c0       	rjmp	.+52     	; 0x5888 <vfprintf+0x1d2>
    5854:	05 c0       	rjmp	.+10     	; 0x5860 <vfprintf+0x1aa>
    5856:	b7 01       	movw	r22, r14
    5858:	80 e2       	ldi	r24, 0x20	; 32
    585a:	90 e0       	ldi	r25, 0x00	; 0
    585c:	44 d1       	rcall	.+648    	; 0x5ae6 <fputc>
    585e:	3a 94       	dec	r3
    5860:	83 2d       	mov	r24, r3
    5862:	90 e0       	ldi	r25, 0x00	; 0
    5864:	48 16       	cp	r4, r24
    5866:	59 06       	cpc	r5, r25
    5868:	b0 f3       	brcs	.-20     	; 0x5856 <vfprintf+0x1a0>
    586a:	0e c0       	rjmp	.+28     	; 0x5888 <vfprintf+0x1d2>
    586c:	f5 01       	movw	r30, r10
    586e:	27 fc       	sbrc	r2, 7
    5870:	85 91       	lpm	r24, Z+
    5872:	27 fe       	sbrs	r2, 7
    5874:	81 91       	ld	r24, Z+
    5876:	5f 01       	movw	r10, r30
    5878:	b7 01       	movw	r22, r14
    587a:	90 e0       	ldi	r25, 0x00	; 0
    587c:	34 d1       	rcall	.+616    	; 0x5ae6 <fputc>
    587e:	31 10       	cpse	r3, r1
    5880:	3a 94       	dec	r3
    5882:	f1 e0       	ldi	r31, 0x01	; 1
    5884:	4f 1a       	sub	r4, r31
    5886:	51 08       	sbc	r5, r1
    5888:	41 14       	cp	r4, r1
    588a:	51 04       	cpc	r5, r1
    588c:	79 f7       	brne	.-34     	; 0x586c <vfprintf+0x1b6>
    588e:	e5 c0       	rjmp	.+458    	; 0x5a5a <vfprintf+0x3a4>
    5890:	84 36       	cpi	r24, 0x64	; 100
    5892:	11 f0       	breq	.+4      	; 0x5898 <vfprintf+0x1e2>
    5894:	89 36       	cpi	r24, 0x69	; 105
    5896:	39 f5       	brne	.+78     	; 0x58e6 <vfprintf+0x230>
    5898:	f8 01       	movw	r30, r16
    589a:	27 ff       	sbrs	r18, 7
    589c:	07 c0       	rjmp	.+14     	; 0x58ac <vfprintf+0x1f6>
    589e:	60 81       	ld	r22, Z
    58a0:	71 81       	ldd	r23, Z+1	; 0x01
    58a2:	82 81       	ldd	r24, Z+2	; 0x02
    58a4:	93 81       	ldd	r25, Z+3	; 0x03
    58a6:	0c 5f       	subi	r16, 0xFC	; 252
    58a8:	1f 4f       	sbci	r17, 0xFF	; 255
    58aa:	08 c0       	rjmp	.+16     	; 0x58bc <vfprintf+0x206>
    58ac:	60 81       	ld	r22, Z
    58ae:	71 81       	ldd	r23, Z+1	; 0x01
    58b0:	88 27       	eor	r24, r24
    58b2:	77 fd       	sbrc	r23, 7
    58b4:	80 95       	com	r24
    58b6:	98 2f       	mov	r25, r24
    58b8:	0e 5f       	subi	r16, 0xFE	; 254
    58ba:	1f 4f       	sbci	r17, 0xFF	; 255
    58bc:	4f e6       	ldi	r20, 0x6F	; 111
    58be:	b4 2e       	mov	r11, r20
    58c0:	b2 22       	and	r11, r18
    58c2:	97 ff       	sbrs	r25, 7
    58c4:	09 c0       	rjmp	.+18     	; 0x58d8 <vfprintf+0x222>
    58c6:	90 95       	com	r25
    58c8:	80 95       	com	r24
    58ca:	70 95       	com	r23
    58cc:	61 95       	neg	r22
    58ce:	7f 4f       	sbci	r23, 0xFF	; 255
    58d0:	8f 4f       	sbci	r24, 0xFF	; 255
    58d2:	9f 4f       	sbci	r25, 0xFF	; 255
    58d4:	f0 e8       	ldi	r31, 0x80	; 128
    58d6:	bf 2a       	or	r11, r31
    58d8:	2a e0       	ldi	r18, 0x0A	; 10
    58da:	30 e0       	ldi	r19, 0x00	; 0
    58dc:	a4 01       	movw	r20, r8
    58de:	2f d1       	rcall	.+606    	; 0x5b3e <__ultoa_invert>
    58e0:	a8 2e       	mov	r10, r24
    58e2:	a8 18       	sub	r10, r8
    58e4:	42 c0       	rjmp	.+132    	; 0x596a <vfprintf+0x2b4>
    58e6:	85 37       	cpi	r24, 0x75	; 117
    58e8:	31 f4       	brne	.+12     	; 0x58f6 <vfprintf+0x240>
    58ea:	3f ee       	ldi	r19, 0xEF	; 239
    58ec:	b3 2e       	mov	r11, r19
    58ee:	b2 22       	and	r11, r18
    58f0:	2a e0       	ldi	r18, 0x0A	; 10
    58f2:	30 e0       	ldi	r19, 0x00	; 0
    58f4:	24 c0       	rjmp	.+72     	; 0x593e <vfprintf+0x288>
    58f6:	99 ef       	ldi	r25, 0xF9	; 249
    58f8:	b9 2e       	mov	r11, r25
    58fa:	b2 22       	and	r11, r18
    58fc:	8f 36       	cpi	r24, 0x6F	; 111
    58fe:	b9 f0       	breq	.+46     	; 0x592e <vfprintf+0x278>
    5900:	20 f4       	brcc	.+8      	; 0x590a <vfprintf+0x254>
    5902:	88 35       	cpi	r24, 0x58	; 88
    5904:	09 f0       	breq	.+2      	; 0x5908 <vfprintf+0x252>
    5906:	ac c0       	rjmp	.+344    	; 0x5a60 <vfprintf+0x3aa>
    5908:	0d c0       	rjmp	.+26     	; 0x5924 <vfprintf+0x26e>
    590a:	80 37       	cpi	r24, 0x70	; 112
    590c:	21 f0       	breq	.+8      	; 0x5916 <vfprintf+0x260>
    590e:	88 37       	cpi	r24, 0x78	; 120
    5910:	09 f0       	breq	.+2      	; 0x5914 <vfprintf+0x25e>
    5912:	a6 c0       	rjmp	.+332    	; 0x5a60 <vfprintf+0x3aa>
    5914:	02 c0       	rjmp	.+4      	; 0x591a <vfprintf+0x264>
    5916:	20 e1       	ldi	r18, 0x10	; 16
    5918:	b2 2a       	or	r11, r18
    591a:	b4 fe       	sbrs	r11, 4
    591c:	0b c0       	rjmp	.+22     	; 0x5934 <vfprintf+0x27e>
    591e:	84 e0       	ldi	r24, 0x04	; 4
    5920:	b8 2a       	or	r11, r24
    5922:	08 c0       	rjmp	.+16     	; 0x5934 <vfprintf+0x27e>
    5924:	24 ff       	sbrs	r18, 4
    5926:	09 c0       	rjmp	.+18     	; 0x593a <vfprintf+0x284>
    5928:	e6 e0       	ldi	r30, 0x06	; 6
    592a:	be 2a       	or	r11, r30
    592c:	06 c0       	rjmp	.+12     	; 0x593a <vfprintf+0x284>
    592e:	28 e0       	ldi	r18, 0x08	; 8
    5930:	30 e0       	ldi	r19, 0x00	; 0
    5932:	05 c0       	rjmp	.+10     	; 0x593e <vfprintf+0x288>
    5934:	20 e1       	ldi	r18, 0x10	; 16
    5936:	30 e0       	ldi	r19, 0x00	; 0
    5938:	02 c0       	rjmp	.+4      	; 0x593e <vfprintf+0x288>
    593a:	20 e1       	ldi	r18, 0x10	; 16
    593c:	32 e0       	ldi	r19, 0x02	; 2
    593e:	f8 01       	movw	r30, r16
    5940:	b7 fe       	sbrs	r11, 7
    5942:	07 c0       	rjmp	.+14     	; 0x5952 <vfprintf+0x29c>
    5944:	60 81       	ld	r22, Z
    5946:	71 81       	ldd	r23, Z+1	; 0x01
    5948:	82 81       	ldd	r24, Z+2	; 0x02
    594a:	93 81       	ldd	r25, Z+3	; 0x03
    594c:	0c 5f       	subi	r16, 0xFC	; 252
    594e:	1f 4f       	sbci	r17, 0xFF	; 255
    5950:	06 c0       	rjmp	.+12     	; 0x595e <vfprintf+0x2a8>
    5952:	60 81       	ld	r22, Z
    5954:	71 81       	ldd	r23, Z+1	; 0x01
    5956:	80 e0       	ldi	r24, 0x00	; 0
    5958:	90 e0       	ldi	r25, 0x00	; 0
    595a:	0e 5f       	subi	r16, 0xFE	; 254
    595c:	1f 4f       	sbci	r17, 0xFF	; 255
    595e:	a4 01       	movw	r20, r8
    5960:	ee d0       	rcall	.+476    	; 0x5b3e <__ultoa_invert>
    5962:	a8 2e       	mov	r10, r24
    5964:	a8 18       	sub	r10, r8
    5966:	ff e7       	ldi	r31, 0x7F	; 127
    5968:	bf 22       	and	r11, r31
    596a:	b6 fe       	sbrs	r11, 6
    596c:	0b c0       	rjmp	.+22     	; 0x5984 <vfprintf+0x2ce>
    596e:	2b 2d       	mov	r18, r11
    5970:	2e 7f       	andi	r18, 0xFE	; 254
    5972:	a5 14       	cp	r10, r5
    5974:	50 f4       	brcc	.+20     	; 0x598a <vfprintf+0x2d4>
    5976:	b4 fe       	sbrs	r11, 4
    5978:	0a c0       	rjmp	.+20     	; 0x598e <vfprintf+0x2d8>
    597a:	b2 fc       	sbrc	r11, 2
    597c:	08 c0       	rjmp	.+16     	; 0x598e <vfprintf+0x2d8>
    597e:	2b 2d       	mov	r18, r11
    5980:	2e 7e       	andi	r18, 0xEE	; 238
    5982:	05 c0       	rjmp	.+10     	; 0x598e <vfprintf+0x2d8>
    5984:	7a 2c       	mov	r7, r10
    5986:	2b 2d       	mov	r18, r11
    5988:	03 c0       	rjmp	.+6      	; 0x5990 <vfprintf+0x2da>
    598a:	7a 2c       	mov	r7, r10
    598c:	01 c0       	rjmp	.+2      	; 0x5990 <vfprintf+0x2da>
    598e:	75 2c       	mov	r7, r5
    5990:	24 ff       	sbrs	r18, 4
    5992:	0d c0       	rjmp	.+26     	; 0x59ae <vfprintf+0x2f8>
    5994:	fe 01       	movw	r30, r28
    5996:	ea 0d       	add	r30, r10
    5998:	f1 1d       	adc	r31, r1
    599a:	80 81       	ld	r24, Z
    599c:	80 33       	cpi	r24, 0x30	; 48
    599e:	11 f4       	brne	.+4      	; 0x59a4 <vfprintf+0x2ee>
    59a0:	29 7e       	andi	r18, 0xE9	; 233
    59a2:	09 c0       	rjmp	.+18     	; 0x59b6 <vfprintf+0x300>
    59a4:	22 ff       	sbrs	r18, 2
    59a6:	06 c0       	rjmp	.+12     	; 0x59b4 <vfprintf+0x2fe>
    59a8:	73 94       	inc	r7
    59aa:	73 94       	inc	r7
    59ac:	04 c0       	rjmp	.+8      	; 0x59b6 <vfprintf+0x300>
    59ae:	82 2f       	mov	r24, r18
    59b0:	86 78       	andi	r24, 0x86	; 134
    59b2:	09 f0       	breq	.+2      	; 0x59b6 <vfprintf+0x300>
    59b4:	73 94       	inc	r7
    59b6:	23 fd       	sbrc	r18, 3
    59b8:	13 c0       	rjmp	.+38     	; 0x59e0 <vfprintf+0x32a>
    59ba:	20 ff       	sbrs	r18, 0
    59bc:	0e c0       	rjmp	.+28     	; 0x59da <vfprintf+0x324>
    59be:	5a 2c       	mov	r5, r10
    59c0:	73 14       	cp	r7, r3
    59c2:	58 f4       	brcc	.+22     	; 0x59da <vfprintf+0x324>
    59c4:	53 0c       	add	r5, r3
    59c6:	57 18       	sub	r5, r7
    59c8:	73 2c       	mov	r7, r3
    59ca:	07 c0       	rjmp	.+14     	; 0x59da <vfprintf+0x324>
    59cc:	b7 01       	movw	r22, r14
    59ce:	80 e2       	ldi	r24, 0x20	; 32
    59d0:	90 e0       	ldi	r25, 0x00	; 0
    59d2:	2c 87       	std	Y+12, r18	; 0x0c
    59d4:	88 d0       	rcall	.+272    	; 0x5ae6 <fputc>
    59d6:	73 94       	inc	r7
    59d8:	2c 85       	ldd	r18, Y+12	; 0x0c
    59da:	73 14       	cp	r7, r3
    59dc:	b8 f3       	brcs	.-18     	; 0x59cc <vfprintf+0x316>
    59de:	04 c0       	rjmp	.+8      	; 0x59e8 <vfprintf+0x332>
    59e0:	73 14       	cp	r7, r3
    59e2:	10 f4       	brcc	.+4      	; 0x59e8 <vfprintf+0x332>
    59e4:	37 18       	sub	r3, r7
    59e6:	01 c0       	rjmp	.+2      	; 0x59ea <vfprintf+0x334>
    59e8:	31 2c       	mov	r3, r1
    59ea:	24 ff       	sbrs	r18, 4
    59ec:	11 c0       	rjmp	.+34     	; 0x5a10 <vfprintf+0x35a>
    59ee:	b7 01       	movw	r22, r14
    59f0:	80 e3       	ldi	r24, 0x30	; 48
    59f2:	90 e0       	ldi	r25, 0x00	; 0
    59f4:	2c 87       	std	Y+12, r18	; 0x0c
    59f6:	77 d0       	rcall	.+238    	; 0x5ae6 <fputc>
    59f8:	2c 85       	ldd	r18, Y+12	; 0x0c
    59fa:	22 ff       	sbrs	r18, 2
    59fc:	1c c0       	rjmp	.+56     	; 0x5a36 <vfprintf+0x380>
    59fe:	21 ff       	sbrs	r18, 1
    5a00:	03 c0       	rjmp	.+6      	; 0x5a08 <vfprintf+0x352>
    5a02:	88 e5       	ldi	r24, 0x58	; 88
    5a04:	90 e0       	ldi	r25, 0x00	; 0
    5a06:	02 c0       	rjmp	.+4      	; 0x5a0c <vfprintf+0x356>
    5a08:	88 e7       	ldi	r24, 0x78	; 120
    5a0a:	90 e0       	ldi	r25, 0x00	; 0
    5a0c:	b7 01       	movw	r22, r14
    5a0e:	0c c0       	rjmp	.+24     	; 0x5a28 <vfprintf+0x372>
    5a10:	82 2f       	mov	r24, r18
    5a12:	86 78       	andi	r24, 0x86	; 134
    5a14:	81 f0       	breq	.+32     	; 0x5a36 <vfprintf+0x380>
    5a16:	21 fd       	sbrc	r18, 1
    5a18:	02 c0       	rjmp	.+4      	; 0x5a1e <vfprintf+0x368>
    5a1a:	80 e2       	ldi	r24, 0x20	; 32
    5a1c:	01 c0       	rjmp	.+2      	; 0x5a20 <vfprintf+0x36a>
    5a1e:	8b e2       	ldi	r24, 0x2B	; 43
    5a20:	27 fd       	sbrc	r18, 7
    5a22:	8d e2       	ldi	r24, 0x2D	; 45
    5a24:	b7 01       	movw	r22, r14
    5a26:	90 e0       	ldi	r25, 0x00	; 0
    5a28:	5e d0       	rcall	.+188    	; 0x5ae6 <fputc>
    5a2a:	05 c0       	rjmp	.+10     	; 0x5a36 <vfprintf+0x380>
    5a2c:	b7 01       	movw	r22, r14
    5a2e:	80 e3       	ldi	r24, 0x30	; 48
    5a30:	90 e0       	ldi	r25, 0x00	; 0
    5a32:	59 d0       	rcall	.+178    	; 0x5ae6 <fputc>
    5a34:	5a 94       	dec	r5
    5a36:	a5 14       	cp	r10, r5
    5a38:	c8 f3       	brcs	.-14     	; 0x5a2c <vfprintf+0x376>
    5a3a:	aa 94       	dec	r10
    5a3c:	f4 01       	movw	r30, r8
    5a3e:	ea 0d       	add	r30, r10
    5a40:	f1 1d       	adc	r31, r1
    5a42:	b7 01       	movw	r22, r14
    5a44:	80 81       	ld	r24, Z
    5a46:	90 e0       	ldi	r25, 0x00	; 0
    5a48:	4e d0       	rcall	.+156    	; 0x5ae6 <fputc>
    5a4a:	a1 10       	cpse	r10, r1
    5a4c:	f6 cf       	rjmp	.-20     	; 0x5a3a <vfprintf+0x384>
    5a4e:	05 c0       	rjmp	.+10     	; 0x5a5a <vfprintf+0x3a4>
    5a50:	b7 01       	movw	r22, r14
    5a52:	80 e2       	ldi	r24, 0x20	; 32
    5a54:	90 e0       	ldi	r25, 0x00	; 0
    5a56:	47 d0       	rcall	.+142    	; 0x5ae6 <fputc>
    5a58:	3a 94       	dec	r3
    5a5a:	31 10       	cpse	r3, r1
    5a5c:	f9 cf       	rjmp	.-14     	; 0x5a50 <vfprintf+0x39a>
    5a5e:	50 ce       	rjmp	.-864    	; 0x5700 <vfprintf+0x4a>
    5a60:	f7 01       	movw	r30, r14
    5a62:	26 81       	ldd	r18, Z+6	; 0x06
    5a64:	37 81       	ldd	r19, Z+7	; 0x07
    5a66:	02 c0       	rjmp	.+4      	; 0x5a6c <vfprintf+0x3b6>
    5a68:	2f ef       	ldi	r18, 0xFF	; 255
    5a6a:	3f ef       	ldi	r19, 0xFF	; 255
    5a6c:	c9 01       	movw	r24, r18
    5a6e:	2c 96       	adiw	r28, 0x0c	; 12
    5a70:	cd bf       	out	0x3d, r28	; 61
    5a72:	de bf       	out	0x3e, r29	; 62
    5a74:	df 91       	pop	r29
    5a76:	cf 91       	pop	r28
    5a78:	1f 91       	pop	r17
    5a7a:	0f 91       	pop	r16
    5a7c:	ff 90       	pop	r15
    5a7e:	ef 90       	pop	r14
    5a80:	df 90       	pop	r13
    5a82:	cf 90       	pop	r12
    5a84:	bf 90       	pop	r11
    5a86:	af 90       	pop	r10
    5a88:	9f 90       	pop	r9
    5a8a:	8f 90       	pop	r8
    5a8c:	7f 90       	pop	r7
    5a8e:	6f 90       	pop	r6
    5a90:	5f 90       	pop	r5
    5a92:	4f 90       	pop	r4
    5a94:	3f 90       	pop	r3
    5a96:	2f 90       	pop	r2
    5a98:	08 95       	ret

00005a9a <strnlen_P>:
    5a9a:	fc 01       	movw	r30, r24
    5a9c:	05 90       	lpm	r0, Z+
    5a9e:	61 50       	subi	r22, 0x01	; 1
    5aa0:	70 40       	sbci	r23, 0x00	; 0
    5aa2:	01 10       	cpse	r0, r1
    5aa4:	d8 f7       	brcc	.-10     	; 0x5a9c <strnlen_P+0x2>
    5aa6:	80 95       	com	r24
    5aa8:	90 95       	com	r25
    5aaa:	8e 0f       	add	r24, r30
    5aac:	9f 1f       	adc	r25, r31
    5aae:	08 95       	ret

00005ab0 <strnlen>:
    5ab0:	fc 01       	movw	r30, r24
    5ab2:	61 50       	subi	r22, 0x01	; 1
    5ab4:	70 40       	sbci	r23, 0x00	; 0
    5ab6:	01 90       	ld	r0, Z+
    5ab8:	01 10       	cpse	r0, r1
    5aba:	d8 f7       	brcc	.-10     	; 0x5ab2 <strnlen+0x2>
    5abc:	80 95       	com	r24
    5abe:	90 95       	com	r25
    5ac0:	8e 0f       	add	r24, r30
    5ac2:	9f 1f       	adc	r25, r31
    5ac4:	08 95       	ret

00005ac6 <strrev>:
    5ac6:	dc 01       	movw	r26, r24
    5ac8:	fc 01       	movw	r30, r24
    5aca:	67 2f       	mov	r22, r23
    5acc:	71 91       	ld	r23, Z+
    5ace:	77 23       	and	r23, r23
    5ad0:	e1 f7       	brne	.-8      	; 0x5aca <strrev+0x4>
    5ad2:	32 97       	sbiw	r30, 0x02	; 2
    5ad4:	04 c0       	rjmp	.+8      	; 0x5ade <strrev+0x18>
    5ad6:	7c 91       	ld	r23, X
    5ad8:	6d 93       	st	X+, r22
    5ada:	70 83       	st	Z, r23
    5adc:	62 91       	ld	r22, -Z
    5ade:	ae 17       	cp	r26, r30
    5ae0:	bf 07       	cpc	r27, r31
    5ae2:	c8 f3       	brcs	.-14     	; 0x5ad6 <strrev+0x10>
    5ae4:	08 95       	ret

00005ae6 <fputc>:
    5ae6:	0f 93       	push	r16
    5ae8:	1f 93       	push	r17
    5aea:	cf 93       	push	r28
    5aec:	df 93       	push	r29
    5aee:	8c 01       	movw	r16, r24
    5af0:	eb 01       	movw	r28, r22
    5af2:	8b 81       	ldd	r24, Y+3	; 0x03
    5af4:	81 fd       	sbrc	r24, 1
    5af6:	03 c0       	rjmp	.+6      	; 0x5afe <fputc+0x18>
    5af8:	0f ef       	ldi	r16, 0xFF	; 255
    5afa:	1f ef       	ldi	r17, 0xFF	; 255
    5afc:	1a c0       	rjmp	.+52     	; 0x5b32 <fputc+0x4c>
    5afe:	82 ff       	sbrs	r24, 2
    5b00:	0d c0       	rjmp	.+26     	; 0x5b1c <fputc+0x36>
    5b02:	2e 81       	ldd	r18, Y+6	; 0x06
    5b04:	3f 81       	ldd	r19, Y+7	; 0x07
    5b06:	8c 81       	ldd	r24, Y+4	; 0x04
    5b08:	9d 81       	ldd	r25, Y+5	; 0x05
    5b0a:	28 17       	cp	r18, r24
    5b0c:	39 07       	cpc	r19, r25
    5b0e:	64 f4       	brge	.+24     	; 0x5b28 <fputc+0x42>
    5b10:	e8 81       	ld	r30, Y
    5b12:	f9 81       	ldd	r31, Y+1	; 0x01
    5b14:	01 93       	st	Z+, r16
    5b16:	e8 83       	st	Y, r30
    5b18:	f9 83       	std	Y+1, r31	; 0x01
    5b1a:	06 c0       	rjmp	.+12     	; 0x5b28 <fputc+0x42>
    5b1c:	e8 85       	ldd	r30, Y+8	; 0x08
    5b1e:	f9 85       	ldd	r31, Y+9	; 0x09
    5b20:	80 2f       	mov	r24, r16
    5b22:	19 95       	eicall
    5b24:	89 2b       	or	r24, r25
    5b26:	41 f7       	brne	.-48     	; 0x5af8 <fputc+0x12>
    5b28:	8e 81       	ldd	r24, Y+6	; 0x06
    5b2a:	9f 81       	ldd	r25, Y+7	; 0x07
    5b2c:	01 96       	adiw	r24, 0x01	; 1
    5b2e:	8e 83       	std	Y+6, r24	; 0x06
    5b30:	9f 83       	std	Y+7, r25	; 0x07
    5b32:	c8 01       	movw	r24, r16
    5b34:	df 91       	pop	r29
    5b36:	cf 91       	pop	r28
    5b38:	1f 91       	pop	r17
    5b3a:	0f 91       	pop	r16
    5b3c:	08 95       	ret

00005b3e <__ultoa_invert>:
    5b3e:	fa 01       	movw	r30, r20
    5b40:	aa 27       	eor	r26, r26
    5b42:	28 30       	cpi	r18, 0x08	; 8
    5b44:	51 f1       	breq	.+84     	; 0x5b9a <__ultoa_invert+0x5c>
    5b46:	20 31       	cpi	r18, 0x10	; 16
    5b48:	81 f1       	breq	.+96     	; 0x5baa <__ultoa_invert+0x6c>
    5b4a:	e8 94       	clt
    5b4c:	6f 93       	push	r22
    5b4e:	6e 7f       	andi	r22, 0xFE	; 254
    5b50:	6e 5f       	subi	r22, 0xFE	; 254
    5b52:	7f 4f       	sbci	r23, 0xFF	; 255
    5b54:	8f 4f       	sbci	r24, 0xFF	; 255
    5b56:	9f 4f       	sbci	r25, 0xFF	; 255
    5b58:	af 4f       	sbci	r26, 0xFF	; 255
    5b5a:	b1 e0       	ldi	r27, 0x01	; 1
    5b5c:	3e d0       	rcall	.+124    	; 0x5bda <__ultoa_invert+0x9c>
    5b5e:	b4 e0       	ldi	r27, 0x04	; 4
    5b60:	3c d0       	rcall	.+120    	; 0x5bda <__ultoa_invert+0x9c>
    5b62:	67 0f       	add	r22, r23
    5b64:	78 1f       	adc	r23, r24
    5b66:	89 1f       	adc	r24, r25
    5b68:	9a 1f       	adc	r25, r26
    5b6a:	a1 1d       	adc	r26, r1
    5b6c:	68 0f       	add	r22, r24
    5b6e:	79 1f       	adc	r23, r25
    5b70:	8a 1f       	adc	r24, r26
    5b72:	91 1d       	adc	r25, r1
    5b74:	a1 1d       	adc	r26, r1
    5b76:	6a 0f       	add	r22, r26
    5b78:	71 1d       	adc	r23, r1
    5b7a:	81 1d       	adc	r24, r1
    5b7c:	91 1d       	adc	r25, r1
    5b7e:	a1 1d       	adc	r26, r1
    5b80:	20 d0       	rcall	.+64     	; 0x5bc2 <__ultoa_invert+0x84>
    5b82:	09 f4       	brne	.+2      	; 0x5b86 <__ultoa_invert+0x48>
    5b84:	68 94       	set
    5b86:	3f 91       	pop	r19
    5b88:	2a e0       	ldi	r18, 0x0A	; 10
    5b8a:	26 9f       	mul	r18, r22
    5b8c:	11 24       	eor	r1, r1
    5b8e:	30 19       	sub	r19, r0
    5b90:	30 5d       	subi	r19, 0xD0	; 208
    5b92:	31 93       	st	Z+, r19
    5b94:	de f6       	brtc	.-74     	; 0x5b4c <__ultoa_invert+0xe>
    5b96:	cf 01       	movw	r24, r30
    5b98:	08 95       	ret
    5b9a:	46 2f       	mov	r20, r22
    5b9c:	47 70       	andi	r20, 0x07	; 7
    5b9e:	40 5d       	subi	r20, 0xD0	; 208
    5ba0:	41 93       	st	Z+, r20
    5ba2:	b3 e0       	ldi	r27, 0x03	; 3
    5ba4:	0f d0       	rcall	.+30     	; 0x5bc4 <__ultoa_invert+0x86>
    5ba6:	c9 f7       	brne	.-14     	; 0x5b9a <__ultoa_invert+0x5c>
    5ba8:	f6 cf       	rjmp	.-20     	; 0x5b96 <__ultoa_invert+0x58>
    5baa:	46 2f       	mov	r20, r22
    5bac:	4f 70       	andi	r20, 0x0F	; 15
    5bae:	40 5d       	subi	r20, 0xD0	; 208
    5bb0:	4a 33       	cpi	r20, 0x3A	; 58
    5bb2:	18 f0       	brcs	.+6      	; 0x5bba <__ultoa_invert+0x7c>
    5bb4:	49 5d       	subi	r20, 0xD9	; 217
    5bb6:	31 fd       	sbrc	r19, 1
    5bb8:	40 52       	subi	r20, 0x20	; 32
    5bba:	41 93       	st	Z+, r20
    5bbc:	02 d0       	rcall	.+4      	; 0x5bc2 <__ultoa_invert+0x84>
    5bbe:	a9 f7       	brne	.-22     	; 0x5baa <__ultoa_invert+0x6c>
    5bc0:	ea cf       	rjmp	.-44     	; 0x5b96 <__ultoa_invert+0x58>
    5bc2:	b4 e0       	ldi	r27, 0x04	; 4
    5bc4:	a6 95       	lsr	r26
    5bc6:	97 95       	ror	r25
    5bc8:	87 95       	ror	r24
    5bca:	77 95       	ror	r23
    5bcc:	67 95       	ror	r22
    5bce:	ba 95       	dec	r27
    5bd0:	c9 f7       	brne	.-14     	; 0x5bc4 <__ultoa_invert+0x86>
    5bd2:	00 97       	sbiw	r24, 0x00	; 0
    5bd4:	61 05       	cpc	r22, r1
    5bd6:	71 05       	cpc	r23, r1
    5bd8:	08 95       	ret
    5bda:	9b 01       	movw	r18, r22
    5bdc:	ac 01       	movw	r20, r24
    5bde:	0a 2e       	mov	r0, r26
    5be0:	06 94       	lsr	r0
    5be2:	57 95       	ror	r21
    5be4:	47 95       	ror	r20
    5be6:	37 95       	ror	r19
    5be8:	27 95       	ror	r18
    5bea:	ba 95       	dec	r27
    5bec:	c9 f7       	brne	.-14     	; 0x5be0 <__ultoa_invert+0xa2>
    5bee:	62 0f       	add	r22, r18
    5bf0:	73 1f       	adc	r23, r19
    5bf2:	84 1f       	adc	r24, r20
    5bf4:	95 1f       	adc	r25, r21
    5bf6:	a0 1d       	adc	r26, r0
    5bf8:	08 95       	ret

00005bfa <_exit>:
    5bfa:	f8 94       	cli

00005bfc <__stop_program>:
    5bfc:	ff cf       	rjmp	.-2      	; 0x5bfc <__stop_program>
