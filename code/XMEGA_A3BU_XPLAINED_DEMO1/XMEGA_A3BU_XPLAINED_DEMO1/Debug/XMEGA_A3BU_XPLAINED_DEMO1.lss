
XMEGA_A3BU_XPLAINED_DEMO1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005762  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015e  00802000  00005762  000057f6  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000008ff  00802160  00802160  00005954  2**2
                  ALLOC
  3 .stab         000025a4  00000000  00000000  00005954  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000aa1  00000000  00000000  00007ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00008999  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000bb8  00000000  00000000  000089c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0001aec7  00000000  00000000  00009580  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005b28  00000000  00000000  00024447  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00015258  00000000  00000000  00029f6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00002458  00000000  00000000  0003f1c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00034a3b  00000000  00000000  00041620  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000bbe1  00000000  00000000  0007605b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000e70  00000000  00000000  00081c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000f84e  00000000  00000000  00082ab0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	16 c3       	rjmp	.+1580   	; 0x62e <__ctors_end>
       2:	00 00       	nop
       4:	35 c3       	rjmp	.+1642   	; 0x670 <__bad_interrupt>
       6:	00 00       	nop
       8:	33 c3       	rjmp	.+1638   	; 0x670 <__bad_interrupt>
       a:	00 00       	nop
       c:	31 c3       	rjmp	.+1634   	; 0x670 <__bad_interrupt>
       e:	00 00       	nop
      10:	2f c3       	rjmp	.+1630   	; 0x670 <__bad_interrupt>
      12:	00 00       	nop
      14:	2d c3       	rjmp	.+1626   	; 0x670 <__bad_interrupt>
      16:	00 00       	nop
      18:	2b c3       	rjmp	.+1622   	; 0x670 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	29 c3       	rjmp	.+1618   	; 0x670 <__bad_interrupt>
      1e:	00 00       	nop
      20:	27 c3       	rjmp	.+1614   	; 0x670 <__bad_interrupt>
      22:	00 00       	nop
      24:	25 c3       	rjmp	.+1610   	; 0x670 <__bad_interrupt>
      26:	00 00       	nop
      28:	23 c3       	rjmp	.+1606   	; 0x670 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 71 1a 	jmp	0x34e2	; 0x34e2 <__vector_11>
      30:	1f c3       	rjmp	.+1598   	; 0x670 <__bad_interrupt>
      32:	00 00       	nop
      34:	1d c3       	rjmp	.+1594   	; 0x670 <__bad_interrupt>
      36:	00 00       	nop
      38:	1b c3       	rjmp	.+1590   	; 0x670 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	19 c3       	rjmp	.+1586   	; 0x670 <__bad_interrupt>
      3e:	00 00       	nop
      40:	17 c3       	rjmp	.+1582   	; 0x670 <__bad_interrupt>
      42:	00 00       	nop
      44:	15 c3       	rjmp	.+1578   	; 0x670 <__bad_interrupt>
      46:	00 00       	nop
      48:	13 c3       	rjmp	.+1574   	; 0x670 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	11 c3       	rjmp	.+1570   	; 0x670 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0f c3       	rjmp	.+1566   	; 0x670 <__bad_interrupt>
      52:	00 00       	nop
      54:	0d c3       	rjmp	.+1562   	; 0x670 <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 7a 24 	jmp	0x48f4	; 0x48f4 <__vector_22>
      5c:	09 c3       	rjmp	.+1554   	; 0x670 <__bad_interrupt>
      5e:	00 00       	nop
      60:	07 c3       	rjmp	.+1550   	; 0x670 <__bad_interrupt>
      62:	00 00       	nop
      64:	05 c3       	rjmp	.+1546   	; 0x670 <__bad_interrupt>
      66:	00 00       	nop
      68:	03 c3       	rjmp	.+1542   	; 0x670 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	01 c3       	rjmp	.+1538   	; 0x670 <__bad_interrupt>
      6e:	00 00       	nop
      70:	ff c2       	rjmp	.+1534   	; 0x670 <__bad_interrupt>
      72:	00 00       	nop
      74:	fd c2       	rjmp	.+1530   	; 0x670 <__bad_interrupt>
      76:	00 00       	nop
      78:	fb c2       	rjmp	.+1526   	; 0x670 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f9 c2       	rjmp	.+1522   	; 0x670 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f7 c2       	rjmp	.+1518   	; 0x670 <__bad_interrupt>
      82:	00 00       	nop
      84:	f5 c2       	rjmp	.+1514   	; 0x670 <__bad_interrupt>
      86:	00 00       	nop
      88:	f3 c2       	rjmp	.+1510   	; 0x670 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f1 c2       	rjmp	.+1506   	; 0x670 <__bad_interrupt>
      8e:	00 00       	nop
      90:	ef c2       	rjmp	.+1502   	; 0x670 <__bad_interrupt>
      92:	00 00       	nop
      94:	ed c2       	rjmp	.+1498   	; 0x670 <__bad_interrupt>
      96:	00 00       	nop
      98:	eb c2       	rjmp	.+1494   	; 0x670 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 0a 18 	jmp	0x3014	; 0x3014 <__vector_39>
      a0:	0c 94 3c 18 	jmp	0x3078	; 0x3078 <__vector_40>
      a4:	0c 94 6e 18 	jmp	0x30dc	; 0x30dc <__vector_41>
      a8:	0c 94 a0 18 	jmp	0x3140	; 0x3140 <__vector_42>
      ac:	e1 c2       	rjmp	.+1474   	; 0x670 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	df c2       	rjmp	.+1470   	; 0x670 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	dd c2       	rjmp	.+1466   	; 0x670 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	db c2       	rjmp	.+1462   	; 0x670 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	d9 c2       	rjmp	.+1458   	; 0x670 <__bad_interrupt>
      be:	00 00       	nop
      c0:	d7 c2       	rjmp	.+1454   	; 0x670 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	d5 c2       	rjmp	.+1450   	; 0x670 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	d3 c2       	rjmp	.+1446   	; 0x670 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	d1 c2       	rjmp	.+1442   	; 0x670 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	cf c2       	rjmp	.+1438   	; 0x670 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	cd c2       	rjmp	.+1434   	; 0x670 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	cb c2       	rjmp	.+1430   	; 0x670 <__bad_interrupt>
      da:	00 00       	nop
      dc:	c9 c2       	rjmp	.+1426   	; 0x670 <__bad_interrupt>
      de:	00 00       	nop
      e0:	c7 c2       	rjmp	.+1422   	; 0x670 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c5 c2       	rjmp	.+1418   	; 0x670 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	c3 c2       	rjmp	.+1414   	; 0x670 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	c1 c2       	rjmp	.+1410   	; 0x670 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	bf c2       	rjmp	.+1406   	; 0x670 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	bd c2       	rjmp	.+1402   	; 0x670 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	bb c2       	rjmp	.+1398   	; 0x670 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	b9 c2       	rjmp	.+1394   	; 0x670 <__bad_interrupt>
      fe:	00 00       	nop
     100:	b7 c2       	rjmp	.+1390   	; 0x670 <__bad_interrupt>
     102:	00 00       	nop
     104:	b5 c2       	rjmp	.+1386   	; 0x670 <__bad_interrupt>
     106:	00 00       	nop
     108:	b3 c2       	rjmp	.+1382   	; 0x670 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	b1 c2       	rjmp	.+1378   	; 0x670 <__bad_interrupt>
     10e:	00 00       	nop
     110:	af c2       	rjmp	.+1374   	; 0x670 <__bad_interrupt>
     112:	00 00       	nop
     114:	ad c2       	rjmp	.+1370   	; 0x670 <__bad_interrupt>
     116:	00 00       	nop
     118:	ab c2       	rjmp	.+1366   	; 0x670 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	0c 94 42 17 	jmp	0x2e84	; 0x2e84 <__vector_71>
     120:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__vector_72>
     124:	0c 94 a6 17 	jmp	0x2f4c	; 0x2f4c <__vector_73>
     128:	0c 94 d8 17 	jmp	0x2fb0	; 0x2fb0 <__vector_74>
     12c:	a1 c2       	rjmp	.+1346   	; 0x670 <__bad_interrupt>
     12e:	00 00       	nop
     130:	9f c2       	rjmp	.+1342   	; 0x670 <__bad_interrupt>
     132:	00 00       	nop
     134:	9d c2       	rjmp	.+1338   	; 0x670 <__bad_interrupt>
     136:	00 00       	nop
     138:	9b c2       	rjmp	.+1334   	; 0x670 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	99 c2       	rjmp	.+1330   	; 0x670 <__bad_interrupt>
     13e:	00 00       	nop
     140:	97 c2       	rjmp	.+1326   	; 0x670 <__bad_interrupt>
     142:	00 00       	nop
     144:	95 c2       	rjmp	.+1322   	; 0x670 <__bad_interrupt>
     146:	00 00       	nop
     148:	93 c2       	rjmp	.+1318   	; 0x670 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	91 c2       	rjmp	.+1314   	; 0x670 <__bad_interrupt>
     14e:	00 00       	nop
     150:	8f c2       	rjmp	.+1310   	; 0x670 <__bad_interrupt>
     152:	00 00       	nop
     154:	8d c2       	rjmp	.+1306   	; 0x670 <__bad_interrupt>
     156:	00 00       	nop
     158:	8b c2       	rjmp	.+1302   	; 0x670 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	89 c2       	rjmp	.+1298   	; 0x670 <__bad_interrupt>
     15e:	00 00       	nop
     160:	87 c2       	rjmp	.+1294   	; 0x670 <__bad_interrupt>
     162:	00 00       	nop
     164:	85 c2       	rjmp	.+1290   	; 0x670 <__bad_interrupt>
     166:	00 00       	nop
     168:	83 c2       	rjmp	.+1286   	; 0x670 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	81 c2       	rjmp	.+1282   	; 0x670 <__bad_interrupt>
     16e:	00 00       	nop
     170:	7f c2       	rjmp	.+1278   	; 0x670 <__bad_interrupt>
     172:	00 00       	nop
     174:	7d c2       	rjmp	.+1274   	; 0x670 <__bad_interrupt>
     176:	00 00       	nop
     178:	7b c2       	rjmp	.+1270   	; 0x670 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	79 c2       	rjmp	.+1266   	; 0x670 <__bad_interrupt>
     17e:	00 00       	nop
     180:	77 c2       	rjmp	.+1262   	; 0x670 <__bad_interrupt>
     182:	00 00       	nop
     184:	75 c2       	rjmp	.+1258   	; 0x670 <__bad_interrupt>
     186:	00 00       	nop
     188:	73 c2       	rjmp	.+1254   	; 0x670 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	71 c2       	rjmp	.+1250   	; 0x670 <__bad_interrupt>
     18e:	00 00       	nop
     190:	6f c2       	rjmp	.+1246   	; 0x670 <__bad_interrupt>
     192:	00 00       	nop
     194:	6d c2       	rjmp	.+1242   	; 0x670 <__bad_interrupt>
     196:	00 00       	nop
     198:	6b c2       	rjmp	.+1238   	; 0x670 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	69 c2       	rjmp	.+1234   	; 0x670 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	67 c2       	rjmp	.+1230   	; 0x670 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	65 c2       	rjmp	.+1226   	; 0x670 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	63 c2       	rjmp	.+1222   	; 0x670 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	61 c2       	rjmp	.+1218   	; 0x670 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	5f c2       	rjmp	.+1214   	; 0x670 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	5d c2       	rjmp	.+1210   	; 0x670 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	5b c2       	rjmp	.+1206   	; 0x670 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	59 c2       	rjmp	.+1202   	; 0x670 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	57 c2       	rjmp	.+1198   	; 0x670 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	55 c2       	rjmp	.+1194   	; 0x670 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	53 c2       	rjmp	.+1190   	; 0x670 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	51 c2       	rjmp	.+1186   	; 0x670 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	4f c2       	rjmp	.+1182   	; 0x670 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	4d c2       	rjmp	.+1178   	; 0x670 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	4b c2       	rjmp	.+1174   	; 0x670 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	49 c2       	rjmp	.+1170   	; 0x670 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	47 c2       	rjmp	.+1166   	; 0x670 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	45 c2       	rjmp	.+1162   	; 0x670 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	43 c2       	rjmp	.+1158   	; 0x670 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	41 c2       	rjmp	.+1154   	; 0x670 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	3f c2       	rjmp	.+1150   	; 0x670 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 2c 20 	jmp	0x4058	; 0x4058 <__vector_125>
     1f8:	0c 94 dc 20 	jmp	0x41b8	; 0x41b8 <__vector_126>

000001fc <sysfont_glyphs>:
     1fc:	00 00 00 00 00 00 00 20 20 20 20 20 00 20 50 50     .......     . PP
     20c:	50 00 00 00 00 50 50 f8 50 f8 50 50 20 78 a0 70     P....PP.P.PP x.p
     21c:	28 f0 20 c0 c8 10 20 40 98 18 60 90 a0 40 a8 90     (. ... @..`..@..
     22c:	68 60 20 40 00 00 00 00 10 20 40 40 40 20 10 40     h` @..... @@@ .@
     23c:	20 10 10 10 20 40 00 50 20 f8 20 50 00 00 20 20      ... @.P . P..  
     24c:	f8 20 20 00 00 00 00 00 60 20 40 00 00 00 f8 00     .  .....` @.....
     25c:	00 00 00 00 00 00 00 60 60 00 08 10 20 40 80 00     .......``... @..
     26c:	70 88 98 a8 c8 88 70 20 60 20 20 20 20 70 70 88     p.....p `    pp.
     27c:	08 10 20 40 f8 f8 10 20 10 08 88 70 10 30 50 90     .. @... ...p.0P.
     28c:	f8 10 10 f8 80 f0 08 08 88 70 30 40 80 f0 88 88     .........p0@....
     29c:	70 f8 08 10 20 40 40 40 70 88 88 70 88 88 70 70     p... @@@p..p..pp
     2ac:	88 88 78 08 10 60 00 60 60 00 60 60 00 00 60 60     ..x..`.``.``..``
     2bc:	00 60 20 40 08 10 20 40 20 10 08 00 00 f8 00 f8     .` @.. @ .......
     2cc:	00 00 80 40 20 10 20 40 80 70 88 08 10 20 00 20     ...@ . @.p... . 
     2dc:	70 88 08 68 a8 a8 70 70 88 88 88 f8 88 88 f0 88     p..h..pp........
     2ec:	88 f0 88 88 f0 70 88 80 80 80 88 70 e0 90 88 88     .....p.....p....
     2fc:	88 90 e0 f8 80 80 f0 80 80 f8 f8 80 80 e0 80 80     ................
     30c:	80 70 88 80 80 98 88 70 88 88 88 f8 88 88 88 70     .p.....p.......p
     31c:	20 20 20 20 20 70 38 10 10 10 10 90 60 88 90 a0          p8.....`...
     32c:	c0 a0 90 88 80 80 80 80 80 80 f8 88 d8 a8 88 88     ................
     33c:	88 88 88 88 c8 a8 98 88 88 70 88 88 88 88 88 70     .........p.....p
     34c:	f0 88 88 f0 80 80 80 70 88 88 88 a8 90 68 f0 88     .......p.....h..
     35c:	88 f0 a0 90 88 78 80 80 70 08 08 f0 f8 20 20 20     .....x..p....   
     36c:	20 20 20 88 88 88 88 88 88 70 88 88 88 88 88 50        ......p.....P
     37c:	20 88 88 88 a8 a8 d8 88 88 88 50 20 50 88 88 88      .........P P...
     38c:	88 50 20 20 20 20 f8 08 10 20 40 80 f8 38 20 20     .P    ... @..8  
     39c:	20 20 20 38 00 80 40 20 10 08 00 e0 20 20 20 20        8..@ ....    
     3ac:	20 e0 20 50 88 00 00 00 00 00 00 00 00 00 00 f8      . P............
     3bc:	40 20 10 00 00 00 00 00 00 70 08 78 88 78 80 80     @ .......p.x.x..
     3cc:	b0 c8 88 88 f0 00 00 70 80 80 88 70 08 08 68 98     .......p...p..h.
     3dc:	88 88 78 00 00 70 88 f8 80 70 30 48 40 e0 40 40     ..x..p...p0H@.@@
     3ec:	40 00 00 78 88 78 08 30 80 80 b0 c8 88 88 88 20     @..x.x.0....... 
     3fc:	00 60 20 20 20 70 10 00 30 10 10 90 60 40 40 48     .`   p..0...`@@H
     40c:	50 60 50 48 60 20 20 20 20 20 70 00 00 d0 a8 a8     P`PH`     p.....
     41c:	88 88 00 00 b0 c8 88 88 88 00 00 70 88 88 88 70     ...........p...p
     42c:	00 00 f0 88 f0 80 80 00 00 68 98 78 08 08 00 00     .........h.x....
     43c:	b0 c8 80 80 80 00 00 70 80 70 08 f0 40 40 e0 40     .......p.p..@@.@
     44c:	40 48 30 00 00 88 88 88 98 68 00 00 88 88 88 50     @H0......h.....P
     45c:	20 00 00 88 88 a8 a8 50 00 00 88 50 20 50 88 00      ......P...P P..
     46c:	00 88 88 78 08 70 00 00 f8 10 20 40 f8 10 20 20     ...x.p.... @..  
     47c:	40 20 20 10 20 20 20 20 20 20 20 40 20 20 10 20     @  .       @  . 
     48c:	20 40                                                @

0000048e <tz_min_45>:
     48e:	2b 34 35 20 6d 69 6e 00                             +45 min.

00000496 <tz_min_30>:
     496:	2b 33 30 20 6d 69 6e 00                             +30 min.

0000049e <tz_min_15>:
     49e:	2b 31 35 20 6d 69 6e 00                             +15 min.

000004a6 <tz_min_00>:
     4a6:	20 30 20 6d 69 6e 00                                 0 min.

000004ad <tz_minutes_title>:
     4ad:	54 69 6d 65 7a 6f 6e 65 20 6d 69 6e 75 74 65 73     Timezone minutes
     4bd:	3a 00                                               :.

000004bf <tz_12>:
     4bf:	2b 31 32 3a 20 46 69 6a 69 00                       +12: Fiji.

000004c9 <tz_11>:
     4c9:	2b 31 31 3a 20 53 6f 6c 6f 6d 6f 6e 20 49 73 6c     +11: Solomon Isl
     4d9:	61 6e 64 00                                         and.

000004dd <tz_10>:
     4dd:	2b 31 30 3a 20 41 45 53 54 00                       +10: AEST.

000004e7 <tz_09>:
     4e7:	20 2b 39 3a 20 54 6f 6b 79 6f 00                     +9: Tokyo.

000004f2 <tz_08>:
     4f2:	20 2b 38 3a 20 48 6f 6e 67 20 4b 6f 6e 67 00         +8: Hong Kong.

00000501 <tz_07>:
     501:	20 2b 37 3a 20 54 68 61 69 6c 61 6e 64 00            +7: Thailand.

0000050f <tz_06>:
     50f:	20 2b 36 3a 20 42 61 6e 67 6c 61 64 65 73 68 00      +6: Bangladesh.

0000051f <tz_05>:
     51f:	20 2b 35 3a 20 50 61 6b 69 73 74 61 6e 00            +5: Pakistan.

0000052d <tz_04>:
     52d:	20 2b 34 3a 20 4d 6f 73 63 6f 77 00                  +4: Moscow.

00000539 <tz_03>:
     539:	20 2b 33 3a 20 4e 61 69 72 6f 62 69 00               +3: Nairobi.

00000546 <tz_02>:
     546:	20 2b 32 3a 20 49 73 74 61 6e 62 75 6c 00            +2: Istanbul.

00000554 <tz_01>:
     554:	20 2b 31 3a 20 4f 73 6c 6f 2c 20 42 65 72 6c 69      +1: Oslo, Berli
     564:	6e 00                                               n.

00000566 <tz_00>:
     566:	55 54 43 3a 20 55 4b 20 28 47 4d 54 29 00           UTC: UK (GMT).

00000574 <tz_n01>:
     574:	20 2d 31 3a 20 50 72 61 69 61 00                     -1: Praia.

0000057f <tz_n02>:
     57f:	20 2d 32 3a 20 53 6f 75 74 68 20 47 65 6f 72 67      -2: South Georg
     58f:	69 61 00                                            ia.

00000592 <tz_n03>:
     592:	20 2d 33 3a 20 47 72 65 65 6e 6c 61 6e 64 00         -3: Greenland.

000005a1 <tz_n04>:
     5a1:	20 2d 34 3a 20 45 43 54 00                           -4: ECT.

000005aa <tz_n05>:
     5aa:	20 2d 35 3a 20 45 61 73 74 65 72 6e 00               -5: Eastern.

000005b7 <tz_n06>:
     5b7:	20 2d 36 3a 20 43 65 6e 74 72 61 6c 00               -6: Central.

000005c4 <tz_n07>:
     5c4:	20 2d 37 3a 20 4d 6f 75 6e 74 61 69 6e 00            -7: Mountain.

000005d2 <tz_n08>:
     5d2:	20 2d 38 3a 20 50 61 63 69 66 69 63 00               -8: Pacific.

000005df <tz_n09>:
     5df:	20 2d 39 3a 20 41 6c 61 73 6b 61 00                  -9: Alaska.

000005eb <tz_n10>:
     5eb:	2d 31 30 3a 20 48 61 77 61 69 69 00                 -10: Hawaii.

000005f7 <tz_n11>:
     5f7:	2d 31 31 3a 20 4b 69 6e 67 6d 61 6e 20 52 65 65     -11: Kingman Ree
     607:	66 00                                               f.

00000609 <tz_n12>:
     609:	2d 31 32 3a 20 42 61 6b 65 72 20 49 73 6c 61 6e     -12: Baker Islan
     619:	64 00                                               d.

0000061b <tz_hours_title>:
     61b:	54 69 6d 65 7a 6f 6e 65 20 68 6f 75 72 73 20 55     Timezone hours U
     62b:	54 43 00                                            TC.

0000062e <__ctors_end>:
     62e:	11 24       	eor	r1, r1
     630:	1f be       	out	0x3f, r1	; 63
     632:	cf ef       	ldi	r28, 0xFF	; 255
     634:	df e5       	ldi	r29, 0x5F	; 95
     636:	de bf       	out	0x3e, r29	; 62
     638:	cd bf       	out	0x3d, r28	; 61
     63a:	00 e0       	ldi	r16, 0x00	; 0
     63c:	0c bf       	out	0x3c, r16	; 60

0000063e <__do_copy_data>:
     63e:	11 e2       	ldi	r17, 0x21	; 33
     640:	a0 e0       	ldi	r26, 0x00	; 0
     642:	b0 e2       	ldi	r27, 0x20	; 32
     644:	e2 e6       	ldi	r30, 0x62	; 98
     646:	f7 e5       	ldi	r31, 0x57	; 87
     648:	00 e0       	ldi	r16, 0x00	; 0
     64a:	0b bf       	out	0x3b, r16	; 59
     64c:	02 c0       	rjmp	.+4      	; 0x652 <__do_copy_data+0x14>
     64e:	07 90       	elpm	r0, Z+
     650:	0d 92       	st	X+, r0
     652:	ae 35       	cpi	r26, 0x5E	; 94
     654:	b1 07       	cpc	r27, r17
     656:	d9 f7       	brne	.-10     	; 0x64e <__do_copy_data+0x10>

00000658 <__do_clear_bss>:
     658:	2a e2       	ldi	r18, 0x2A	; 42
     65a:	a0 e6       	ldi	r26, 0x60	; 96
     65c:	b1 e2       	ldi	r27, 0x21	; 33
     65e:	01 c0       	rjmp	.+2      	; 0x662 <.do_clear_bss_start>

00000660 <.do_clear_bss_loop>:
     660:	1d 92       	st	X+, r1

00000662 <.do_clear_bss_start>:
     662:	af 35       	cpi	r26, 0x5F	; 95
     664:	b2 07       	cpc	r27, r18
     666:	e1 f7       	brne	.-8      	; 0x660 <.do_clear_bss_loop>
     668:	0e 94 51 23 	call	0x46a2	; 0x46a2 <main>
     66c:	0c 94 af 2b 	jmp	0x575e	; 0x575e <_exit>

00000670 <__bad_interrupt>:
     670:	c7 cc       	rjmp	.-1650   	; 0x0 <__vectors>

00000672 <_1101010101_>:

#if ((_STATIC_PORT_PIN_CONF_ == 1) && (QTOUCH_SNS_PORT_COUNT >= 1))

GLOBAL_FUNCTION _1101010101_
_1101010101_:
    sts	CONCAT( PORT, SNS1, _DIRCLR ), p_1
     672:	80 93 a2 06 	sts	0x06A2, r24
    sts	CONCAT( PORT, SNSK1, _DIRCLR ), p_2
     676:	60 93 a2 06 	sts	0x06A2, r22
    sts	CONCAT( PORT, SNS1, _OUTSET), p_1
     67a:	80 93 a5 06 	sts	0x06A5, r24
    sts	CONCAT( PORT, SNSK1, _OUTCLR), p_2
     67e:	60 93 a6 06 	sts	0x06A6, r22
    sts	CONCAT( PORT, SNSK1, _DIRSET), p_2
     682:	60 93 a1 06 	sts	0x06A1, r22
    ret
     686:	08 95       	ret

00000688 <_1101010111_>:


GLOBAL_FUNCTION _1101010111_
_1101010111_:
    push r19
     688:	3f 93       	push	r19
    sts	CONCAT( PORT, SNSK1, _DIRCLR), p_2
     68a:	60 93 a2 06 	sts	0x06A2, r22
    sts	CONCAT( PORT, SNS1, _DIRSET), p_1
     68e:	80 93 a1 06 	sts	0x06A1, r24
    _10100011_
    _01101001_
    _00011001_
    _00011001_
#endif
    sts	CONCAT( PORT, SNS1, _DIRCLR ), p_1
     692:	80 93 a2 06 	sts	0x06A2, r24
    sts	CONCAT( PORT, SNSK1, _DIRSET ), p_2
     696:	60 93 a1 06 	sts	0x06A1, r22
    pop  r19
     69a:	3f 91       	pop	r19
    lds	r_v, CONCAT(PORT, SNS1, _IN )
     69c:	80 91 a8 06 	lds	r24, 0x06A8
    and	r_v, p_3
     6a0:	84 23       	and	r24, r20
    ret
     6a2:	08 95       	ret

000006a4 <_1101010110_>:


GLOBAL_FUNCTION _1101010110_
_1101010110_:
    sts	CONCAT( PORT, SNS1, _OUTCLR), p_1
     6a4:	80 93 a6 06 	sts	0x06A6, r24
    sts	CONCAT( PORT, SNS1, _DIRSET), p_1
     6a8:	80 93 a1 06 	sts	0x06A1, r24
    ret
     6ac:	08 95       	ret

000006ae <burst_1_1_10_0>:
     6ae:	a1 e0       	ldi	r26, 0x01	; 1
     6b0:	b0 e0       	ldi	r27, 0x00	; 0
     6b2:	ed e5       	ldi	r30, 0x5D	; 93
     6b4:	f3 e0       	ldi	r31, 0x03	; 3
     6b6:	0c 94 ff 26 	jmp	0x4dfe	; 0x4dfe <__prologue_saves__+0xc>
     6ba:	e8 2f       	mov	r30, r24
     6bc:	0f b7       	in	r16, 0x3f	; 63
     6be:	00 78       	andi	r16, 0x80	; 128
     6c0:	19 82       	std	Y+1, r1	; 0x01
     6c2:	80 91 60 21 	lds	r24, 0x2160
     6c6:	81 30       	cpi	r24, 0x01	; 1
     6c8:	19 f0       	breq	.+6      	; 0x6d0 <burst_1_1_10_0+0x22>
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	80 93 60 21 	sts	0x2160, r24
     6d0:	ce 2e       	mov	r12, r30
     6d2:	dd 24       	eor	r13, r13
     6d4:	f6 01       	movw	r30, r12
     6d6:	ee 55       	subi	r30, 0x5E	; 94
     6d8:	fe 4d       	sbci	r31, 0xDE	; 222
     6da:	b0 80       	ld	r11, Z
     6dc:	f6 01       	movw	r30, r12
     6de:	ea 55       	subi	r30, 0x5A	; 90
     6e0:	fe 4d       	sbci	r31, 0xDE	; 222
     6e2:	a0 80       	ld	r10, Z
     6e4:	f8 94       	cli
     6e6:	bb 20       	and	r11, r11
     6e8:	09 f4       	brne	.+2      	; 0x6ec <burst_1_1_10_0+0x3e>
     6ea:	aa c0       	rjmp	.+340    	; 0x840 <burst_1_1_10_0+0x192>
     6ec:	8b 2d       	mov	r24, r11
     6ee:	da df       	rcall	.-76     	; 0x6a4 <_1101010110_>
     6f0:	8b 2d       	mov	r24, r11
     6f2:	6a 2d       	mov	r22, r10
     6f4:	be df       	rcall	.-132    	; 0x672 <_1101010101_>
     6f6:	1b 2d       	mov	r17, r11
     6f8:	ee 24       	eor	r14, r14
     6fa:	ff 24       	eor	r15, r15
     6fc:	60 e0       	ldi	r22, 0x00	; 0
     6fe:	81 2c       	mov	r8, r1
     700:	30 e2       	ldi	r19, 0x20	; 32
     702:	93 2e       	mov	r9, r19
     704:	f5 fe       	sbrs	r15, 5
     706:	07 c0       	rjmp	.+14     	; 0x716 <burst_1_1_10_0+0x68>
     708:	90 91 a3 21 	lds	r25, 0x21A3
     70c:	80 91 a2 21 	lds	r24, 0x21A2
     710:	98 2b       	or	r25, r24
     712:	19 f5       	brne	.+70     	; 0x75a <burst_1_1_10_0+0xac>
     714:	35 c0       	rjmp	.+106    	; 0x780 <burst_1_1_10_0+0xd2>
     716:	8f b7       	in	r24, 0x3f	; 63
     718:	80 2b       	or	r24, r16
     71a:	8f bf       	out	0x3f, r24	; 63
     71c:	00 00       	nop
     71e:	f8 94       	cli
     720:	8b 2d       	mov	r24, r11
     722:	6a 2d       	mov	r22, r10
     724:	41 2f       	mov	r20, r17
     726:	b0 df       	rcall	.-160    	; 0x688 <_1101010111_>
     728:	68 2f       	mov	r22, r24
     72a:	08 94       	sec
     72c:	e1 1c       	adc	r14, r1
     72e:	f1 1c       	adc	r15, r1
     730:	80 91 00 20 	lds	r24, 0x2000
     734:	8f 5f       	subi	r24, 0xFF	; 255
     736:	80 93 00 20 	sts	0x2000, r24
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	30 f0       	brcs	.+12     	; 0x74a <burst_1_1_10_0+0x9c>
     73e:	82 30       	cpi	r24, 0x02	; 2
     740:	21 f0       	breq	.+8      	; 0x74a <burst_1_1_10_0+0x9c>
     742:	83 30       	cpi	r24, 0x03	; 3
     744:	11 f0       	breq	.+4      	; 0x74a <burst_1_1_10_0+0x9c>
     746:	10 92 00 20 	sts	0x2000, r1
     74a:	66 23       	and	r22, r22
     74c:	d9 f2       	breq	.-74     	; 0x704 <burst_1_1_10_0+0x56>
     74e:	20 91 a3 21 	lds	r18, 0x21A3
     752:	80 91 a2 21 	lds	r24, 0x21A2
     756:	28 2b       	or	r18, r24
     758:	15 c0       	rjmp	.+42     	; 0x784 <burst_1_1_10_0+0xd6>
     75a:	41 2f       	mov	r20, r17
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	40 ff       	sbrs	r20, 0
     760:	09 c0       	rjmp	.+18     	; 0x774 <burst_1_1_10_0+0xc6>
     762:	e8 2f       	mov	r30, r24
     764:	f0 e0       	ldi	r31, 0x00	; 0
     766:	ee 0f       	add	r30, r30
     768:	ff 1f       	adc	r31, r31
     76a:	e5 59       	subi	r30, 0x95	; 149
     76c:	fe 4d       	sbci	r31, 0xDE	; 222
     76e:	80 82       	st	Z, r8
     770:	91 82       	std	Z+1, r9	; 0x01
     772:	01 c0       	rjmp	.+2      	; 0x776 <burst_1_1_10_0+0xc8>
     774:	90 fd       	sbrc	r25, 0
     776:	8f 5f       	subi	r24, 0xFF	; 255
     778:	96 95       	lsr	r25
     77a:	46 95       	lsr	r20
     77c:	99 23       	and	r25, r25
     77e:	79 f7       	brne	.-34     	; 0x75e <burst_1_1_10_0+0xb0>
     780:	10 e0       	ldi	r17, 0x00	; 0
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	8f b7       	in	r24, 0x3f	; 63
     786:	80 2b       	or	r24, r16
     788:	8f bf       	out	0x3f, r24	; 63
     78a:	10 92 61 21 	sts	0x2161, r1
     78e:	22 23       	and	r18, r18
     790:	09 f4       	brne	.+2      	; 0x794 <burst_1_1_10_0+0xe6>
     792:	3f c0       	rjmp	.+126    	; 0x812 <burst_1_1_10_0+0x164>
     794:	11 23       	and	r17, r17
     796:	09 f4       	brne	.+2      	; 0x79a <burst_1_1_10_0+0xec>
     798:	3c c0       	rjmp	.+120    	; 0x812 <burst_1_1_10_0+0x164>
     79a:	30 91 a7 21 	lds	r19, 0x21A7
     79e:	80 91 a6 21 	lds	r24, 0x21A6
     7a2:	38 2b       	or	r19, r24
     7a4:	56 2f       	mov	r21, r22
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	40 e0       	ldi	r20, 0x00	; 0
     7ae:	23 c0       	rjmp	.+70     	; 0x7f6 <burst_1_1_10_0+0x148>
     7b0:	50 fd       	sbrc	r21, 0
     7b2:	17 c0       	rjmp	.+46     	; 0x7e2 <burst_1_1_10_0+0x134>
     7b4:	19 c0       	rjmp	.+50     	; 0x7e8 <burst_1_1_10_0+0x13a>
     7b6:	30 ff       	sbrs	r19, 0
     7b8:	13 c0       	rjmp	.+38     	; 0x7e0 <burst_1_1_10_0+0x132>
     7ba:	98 17       	cp	r25, r24
     7bc:	81 f4       	brne	.+32     	; 0x7de <burst_1_1_10_0+0x130>
     7be:	e4 2f       	mov	r30, r20
     7c0:	f0 e0       	ldi	r31, 0x00	; 0
     7c2:	ee 0f       	add	r30, r30
     7c4:	ff 1f       	adc	r31, r31
     7c6:	e5 59       	subi	r30, 0x95	; 149
     7c8:	fe 4d       	sbci	r31, 0xDE	; 222
     7ca:	e0 82       	st	Z, r14
     7cc:	f1 82       	std	Z+1, r15	; 0x01
     7ce:	85 2f       	mov	r24, r21
     7d0:	8e 7f       	andi	r24, 0xFE	; 254
     7d2:	19 f4       	brne	.+6      	; 0x7da <burst_1_1_10_0+0x12c>
     7d4:	89 2f       	mov	r24, r25
     7d6:	71 e0       	ldi	r23, 0x01	; 1
     7d8:	08 c0       	rjmp	.+16     	; 0x7ea <burst_1_1_10_0+0x13c>
     7da:	89 2f       	mov	r24, r25
     7dc:	06 c0       	rjmp	.+12     	; 0x7ea <burst_1_1_10_0+0x13c>
     7de:	8f 5f       	subi	r24, 0xFF	; 255
     7e0:	36 95       	lsr	r19
     7e2:	33 23       	and	r19, r19
     7e4:	41 f7       	brne	.-48     	; 0x7b6 <burst_1_1_10_0+0x108>
     7e6:	01 c0       	rjmp	.+2      	; 0x7ea <burst_1_1_10_0+0x13c>
     7e8:	20 fd       	sbrc	r18, 0
     7ea:	9f 5f       	subi	r25, 0xFF	; 255
     7ec:	20 fd       	sbrc	r18, 0
     7ee:	4f 5f       	subi	r20, 0xFF	; 255
     7f0:	56 95       	lsr	r21
     7f2:	26 95       	lsr	r18
     7f4:	11 f0       	breq	.+4      	; 0x7fa <burst_1_1_10_0+0x14c>
     7f6:	55 23       	and	r21, r21
     7f8:	d9 f6       	brne	.-74     	; 0x7b0 <burst_1_1_10_0+0x102>
     7fa:	40 93 61 21 	sts	0x2161, r20
     7fe:	60 95       	com	r22
     800:	16 23       	and	r17, r22
     802:	71 30       	cpi	r23, 0x01	; 1
     804:	21 f4       	brne	.+8      	; 0x80e <burst_1_1_10_0+0x160>
     806:	11 23       	and	r17, r17
     808:	11 f4       	brne	.+4      	; 0x80e <burst_1_1_10_0+0x160>
     80a:	ee 24       	eor	r14, r14
     80c:	ff 24       	eor	r15, r15
     80e:	60 e0       	ldi	r22, 0x00	; 0
     810:	13 c0       	rjmp	.+38     	; 0x838 <burst_1_1_10_0+0x18a>
     812:	80 91 a3 21 	lds	r24, 0x21A3
     816:	90 91 a2 21 	lds	r25, 0x21A2
     81a:	89 2b       	or	r24, r25
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	06 c0       	rjmp	.+12     	; 0x82e <burst_1_1_10_0+0x180>
     822:	89 81       	ldd	r24, Y+1	; 0x01
     824:	80 fd       	sbrc	r24, 0
     826:	9f 5f       	subi	r25, 0xFF	; 255
     828:	89 81       	ldd	r24, Y+1	; 0x01
     82a:	86 95       	lsr	r24
     82c:	89 83       	std	Y+1, r24	; 0x01
     82e:	89 81       	ldd	r24, Y+1	; 0x01
     830:	88 23       	and	r24, r24
     832:	b9 f7       	brne	.-18     	; 0x822 <burst_1_1_10_0+0x174>
     834:	90 93 61 21 	sts	0x2161, r25
     838:	f8 94       	cli
     83a:	11 23       	and	r17, r17
     83c:	09 f0       	breq	.+2      	; 0x840 <burst_1_1_10_0+0x192>
     83e:	62 cf       	rjmp	.-316    	; 0x704 <burst_1_1_10_0+0x56>
     840:	82 ea       	ldi	r24, 0xA2	; 162
     842:	91 e2       	ldi	r25, 0x21	; 33
     844:	c8 0e       	add	r12, r24
     846:	d9 1e       	adc	r13, r25
     848:	f6 01       	movw	r30, r12
     84a:	80 81       	ld	r24, Z
     84c:	2b df       	rcall	.-426    	; 0x6a4 <_1101010110_>
     84e:	8f b7       	in	r24, 0x3f	; 63
     850:	08 2b       	or	r16, r24
     852:	0f bf       	out	0x3f, r16	; 63
     854:	21 96       	adiw	r28, 0x01	; 1
     856:	ec e0       	ldi	r30, 0x0C	; 12
     858:	0c 94 18 27 	jmp	0x4e30	; 0x4e30 <__epilogue_restores__+0xc>

0000085c <qt_get_library_sig>:
     85c:	fc 01       	movw	r30, r24
     85e:	80 e2       	ldi	r24, 0x20	; 32
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	80 83       	st	Z, r24
     864:	91 83       	std	Z+1, r25	; 0x01
     866:	12 82       	std	Z+2, r1	; 0x02
     868:	13 82       	std	Z+3, r1	; 0x03
     86a:	80 e3       	ldi	r24, 0x30	; 48
     86c:	94 e0       	ldi	r25, 0x04	; 4
     86e:	84 83       	std	Z+4, r24	; 0x04
     870:	95 83       	std	Z+5, r25	; 0x05
     872:	08 95       	ret

00000874 <qt_enable_key>:
     874:	90 91 9c 21 	lds	r25, 0x219C
     878:	a9 2f       	mov	r26, r25
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	fd 01       	movw	r30, r26
     87e:	ee 0f       	add	r30, r30
     880:	ff 1f       	adc	r31, r31
     882:	ea 0f       	add	r30, r26
     884:	fb 1f       	adc	r31, r27
     886:	ee 0f       	add	r30, r30
     888:	ff 1f       	adc	r31, r31
     88a:	ec 57       	subi	r30, 0x7C	; 124
     88c:	fe 4d       	sbci	r31, 0xDE	; 222
     88e:	43 83       	std	Z+3, r20	; 0x03
     890:	67 70       	andi	r22, 0x07	; 7
     892:	85 83       	std	Z+5, r24	; 0x05
     894:	23 70       	andi	r18, 0x03	; 3
     896:	66 0f       	add	r22, r22
     898:	66 0f       	add	r22, r22
     89a:	66 0f       	add	r22, r22
     89c:	26 2b       	or	r18, r22
     89e:	24 83       	std	Z+4, r18	; 0x04
     8a0:	9f 5f       	subi	r25, 0xFF	; 255
     8a2:	90 93 9c 21 	sts	0x219C, r25
     8a6:	08 95       	ret

000008a8 <qt_get_sensor_delta>:
     8a8:	1f 93       	push	r17
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
     8ae:	28 2f       	mov	r18, r24
     8b0:	c8 2f       	mov	r28, r24
     8b2:	d0 e0       	ldi	r29, 0x00	; 0
     8b4:	fe 01       	movw	r30, r28
     8b6:	ee 0f       	add	r30, r30
     8b8:	ff 1f       	adc	r31, r31
     8ba:	ec 0f       	add	r30, r28
     8bc:	fd 1f       	adc	r31, r29
     8be:	ee 0f       	add	r30, r30
     8c0:	ff 1f       	adc	r31, r31
     8c2:	ec 57       	subi	r30, 0x7C	; 124
     8c4:	fe 4d       	sbci	r31, 0xDE	; 222
     8c6:	35 81       	ldd	r19, Z+5	; 0x05
     8c8:	83 81       	ldd	r24, Z+3	; 0x03
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	00 90 64 21 	lds	r0, 0x2164
     8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <qt_get_sensor_delta+0x2e>
     8d2:	95 95       	asr	r25
     8d4:	87 95       	ror	r24
     8d6:	0a 94       	dec	r0
     8d8:	e2 f7       	brpl	.-8      	; 0x8d2 <qt_get_sensor_delta+0x2a>
     8da:	18 2f       	mov	r17, r24
     8dc:	84 30       	cpi	r24, 0x04	; 4
     8de:	08 f4       	brcc	.+2      	; 0x8e2 <qt_get_sensor_delta+0x3a>
     8e0:	14 e0       	ldi	r17, 0x04	; 4
     8e2:	80 91 9c 21 	lds	r24, 0x219C
     8e6:	28 17       	cp	r18, r24
     8e8:	18 f0       	brcs	.+6      	; 0x8f0 <qt_get_sensor_delta+0x48>
     8ea:	20 e0       	ldi	r18, 0x00	; 0
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	2d c0       	rjmp	.+90     	; 0x94a <qt_get_sensor_delta+0xa2>
     8f0:	83 2f       	mov	r24, r19
     8f2:	1d d1       	rcall	.+570    	; 0xb2e <get_channel_delta>
     8f4:	9c 01       	movw	r18, r24
     8f6:	41 2f       	mov	r20, r17
     8f8:	50 e0       	ldi	r21, 0x00	; 0
     8fa:	16 95       	lsr	r17
     8fc:	16 95       	lsr	r17
     8fe:	81 2f       	mov	r24, r17
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	84 1b       	sub	r24, r20
     904:	95 0b       	sbc	r25, r21
     906:	82 17       	cp	r24, r18
     908:	93 07       	cpc	r25, r19
     90a:	64 f4       	brge	.+24     	; 0x924 <qt_get_sensor_delta+0x7c>
     90c:	fe 01       	movw	r30, r28
     90e:	ee 0f       	add	r30, r30
     910:	ff 1f       	adc	r31, r31
     912:	ec 0f       	add	r30, r28
     914:	fd 1f       	adc	r31, r29
     916:	ee 0f       	add	r30, r30
     918:	ff 1f       	adc	r31, r31
     91a:	ec 57       	subi	r30, 0x7C	; 124
     91c:	fe 4d       	sbci	r31, 0xDE	; 222
     91e:	84 81       	ldd	r24, Z+4	; 0x04
     920:	8b 7f       	andi	r24, 0xFB	; 251
     922:	84 83       	std	Z+4, r24	; 0x04
     924:	88 27       	eor	r24, r24
     926:	99 27       	eor	r25, r25
     928:	84 1b       	sub	r24, r20
     92a:	95 0b       	sbc	r25, r21
     92c:	82 17       	cp	r24, r18
     92e:	93 07       	cpc	r25, r19
     930:	64 f0       	brlt	.+24     	; 0x94a <qt_get_sensor_delta+0xa2>
     932:	fe 01       	movw	r30, r28
     934:	ee 0f       	add	r30, r30
     936:	ff 1f       	adc	r31, r31
     938:	ec 0f       	add	r30, r28
     93a:	fd 1f       	adc	r31, r29
     93c:	ee 0f       	add	r30, r30
     93e:	ff 1f       	adc	r31, r31
     940:	ec 57       	subi	r30, 0x7C	; 124
     942:	fe 4d       	sbci	r31, 0xDE	; 222
     944:	84 81       	ldd	r24, Z+4	; 0x04
     946:	84 60       	ori	r24, 0x04	; 4
     948:	84 83       	std	Z+4, r24	; 0x04
     94a:	c9 01       	movw	r24, r18
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	1f 91       	pop	r17
     952:	08 95       	ret

00000954 <qt_measure_sensors>:
     954:	ff 92       	push	r15
     956:	0f 93       	push	r16
     958:	1f 93       	push	r17
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	10 92 7c 21 	sts	0x217C, r1
     962:	10 92 7d 21 	sts	0x217D, r1
     966:	20 91 80 21 	lds	r18, 0x2180
     96a:	30 91 81 21 	lds	r19, 0x2181
     96e:	80 93 80 21 	sts	0x2180, r24
     972:	90 93 81 21 	sts	0x2181, r25
     976:	40 91 82 21 	lds	r20, 0x2182
     97a:	50 91 83 21 	lds	r21, 0x2183
     97e:	42 1b       	sub	r20, r18
     980:	53 0b       	sbc	r21, r19
     982:	48 0f       	add	r20, r24
     984:	59 1f       	adc	r21, r25
     986:	ff 24       	eor	r15, r15
     988:	03 c0       	rjmp	.+6      	; 0x990 <qt_measure_sensors+0x3c>
     98a:	f3 94       	inc	r15
     98c:	48 5c       	subi	r20, 0xC8	; 200
     98e:	50 40       	sbci	r21, 0x00	; 0
     990:	48 3c       	cpi	r20, 0xC8	; 200
     992:	51 05       	cpc	r21, r1
     994:	d0 f7       	brcc	.-12     	; 0x98a <qt_measure_sensors+0x36>
     996:	40 93 82 21 	sts	0x2182, r20
     99a:	50 93 83 21 	sts	0x2183, r21
     99e:	80 91 9d 21 	lds	r24, 0x219D
     9a2:	88 23       	and	r24, r24
     9a4:	41 f0       	breq	.+16     	; 0x9b6 <qt_measure_sensors+0x62>
     9a6:	8f 15       	cp	r24, r15
     9a8:	18 f4       	brcc	.+6      	; 0x9b0 <qt_measure_sensors+0x5c>
     9aa:	10 92 9d 21 	sts	0x219D, r1
     9ae:	03 c0       	rjmp	.+6      	; 0x9b6 <qt_measure_sensors+0x62>
     9b0:	8f 19       	sub	r24, r15
     9b2:	80 93 9d 21 	sts	0x219D, r24
     9b6:	aa d3       	rcall	.+1876   	; 0x110c <burst>
     9b8:	e0 91 7e 21 	lds	r30, 0x217E
     9bc:	f0 91 7f 21 	lds	r31, 0x217F
     9c0:	30 97       	sbiw	r30, 0x00	; 0
     9c2:	09 f0       	breq	.+2      	; 0x9c6 <qt_measure_sensors+0x72>
     9c4:	19 95       	eicall
     9c6:	10 e0       	ldi	r17, 0x00	; 0
     9c8:	00 e0       	ldi	r16, 0x00	; 0
     9ca:	05 c0       	rjmp	.+10     	; 0x9d6 <qt_measure_sensors+0x82>
     9cc:	81 2f       	mov	r24, r17
     9ce:	6f 2d       	mov	r22, r15
     9d0:	c3 d0       	rcall	.+390    	; 0xb58 <process_sensor>
     9d2:	08 2b       	or	r16, r24
     9d4:	1f 5f       	subi	r17, 0xFF	; 255
     9d6:	60 91 9c 21 	lds	r22, 0x219C
     9da:	16 17       	cp	r17, r22
     9dc:	b8 f3       	brcs	.-18     	; 0x9cc <qt_measure_sensors+0x78>
     9de:	00 23       	and	r16, r16
     9e0:	49 f0       	breq	.+18     	; 0x9f4 <qt_measure_sensors+0xa0>
     9e2:	80 91 7c 21 	lds	r24, 0x217C
     9e6:	90 91 7d 21 	lds	r25, 0x217D
     9ea:	91 60       	ori	r25, 0x01	; 1
     9ec:	80 93 7c 21 	sts	0x217C, r24
     9f0:	90 93 7d 21 	sts	0x217D, r25
     9f4:	10 92 7b 21 	sts	0x217B, r1
     9f8:	a4 e8       	ldi	r26, 0x84	; 132
     9fa:	b1 e2       	ldi	r27, 0x21	; 33
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	41 e0       	ldi	r20, 0x01	; 1
     a00:	50 e0       	ldi	r21, 0x00	; 0
     a02:	17 c0       	rjmp	.+46     	; 0xa32 <qt_measure_sensors+0xde>
     a04:	8c 91       	ld	r24, X
     a06:	88 71       	andi	r24, 0x18	; 24
     a08:	91 f0       	breq	.+36     	; 0xa2e <qt_measure_sensors+0xda>
     a0a:	e3 2f       	mov	r30, r19
     a0c:	e6 95       	lsr	r30
     a0e:	e6 95       	lsr	r30
     a10:	e6 95       	lsr	r30
     a12:	f0 e0       	ldi	r31, 0x00	; 0
     a14:	e5 59       	subi	r30, 0x95	; 149
     a16:	fe 4d       	sbci	r31, 0xDE	; 222
     a18:	83 2f       	mov	r24, r19
     a1a:	87 70       	andi	r24, 0x07	; 7
     a1c:	ea 01       	movw	r28, r20
     a1e:	02 c0       	rjmp	.+4      	; 0xa24 <qt_measure_sensors+0xd0>
     a20:	cc 0f       	add	r28, r28
     a22:	dd 1f       	adc	r29, r29
     a24:	8a 95       	dec	r24
     a26:	e2 f7       	brpl	.-8      	; 0xa20 <qt_measure_sensors+0xcc>
     a28:	20 89       	ldd	r18, Z+16	; 0x10
     a2a:	2c 2b       	or	r18, r28
     a2c:	20 8b       	std	Z+16, r18	; 0x10
     a2e:	3f 5f       	subi	r19, 0xFF	; 255
     a30:	16 96       	adiw	r26, 0x06	; 6
     a32:	36 17       	cp	r19, r22
     a34:	38 f3       	brcs	.-50     	; 0xa04 <qt_measure_sensors+0xb0>
     a36:	80 91 7c 21 	lds	r24, 0x217C
     a3a:	90 91 7d 21 	lds	r25, 0x217D
     a3e:	cd b7       	in	r28, 0x3d	; 61
     a40:	de b7       	in	r29, 0x3e	; 62
     a42:	e5 e0       	ldi	r30, 0x05	; 5
     a44:	0c 94 1f 27 	jmp	0x4e3e	; 0x4e3e <__epilogue_restores__+0x1a>

00000a48 <qt_reset_sensing>:
     a48:	10 92 9c 21 	sts	0x219C, r1
     a4c:	84 e0       	ldi	r24, 0x04	; 4
     a4e:	80 93 65 21 	sts	0x2165, r24
     a52:	94 e1       	ldi	r25, 0x14	; 20
     a54:	90 93 68 21 	sts	0x2168, r25
     a58:	85 e0       	ldi	r24, 0x05	; 5
     a5a:	80 93 69 21 	sts	0x2169, r24
     a5e:	10 92 67 21 	sts	0x2167, r1
     a62:	90 93 66 21 	sts	0x2166, r25
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	80 93 64 21 	sts	0x2164, r24
     a6c:	83 e0       	ldi	r24, 0x03	; 3
     a6e:	80 93 6a 21 	sts	0x216A, r24
     a72:	3b d3       	rcall	.+1654   	; 0x10ea <burst_reset>
     a74:	10 92 7e 21 	sts	0x217E, r1
     a78:	10 92 7f 21 	sts	0x217F, r1
     a7c:	08 95       	ret

00000a7e <qt_calibrate_sensing>:
     a7e:	1f 93       	push	r17
     a80:	10 e0       	ldi	r17, 0x00	; 0
     a82:	03 c0       	rjmp	.+6      	; 0xa8a <qt_calibrate_sensing+0xc>
     a84:	81 2f       	mov	r24, r17
     a86:	27 d0       	rcall	.+78     	; 0xad6 <start_cal_sensor>
     a88:	1f 5f       	subi	r17, 0xFF	; 255
     a8a:	80 91 9c 21 	lds	r24, 0x219C
     a8e:	18 17       	cp	r17, r24
     a90:	c8 f3       	brcs	.-14     	; 0xa84 <qt_calibrate_sensing+0x6>
     a92:	1f 91       	pop	r17
     a94:	08 95       	ret

00000a96 <qt_init_sensing_with_burst>:
     a96:	ef 92       	push	r14
     a98:	ff 92       	push	r15
     a9a:	1f 93       	push	r17
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	ec 01       	movw	r28, r24
     aa2:	7b 01       	movw	r14, r22
     aa4:	10 e0       	ldi	r17, 0x00	; 0
     aa6:	03 c0       	rjmp	.+6      	; 0xaae <qt_init_sensing_with_burst+0x18>
     aa8:	81 2f       	mov	r24, r17
     aaa:	15 d0       	rcall	.+42     	; 0xad6 <start_cal_sensor>
     aac:	1f 5f       	subi	r17, 0xFF	; 255
     aae:	80 91 9c 21 	lds	r24, 0x219C
     ab2:	18 17       	cp	r17, r24
     ab4:	c8 f3       	brcs	.-14     	; 0xaa8 <qt_init_sensing_with_burst+0x12>
     ab6:	10 92 80 21 	sts	0x2180, r1
     aba:	10 92 81 21 	sts	0x2181, r1
     abe:	c0 93 62 21 	sts	0x2162, r28
     ac2:	d0 93 63 21 	sts	0x2163, r29
     ac6:	c7 01       	movw	r24, r14
     ac8:	0b d3       	rcall	.+1558   	; 0x10e0 <burst_init>
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	1f 91       	pop	r17
     ad0:	ff 90       	pop	r15
     ad2:	ef 90       	pop	r14
     ad4:	08 95       	ret

00000ad6 <start_cal_sensor>:
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	e4 e8       	ldi	r30, 0x84	; 132
     ada:	f1 e2       	ldi	r31, 0x21	; 33
     adc:	9c 01       	movw	r18, r24
     ade:	22 0f       	add	r18, r18
     ae0:	33 1f       	adc	r19, r19
     ae2:	28 0f       	add	r18, r24
     ae4:	39 1f       	adc	r19, r25
     ae6:	d9 01       	movw	r26, r18
     ae8:	aa 0f       	add	r26, r26
     aea:	bb 1f       	adc	r27, r27
     aec:	ae 0f       	add	r26, r30
     aee:	bf 1f       	adc	r27, r31
     af0:	15 96       	adiw	r26, 0x05	; 5
     af2:	4c 91       	ld	r20, X
     af4:	15 97       	sbiw	r26, 0x05	; 5
     af6:	80 91 7c 21 	lds	r24, 0x217C
     afa:	90 91 7d 21 	lds	r25, 0x217D
     afe:	82 60       	ori	r24, 0x02	; 2
     b00:	80 93 7c 21 	sts	0x217C, r24
     b04:	90 93 7d 21 	sts	0x217D, r25
     b08:	2f 5f       	subi	r18, 0xFF	; 255
     b0a:	3f 4f       	sbci	r19, 0xFF	; 255
     b0c:	22 0f       	add	r18, r18
     b0e:	33 1f       	adc	r19, r19
     b10:	e2 0f       	add	r30, r18
     b12:	f3 1f       	adc	r31, r19
     b14:	10 82       	st	Z, r1
     b16:	ee e9       	ldi	r30, 0x9E	; 158
     b18:	f1 e2       	ldi	r31, 0x21	; 33
     b1a:	e4 0f       	add	r30, r20
     b1c:	f1 1d       	adc	r31, r1
     b1e:	80 e8       	ldi	r24, 0x80	; 128
     b20:	80 83       	st	Z, r24
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	8c 93       	st	X, r24
     b26:	8f e0       	ldi	r24, 0x0F	; 15
     b28:	11 96       	adiw	r26, 0x01	; 1
     b2a:	8c 93       	st	X, r24
     b2c:	08 95       	ret

00000b2e <get_channel_delta>:
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	fc 01       	movw	r30, r24
     b32:	34 96       	adiw	r30, 0x04	; 4
     b34:	ab e6       	ldi	r26, 0x6B	; 107
     b36:	b1 e2       	ldi	r27, 0x21	; 33
     b38:	ee 0f       	add	r30, r30
     b3a:	ff 1f       	adc	r31, r31
     b3c:	ea 0f       	add	r30, r26
     b3e:	fb 1f       	adc	r31, r27
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	a8 0f       	add	r26, r24
     b46:	b9 1f       	adc	r27, r25
     b48:	20 81       	ld	r18, Z
     b4a:	31 81       	ldd	r19, Z+1	; 0x01
     b4c:	8d 91       	ld	r24, X+
     b4e:	9c 91       	ld	r25, X
     b50:	28 1b       	sub	r18, r24
     b52:	39 0b       	sbc	r19, r25
     b54:	c9 01       	movw	r24, r18
     b56:	08 95       	ret

00000b58 <process_sensor>:
     b58:	a0 e0       	ldi	r26, 0x00	; 0
     b5a:	b0 e0       	ldi	r27, 0x00	; 0
     b5c:	e2 eb       	ldi	r30, 0xB2	; 178
     b5e:	f5 e0       	ldi	r31, 0x05	; 5
     b60:	0c 94 fd 26 	jmp	0x4dfa	; 0x4dfa <__prologue_saves__+0x8>
     b64:	78 2e       	mov	r7, r24
     b66:	f6 2e       	mov	r15, r22
     b68:	9f de       	rcall	.-706    	; 0x8a8 <qt_get_sensor_delta>
     b6a:	5c 01       	movw	r10, r24
     b6c:	07 2d       	mov	r16, r7
     b6e:	10 e0       	ldi	r17, 0x00	; 0
     b70:	f8 01       	movw	r30, r16
     b72:	ee 0f       	add	r30, r30
     b74:	ff 1f       	adc	r31, r31
     b76:	e0 0f       	add	r30, r16
     b78:	f1 1f       	adc	r31, r17
     b7a:	ee 0f       	add	r30, r30
     b7c:	ff 1f       	adc	r31, r31
     b7e:	ec 57       	subi	r30, 0x7C	; 124
     b80:	fe 4d       	sbci	r31, 0xDE	; 222
     b82:	54 81       	ldd	r21, Z+4	; 0x04
     b84:	43 81       	ldd	r20, Z+3	; 0x03
     b86:	24 2f       	mov	r18, r20
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	85 2f       	mov	r24, r21
     b8c:	83 70       	andi	r24, 0x03	; 3
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	01 96       	adiw	r24, 0x01	; 1
     b92:	02 c0       	rjmp	.+4      	; 0xb98 <process_sensor+0x40>
     b94:	35 95       	asr	r19
     b96:	27 95       	ror	r18
     b98:	8a 95       	dec	r24
     b9a:	e2 f7       	brpl	.-8      	; 0xb94 <process_sensor+0x3c>
     b9c:	82 2f       	mov	r24, r18
     b9e:	22 30       	cpi	r18, 0x02	; 2
     ba0:	08 f4       	brcc	.+2      	; 0xba4 <process_sensor+0x4c>
     ba2:	82 e0       	ldi	r24, 0x02	; 2
     ba4:	24 2f       	mov	r18, r20
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	b9 01       	movw	r22, r18
     baa:	68 1b       	sub	r22, r24
     bac:	71 09       	sbc	r23, r1
     bae:	f8 01       	movw	r30, r16
     bb0:	ee 0f       	add	r30, r30
     bb2:	ff 1f       	adc	r31, r31
     bb4:	e0 0f       	add	r30, r16
     bb6:	f1 1f       	adc	r31, r17
     bb8:	ef 01       	movw	r28, r30
     bba:	cc 0f       	add	r28, r28
     bbc:	dd 1f       	adc	r29, r29
     bbe:	cc 57       	subi	r28, 0x7C	; 124
     bc0:	de 4d       	sbci	r29, 0xDE	; 222
     bc2:	88 81       	ld	r24, Y
     bc4:	84 30       	cpi	r24, 0x04	; 4
     bc6:	09 f4       	brne	.+2      	; 0xbca <process_sensor+0x72>
     bc8:	f7 c0       	rjmp	.+494    	; 0xdb8 <process_sensor+0x260>
     bca:	85 30       	cpi	r24, 0x05	; 5
     bcc:	30 f4       	brcc	.+12     	; 0xbda <process_sensor+0x82>
     bce:	81 30       	cpi	r24, 0x01	; 1
     bd0:	71 f0       	breq	.+28     	; 0xbee <process_sensor+0x96>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	09 f0       	breq	.+2      	; 0xbd8 <process_sensor+0x80>
     bd6:	7d c2       	rjmp	.+1274   	; 0x10d2 <process_sensor+0x57a>
     bd8:	6e c0       	rjmp	.+220    	; 0xcb6 <process_sensor+0x15e>
     bda:	80 31       	cpi	r24, 0x10	; 16
     bdc:	09 f4       	brne	.+2      	; 0xbe0 <process_sensor+0x88>
     bde:	a1 c1       	rjmp	.+834    	; 0xf22 <process_sensor+0x3ca>
     be0:	80 32       	cpi	r24, 0x20	; 32
     be2:	09 f4       	brne	.+2      	; 0xbe6 <process_sensor+0x8e>
     be4:	42 c2       	rjmp	.+1156   	; 0x106a <process_sensor+0x512>
     be6:	88 30       	cpi	r24, 0x08	; 8
     be8:	09 f0       	breq	.+2      	; 0xbec <process_sensor+0x94>
     bea:	73 c2       	rjmp	.+1254   	; 0x10d2 <process_sensor+0x57a>
     bec:	ee c1       	rjmp	.+988    	; 0xfca <process_sensor+0x472>
     bee:	40 91 7c 21 	lds	r20, 0x217C
     bf2:	50 91 7d 21 	lds	r21, 0x217D
     bf6:	ca 01       	movw	r24, r20
     bf8:	92 60       	ori	r25, 0x02	; 2
     bfa:	80 93 7c 21 	sts	0x217C, r24
     bfe:	90 93 7d 21 	sts	0x217D, r25
     c02:	8d 81       	ldd	r24, Y+5	; 0x05
     c04:	69 81       	ldd	r22, Y+1	; 0x01
     c06:	a8 2f       	mov	r26, r24
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	6a 30       	cpi	r22, 0x0A	; 10
     c0c:	60 f0       	brcs	.+24     	; 0xc26 <process_sensor+0xce>
     c0e:	aa 0f       	add	r26, r26
     c10:	bb 1f       	adc	r27, r27
     c12:	fd 01       	movw	r30, r26
     c14:	e5 59       	subi	r30, 0x95	; 149
     c16:	fe 4d       	sbci	r31, 0xDE	; 222
     c18:	80 81       	ld	r24, Z
     c1a:	91 81       	ldd	r25, Z+1	; 0x01
     c1c:	ad 58       	subi	r26, 0x8D	; 141
     c1e:	be 4d       	sbci	r27, 0xDE	; 222
     c20:	8d 93       	st	X+, r24
     c22:	9c 93       	st	X, r25
     c24:	18 c0       	rjmp	.+48     	; 0xc56 <process_sensor+0xfe>
     c26:	aa 0f       	add	r26, r26
     c28:	bb 1f       	adc	r27, r27
     c2a:	fd 01       	movw	r30, r26
     c2c:	ed 58       	subi	r30, 0x8D	; 141
     c2e:	fe 4d       	sbci	r31, 0xDE	; 222
     c30:	20 81       	ld	r18, Z
     c32:	31 81       	ldd	r19, Z+1	; 0x01
     c34:	a5 59       	subi	r26, 0x95	; 149
     c36:	be 4d       	sbci	r27, 0xDE	; 222
     c38:	8d 91       	ld	r24, X+
     c3a:	9c 91       	ld	r25, X
     c3c:	82 17       	cp	r24, r18
     c3e:	93 07       	cpc	r25, r19
     c40:	18 f4       	brcc	.+6      	; 0xc48 <process_sensor+0xf0>
     c42:	21 50       	subi	r18, 0x01	; 1
     c44:	30 40       	sbci	r19, 0x00	; 0
     c46:	05 c0       	rjmp	.+10     	; 0xc52 <process_sensor+0xfa>
     c48:	28 17       	cp	r18, r24
     c4a:	39 07       	cpc	r19, r25
     c4c:	50 f4       	brcc	.+20     	; 0xc62 <process_sensor+0x10a>
     c4e:	2f 5f       	subi	r18, 0xFF	; 255
     c50:	3f 4f       	sbci	r19, 0xFF	; 255
     c52:	20 83       	st	Z, r18
     c54:	31 83       	std	Z+1, r19	; 0x01
     c56:	48 60       	ori	r20, 0x08	; 8
     c58:	52 60       	ori	r21, 0x02	; 2
     c5a:	40 93 7c 21 	sts	0x217C, r20
     c5e:	50 93 7d 21 	sts	0x217D, r21
     c62:	86 2f       	mov	r24, r22
     c64:	81 50       	subi	r24, 0x01	; 1
     c66:	f8 01       	movw	r30, r16
     c68:	ee 0f       	add	r30, r30
     c6a:	ff 1f       	adc	r31, r31
     c6c:	e0 0f       	add	r30, r16
     c6e:	f1 1f       	adc	r31, r17
     c70:	ef 01       	movw	r28, r30
     c72:	cc 0f       	add	r28, r28
     c74:	dd 1f       	adc	r29, r29
     c76:	cc 57       	subi	r28, 0x7C	; 124
     c78:	de 4d       	sbci	r29, 0xDE	; 222
     c7a:	89 83       	std	Y+1, r24	; 0x01
     c7c:	88 23       	and	r24, r24
     c7e:	b1 f4       	brne	.+44     	; 0xcac <process_sensor+0x154>
     c80:	ad 81       	ldd	r26, Y+5	; 0x05
     c82:	82 e0       	ldi	r24, 0x02	; 2
     c84:	88 83       	st	Y, r24
     c86:	80 91 7c 21 	lds	r24, 0x217C
     c8a:	90 91 7d 21 	lds	r25, 0x217D
     c8e:	82 60       	ori	r24, 0x02	; 2
     c90:	80 93 7c 21 	sts	0x217C, r24
     c94:	90 93 7d 21 	sts	0x217D, r25
     c98:	ee 0f       	add	r30, r30
     c9a:	ff 1f       	adc	r31, r31
     c9c:	ea 57       	subi	r30, 0x7A	; 122
     c9e:	fe 4d       	sbci	r31, 0xDE	; 222
     ca0:	10 82       	st	Z, r1
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	a2 56       	subi	r26, 0x62	; 98
     ca6:	be 4d       	sbci	r27, 0xDE	; 222
     ca8:	80 e8       	ldi	r24, 0x80	; 128
     caa:	8c 93       	st	X, r24
     cac:	80 91 66 21 	lds	r24, 0x2166
     cb0:	80 93 9d 21 	sts	0x219D, r24
     cb4:	0c c2       	rjmp	.+1048   	; 0x10ce <process_sensor+0x576>
     cb6:	52 ff       	sbrs	r21, 2
     cb8:	04 c0       	rjmp	.+8      	; 0xcc2 <process_sensor+0x16a>
     cba:	80 e2       	ldi	r24, 0x20	; 32
     cbc:	88 83       	st	Y, r24
     cbe:	19 82       	std	Y+1, r1	; 0x01
     cc0:	f7 c1       	rjmp	.+1006   	; 0x10b0 <process_sensor+0x558>
     cc2:	c5 01       	movw	r24, r10
     cc4:	b7 fe       	sbrs	r11, 7
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <process_sensor+0x174>
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	82 17       	cp	r24, r18
     cce:	93 07       	cpc	r25, r19
     cd0:	80 f0       	brcs	.+32     	; 0xcf2 <process_sensor+0x19a>
     cd2:	f8 01       	movw	r30, r16
     cd4:	ee 0f       	add	r30, r30
     cd6:	ff 1f       	adc	r31, r31
     cd8:	e0 0f       	add	r30, r16
     cda:	f1 1f       	adc	r31, r17
     cdc:	ee 0f       	add	r30, r30
     cde:	ff 1f       	adc	r31, r31
     ce0:	df 01       	movw	r26, r30
     ce2:	ac 57       	subi	r26, 0x7C	; 124
     ce4:	be 4d       	sbci	r27, 0xDE	; 222
     ce6:	84 e0       	ldi	r24, 0x04	; 4
     ce8:	8c 93       	st	X, r24
     cea:	ea 57       	subi	r30, 0x7A	; 122
     cec:	fe 4d       	sbci	r31, 0xDE	; 222
     cee:	10 82       	st	Z, r1
     cf0:	e5 c1       	rjmp	.+970    	; 0x10bc <process_sensor+0x564>
     cf2:	ff 20       	and	r15, r15
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <process_sensor+0x1a0>
     cf6:	ed c1       	rjmp	.+986    	; 0x10d2 <process_sensor+0x57a>
     cf8:	80 91 9d 21 	lds	r24, 0x219D
     cfc:	88 23       	and	r24, r24
     cfe:	09 f0       	breq	.+2      	; 0xd02 <process_sensor+0x1aa>
     d00:	e8 c1       	rjmp	.+976    	; 0x10d2 <process_sensor+0x57a>
     d02:	f8 01       	movw	r30, r16
     d04:	ee 0f       	add	r30, r30
     d06:	ff 1f       	adc	r31, r31
     d08:	e0 0f       	add	r30, r16
     d0a:	f1 1f       	adc	r31, r17
     d0c:	ee 0f       	add	r30, r30
     d0e:	ff 1f       	adc	r31, r31
     d10:	ec 57       	subi	r30, 0x7C	; 124
     d12:	fe 4d       	sbci	r31, 0xDE	; 222
     d14:	85 81       	ldd	r24, Z+5	; 0x05
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	ec 01       	movw	r28, r24
     d1a:	cc 0f       	add	r28, r28
     d1c:	dd 1f       	adc	r29, r29
     d1e:	cd 58       	subi	r28, 0x8D	; 141
     d20:	de 4d       	sbci	r29, 0xDE	; 222
     d22:	28 81       	ld	r18, Y
     d24:	39 81       	ldd	r19, Y+1	; 0x01
     d26:	fc 01       	movw	r30, r24
     d28:	ee 0f       	add	r30, r30
     d2a:	ff 1f       	adc	r31, r31
     d2c:	e5 59       	subi	r30, 0x95	; 149
     d2e:	fe 4d       	sbci	r31, 0xDE	; 222
     d30:	01 90       	ld	r0, Z+
     d32:	f0 81       	ld	r31, Z
     d34:	e0 2d       	mov	r30, r0
     d36:	2e 17       	cp	r18, r30
     d38:	3f 07       	cpc	r19, r31
     d3a:	88 f4       	brcc	.+34     	; 0xd5e <process_sensor+0x206>
     d3c:	fc 01       	movw	r30, r24
     d3e:	e2 56       	subi	r30, 0x62	; 98
     d40:	fe 4d       	sbci	r31, 0xDE	; 222
     d42:	90 81       	ld	r25, Z
     d44:	9f 0d       	add	r25, r15
     d46:	90 83       	st	Z, r25
     d48:	80 91 69 21 	lds	r24, 0x2169
     d4c:	80 58       	subi	r24, 0x80	; 128
     d4e:	98 17       	cp	r25, r24
     d50:	08 f4       	brcc	.+2      	; 0xd54 <process_sensor+0x1fc>
     d52:	bf c1       	rjmp	.+894    	; 0x10d2 <process_sensor+0x57a>
     d54:	80 e8       	ldi	r24, 0x80	; 128
     d56:	80 83       	st	Z, r24
     d58:	2f 5f       	subi	r18, 0xFF	; 255
     d5a:	3f 4f       	sbci	r19, 0xFF	; 255
     d5c:	14 c0       	rjmp	.+40     	; 0xd86 <process_sensor+0x22e>
     d5e:	dc 01       	movw	r26, r24
     d60:	a2 56       	subi	r26, 0x62	; 98
     d62:	be 4d       	sbci	r27, 0xDE	; 222
     d64:	e2 17       	cp	r30, r18
     d66:	f3 07       	cpc	r31, r19
     d68:	d0 f4       	brcc	.+52     	; 0xd9e <process_sensor+0x246>
     d6a:	8c 91       	ld	r24, X
     d6c:	8f 19       	sub	r24, r15
     d6e:	8c 93       	st	X, r24
     d70:	40 e8       	ldi	r20, 0x80	; 128
     d72:	90 91 68 21 	lds	r25, 0x2168
     d76:	54 2f       	mov	r21, r20
     d78:	59 1b       	sub	r21, r25
     d7a:	58 17       	cp	r21, r24
     d7c:	08 f4       	brcc	.+2      	; 0xd80 <process_sensor+0x228>
     d7e:	a9 c1       	rjmp	.+850    	; 0x10d2 <process_sensor+0x57a>
     d80:	4c 93       	st	X, r20
     d82:	21 50       	subi	r18, 0x01	; 1
     d84:	30 40       	sbci	r19, 0x00	; 0
     d86:	28 83       	st	Y, r18
     d88:	39 83       	std	Y+1, r19	; 0x01
     d8a:	80 91 7c 21 	lds	r24, 0x217C
     d8e:	90 91 7d 21 	lds	r25, 0x217D
     d92:	88 60       	ori	r24, 0x08	; 8
     d94:	80 93 7c 21 	sts	0x217C, r24
     d98:	90 93 7d 21 	sts	0x217D, r25
     d9c:	9a c1       	rjmp	.+820    	; 0x10d2 <process_sensor+0x57a>
     d9e:	2c 91       	ld	r18, X
     da0:	21 38       	cpi	r18, 0x81	; 129
     da2:	10 f0       	brcs	.+4      	; 0xda8 <process_sensor+0x250>
     da4:	21 50       	subi	r18, 0x01	; 1
     da6:	2c 93       	st	X, r18
     da8:	fc 01       	movw	r30, r24
     daa:	e2 56       	subi	r30, 0x62	; 98
     dac:	fe 4d       	sbci	r31, 0xDE	; 222
     dae:	80 81       	ld	r24, Z
     db0:	87 fd       	sbrc	r24, 7
     db2:	8f c1       	rjmp	.+798    	; 0x10d2 <process_sensor+0x57a>
     db4:	8f 5f       	subi	r24, 0xFF	; 255
     db6:	57 c1       	rjmp	.+686    	; 0x1066 <process_sensor+0x50e>
     db8:	c5 01       	movw	r24, r10
     dba:	b7 fe       	sbrs	r11, 7
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <process_sensor+0x26a>
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	f8 01       	movw	r30, r16
     dc4:	ee 0f       	add	r30, r30
     dc6:	ff 1f       	adc	r31, r31
     dc8:	82 17       	cp	r24, r18
     dca:	93 07       	cpc	r25, r19
     dcc:	08 f4       	brcc	.+2      	; 0xdd0 <process_sensor+0x278>
     dce:	8f c0       	rjmp	.+286    	; 0xeee <process_sensor+0x396>
     dd0:	80 91 66 21 	lds	r24, 0x2166
     dd4:	80 93 9d 21 	sts	0x219D, r24
     dd8:	9f 01       	movw	r18, r30
     dda:	20 0f       	add	r18, r16
     ddc:	31 1f       	adc	r19, r17
     dde:	22 0f       	add	r18, r18
     de0:	33 1f       	adc	r19, r19
     de2:	d9 01       	movw	r26, r18
     de4:	aa 57       	subi	r26, 0x7A	; 122
     de6:	be 4d       	sbci	r27, 0xDE	; 222
     de8:	8c 91       	ld	r24, X
     dea:	8f 5f       	subi	r24, 0xFF	; 255
     dec:	8c 93       	st	X, r24
     dee:	f9 01       	movw	r30, r18
     df0:	ec 57       	subi	r30, 0x7C	; 124
     df2:	fe 4d       	sbci	r31, 0xDE	; 222
     df4:	84 81       	ldd	r24, Z+4	; 0x04
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	88 73       	andi	r24, 0x38	; 56
     dfa:	90 70       	andi	r25, 0x00	; 0
     dfc:	23 e0       	ldi	r18, 0x03	; 3
     dfe:	96 95       	lsr	r25
     e00:	87 95       	ror	r24
     e02:	2a 95       	dec	r18
     e04:	e1 f7       	brne	.-8      	; 0xdfe <process_sensor+0x2a6>
     e06:	68 2e       	mov	r6, r24
     e08:	88 23       	and	r24, r24
     e0a:	09 f4       	brne	.+2      	; 0xe0e <process_sensor+0x2b6>
     e0c:	3e c0       	rjmp	.+124    	; 0xe8a <process_sensor+0x332>
     e0e:	dd 24       	eor	r13, r13
     e10:	cc 24       	eor	r12, r12
     e12:	7f 01       	movw	r14, r30
     e14:	83 e0       	ldi	r24, 0x03	; 3
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	e8 0e       	add	r14, r24
     e1a:	f9 1e       	adc	r15, r25
     e1c:	4d 01       	movw	r8, r26
     e1e:	2f c0       	rjmp	.+94     	; 0xe7e <process_sensor+0x326>
     e20:	d7 14       	cp	r13, r7
     e22:	61 f1       	breq	.+88     	; 0xe7c <process_sensor+0x324>
     e24:	8d 2d       	mov	r24, r13
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	ec 01       	movw	r28, r24
     e2a:	cc 0f       	add	r28, r28
     e2c:	dd 1f       	adc	r29, r29
     e2e:	c8 0f       	add	r28, r24
     e30:	d9 1f       	adc	r29, r25
     e32:	cc 0f       	add	r28, r28
     e34:	dd 1f       	adc	r29, r29
     e36:	cc 57       	subi	r28, 0x7C	; 124
     e38:	de 4d       	sbci	r29, 0xDE	; 222
     e3a:	8c 81       	ldd	r24, Y+4	; 0x04
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	88 73       	andi	r24, 0x38	; 56
     e40:	90 70       	andi	r25, 0x00	; 0
     e42:	73 e0       	ldi	r23, 0x03	; 3
     e44:	96 95       	lsr	r25
     e46:	87 95       	ror	r24
     e48:	7a 95       	dec	r23
     e4a:	e1 f7       	brne	.-8      	; 0xe44 <process_sensor+0x2ec>
     e4c:	68 16       	cp	r6, r24
     e4e:	b1 f4       	brne	.+44     	; 0xe7c <process_sensor+0x324>
     e50:	8d 2d       	mov	r24, r13
     e52:	2a dd       	rcall	.-1452   	; 0x8a8 <qt_get_sensor_delta>
     e54:	2b 81       	ldd	r18, Y+3	; 0x03
     e56:	82 1b       	sub	r24, r18
     e58:	91 09       	sbc	r25, r1
     e5a:	f7 01       	movw	r30, r14
     e5c:	20 81       	ld	r18, Z
     e5e:	a5 01       	movw	r20, r10
     e60:	42 1b       	sub	r20, r18
     e62:	51 09       	sbc	r21, r1
     e64:	48 17       	cp	r20, r24
     e66:	59 07       	cpc	r21, r25
     e68:	2c f0       	brlt	.+10     	; 0xe74 <process_sensor+0x31c>
     e6a:	88 81       	ld	r24, Y
     e6c:	80 31       	cpi	r24, 0x10	; 16
     e6e:	11 f0       	breq	.+4      	; 0xe74 <process_sensor+0x31c>
     e70:	88 30       	cpi	r24, 0x08	; 8
     e72:	21 f4       	brne	.+8      	; 0xe7c <process_sensor+0x324>
     e74:	f4 01       	movw	r30, r8
     e76:	10 82       	st	Z, r1
     e78:	cc 24       	eor	r12, r12
     e7a:	c3 94       	inc	r12
     e7c:	d3 94       	inc	r13
     e7e:	80 91 9c 21 	lds	r24, 0x219C
     e82:	d8 16       	cp	r13, r24
     e84:	68 f2       	brcs	.-102    	; 0xe20 <process_sensor+0x2c8>
     e86:	cc 20       	and	r12, r12
     e88:	79 f4       	brne	.+30     	; 0xea8 <process_sensor+0x350>
     e8a:	80 91 65 21 	lds	r24, 0x2165
     e8e:	88 23       	and	r24, r24
     e90:	59 f0       	breq	.+22     	; 0xea8 <process_sensor+0x350>
     e92:	80 91 7c 21 	lds	r24, 0x217C
     e96:	90 91 7d 21 	lds	r25, 0x217D
     e9a:	98 60       	ori	r25, 0x08	; 8
     e9c:	80 93 7c 21 	sts	0x217C, r24
     ea0:	90 93 7d 21 	sts	0x217D, r25
     ea4:	41 e0       	ldi	r20, 0x01	; 1
     ea6:	01 c0       	rjmp	.+2      	; 0xeaa <process_sensor+0x352>
     ea8:	40 e0       	ldi	r20, 0x00	; 0
     eaa:	98 01       	movw	r18, r16
     eac:	22 0f       	add	r18, r18
     eae:	33 1f       	adc	r19, r19
     eb0:	20 0f       	add	r18, r16
     eb2:	31 1f       	adc	r19, r17
     eb4:	f9 01       	movw	r30, r18
     eb6:	ee 0f       	add	r30, r30
     eb8:	ff 1f       	adc	r31, r31
     eba:	ea 57       	subi	r30, 0x7A	; 122
     ebc:	fe 4d       	sbci	r31, 0xDE	; 222
     ebe:	90 81       	ld	r25, Z
     ec0:	80 91 65 21 	lds	r24, 0x2165
     ec4:	98 17       	cp	r25, r24
     ec6:	08 f4       	brcc	.+2      	; 0xeca <process_sensor+0x372>
     ec8:	05 c1       	rjmp	.+522    	; 0x10d4 <process_sensor+0x57c>
     eca:	80 91 7c 21 	lds	r24, 0x217C
     ece:	90 91 7d 21 	lds	r25, 0x217D
     ed2:	83 60       	ori	r24, 0x03	; 3
     ed4:	80 93 7c 21 	sts	0x217C, r24
     ed8:	90 93 7d 21 	sts	0x217D, r25
     edc:	f9 01       	movw	r30, r18
     ede:	ee 0f       	add	r30, r30
     ee0:	ff 1f       	adc	r31, r31
     ee2:	ec 57       	subi	r30, 0x7C	; 124
     ee4:	fe 4d       	sbci	r31, 0xDE	; 222
     ee6:	80 e1       	ldi	r24, 0x10	; 16
     ee8:	80 83       	st	Z, r24
     eea:	11 82       	std	Z+1, r1	; 0x01
     eec:	f3 c0       	rjmp	.+486    	; 0x10d4 <process_sensor+0x57c>
     eee:	e0 0f       	add	r30, r16
     ef0:	f1 1f       	adc	r31, r17
     ef2:	ee 0f       	add	r30, r30
     ef4:	ff 1f       	adc	r31, r31
     ef6:	df 01       	movw	r26, r30
     ef8:	ac 57       	subi	r26, 0x7C	; 124
     efa:	be 4d       	sbci	r27, 0xDE	; 222
     efc:	15 96       	adiw	r26, 0x05	; 5
     efe:	2c 91       	ld	r18, X
     f00:	15 97       	sbiw	r26, 0x05	; 5
     f02:	82 e0       	ldi	r24, 0x02	; 2
     f04:	8c 93       	st	X, r24
     f06:	80 91 7c 21 	lds	r24, 0x217C
     f0a:	90 91 7d 21 	lds	r25, 0x217D
     f0e:	82 60       	ori	r24, 0x02	; 2
     f10:	80 93 7c 21 	sts	0x217C, r24
     f14:	90 93 7d 21 	sts	0x217D, r25
     f18:	ea 57       	subi	r30, 0x7A	; 122
     f1a:	fe 4d       	sbci	r31, 0xDE	; 222
     f1c:	10 82       	st	Z, r1
     f1e:	e2 2f       	mov	r30, r18
     f20:	9e c0       	rjmp	.+316    	; 0x105e <process_sensor+0x506>
     f22:	c5 01       	movw	r24, r10
     f24:	b7 fe       	sbrs	r11, 7
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <process_sensor+0x3d4>
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	f8 01       	movw	r30, r16
     f2e:	ee 0f       	add	r30, r30
     f30:	ff 1f       	adc	r31, r31
     f32:	40 91 7c 21 	lds	r20, 0x217C
     f36:	50 91 7d 21 	lds	r21, 0x217D
     f3a:	86 17       	cp	r24, r22
     f3c:	97 07       	cpc	r25, r23
     f3e:	70 f4       	brcc	.+28     	; 0xf5c <process_sensor+0x404>
     f40:	e0 0f       	add	r30, r16
     f42:	f1 1f       	adc	r31, r17
     f44:	ee 0f       	add	r30, r30
     f46:	ff 1f       	adc	r31, r31
     f48:	ec 57       	subi	r30, 0x7C	; 124
     f4a:	fe 4d       	sbci	r31, 0xDE	; 222
     f4c:	88 e0       	ldi	r24, 0x08	; 8
     f4e:	80 83       	st	Z, r24
     f50:	54 60       	ori	r21, 0x04	; 4
     f52:	40 93 7c 21 	sts	0x217C, r20
     f56:	50 93 7d 21 	sts	0x217D, r21
     f5a:	31 c0       	rjmp	.+98     	; 0xfbe <process_sensor+0x466>
     f5c:	41 60       	ori	r20, 0x01	; 1
     f5e:	40 93 7c 21 	sts	0x217C, r20
     f62:	50 93 7d 21 	sts	0x217D, r21
     f66:	e0 0f       	add	r30, r16
     f68:	f1 1f       	adc	r31, r17
     f6a:	ee 0f       	add	r30, r30
     f6c:	ff 1f       	adc	r31, r31
     f6e:	ea 57       	subi	r30, 0x7A	; 122
     f70:	fe 4d       	sbci	r31, 0xDE	; 222
     f72:	90 81       	ld	r25, Z
     f74:	80 91 65 21 	lds	r24, 0x2165
     f78:	98 17       	cp	r25, r24
     f7a:	10 f4       	brcc	.+4      	; 0xf80 <process_sensor+0x428>
     f7c:	9f 5f       	subi	r25, 0xFF	; 255
     f7e:	90 83       	st	Z, r25
     f80:	90 91 67 21 	lds	r25, 0x2167
     f84:	99 23       	and	r25, r25
     f86:	71 f0       	breq	.+28     	; 0xfa4 <process_sensor+0x44c>
     f88:	f8 01       	movw	r30, r16
     f8a:	ee 0f       	add	r30, r30
     f8c:	ff 1f       	adc	r31, r31
     f8e:	e0 0f       	add	r30, r16
     f90:	f1 1f       	adc	r31, r17
     f92:	ee 0f       	add	r30, r30
     f94:	ff 1f       	adc	r31, r31
     f96:	ec 57       	subi	r30, 0x7C	; 124
     f98:	fe 4d       	sbci	r31, 0xDE	; 222
     f9a:	81 81       	ldd	r24, Z+1	; 0x01
     f9c:	89 17       	cp	r24, r25
     f9e:	20 f4       	brcc	.+8      	; 0xfa8 <process_sensor+0x450>
     fa0:	8f 0d       	add	r24, r15
     fa2:	81 83       	std	Z+1, r24	; 0x01
     fa4:	40 e0       	ldi	r20, 0x00	; 0
     fa6:	0c c0       	rjmp	.+24     	; 0xfc0 <process_sensor+0x468>
     fa8:	87 2d       	mov	r24, r7
     faa:	95 dd       	rcall	.-1238   	; 0xad6 <start_cal_sensor>
     fac:	80 91 7c 21 	lds	r24, 0x217C
     fb0:	90 91 7d 21 	lds	r25, 0x217D
     fb4:	92 60       	ori	r25, 0x02	; 2
     fb6:	80 93 7c 21 	sts	0x217C, r24
     fba:	90 93 7d 21 	sts	0x217D, r25
     fbe:	41 e0       	ldi	r20, 0x01	; 1
     fc0:	80 91 66 21 	lds	r24, 0x2166
     fc4:	80 93 9d 21 	sts	0x219D, r24
     fc8:	85 c0       	rjmp	.+266    	; 0x10d4 <process_sensor+0x57c>
     fca:	80 91 66 21 	lds	r24, 0x2166
     fce:	80 93 9d 21 	sts	0x219D, r24
     fd2:	df 01       	movw	r26, r30
     fd4:	aa 0f       	add	r26, r26
     fd6:	bb 1f       	adc	r27, r27
     fd8:	aa 57       	subi	r26, 0x7A	; 122
     fda:	be 4d       	sbci	r27, 0xDE	; 222
     fdc:	8c 91       	ld	r24, X
     fde:	88 23       	and	r24, r24
     fe0:	89 f1       	breq	.+98     	; 0x1044 <process_sensor+0x4ec>
     fe2:	c5 01       	movw	r24, r10
     fe4:	b7 fe       	sbrs	r11, 7
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <process_sensor+0x494>
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	40 91 7c 21 	lds	r20, 0x217C
     ff0:	50 91 7d 21 	lds	r21, 0x217D
     ff4:	68 17       	cp	r22, r24
     ff6:	79 07       	cpc	r23, r25
     ff8:	90 f4       	brcc	.+36     	; 0x101e <process_sensor+0x4c6>
     ffa:	f8 01       	movw	r30, r16
     ffc:	ee 0f       	add	r30, r30
     ffe:	ff 1f       	adc	r31, r31
    1000:	e0 0f       	add	r30, r16
    1002:	f1 1f       	adc	r31, r17
    1004:	ee 0f       	add	r30, r30
    1006:	ff 1f       	adc	r31, r31
    1008:	ec 57       	subi	r30, 0x7C	; 124
    100a:	fe 4d       	sbci	r31, 0xDE	; 222
    100c:	80 e1       	ldi	r24, 0x10	; 16
    100e:	80 83       	st	Z, r24
    1010:	41 60       	ori	r20, 0x01	; 1
    1012:	40 93 7c 21 	sts	0x217C, r20
    1016:	50 93 7d 21 	sts	0x217D, r21
    101a:	40 e0       	ldi	r20, 0x00	; 0
    101c:	06 c0       	rjmp	.+12     	; 0x102a <process_sensor+0x4d2>
    101e:	54 60       	ori	r21, 0x04	; 4
    1020:	40 93 7c 21 	sts	0x217C, r20
    1024:	50 93 7d 21 	sts	0x217D, r21
    1028:	41 e0       	ldi	r20, 0x01	; 1
    102a:	f8 01       	movw	r30, r16
    102c:	ee 0f       	add	r30, r30
    102e:	ff 1f       	adc	r31, r31
    1030:	e0 0f       	add	r30, r16
    1032:	f1 1f       	adc	r31, r17
    1034:	ee 0f       	add	r30, r30
    1036:	ff 1f       	adc	r31, r31
    1038:	ea 57       	subi	r30, 0x7A	; 122
    103a:	fe 4d       	sbci	r31, 0xDE	; 222
    103c:	80 81       	ld	r24, Z
    103e:	81 50       	subi	r24, 0x01	; 1
    1040:	80 83       	st	Z, r24
    1042:	48 c0       	rjmp	.+144    	; 0x10d4 <process_sensor+0x57c>
    1044:	ed 81       	ldd	r30, Y+5	; 0x05
    1046:	82 e0       	ldi	r24, 0x02	; 2
    1048:	88 83       	st	Y, r24
    104a:	80 91 7c 21 	lds	r24, 0x217C
    104e:	90 91 7d 21 	lds	r25, 0x217D
    1052:	82 60       	ori	r24, 0x02	; 2
    1054:	80 93 7c 21 	sts	0x217C, r24
    1058:	90 93 7d 21 	sts	0x217D, r25
    105c:	1c 92       	st	X, r1
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	e2 56       	subi	r30, 0x62	; 98
    1062:	fe 4d       	sbci	r31, 0xDE	; 222
    1064:	80 e8       	ldi	r24, 0x80	; 128
    1066:	80 83       	st	Z, r24
    1068:	34 c0       	rjmp	.+104    	; 0x10d2 <process_sensor+0x57a>
    106a:	99 81       	ldd	r25, Y+1	; 0x01
    106c:	9f 5f       	subi	r25, 0xFF	; 255
    106e:	99 83       	std	Y+1, r25	; 0x01
    1070:	8c 81       	ldd	r24, Y+4	; 0x04
    1072:	82 fd       	sbrc	r24, 2
    1074:	17 c0       	rjmp	.+46     	; 0x10a4 <process_sensor+0x54c>
    1076:	ad 81       	ldd	r26, Y+5	; 0x05
    1078:	82 e0       	ldi	r24, 0x02	; 2
    107a:	88 83       	st	Y, r24
    107c:	80 91 7c 21 	lds	r24, 0x217C
    1080:	90 91 7d 21 	lds	r25, 0x217D
    1084:	82 60       	ori	r24, 0x02	; 2
    1086:	80 93 7c 21 	sts	0x217C, r24
    108a:	90 93 7d 21 	sts	0x217D, r25
    108e:	ee 0f       	add	r30, r30
    1090:	ff 1f       	adc	r31, r31
    1092:	ea 57       	subi	r30, 0x7A	; 122
    1094:	fe 4d       	sbci	r31, 0xDE	; 222
    1096:	10 82       	st	Z, r1
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	a2 56       	subi	r26, 0x62	; 98
    109c:	be 4d       	sbci	r27, 0xDE	; 222
    109e:	80 e8       	ldi	r24, 0x80	; 128
    10a0:	8c 93       	st	X, r24
    10a2:	17 c0       	rjmp	.+46     	; 0x10d2 <process_sensor+0x57a>
    10a4:	80 91 6a 21 	lds	r24, 0x216A
    10a8:	98 17       	cp	r25, r24
    10aa:	40 f0       	brcs	.+16     	; 0x10bc <process_sensor+0x564>
    10ac:	87 2d       	mov	r24, r7
    10ae:	13 dd       	rcall	.-1498   	; 0xad6 <start_cal_sensor>
    10b0:	80 91 7c 21 	lds	r24, 0x217C
    10b4:	90 91 7d 21 	lds	r25, 0x217D
    10b8:	90 61       	ori	r25, 0x10	; 16
    10ba:	05 c0       	rjmp	.+10     	; 0x10c6 <process_sensor+0x56e>
    10bc:	80 91 7c 21 	lds	r24, 0x217C
    10c0:	90 91 7d 21 	lds	r25, 0x217D
    10c4:	94 60       	ori	r25, 0x04	; 4
    10c6:	80 93 7c 21 	sts	0x217C, r24
    10ca:	90 93 7d 21 	sts	0x217D, r25
    10ce:	41 e0       	ldi	r20, 0x01	; 1
    10d0:	01 c0       	rjmp	.+2      	; 0x10d4 <process_sensor+0x57c>
    10d2:	40 e0       	ldi	r20, 0x00	; 0
    10d4:	84 2f       	mov	r24, r20
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	ee e0       	ldi	r30, 0x0E	; 14
    10dc:	0c 94 16 27 	jmp	0x4e2c	; 0x4e2c <__epilogue_restores__+0x8>

000010e0 <burst_init>:
    10e0:	fc 01       	movw	r30, r24
    10e2:	00 97       	sbiw	r24, 0x00	; 0
    10e4:	09 f0       	breq	.+2      	; 0x10e8 <burst_init+0x8>
    10e6:	19 95       	eicall
    10e8:	08 95       	ret

000010ea <burst_reset>:
    10ea:	10 92 a2 21 	sts	0x21A2, r1
    10ee:	10 92 a3 21 	sts	0x21A3, r1
    10f2:	10 92 a6 21 	sts	0x21A6, r1
    10f6:	10 92 a7 21 	sts	0x21A7, r1
    10fa:	10 92 a4 21 	sts	0x21A4, r1
    10fe:	10 92 a5 21 	sts	0x21A5, r1
    1102:	10 92 a8 21 	sts	0x21A8, r1
    1106:	10 92 a9 21 	sts	0x21A9, r1
    110a:	08 95       	ret

0000110c <burst>:
    110c:	80 91 a4 21 	lds	r24, 0x21A4
    1110:	90 91 a2 21 	lds	r25, 0x21A2
    1114:	89 2b       	or	r24, r25
    1116:	41 f0       	breq	.+16     	; 0x1128 <burst+0x1c>
    1118:	e0 91 62 21 	lds	r30, 0x2162
    111c:	f0 91 63 21 	lds	r31, 0x2163
    1120:	30 97       	sbiw	r30, 0x00	; 0
    1122:	11 f0       	breq	.+4      	; 0x1128 <burst+0x1c>
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	19 95       	eicall
    1128:	80 91 a5 21 	lds	r24, 0x21A5
    112c:	90 91 a3 21 	lds	r25, 0x21A3
    1130:	89 2b       	or	r24, r25
    1132:	41 f0       	breq	.+16     	; 0x1144 <burst+0x38>
    1134:	e0 91 62 21 	lds	r30, 0x2162
    1138:	f0 91 63 21 	lds	r31, 0x2163
    113c:	30 97       	sbiw	r30, 0x00	; 0
    113e:	11 f0       	breq	.+4      	; 0x1144 <burst+0x38>
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	19 95       	eicall
    1144:	08 95       	ret

00001146 <adc_handler>:
 * \retval the raw ADC value from the current ntc_sensor_sample
 */
int16_t ntc_get_raw_value(void)
{
	return ntc_sensor_sample;
}
    1146:	61 30       	cpi	r22, 0x01	; 1
    1148:	69 f5       	brne	.+90     	; 0x11a4 <adc_handler+0x5e>
    114a:	80 91 b0 21 	lds	r24, 0x21B0
    114e:	8f 5f       	subi	r24, 0xFF	; 255
    1150:	80 93 b0 21 	sts	0x21B0, r24
    1154:	81 30       	cpi	r24, 0x01	; 1
    1156:	39 f4       	brne	.+14     	; 0x1166 <adc_handler+0x20>
    1158:	40 93 aa 21 	sts	0x21AA, r20
    115c:	50 93 ab 21 	sts	0x21AB, r21
    1160:	10 92 ae 21 	sts	0x21AE, r1
    1164:	0c c0       	rjmp	.+24     	; 0x117e <adc_handler+0x38>
    1166:	80 91 aa 21 	lds	r24, 0x21AA
    116a:	90 91 ab 21 	lds	r25, 0x21AB
    116e:	48 0f       	add	r20, r24
    1170:	59 1f       	adc	r21, r25
    1172:	56 95       	lsr	r21
    1174:	47 95       	ror	r20
    1176:	40 93 aa 21 	sts	0x21AA, r20
    117a:	50 93 ab 21 	sts	0x21AB, r21
    117e:	80 91 b0 21 	lds	r24, 0x21B0
    1182:	84 30       	cpi	r24, 0x04	; 4
    1184:	31 f4       	brne	.+12     	; 0x1192 <adc_handler+0x4c>
    1186:	10 92 b0 21 	sts	0x21B0, r1
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	80 93 ae 21 	sts	0x21AE, r24
    1190:	08 95       	ret
    1192:	8f b7       	in	r24, 0x3f	; 63
    1194:	f8 94       	cli
    1196:	e0 e0       	ldi	r30, 0x00	; 0
    1198:	f2 e0       	ldi	r31, 0x02	; 2
    119a:	90 81       	ld	r25, Z
    119c:	94 60       	ori	r25, 0x04	; 4
    119e:	90 83       	st	Z, r25
    11a0:	8f bf       	out	0x3f, r24	; 63
    11a2:	08 95       	ret
    11a4:	62 30       	cpi	r22, 0x02	; 2
    11a6:	61 f5       	brne	.+88     	; 0x1200 <adc_handler+0xba>
    11a8:	80 91 b1 21 	lds	r24, 0x21B1
    11ac:	8f 5f       	subi	r24, 0xFF	; 255
    11ae:	80 93 b1 21 	sts	0x21B1, r24
    11b2:	81 30       	cpi	r24, 0x01	; 1
    11b4:	39 f4       	brne	.+14     	; 0x11c4 <adc_handler+0x7e>
    11b6:	40 93 ac 21 	sts	0x21AC, r20
    11ba:	50 93 ad 21 	sts	0x21AD, r21
    11be:	10 92 af 21 	sts	0x21AF, r1
    11c2:	0c c0       	rjmp	.+24     	; 0x11dc <adc_handler+0x96>
    11c4:	80 91 ac 21 	lds	r24, 0x21AC
    11c8:	90 91 ad 21 	lds	r25, 0x21AD
    11cc:	48 0f       	add	r20, r24
    11ce:	59 1f       	adc	r21, r25
    11d0:	56 95       	lsr	r21
    11d2:	47 95       	ror	r20
    11d4:	40 93 ac 21 	sts	0x21AC, r20
    11d8:	50 93 ad 21 	sts	0x21AD, r21
    11dc:	80 91 b1 21 	lds	r24, 0x21B1
    11e0:	84 30       	cpi	r24, 0x04	; 4
    11e2:	31 f4       	brne	.+12     	; 0x11f0 <adc_handler+0xaa>
    11e4:	10 92 b1 21 	sts	0x21B1, r1
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	80 93 af 21 	sts	0x21AF, r24
    11ee:	08 95       	ret
    11f0:	8f b7       	in	r24, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	e0 e0       	ldi	r30, 0x00	; 0
    11f6:	f2 e0       	ldi	r31, 0x02	; 2
    11f8:	90 81       	ld	r25, Z
    11fa:	98 60       	ori	r25, 0x08	; 8
    11fc:	90 83       	st	Z, r25
    11fe:	8f bf       	out	0x3f, r24	; 63
    1200:	08 95       	ret

00001202 <ntc_data_is_ready>:
    1202:	8f b7       	in	r24, 0x3f	; 63
    1204:	f8 94       	cli
    1206:	90 91 af 21 	lds	r25, 0x21AF
    120a:	99 23       	and	r25, r25
    120c:	29 f0       	breq	.+10     	; 0x1218 <ntc_data_is_ready+0x16>
    120e:	10 92 af 21 	sts	0x21AF, r1
    1212:	8f bf       	out	0x3f, r24	; 63
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	08 95       	ret
    1218:	8f bf       	out	0x3f, r24	; 63
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	08 95       	ret

0000121e <adc_sensors_init>:
    121e:	1f 93       	push	r17
    1220:	cf 93       	push	r28
    1222:	df 93       	push	r29
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
    1228:	2b 97       	sbiw	r28, 0x0b	; 11
    122a:	cd bf       	out	0x3d, r28	; 61
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	be 01       	movw	r22, r28
    1230:	6f 5f       	subi	r22, 0xFF	; 255
    1232:	7f 4f       	sbci	r23, 0xFF	; 255
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	92 e0       	ldi	r25, 0x02	; 2
    1238:	0e 94 23 19 	call	0x3246	; 0x3246 <adc_read_configuration>
    123c:	ae 01       	movw	r20, r28
    123e:	48 5f       	subi	r20, 0xF8	; 248
    1240:	5f 4f       	sbci	r21, 0xFF	; 255
    1242:	61 e0       	ldi	r22, 0x01	; 1
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	92 e0       	ldi	r25, 0x02	; 2
    1248:	0e 94 7f 19 	call	0x32fe	; 0x32fe <adcch_read_configuration>
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	9b 81       	ldd	r25, Y+3	; 0x03
    1250:	9f 78       	andi	r25, 0x8F	; 143
    1252:	90 61       	ori	r25, 0x10	; 16
    1254:	9b 83       	std	Y+3, r25	; 0x03
    1256:	96 e0       	ldi	r25, 0x06	; 6
    1258:	9d 83       	std	Y+5, r25	; 0x05
    125a:	81 7e       	andi	r24, 0xE1	; 225
    125c:	80 61       	ori	r24, 0x10	; 16
    125e:	8a 83       	std	Y+2, r24	; 0x02
    1260:	1c 82       	std	Y+4, r1	; 0x04
    1262:	be 01       	movw	r22, r28
    1264:	6f 5f       	subi	r22, 0xFF	; 255
    1266:	7f 4f       	sbci	r23, 0xFF	; 255
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	92 e0       	ldi	r25, 0x02	; 2
    126c:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <adc_write_configuration>
    1270:	63 ea       	ldi	r22, 0xA3	; 163
    1272:	78 e0       	ldi	r23, 0x08	; 8
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	92 e0       	ldi	r25, 0x02	; 2
    1278:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <adc_set_callback>
    127c:	11 e0       	ldi	r17, 0x01	; 1
    127e:	18 87       	std	Y+8, r17	; 0x08
    1280:	19 86       	std	Y+9, r1	; 0x09
    1282:	8a 85       	ldd	r24, Y+10	; 0x0a
    1284:	80 7f       	andi	r24, 0xF0	; 240
    1286:	81 60       	ori	r24, 0x01	; 1
    1288:	8a 87       	std	Y+10, r24	; 0x0a
    128a:	ae 01       	movw	r20, r28
    128c:	48 5f       	subi	r20, 0xF8	; 248
    128e:	5f 4f       	sbci	r21, 0xFF	; 255
    1290:	61 e0       	ldi	r22, 0x01	; 1
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	92 e0       	ldi	r25, 0x02	; 2
    1296:	0e 94 46 19 	call	0x328c	; 0x328c <adcch_write_configuration>
    129a:	18 87       	std	Y+8, r17	; 0x08
    129c:	88 e0       	ldi	r24, 0x08	; 8
    129e:	89 87       	std	Y+9, r24	; 0x09
    12a0:	ae 01       	movw	r20, r28
    12a2:	48 5f       	subi	r20, 0xF8	; 248
    12a4:	5f 4f       	sbci	r21, 0xFF	; 255
    12a6:	62 e0       	ldi	r22, 0x02	; 2
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	92 e0       	ldi	r25, 0x02	; 2
    12ac:	0e 94 46 19 	call	0x328c	; 0x328c <adcch_write_configuration>
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	92 e0       	ldi	r25, 0x02	; 2
    12b4:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <adc_enable>
    12b8:	2b 96       	adiw	r28, 0x0b	; 11
    12ba:	cd bf       	out	0x3d, r28	; 61
    12bc:	de bf       	out	0x3e, r29	; 62
    12be:	df 91       	pop	r29
    12c0:	cf 91       	pop	r28
    12c2:	1f 91       	pop	r17
    12c4:	08 95       	ret

000012c6 <ntc_get_temperature>:
 * \note The result is inaccurate for temperatures outside 5-45 degrees.
 *
 * \retval the temperature in Celsius
 */
int8_t ntc_get_temperature(void)
{
    12c6:	cf 93       	push	r28
    12c8:	df 93       	push	r29
	int8_t retval = 0;
	float ntc_sample = ntc_sensor_sample;
    12ca:	c0 91 ac 21 	lds	r28, 0x21AC
    12ce:	d0 91 ad 21 	lds	r29, 0x21AD
    12d2:	be 01       	movw	r22, r28
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <__floatunsisf>
	if (ntc_sensor_sample > 697) {
		retval = (int8_t)((-0.0295 * ntc_sample) + 40.5);
	} if (ntc_sensor_sample > 420) {
    12dc:	c5 3a       	cpi	r28, 0xA5	; 165
    12de:	d1 40       	sbci	r29, 0x01	; 1
    12e0:	80 f0       	brcs	.+32     	; 0x1302 <ntc_get_temperature+0x3c>
		retval = (int8_t)((-0.0474 * ntc_sample) + 53.3);
    12e2:	21 e8       	ldi	r18, 0x81	; 129
    12e4:	36 e2       	ldi	r19, 0x26	; 38
    12e6:	42 e4       	ldi	r20, 0x42	; 66
    12e8:	5d eb       	ldi	r21, 0xBD	; 189
    12ea:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <__mulsf3>
    12ee:	23 e3       	ldi	r18, 0x33	; 51
    12f0:	33 e3       	ldi	r19, 0x33	; 51
    12f2:	45 e5       	ldi	r20, 0x55	; 85
    12f4:	52 e4       	ldi	r21, 0x42	; 66
    12f6:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <__addsf3>
    12fa:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <__fixsfsi>
    12fe:	86 2f       	mov	r24, r22
    1300:	0f c0       	rjmp	.+30     	; 0x1320 <ntc_get_temperature+0x5a>
	} else {
		retval = (int8_t)((-0.0777 * ntc_sample) + 65.1);
    1302:	2d e2       	ldi	r18, 0x2D	; 45
    1304:	31 e2       	ldi	r19, 0x21	; 33
    1306:	4f e9       	ldi	r20, 0x9F	; 159
    1308:	5d eb       	ldi	r21, 0xBD	; 189
    130a:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <__mulsf3>
    130e:	23 e3       	ldi	r18, 0x33	; 51
    1310:	33 e3       	ldi	r19, 0x33	; 51
    1312:	42 e8       	ldi	r20, 0x82	; 130
    1314:	52 e4       	ldi	r21, 0x42	; 66
    1316:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <__addsf3>
    131a:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <__fixsfsi>
    131e:	86 2f       	mov	r24, r22
	}
	return retval;
}
    1320:	df 91       	pop	r29
    1322:	cf 91       	pop	r28
    1324:	08 95       	ret

00001326 <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
    1326:	cf 92       	push	r12
    1328:	df 92       	push	r13
    132a:	ef 92       	push	r14
    132c:	ff 92       	push	r15
    132e:	0f 93       	push	r16
    1330:	1f 93       	push	r17
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
    1336:	1f 92       	push	r1
    1338:	1f 92       	push	r1
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
 */
static inline void st7565r_hard_reset(void)
{
	// us delay is given by cpu_cykl = CPU_Mhz * us_delay / while_loop_cycles
	uint8_t delay_start = (sysclk_get_cpu_hz() / 1000000) * 10 / 10;
	volatile uint8_t delay = delay_start;
    133e:	88 e1       	ldi	r24, 0x18	; 24
    1340:	8a 83       	std	Y+2, r24	; 0x02
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1342:	88 e0       	ldi	r24, 0x08	; 8
    1344:	e0 e0       	ldi	r30, 0x00	; 0
    1346:	f6 e0       	ldi	r31, 0x06	; 6
    1348:	86 83       	std	Z+6, r24	; 0x06
	gpio_set_pin_low(ST7565R_RESET_PIN);
	while (delay--) {
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	98 2f       	mov	r25, r24
    134e:	91 50       	subi	r25, 0x01	; 1
    1350:	9a 83       	std	Y+2, r25	; 0x02
    1352:	81 11       	cpse	r24, r1
    1354:	fa cf       	rjmp	.-12     	; 0x134a <st7565r_init+0x24>
		// Intentionally left blank
	}
	delay = delay_start;
    1356:	88 e1       	ldi	r24, 0x18	; 24
    1358:	8a 83       	std	Y+2, r24	; 0x02
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    135a:	88 e0       	ldi	r24, 0x08	; 8
    135c:	e0 e0       	ldi	r30, 0x00	; 0
    135e:	f6 e0       	ldi	r31, 0x06	; 6
    1360:	85 83       	std	Z+5, r24	; 0x05
	gpio_set_pin_high(ST7565R_RESET_PIN);
	while (delay--) {
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	98 2f       	mov	r25, r24
    1366:	91 50       	subi	r25, 0x01	; 1
    1368:	9a 83       	std	Y+2, r25	; 0x02
    136a:	81 11       	cpse	r24, r1
    136c:	fa cf       	rjmp	.-12     	; 0x1362 <st7565r_init+0x3c>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
    136e:	8b e2       	ldi	r24, 0x2B	; 43
    1370:	89 83       	std	Y+1, r24	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
    1372:	80 ea       	ldi	r24, 0xA0	; 160
    1374:	99 e0       	ldi	r25, 0x09	; 9
    1376:	ec d5       	rcall	.+3032   	; 0x1f50 <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
    1378:	c1 2c       	mov	r12, r1
    137a:	d1 2c       	mov	r13, r1
    137c:	76 01       	movw	r14, r12
    137e:	00 e0       	ldi	r16, 0x00	; 0
    1380:	12 e1       	ldi	r17, 0x12	; 18
    1382:	2a e7       	ldi	r18, 0x7A	; 122
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	43 e0       	ldi	r20, 0x03	; 3
    1388:	be 01       	movw	r22, r28
    138a:	6f 5f       	subi	r22, 0xFF	; 255
    138c:	7f 4f       	sbci	r23, 0xFF	; 255
    138e:	80 ea       	ldi	r24, 0xA0	; 160
    1390:	99 e0       	ldi	r25, 0x09	; 9
    1392:	08 d6       	rcall	.+3088   	; 0x1fa4 <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1394:	e0 e6       	ldi	r30, 0x60	; 96
    1396:	f6 e0       	ldi	r31, 0x06	; 6
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	86 83       	std	Z+6, r24	; 0x06
    139c:	98 e0       	ldi	r25, 0x08	; 8
    139e:	a0 ea       	ldi	r26, 0xA0	; 160
    13a0:	b6 e0       	ldi	r27, 0x06	; 6
    13a2:	16 96       	adiw	r26, 0x06	; 6
    13a4:	9c 93       	st	X, r25
    13a6:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    13a8:	e0 ea       	ldi	r30, 0xA0	; 160
    13aa:	f9 e0       	ldi	r31, 0x09	; 9
    13ac:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    13ae:	85 ff       	sbrs	r24, 5
    13b0:	fd cf       	rjmp	.-6      	; 0x13ac <st7565r_init+0x86>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    13b2:	80 ea       	ldi	r24, 0xA0	; 160
    13b4:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    13b8:	e0 ea       	ldi	r30, 0xA0	; 160
    13ba:	f9 e0       	ldi	r31, 0x09	; 9
    13bc:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    13be:	86 ff       	sbrs	r24, 6
    13c0:	fd cf       	rjmp	.-6      	; 0x13bc <st7565r_init+0x96>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    13c2:	e0 ea       	ldi	r30, 0xA0	; 160
    13c4:	f9 e0       	ldi	r31, 0x09	; 9
    13c6:	80 e4       	ldi	r24, 0x40	; 64
    13c8:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    13ca:	80 81       	ld	r24, Z
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    13cc:	e0 ea       	ldi	r30, 0xA0	; 160
    13ce:	f6 e0       	ldi	r31, 0x06	; 6
    13d0:	88 e0       	ldi	r24, 0x08	; 8
    13d2:	85 83       	std	Z+5, r24	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    13d4:	86 83       	std	Z+6, r24	; 0x06
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	e0 e6       	ldi	r30, 0x60	; 96
    13da:	f6 e0       	ldi	r31, 0x06	; 6
    13dc:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    13de:	e0 ea       	ldi	r30, 0xA0	; 160
    13e0:	f9 e0       	ldi	r31, 0x09	; 9
    13e2:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    13e4:	85 ff       	sbrs	r24, 5
    13e6:	fd cf       	rjmp	.-6      	; 0x13e2 <st7565r_init+0xbc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    13e8:	86 ea       	ldi	r24, 0xA6	; 166
    13ea:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    13ee:	e0 ea       	ldi	r30, 0xA0	; 160
    13f0:	f9 e0       	ldi	r31, 0x09	; 9
    13f2:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    13f4:	86 ff       	sbrs	r24, 6
    13f6:	fd cf       	rjmp	.-6      	; 0x13f2 <st7565r_init+0xcc>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    13f8:	e0 ea       	ldi	r30, 0xA0	; 160
    13fa:	f9 e0       	ldi	r31, 0x09	; 9
    13fc:	80 e4       	ldi	r24, 0x40	; 64
    13fe:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1400:	80 81       	ld	r24, Z
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1402:	e0 ea       	ldi	r30, 0xA0	; 160
    1404:	f6 e0       	ldi	r31, 0x06	; 6
    1406:	88 e0       	ldi	r24, 0x08	; 8
    1408:	85 83       	std	Z+5, r24	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    140a:	86 83       	std	Z+6, r24	; 0x06
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	e0 e6       	ldi	r30, 0x60	; 96
    1410:	f6 e0       	ldi	r31, 0x06	; 6
    1412:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    1414:	e0 ea       	ldi	r30, 0xA0	; 160
    1416:	f9 e0       	ldi	r31, 0x09	; 9
    1418:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    141a:	85 ff       	sbrs	r24, 5
    141c:	fd cf       	rjmp	.-6      	; 0x1418 <st7565r_init+0xf2>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    141e:	88 ec       	ldi	r24, 0xC8	; 200
    1420:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1424:	e0 ea       	ldi	r30, 0xA0	; 160
    1426:	f9 e0       	ldi	r31, 0x09	; 9
    1428:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    142a:	86 ff       	sbrs	r24, 6
    142c:	fd cf       	rjmp	.-6      	; 0x1428 <st7565r_init+0x102>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    142e:	e0 ea       	ldi	r30, 0xA0	; 160
    1430:	f9 e0       	ldi	r31, 0x09	; 9
    1432:	80 e4       	ldi	r24, 0x40	; 64
    1434:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1436:	80 81       	ld	r24, Z
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1438:	e0 ea       	ldi	r30, 0xA0	; 160
    143a:	f6 e0       	ldi	r31, 0x06	; 6
    143c:	88 e0       	ldi	r24, 0x08	; 8
    143e:	85 83       	std	Z+5, r24	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1440:	86 83       	std	Z+6, r24	; 0x06
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	e0 e6       	ldi	r30, 0x60	; 96
    1446:	f6 e0       	ldi	r31, 0x06	; 6
    1448:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    144a:	e0 ea       	ldi	r30, 0xA0	; 160
    144c:	f9 e0       	ldi	r31, 0x09	; 9
    144e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    1450:	85 ff       	sbrs	r24, 5
    1452:	fd cf       	rjmp	.-6      	; 0x144e <st7565r_init+0x128>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1454:	82 ea       	ldi	r24, 0xA2	; 162
    1456:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    145a:	e0 ea       	ldi	r30, 0xA0	; 160
    145c:	f9 e0       	ldi	r31, 0x09	; 9
    145e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1460:	86 ff       	sbrs	r24, 6
    1462:	fd cf       	rjmp	.-6      	; 0x145e <st7565r_init+0x138>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    1464:	e0 ea       	ldi	r30, 0xA0	; 160
    1466:	f9 e0       	ldi	r31, 0x09	; 9
    1468:	80 e4       	ldi	r24, 0x40	; 64
    146a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    146c:	80 81       	ld	r24, Z
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    146e:	e0 ea       	ldi	r30, 0xA0	; 160
    1470:	f6 e0       	ldi	r31, 0x06	; 6
    1472:	88 e0       	ldi	r24, 0x08	; 8
    1474:	85 83       	std	Z+5, r24	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1476:	86 83       	std	Z+6, r24	; 0x06
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	e0 e6       	ldi	r30, 0x60	; 96
    147c:	f6 e0       	ldi	r31, 0x06	; 6
    147e:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    1480:	e0 ea       	ldi	r30, 0xA0	; 160
    1482:	f9 e0       	ldi	r31, 0x09	; 9
    1484:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    1486:	85 ff       	sbrs	r24, 5
    1488:	fd cf       	rjmp	.-6      	; 0x1484 <st7565r_init+0x15e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    148a:	8f e2       	ldi	r24, 0x2F	; 47
    148c:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1490:	e0 ea       	ldi	r30, 0xA0	; 160
    1492:	f9 e0       	ldi	r31, 0x09	; 9
    1494:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1496:	86 ff       	sbrs	r24, 6
    1498:	fd cf       	rjmp	.-6      	; 0x1494 <st7565r_init+0x16e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    149a:	e0 ea       	ldi	r30, 0xA0	; 160
    149c:	f9 e0       	ldi	r31, 0x09	; 9
    149e:	80 e4       	ldi	r24, 0x40	; 64
    14a0:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    14a2:	80 81       	ld	r24, Z
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    14a4:	e0 ea       	ldi	r30, 0xA0	; 160
    14a6:	f6 e0       	ldi	r31, 0x06	; 6
    14a8:	88 e0       	ldi	r24, 0x08	; 8
    14aa:	85 83       	std	Z+5, r24	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    14ac:	86 83       	std	Z+6, r24	; 0x06
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	e0 e6       	ldi	r30, 0x60	; 96
    14b2:	f6 e0       	ldi	r31, 0x06	; 6
    14b4:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    14b6:	e0 ea       	ldi	r30, 0xA0	; 160
    14b8:	f9 e0       	ldi	r31, 0x09	; 9
    14ba:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    14bc:	85 ff       	sbrs	r24, 5
    14be:	fd cf       	rjmp	.-6      	; 0x14ba <st7565r_init+0x194>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    14c0:	88 ef       	ldi	r24, 0xF8	; 248
    14c2:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    14c6:	e0 ea       	ldi	r30, 0xA0	; 160
    14c8:	f9 e0       	ldi	r31, 0x09	; 9
    14ca:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    14cc:	86 ff       	sbrs	r24, 6
    14ce:	fd cf       	rjmp	.-6      	; 0x14ca <st7565r_init+0x1a4>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    14d0:	e0 ea       	ldi	r30, 0xA0	; 160
    14d2:	f9 e0       	ldi	r31, 0x09	; 9
    14d4:	80 e4       	ldi	r24, 0x40	; 64
    14d6:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    14d8:	80 81       	ld	r24, Z
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    14da:	e0 ea       	ldi	r30, 0xA0	; 160
    14dc:	f6 e0       	ldi	r31, 0x06	; 6
    14de:	88 e0       	ldi	r24, 0x08	; 8
    14e0:	85 83       	std	Z+5, r24	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    14e2:	86 83       	std	Z+6, r24	; 0x06
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	e0 e6       	ldi	r30, 0x60	; 96
    14e8:	f6 e0       	ldi	r31, 0x06	; 6
    14ea:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    14ec:	e0 ea       	ldi	r30, 0xA0	; 160
    14ee:	f9 e0       	ldi	r31, 0x09	; 9
    14f0:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    14f2:	85 ff       	sbrs	r24, 5
    14f4:	fd cf       	rjmp	.-6      	; 0x14f0 <st7565r_init+0x1ca>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    14f6:	10 92 a0 09 	sts	0x09A0, r1
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    14fa:	e0 ea       	ldi	r30, 0xA0	; 160
    14fc:	f9 e0       	ldi	r31, 0x09	; 9
    14fe:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1500:	86 ff       	sbrs	r24, 6
    1502:	fd cf       	rjmp	.-6      	; 0x14fe <st7565r_init+0x1d8>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    1504:	e0 ea       	ldi	r30, 0xA0	; 160
    1506:	f9 e0       	ldi	r31, 0x09	; 9
    1508:	80 e4       	ldi	r24, 0x40	; 64
    150a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    150c:	80 81       	ld	r24, Z
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    150e:	e0 ea       	ldi	r30, 0xA0	; 160
    1510:	f6 e0       	ldi	r31, 0x06	; 6
    1512:	88 e0       	ldi	r24, 0x08	; 8
    1514:	85 83       	std	Z+5, r24	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1516:	86 83       	std	Z+6, r24	; 0x06
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	e0 e6       	ldi	r30, 0x60	; 96
    151c:	f6 e0       	ldi	r31, 0x06	; 6
    151e:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    1520:	e0 ea       	ldi	r30, 0xA0	; 160
    1522:	f9 e0       	ldi	r31, 0x09	; 9
    1524:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    1526:	85 ff       	sbrs	r24, 5
    1528:	fd cf       	rjmp	.-6      	; 0x1524 <st7565r_init+0x1fe>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    152a:	81 e2       	ldi	r24, 0x21	; 33
    152c:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1530:	e0 ea       	ldi	r30, 0xA0	; 160
    1532:	f9 e0       	ldi	r31, 0x09	; 9
    1534:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1536:	86 ff       	sbrs	r24, 6
    1538:	fd cf       	rjmp	.-6      	; 0x1534 <st7565r_init+0x20e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    153a:	e0 ea       	ldi	r30, 0xA0	; 160
    153c:	f9 e0       	ldi	r31, 0x09	; 9
    153e:	80 e4       	ldi	r24, 0x40	; 64
    1540:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1542:	80 81       	ld	r24, Z
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1544:	e0 ea       	ldi	r30, 0xA0	; 160
    1546:	f6 e0       	ldi	r31, 0x06	; 6
    1548:	88 e0       	ldi	r24, 0x08	; 8
    154a:	85 83       	std	Z+5, r24	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    154c:	86 83       	std	Z+6, r24	; 0x06
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	e0 e6       	ldi	r30, 0x60	; 96
    1552:	f6 e0       	ldi	r31, 0x06	; 6
    1554:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    1556:	e0 ea       	ldi	r30, 0xA0	; 160
    1558:	f9 e0       	ldi	r31, 0x09	; 9
    155a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    155c:	85 ff       	sbrs	r24, 5
    155e:	fd cf       	rjmp	.-6      	; 0x155a <st7565r_init+0x234>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1560:	81 e8       	ldi	r24, 0x81	; 129
    1562:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1566:	e0 ea       	ldi	r30, 0xA0	; 160
    1568:	f9 e0       	ldi	r31, 0x09	; 9
    156a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    156c:	86 ff       	sbrs	r24, 6
    156e:	fd cf       	rjmp	.-6      	; 0x156a <st7565r_init+0x244>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    1570:	e0 ea       	ldi	r30, 0xA0	; 160
    1572:	f9 e0       	ldi	r31, 0x09	; 9
    1574:	80 e4       	ldi	r24, 0x40	; 64
    1576:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1578:	80 81       	ld	r24, Z
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    157a:	e0 ea       	ldi	r30, 0xA0	; 160
    157c:	f6 e0       	ldi	r31, 0x06	; 6
    157e:	88 e0       	ldi	r24, 0x08	; 8
    1580:	85 83       	std	Z+5, r24	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1582:	86 83       	std	Z+6, r24	; 0x06
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	e0 e6       	ldi	r30, 0x60	; 96
    1588:	f6 e0       	ldi	r31, 0x06	; 6
    158a:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    158c:	e0 ea       	ldi	r30, 0xA0	; 160
    158e:	f9 e0       	ldi	r31, 0x09	; 9
    1590:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    1592:	85 ff       	sbrs	r24, 5
    1594:	fd cf       	rjmp	.-6      	; 0x1590 <st7565r_init+0x26a>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1596:	81 e2       	ldi	r24, 0x21	; 33
    1598:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    159c:	e0 ea       	ldi	r30, 0xA0	; 160
    159e:	f9 e0       	ldi	r31, 0x09	; 9
    15a0:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    15a2:	86 ff       	sbrs	r24, 6
    15a4:	fd cf       	rjmp	.-6      	; 0x15a0 <st7565r_init+0x27a>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    15a6:	e0 ea       	ldi	r30, 0xA0	; 160
    15a8:	f9 e0       	ldi	r31, 0x09	; 9
    15aa:	80 e4       	ldi	r24, 0x40	; 64
    15ac:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    15ae:	80 81       	ld	r24, Z
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    15b0:	e0 ea       	ldi	r30, 0xA0	; 160
    15b2:	f6 e0       	ldi	r31, 0x06	; 6
    15b4:	88 e0       	ldi	r24, 0x08	; 8
    15b6:	85 83       	std	Z+5, r24	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    15b8:	86 83       	std	Z+6, r24	; 0x06
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	e0 e6       	ldi	r30, 0x60	; 96
    15be:	f6 e0       	ldi	r31, 0x06	; 6
    15c0:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    15c2:	e0 ea       	ldi	r30, 0xA0	; 160
    15c4:	f9 e0       	ldi	r31, 0x09	; 9
    15c6:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    15c8:	85 ff       	sbrs	r24, 5
    15ca:	fd cf       	rjmp	.-6      	; 0x15c6 <st7565r_init+0x2a0>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    15cc:	8f ea       	ldi	r24, 0xAF	; 175
    15ce:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    15d2:	e0 ea       	ldi	r30, 0xA0	; 160
    15d4:	f9 e0       	ldi	r31, 0x09	; 9
    15d6:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    15d8:	86 ff       	sbrs	r24, 6
    15da:	fd cf       	rjmp	.-6      	; 0x15d6 <st7565r_init+0x2b0>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    15dc:	e0 ea       	ldi	r30, 0xA0	; 160
    15de:	f9 e0       	ldi	r31, 0x09	; 9
    15e0:	80 e4       	ldi	r24, 0x40	; 64
    15e2:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    15e4:	80 81       	ld	r24, Z
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    15e6:	88 e0       	ldi	r24, 0x08	; 8
    15e8:	e0 ea       	ldi	r30, 0xA0	; 160
    15ea:	f6 e0       	ldi	r31, 0x06	; 6
    15ec:	85 83       	std	Z+5, r24	; 0x05
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	df 91       	pop	r29
    15f4:	cf 91       	pop	r28
    15f6:	1f 91       	pop	r17
    15f8:	0f 91       	pop	r16
    15fa:	ff 90       	pop	r15
    15fc:	ef 90       	pop	r14
    15fe:	df 90       	pop	r13
    1600:	cf 90       	pop	r12
    1602:	08 95       	ret

00001604 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    1604:	0f 93       	push	r16
    1606:	1f 93       	push	r17
    1608:	cf 93       	push	r28
    160a:	df 93       	push	r29
    160c:	00 d0       	rcall	.+0      	; 0x160e <sysclk_init+0xa>
    160e:	1f 92       	push	r1
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    1614:	8f ef       	ldi	r24, 0xFF	; 255
    1616:	80 93 70 00 	sts	0x0070, r24
    161a:	80 93 71 00 	sts	0x0071, r24
    161e:	80 93 72 00 	sts	0x0072, r24
    1622:	80 93 73 00 	sts	0x0073, r24
    1626:	80 93 74 00 	sts	0x0074, r24
    162a:	80 93 75 00 	sts	0x0075, r24
    162e:	80 93 76 00 	sts	0x0076, r24
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    1632:	64 e0       	ldi	r22, 0x04	; 4
    1634:	81 e4       	ldi	r24, 0x41	; 65
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	0e 94 b9 19 	call	0x3372	; 0x3372 <ccp_write_io>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    163c:	6c e1       	ldi	r22, 0x1C	; 28
    163e:	70 e0       	ldi	r23, 0x00	; 0
    1640:	82 e0       	ldi	r24, 0x02	; 2
    1642:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    1646:	8a 83       	std	Y+2, r24	; 0x02
    1648:	6d e1       	ldi	r22, 0x1D	; 29
    164a:	70 e0       	ldi	r23, 0x00	; 0
    164c:	82 e0       	ldi	r24, 0x02	; 2
    164e:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    1652:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    1654:	89 81       	ldd	r24, Y+1	; 0x01
    1656:	9a 81       	ldd	r25, Y+2	; 0x02
    1658:	01 96       	adiw	r24, 0x01	; 1
    165a:	21 f4       	brne	.+8      	; 0x1664 <sysclk_init+0x60>
		cal = 0x2340;
    165c:	80 e4       	ldi	r24, 0x40	; 64
    165e:	93 e2       	ldi	r25, 0x23	; 35
    1660:	89 83       	std	Y+1, r24	; 0x01
    1662:	9a 83       	std	Y+2, r25	; 0x02
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	9a 81       	ldd	r25, Y+2	; 0x02
    1668:	8b 83       	std	Y+3, r24	; 0x03
    166a:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALA=LSB(calib);
		DFLLRC2M.CALB=MSB(calib);
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    166c:	e0 e6       	ldi	r30, 0x60	; 96
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    1672:	8c 81       	ldd	r24, Y+4	; 0x04
    1674:	83 83       	std	Z+3, r24	; 0x03

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1676:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1678:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    167a:	e0 e5       	ldi	r30, 0x50	; 80
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	90 81       	ld	r25, Z
    1680:	92 60       	ori	r25, 0x02	; 2
    1682:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1684:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1686:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1688:	81 ff       	sbrs	r24, 1
    168a:	fd cf       	rjmp	.-6      	; 0x1686 <sysclk_init+0x82>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    168c:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    168e:	f8 94       	cli
#if XMEGA_AU || XMEGA_B || XMEGA_C
		Assert((ref_id == OSC_ID_RC32KHZ)
				|| (ref_id == OSC_ID_XOSC)
				|| (ref_id == OSC_ID_USBSOF));

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    1690:	00 e5       	ldi	r16, 0x50	; 80
    1692:	10 e0       	ldi	r17, 0x00	; 0
    1694:	d8 01       	movw	r26, r16
    1696:	16 96       	adiw	r26, 0x06	; 6
    1698:	9c 91       	ld	r25, X
    169a:	16 97       	sbiw	r26, 0x06	; 6
    169c:	99 7f       	andi	r25, 0xF9	; 249
    169e:	16 96       	adiw	r26, 0x06	; 6
    16a0:	9c 93       	st	X, r25
    16a2:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    16a4:	e0 e6       	ldi	r30, 0x60	; 96
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	90 e8       	ldi	r25, 0x80	; 128
    16aa:	95 83       	std	Z+5, r25	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    16ac:	9b eb       	ldi	r25, 0xBB	; 187
    16ae:	96 83       	std	Z+6, r25	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    16b0:	16 96       	adiw	r26, 0x06	; 6
    16b2:	9c 91       	ld	r25, X
    16b4:	16 97       	sbiw	r26, 0x06	; 6
    16b6:	94 60       	ori	r25, 0x04	; 4
    16b8:	16 96       	adiw	r26, 0x06	; 6
    16ba:	9c 93       	st	X, r25
		}
		else if (ref_id == OSC_ID_RC32KHZ) {
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
		}
#endif
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    16bc:	90 81       	ld	r25, Z
    16be:	91 60       	ori	r25, 0x01	; 1
    16c0:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    16c2:	8f bf       	out	0x3f, r24	; 63
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    16c4:	61 e0       	ldi	r22, 0x01	; 1
    16c6:	80 e4       	ldi	r24, 0x40	; 64
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	0e 94 b9 19 	call	0x3372	; 0x3372 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    16ce:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    16d0:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    16d2:	f8 01       	movw	r30, r16
    16d4:	90 81       	ld	r25, Z
    16d6:	9e 7f       	andi	r25, 0xFE	; 254
    16d8:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    16da:	8f bf       	out	0x3f, r24	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    16dc:	24 96       	adiw	r28, 0x04	; 4
    16de:	cd bf       	out	0x3d, r28	; 61
    16e0:	de bf       	out	0x3e, r29	; 62
    16e2:	df 91       	pop	r29
    16e4:	cf 91       	pop	r28
    16e6:	1f 91       	pop	r17
    16e8:	0f 91       	pop	r16
    16ea:	08 95       	ret

000016ec <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    16ec:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    16ee:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    16f0:	e8 2f       	mov	r30, r24
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	e0 59       	subi	r30, 0x90	; 144
    16f6:	ff 4f       	sbci	r31, 0xFF	; 255
    16f8:	60 95       	com	r22
    16fa:	80 81       	ld	r24, Z
    16fc:	68 23       	and	r22, r24
    16fe:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1700:	9f bf       	out	0x3f, r25	; 63
    1702:	08 95       	ret

00001704 <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1704:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1706:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    1708:	e8 2f       	mov	r30, r24
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	e0 59       	subi	r30, 0x90	; 144
    170e:	ff 4f       	sbci	r31, 0xFF	; 255
    1710:	80 81       	ld	r24, Z
    1712:	68 2b       	or	r22, r24
    1714:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1716:	9f bf       	out	0x3f, r25	; 63
    1718:	08 95       	ret

0000171a <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    171a:	86 30       	cpi	r24, 0x06	; 6
    171c:	11 f4       	brne	.+4      	; 0x1722 <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
    171e:	68 e1       	ldi	r22, 0x18	; 24
    1720:	01 c0       	rjmp	.+2      	; 0x1724 <sysclk_enable_usb+0xa>
	}
	else {
		prescaler = 0;
    1722:	60 e0       	ldi	r22, 0x00	; 0

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1724:	e0 e5       	ldi	r30, 0x50	; 80
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	81 81       	ldd	r24, Z+1	; 0x01
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    172a:	81 fd       	sbrc	r24, 1
    172c:	24 c0       	rjmp	.+72     	; 0x1776 <sysclk_enable_usb+0x5c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    172e:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1730:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1732:	90 81       	ld	r25, Z
    1734:	92 60       	ori	r25, 0x02	; 2
    1736:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1738:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    173a:	81 81       	ldd	r24, Z+1	; 0x01
    173c:	81 ff       	sbrs	r24, 1
    173e:	fd cf       	rjmp	.-6      	; 0x173a <sysclk_enable_usb+0x20>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1740:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1742:	f8 94       	cli
#if XMEGA_AU || XMEGA_B || XMEGA_C
		Assert((ref_id == OSC_ID_RC32KHZ)
				|| (ref_id == OSC_ID_XOSC)
				|| (ref_id == OSC_ID_USBSOF));

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    1744:	a0 e5       	ldi	r26, 0x50	; 80
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	16 96       	adiw	r26, 0x06	; 6
    174a:	9c 91       	ld	r25, X
    174c:	16 97       	sbiw	r26, 0x06	; 6
    174e:	99 7f       	andi	r25, 0xF9	; 249
    1750:	16 96       	adiw	r26, 0x06	; 6
    1752:	9c 93       	st	X, r25
    1754:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    1756:	e0 e6       	ldi	r30, 0x60	; 96
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	90 e8       	ldi	r25, 0x80	; 128
    175c:	95 83       	std	Z+5, r25	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    175e:	9b eb       	ldi	r25, 0xBB	; 187
    1760:	96 83       	std	Z+6, r25	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    1762:	16 96       	adiw	r26, 0x06	; 6
    1764:	9c 91       	ld	r25, X
    1766:	16 97       	sbiw	r26, 0x06	; 6
    1768:	94 60       	ori	r25, 0x04	; 4
    176a:	16 96       	adiw	r26, 0x06	; 6
    176c:	9c 93       	st	X, r25
		}
		else if (ref_id == OSC_ID_RC32KHZ) {
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
		}
#endif
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    176e:	90 81       	ld	r25, Z
    1770:	91 60       	ori	r25, 0x01	; 1
    1772:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1774:	8f bf       	out	0x3f, r24	; 63
#ifdef CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    1776:	63 60       	ori	r22, 0x03	; 3
    1778:	84 e4       	ldi	r24, 0x44	; 68
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	0e 94 b9 19 	call	0x3372	; 0x3372 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    1780:	60 e4       	ldi	r22, 0x40	; 64
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	b3 cf       	rjmp	.-154    	; 0x16ec <sysclk_enable_module>

00001786 <gfx_mono_st7565r_put_page>:

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
	pixel_mask = (1 << (y - (page * 8)));

	return gfx_mono_get_byte(page, x) & pixel_mask;
}
    1786:	ef 92       	push	r14
    1788:	ff 92       	push	r15
    178a:	0f 93       	push	r16
    178c:	1f 93       	push	r17
    178e:	cf 93       	push	r28
    1790:	df 93       	push	r29
    1792:	ec 01       	movw	r28, r24
    1794:	f6 2e       	mov	r15, r22
    1796:	04 2f       	mov	r16, r20
    1798:	12 2f       	mov	r17, r18
    179a:	a2 d1       	rcall	.+836    	; 0x1ae0 <gfx_mono_framebuffer_put_page>
    179c:	9f 2d       	mov	r25, r15
    179e:	9f 70       	andi	r25, 0x0F	; 15
    17a0:	90 6b       	ori	r25, 0xB0	; 176
    17a2:	88 e0       	ldi	r24, 0x08	; 8
    17a4:	e0 ea       	ldi	r30, 0xA0	; 160
    17a6:	f6 e0       	ldi	r31, 0x06	; 6
    17a8:	86 83       	std	Z+6, r24	; 0x06
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	e0 e6       	ldi	r30, 0x60	; 96
    17ae:	f6 e0       	ldi	r31, 0x06	; 6
    17b0:	86 83       	std	Z+6, r24	; 0x06
    17b2:	e0 ea       	ldi	r30, 0xA0	; 160
    17b4:	f9 e0       	ldi	r31, 0x09	; 9
    17b6:	81 81       	ldd	r24, Z+1	; 0x01
    17b8:	85 ff       	sbrs	r24, 5
    17ba:	fd cf       	rjmp	.-6      	; 0x17b6 <gfx_mono_st7565r_put_page+0x30>
    17bc:	90 93 a0 09 	sts	0x09A0, r25
    17c0:	e0 ea       	ldi	r30, 0xA0	; 160
    17c2:	f9 e0       	ldi	r31, 0x09	; 9
    17c4:	81 81       	ldd	r24, Z+1	; 0x01
    17c6:	86 ff       	sbrs	r24, 6
    17c8:	fd cf       	rjmp	.-6      	; 0x17c4 <gfx_mono_st7565r_put_page+0x3e>
    17ca:	e0 ea       	ldi	r30, 0xA0	; 160
    17cc:	f9 e0       	ldi	r31, 0x09	; 9
    17ce:	80 e4       	ldi	r24, 0x40	; 64
    17d0:	81 83       	std	Z+1, r24	; 0x01
    17d2:	80 81       	ld	r24, Z
    17d4:	e0 ea       	ldi	r30, 0xA0	; 160
    17d6:	f6 e0       	ldi	r31, 0x06	; 6
    17d8:	88 e0       	ldi	r24, 0x08	; 8
    17da:	85 83       	std	Z+5, r24	; 0x05
    17dc:	90 2f       	mov	r25, r16
    17de:	9f 77       	andi	r25, 0x7F	; 127
    17e0:	92 95       	swap	r25
    17e2:	9f 70       	andi	r25, 0x0F	; 15
    17e4:	90 61       	ori	r25, 0x10	; 16
    17e6:	86 83       	std	Z+6, r24	; 0x06
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	e0 e6       	ldi	r30, 0x60	; 96
    17ec:	f6 e0       	ldi	r31, 0x06	; 6
    17ee:	86 83       	std	Z+6, r24	; 0x06
    17f0:	e0 ea       	ldi	r30, 0xA0	; 160
    17f2:	f9 e0       	ldi	r31, 0x09	; 9
    17f4:	81 81       	ldd	r24, Z+1	; 0x01
    17f6:	85 ff       	sbrs	r24, 5
    17f8:	fd cf       	rjmp	.-6      	; 0x17f4 <gfx_mono_st7565r_put_page+0x6e>
    17fa:	90 93 a0 09 	sts	0x09A0, r25
    17fe:	e0 ea       	ldi	r30, 0xA0	; 160
    1800:	f9 e0       	ldi	r31, 0x09	; 9
    1802:	81 81       	ldd	r24, Z+1	; 0x01
    1804:	86 ff       	sbrs	r24, 6
    1806:	fd cf       	rjmp	.-6      	; 0x1802 <gfx_mono_st7565r_put_page+0x7c>
    1808:	e0 ea       	ldi	r30, 0xA0	; 160
    180a:	f9 e0       	ldi	r31, 0x09	; 9
    180c:	80 e4       	ldi	r24, 0x40	; 64
    180e:	81 83       	std	Z+1, r24	; 0x01
    1810:	80 81       	ld	r24, Z
    1812:	e0 ea       	ldi	r30, 0xA0	; 160
    1814:	f6 e0       	ldi	r31, 0x06	; 6
    1816:	88 e0       	ldi	r24, 0x08	; 8
    1818:	85 83       	std	Z+5, r24	; 0x05
    181a:	0f 70       	andi	r16, 0x0F	; 15
    181c:	86 83       	std	Z+6, r24	; 0x06
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	e0 e6       	ldi	r30, 0x60	; 96
    1822:	f6 e0       	ldi	r31, 0x06	; 6
    1824:	86 83       	std	Z+6, r24	; 0x06
    1826:	e0 ea       	ldi	r30, 0xA0	; 160
    1828:	f9 e0       	ldi	r31, 0x09	; 9
    182a:	81 81       	ldd	r24, Z+1	; 0x01
    182c:	85 ff       	sbrs	r24, 5
    182e:	fd cf       	rjmp	.-6      	; 0x182a <gfx_mono_st7565r_put_page+0xa4>
    1830:	00 93 a0 09 	sts	0x09A0, r16
    1834:	e0 ea       	ldi	r30, 0xA0	; 160
    1836:	f9 e0       	ldi	r31, 0x09	; 9
    1838:	81 81       	ldd	r24, Z+1	; 0x01
    183a:	86 ff       	sbrs	r24, 6
    183c:	fd cf       	rjmp	.-6      	; 0x1838 <gfx_mono_st7565r_put_page+0xb2>
    183e:	e0 ea       	ldi	r30, 0xA0	; 160
    1840:	f9 e0       	ldi	r31, 0x09	; 9
    1842:	80 e4       	ldi	r24, 0x40	; 64
    1844:	81 83       	std	Z+1, r24	; 0x01
    1846:	80 81       	ld	r24, Z
    1848:	88 e0       	ldi	r24, 0x08	; 8
    184a:	e0 ea       	ldi	r30, 0xA0	; 160
    184c:	f6 e0       	ldi	r31, 0x06	; 6
    184e:	85 83       	std	Z+5, r24	; 0x05
    1850:	80 ea       	ldi	r24, 0xA0	; 160
    1852:	96 e0       	ldi	r25, 0x06	; 6
    1854:	48 e0       	ldi	r20, 0x08	; 8
    1856:	0f 2e       	mov	r0, r31
    1858:	f0 e6       	ldi	r31, 0x60	; 96
    185a:	ef 2e       	mov	r14, r31
    185c:	f6 e0       	ldi	r31, 0x06	; 6
    185e:	ff 2e       	mov	r15, r31
    1860:	f0 2d       	mov	r31, r0
    1862:	31 e0       	ldi	r19, 0x01	; 1
    1864:	e0 ea       	ldi	r30, 0xA0	; 160
    1866:	f9 e0       	ldi	r31, 0x09	; 9
    1868:	60 e4       	ldi	r22, 0x40	; 64
    186a:	59 91       	ld	r21, Y+
    186c:	dc 01       	movw	r26, r24
    186e:	16 96       	adiw	r26, 0x06	; 6
    1870:	4c 93       	st	X, r20
    1872:	d7 01       	movw	r26, r14
    1874:	15 96       	adiw	r26, 0x05	; 5
    1876:	3c 93       	st	X, r19
    1878:	21 81       	ldd	r18, Z+1	; 0x01
    187a:	25 ff       	sbrs	r18, 5
    187c:	fd cf       	rjmp	.-6      	; 0x1878 <gfx_mono_st7565r_put_page+0xf2>
    187e:	50 83       	st	Z, r21
    1880:	21 81       	ldd	r18, Z+1	; 0x01
    1882:	26 ff       	sbrs	r18, 6
    1884:	fd cf       	rjmp	.-6      	; 0x1880 <gfx_mono_st7565r_put_page+0xfa>
    1886:	61 83       	std	Z+1, r22	; 0x01
    1888:	20 81       	ld	r18, Z
    188a:	d7 01       	movw	r26, r14
    188c:	16 96       	adiw	r26, 0x06	; 6
    188e:	3c 93       	st	X, r19
    1890:	dc 01       	movw	r26, r24
    1892:	15 96       	adiw	r26, 0x05	; 5
    1894:	4c 93       	st	X, r20
    1896:	11 50       	subi	r17, 0x01	; 1
    1898:	41 f7       	brne	.-48     	; 0x186a <gfx_mono_st7565r_put_page+0xe4>
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	1f 91       	pop	r17
    18a0:	0f 91       	pop	r16
    18a2:	ff 90       	pop	r15
    18a4:	ef 90       	pop	r14
    18a6:	08 95       	ret

000018a8 <gfx_mono_st7565r_put_byte>:
    18a8:	1f 93       	push	r17
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
    18ae:	18 2f       	mov	r17, r24
    18b0:	d6 2f       	mov	r29, r22
    18b2:	c4 2f       	mov	r28, r20
    18b4:	29 d1       	rcall	.+594    	; 0x1b08 <gfx_mono_framebuffer_put_byte>
    18b6:	1f 70       	andi	r17, 0x0F	; 15
    18b8:	10 6b       	ori	r17, 0xB0	; 176
    18ba:	88 e0       	ldi	r24, 0x08	; 8
    18bc:	e0 ea       	ldi	r30, 0xA0	; 160
    18be:	f6 e0       	ldi	r31, 0x06	; 6
    18c0:	86 83       	std	Z+6, r24	; 0x06
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	e0 e6       	ldi	r30, 0x60	; 96
    18c6:	f6 e0       	ldi	r31, 0x06	; 6
    18c8:	86 83       	std	Z+6, r24	; 0x06
    18ca:	e0 ea       	ldi	r30, 0xA0	; 160
    18cc:	f9 e0       	ldi	r31, 0x09	; 9
    18ce:	91 81       	ldd	r25, Z+1	; 0x01
    18d0:	95 ff       	sbrs	r25, 5
    18d2:	fd cf       	rjmp	.-6      	; 0x18ce <gfx_mono_st7565r_put_byte+0x26>
    18d4:	10 93 a0 09 	sts	0x09A0, r17
    18d8:	e0 ea       	ldi	r30, 0xA0	; 160
    18da:	f9 e0       	ldi	r31, 0x09	; 9
    18dc:	81 81       	ldd	r24, Z+1	; 0x01
    18de:	86 ff       	sbrs	r24, 6
    18e0:	fd cf       	rjmp	.-6      	; 0x18dc <gfx_mono_st7565r_put_byte+0x34>
    18e2:	e0 ea       	ldi	r30, 0xA0	; 160
    18e4:	f9 e0       	ldi	r31, 0x09	; 9
    18e6:	80 e4       	ldi	r24, 0x40	; 64
    18e8:	81 83       	std	Z+1, r24	; 0x01
    18ea:	80 81       	ld	r24, Z
    18ec:	e0 ea       	ldi	r30, 0xA0	; 160
    18ee:	f6 e0       	ldi	r31, 0x06	; 6
    18f0:	88 e0       	ldi	r24, 0x08	; 8
    18f2:	85 83       	std	Z+5, r24	; 0x05
    18f4:	9d 2f       	mov	r25, r29
    18f6:	9f 77       	andi	r25, 0x7F	; 127
    18f8:	92 95       	swap	r25
    18fa:	9f 70       	andi	r25, 0x0F	; 15
    18fc:	90 61       	ori	r25, 0x10	; 16
    18fe:	86 83       	std	Z+6, r24	; 0x06
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	e0 e6       	ldi	r30, 0x60	; 96
    1904:	f6 e0       	ldi	r31, 0x06	; 6
    1906:	86 83       	std	Z+6, r24	; 0x06
    1908:	e0 ea       	ldi	r30, 0xA0	; 160
    190a:	f9 e0       	ldi	r31, 0x09	; 9
    190c:	81 81       	ldd	r24, Z+1	; 0x01
    190e:	85 ff       	sbrs	r24, 5
    1910:	fd cf       	rjmp	.-6      	; 0x190c <gfx_mono_st7565r_put_byte+0x64>
    1912:	90 93 a0 09 	sts	0x09A0, r25
    1916:	e0 ea       	ldi	r30, 0xA0	; 160
    1918:	f9 e0       	ldi	r31, 0x09	; 9
    191a:	81 81       	ldd	r24, Z+1	; 0x01
    191c:	86 ff       	sbrs	r24, 6
    191e:	fd cf       	rjmp	.-6      	; 0x191a <gfx_mono_st7565r_put_byte+0x72>
    1920:	e0 ea       	ldi	r30, 0xA0	; 160
    1922:	f9 e0       	ldi	r31, 0x09	; 9
    1924:	80 e4       	ldi	r24, 0x40	; 64
    1926:	81 83       	std	Z+1, r24	; 0x01
    1928:	80 81       	ld	r24, Z
    192a:	e0 ea       	ldi	r30, 0xA0	; 160
    192c:	f6 e0       	ldi	r31, 0x06	; 6
    192e:	88 e0       	ldi	r24, 0x08	; 8
    1930:	85 83       	std	Z+5, r24	; 0x05
    1932:	df 70       	andi	r29, 0x0F	; 15
    1934:	86 83       	std	Z+6, r24	; 0x06
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	e0 e6       	ldi	r30, 0x60	; 96
    193a:	f6 e0       	ldi	r31, 0x06	; 6
    193c:	86 83       	std	Z+6, r24	; 0x06
    193e:	e0 ea       	ldi	r30, 0xA0	; 160
    1940:	f9 e0       	ldi	r31, 0x09	; 9
    1942:	81 81       	ldd	r24, Z+1	; 0x01
    1944:	85 ff       	sbrs	r24, 5
    1946:	fd cf       	rjmp	.-6      	; 0x1942 <gfx_mono_st7565r_put_byte+0x9a>
    1948:	d0 93 a0 09 	sts	0x09A0, r29
    194c:	e0 ea       	ldi	r30, 0xA0	; 160
    194e:	f9 e0       	ldi	r31, 0x09	; 9
    1950:	81 81       	ldd	r24, Z+1	; 0x01
    1952:	86 ff       	sbrs	r24, 6
    1954:	fd cf       	rjmp	.-6      	; 0x1950 <gfx_mono_st7565r_put_byte+0xa8>
    1956:	e0 ea       	ldi	r30, 0xA0	; 160
    1958:	f9 e0       	ldi	r31, 0x09	; 9
    195a:	80 e4       	ldi	r24, 0x40	; 64
    195c:	81 83       	std	Z+1, r24	; 0x01
    195e:	80 81       	ld	r24, Z
    1960:	e0 ea       	ldi	r30, 0xA0	; 160
    1962:	f6 e0       	ldi	r31, 0x06	; 6
    1964:	88 e0       	ldi	r24, 0x08	; 8
    1966:	85 83       	std	Z+5, r24	; 0x05
    1968:	86 83       	std	Z+6, r24	; 0x06
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	e0 e6       	ldi	r30, 0x60	; 96
    196e:	f6 e0       	ldi	r31, 0x06	; 6
    1970:	85 83       	std	Z+5, r24	; 0x05
    1972:	e0 ea       	ldi	r30, 0xA0	; 160
    1974:	f9 e0       	ldi	r31, 0x09	; 9
    1976:	81 81       	ldd	r24, Z+1	; 0x01
    1978:	85 ff       	sbrs	r24, 5
    197a:	fd cf       	rjmp	.-6      	; 0x1976 <gfx_mono_st7565r_put_byte+0xce>
    197c:	c0 93 a0 09 	sts	0x09A0, r28
    1980:	e0 ea       	ldi	r30, 0xA0	; 160
    1982:	f9 e0       	ldi	r31, 0x09	; 9
    1984:	81 81       	ldd	r24, Z+1	; 0x01
    1986:	86 ff       	sbrs	r24, 6
    1988:	fd cf       	rjmp	.-6      	; 0x1984 <gfx_mono_st7565r_put_byte+0xdc>
    198a:	e0 ea       	ldi	r30, 0xA0	; 160
    198c:	f9 e0       	ldi	r31, 0x09	; 9
    198e:	80 e4       	ldi	r24, 0x40	; 64
    1990:	81 83       	std	Z+1, r24	; 0x01
    1992:	80 81       	ld	r24, Z
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	e0 e6       	ldi	r30, 0x60	; 96
    1998:	f6 e0       	ldi	r31, 0x06	; 6
    199a:	86 83       	std	Z+6, r24	; 0x06
    199c:	88 e0       	ldi	r24, 0x08	; 8
    199e:	e0 ea       	ldi	r30, 0xA0	; 160
    19a0:	f6 e0       	ldi	r31, 0x06	; 6
    19a2:	85 83       	std	Z+5, r24	; 0x05
    19a4:	df 91       	pop	r29
    19a6:	cf 91       	pop	r28
    19a8:	1f 91       	pop	r17
    19aa:	08 95       	ret

000019ac <gfx_mono_st7565r_init>:
    19ac:	cf 93       	push	r28
    19ae:	df 93       	push	r29
    19b0:	82 eb       	ldi	r24, 0xB2	; 178
    19b2:	91 e2       	ldi	r25, 0x21	; 33
    19b4:	90 d0       	rcall	.+288    	; 0x1ad6 <gfx_mono_set_framebuffer>
    19b6:	b7 dc       	rcall	.-1682   	; 0x1326 <st7565r_init>
    19b8:	88 e0       	ldi	r24, 0x08	; 8
    19ba:	e0 ea       	ldi	r30, 0xA0	; 160
    19bc:	f6 e0       	ldi	r31, 0x06	; 6
    19be:	86 83       	std	Z+6, r24	; 0x06
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	e0 e6       	ldi	r30, 0x60	; 96
    19c4:	f6 e0       	ldi	r31, 0x06	; 6
    19c6:	86 83       	std	Z+6, r24	; 0x06
    19c8:	e0 ea       	ldi	r30, 0xA0	; 160
    19ca:	f9 e0       	ldi	r31, 0x09	; 9
    19cc:	81 81       	ldd	r24, Z+1	; 0x01
    19ce:	85 ff       	sbrs	r24, 5
    19d0:	fd cf       	rjmp	.-6      	; 0x19cc <gfx_mono_st7565r_init+0x20>
    19d2:	80 e4       	ldi	r24, 0x40	; 64
    19d4:	80 93 a0 09 	sts	0x09A0, r24
    19d8:	e0 ea       	ldi	r30, 0xA0	; 160
    19da:	f9 e0       	ldi	r31, 0x09	; 9
    19dc:	81 81       	ldd	r24, Z+1	; 0x01
    19de:	86 ff       	sbrs	r24, 6
    19e0:	fd cf       	rjmp	.-6      	; 0x19dc <gfx_mono_st7565r_init+0x30>
    19e2:	e0 ea       	ldi	r30, 0xA0	; 160
    19e4:	f9 e0       	ldi	r31, 0x09	; 9
    19e6:	80 e4       	ldi	r24, 0x40	; 64
    19e8:	81 83       	std	Z+1, r24	; 0x01
    19ea:	80 81       	ld	r24, Z
    19ec:	88 e0       	ldi	r24, 0x08	; 8
    19ee:	e0 ea       	ldi	r30, 0xA0	; 160
    19f0:	f6 e0       	ldi	r31, 0x06	; 6
    19f2:	85 83       	std	Z+5, r24	; 0x05
    19f4:	d0 e0       	ldi	r29, 0x00	; 0
    19f6:	0a c0       	rjmp	.+20     	; 0x1a0c <gfx_mono_st7565r_init+0x60>
    19f8:	40 e0       	ldi	r20, 0x00	; 0
    19fa:	6c 2f       	mov	r22, r28
    19fc:	8d 2f       	mov	r24, r29
    19fe:	54 df       	rcall	.-344    	; 0x18a8 <gfx_mono_st7565r_put_byte>
    1a00:	cf 5f       	subi	r28, 0xFF	; 255
    1a02:	c0 38       	cpi	r28, 0x80	; 128
    1a04:	c9 f7       	brne	.-14     	; 0x19f8 <gfx_mono_st7565r_init+0x4c>
    1a06:	df 5f       	subi	r29, 0xFF	; 255
    1a08:	d4 30       	cpi	r29, 0x04	; 4
    1a0a:	11 f0       	breq	.+4      	; 0x1a10 <gfx_mono_st7565r_init+0x64>
    1a0c:	c0 e0       	ldi	r28, 0x00	; 0
    1a0e:	f4 cf       	rjmp	.-24     	; 0x19f8 <gfx_mono_st7565r_init+0x4c>
    1a10:	df 91       	pop	r29
    1a12:	cf 91       	pop	r28
    1a14:	08 95       	ret

00001a16 <gfx_mono_st7565r_get_byte>:
    1a16:	87 c0       	rjmp	.+270    	; 0x1b26 <gfx_mono_framebuffer_get_byte>
    1a18:	08 95       	ret

00001a1a <gfx_mono_st7565r_draw_pixel>:
 * gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
 * \endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
    1a1a:	ef 92       	push	r14
    1a1c:	ff 92       	push	r15
    1a1e:	0f 93       	push	r16
    1a20:	1f 93       	push	r17
    1a22:	cf 93       	push	r28
    1a24:	df 93       	push	r29
    1a26:	18 2f       	mov	r17, r24
    1a28:	04 2f       	mov	r16, r20
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
    1a2a:	88 23       	and	r24, r24
    1a2c:	7c f1       	brlt	.+94     	; 0x1a8c <gfx_mono_st7565r_draw_pixel+0x72>
    1a2e:	60 32       	cpi	r22, 0x20	; 32
    1a30:	68 f5       	brcc	.+90     	; 0x1a8c <gfx_mono_st7565r_draw_pixel+0x72>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
    1a32:	f6 2e       	mov	r15, r22
    1a34:	f6 94       	lsr	r15
    1a36:	f6 94       	lsr	r15
    1a38:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
    1a3a:	cf 2d       	mov	r28, r15
    1a3c:	d0 e0       	ldi	r29, 0x00	; 0
    1a3e:	d1 95       	neg	r29
    1a40:	c1 95       	neg	r28
    1a42:	d1 09       	sbc	r29, r1
    1a44:	cc 0f       	add	r28, r28
    1a46:	dd 1f       	adc	r29, r29
    1a48:	cc 0f       	add	r28, r28
    1a4a:	dd 1f       	adc	r29, r29
    1a4c:	cc 0f       	add	r28, r28
    1a4e:	dd 1f       	adc	r29, r29
    1a50:	c6 0f       	add	r28, r22
    1a52:	d1 1d       	adc	r29, r1
    1a54:	21 e0       	ldi	r18, 0x01	; 1
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	c9 01       	movw	r24, r18
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <gfx_mono_st7565r_draw_pixel+0x46>
    1a5c:	88 0f       	add	r24, r24
    1a5e:	99 1f       	adc	r25, r25
    1a60:	ca 95       	dec	r28
    1a62:	e2 f7       	brpl	.-8      	; 0x1a5c <gfx_mono_st7565r_draw_pixel+0x42>
    1a64:	ec 01       	movw	r28, r24
	/*
	 * Read the page containing the pixel in interest, then perform the
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);
    1a66:	61 2f       	mov	r22, r17
    1a68:	8f 2d       	mov	r24, r15
    1a6a:	d5 df       	rcall	.-86     	; 0x1a16 <gfx_mono_st7565r_get_byte>

	switch (color) {
    1a6c:	01 30       	cpi	r16, 0x01	; 1
    1a6e:	21 f0       	breq	.+8      	; 0x1a78 <gfx_mono_st7565r_draw_pixel+0x5e>
    1a70:	28 f0       	brcs	.+10     	; 0x1a7c <gfx_mono_st7565r_draw_pixel+0x62>
    1a72:	02 30       	cpi	r16, 0x02	; 2
    1a74:	39 f4       	brne	.+14     	; 0x1a84 <gfx_mono_st7565r_draw_pixel+0x6a>
    1a76:	05 c0       	rjmp	.+10     	; 0x1a82 <gfx_mono_st7565r_draw_pixel+0x68>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
    1a78:	8c 2b       	or	r24, r28
		break;
    1a7a:	04 c0       	rjmp	.+8      	; 0x1a84 <gfx_mono_st7565r_draw_pixel+0x6a>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
    1a7c:	c0 95       	com	r28
    1a7e:	8c 23       	and	r24, r28
		break;
    1a80:	01 c0       	rjmp	.+2      	; 0x1a84 <gfx_mono_st7565r_draw_pixel+0x6a>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
    1a82:	8c 27       	eor	r24, r28

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
    1a84:	48 2f       	mov	r20, r24
    1a86:	61 2f       	mov	r22, r17
    1a88:	8f 2d       	mov	r24, r15
    1a8a:	0e df       	rcall	.-484    	; 0x18a8 <gfx_mono_st7565r_put_byte>
}
    1a8c:	df 91       	pop	r29
    1a8e:	cf 91       	pop	r28
    1a90:	1f 91       	pop	r17
    1a92:	0f 91       	pop	r16
    1a94:	ff 90       	pop	r15
    1a96:	ef 90       	pop	r14
    1a98:	08 95       	ret

00001a9a <gfx_mono_st7565r_mask_byte>:
 * gfx_mono_st7565r_mask_byte(0,0,0xAA,GFX_PIXEL_XOR);
 * \endcode
 */
void gfx_mono_st7565r_mask_byte(gfx_coord_t page, gfx_coord_t column,
		gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
    1a9a:	0f 93       	push	r16
    1a9c:	1f 93       	push	r17
    1a9e:	cf 93       	push	r28
    1aa0:	df 93       	push	r29
    1aa2:	d8 2f       	mov	r29, r24
    1aa4:	16 2f       	mov	r17, r22
    1aa6:	04 2f       	mov	r16, r20
    1aa8:	c2 2f       	mov	r28, r18
	gfx_mono_color_t temp = gfx_mono_get_byte(page, column);
    1aaa:	b5 df       	rcall	.-150    	; 0x1a16 <gfx_mono_st7565r_get_byte>

	switch (color) {
    1aac:	c1 30       	cpi	r28, 0x01	; 1
    1aae:	21 f0       	breq	.+8      	; 0x1ab8 <gfx_mono_st7565r_mask_byte+0x1e>
    1ab0:	28 f0       	brcs	.+10     	; 0x1abc <gfx_mono_st7565r_mask_byte+0x22>
    1ab2:	c2 30       	cpi	r28, 0x02	; 2
    1ab4:	39 f4       	brne	.+14     	; 0x1ac4 <gfx_mono_st7565r_mask_byte+0x2a>
    1ab6:	05 c0       	rjmp	.+10     	; 0x1ac2 <gfx_mono_st7565r_mask_byte+0x28>
	case GFX_PIXEL_SET:
		temp |= pixel_mask;
    1ab8:	80 2b       	or	r24, r16
		break;
    1aba:	04 c0       	rjmp	.+8      	; 0x1ac4 <gfx_mono_st7565r_mask_byte+0x2a>

	case GFX_PIXEL_CLR:
		temp &= ~pixel_mask;
    1abc:	00 95       	com	r16
    1abe:	80 23       	and	r24, r16
		break;
    1ac0:	01 c0       	rjmp	.+2      	; 0x1ac4 <gfx_mono_st7565r_mask_byte+0x2a>

	case GFX_PIXEL_XOR:
		temp ^= pixel_mask;
    1ac2:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, column, temp);
    1ac4:	48 2f       	mov	r20, r24
    1ac6:	61 2f       	mov	r22, r17
    1ac8:	8d 2f       	mov	r24, r29
    1aca:	ee de       	rcall	.-548    	; 0x18a8 <gfx_mono_st7565r_put_byte>
}
    1acc:	df 91       	pop	r29
    1ace:	cf 91       	pop	r28
    1ad0:	1f 91       	pop	r17
    1ad2:	0f 91       	pop	r16
    1ad4:	08 95       	ret

00001ad6 <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
    1ad6:	80 93 b2 23 	sts	0x23B2, r24
    1ada:	90 93 b3 23 	sts	0x23B3, r25
    1ade:	08 95       	ret

00001ae0 <gfx_mono_framebuffer_put_page>:
    1ae0:	a4 2f       	mov	r26, r20
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	30 e8       	ldi	r19, 0x80	; 128
    1ae6:	63 9f       	mul	r22, r19
    1ae8:	a0 0d       	add	r26, r0
    1aea:	b1 1d       	adc	r27, r1
    1aec:	11 24       	eor	r1, r1
    1aee:	40 91 b2 23 	lds	r20, 0x23B2
    1af2:	50 91 b3 23 	lds	r21, 0x23B3
    1af6:	a4 0f       	add	r26, r20
    1af8:	b5 1f       	adc	r27, r21
    1afa:	e8 2f       	mov	r30, r24
    1afc:	f9 2f       	mov	r31, r25
    1afe:	81 91       	ld	r24, Z+
    1b00:	8d 93       	st	X+, r24
    1b02:	21 50       	subi	r18, 0x01	; 1
    1b04:	e1 f7       	brne	.-8      	; 0x1afe <gfx_mono_framebuffer_put_page+0x1e>
    1b06:	08 95       	ret

00001b08 <gfx_mono_framebuffer_put_byte>:
 * \endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
    1b08:	20 e8       	ldi	r18, 0x80	; 128
    1b0a:	82 9f       	mul	r24, r18
    1b0c:	c0 01       	movw	r24, r0
    1b0e:	11 24       	eor	r1, r1
    1b10:	fc 01       	movw	r30, r24
    1b12:	e6 0f       	add	r30, r22
    1b14:	f1 1d       	adc	r31, r1
    1b16:	80 91 b2 23 	lds	r24, 0x23B2
    1b1a:	90 91 b3 23 	lds	r25, 0x23B3
    1b1e:	e8 0f       	add	r30, r24
    1b20:	f9 1f       	adc	r31, r25
    1b22:	40 83       	st	Z, r20
    1b24:	08 95       	ret

00001b26 <gfx_mono_framebuffer_get_byte>:
 * data = gfx_mono_framebuffer_get_byte(0, 0);
 * \endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
    1b26:	20 e8       	ldi	r18, 0x80	; 128
    1b28:	82 9f       	mul	r24, r18
    1b2a:	c0 01       	movw	r24, r0
    1b2c:	11 24       	eor	r1, r1
    1b2e:	fc 01       	movw	r30, r24
    1b30:	e6 0f       	add	r30, r22
    1b32:	f1 1d       	adc	r31, r1
    1b34:	80 91 b2 23 	lds	r24, 0x23B2
    1b38:	90 91 b3 23 	lds	r25, 0x23B3
    1b3c:	e8 0f       	add	r30, r24
    1b3e:	f9 1f       	adc	r31, r25
}
    1b40:	80 81       	ld	r24, Z
    1b42:	08 95       	ret

00001b44 <gfx_mono_generic_draw_horizontal_line>:
		}

		/* Next X. */
		++offset_x;
	}
}
    1b44:	ff 92       	push	r15
    1b46:	0f 93       	push	r16
    1b48:	1f 93       	push	r17
    1b4a:	cf 93       	push	r28
    1b4c:	df 93       	push	r29
    1b4e:	c4 2f       	mov	r28, r20
    1b50:	e4 2f       	mov	r30, r20
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	e8 0f       	add	r30, r24
    1b56:	f1 1d       	adc	r31, r1
    1b58:	e1 38       	cpi	r30, 0x81	; 129
    1b5a:	f1 05       	cpc	r31, r1
    1b5c:	14 f0       	brlt	.+4      	; 0x1b62 <gfx_mono_generic_draw_horizontal_line+0x1e>
    1b5e:	c0 e8       	ldi	r28, 0x80	; 128
    1b60:	c8 1b       	sub	r28, r24
    1b62:	cc 23       	and	r28, r28
    1b64:	09 f4       	brne	.+2      	; 0x1b68 <gfx_mono_generic_draw_horizontal_line+0x24>
    1b66:	50 c0       	rjmp	.+160    	; 0x1c08 <gfx_mono_generic_draw_horizontal_line+0xc4>
    1b68:	d6 2f       	mov	r29, r22
    1b6a:	d6 95       	lsr	r29
    1b6c:	d6 95       	lsr	r29
    1b6e:	d6 95       	lsr	r29
    1b70:	ed 2f       	mov	r30, r29
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	f1 95       	neg	r31
    1b76:	e1 95       	neg	r30
    1b78:	f1 09       	sbc	r31, r1
    1b7a:	ee 0f       	add	r30, r30
    1b7c:	ff 1f       	adc	r31, r31
    1b7e:	ee 0f       	add	r30, r30
    1b80:	ff 1f       	adc	r31, r31
    1b82:	ee 0f       	add	r30, r30
    1b84:	ff 1f       	adc	r31, r31
    1b86:	af 01       	movw	r20, r30
    1b88:	46 0f       	add	r20, r22
    1b8a:	51 1d       	adc	r21, r1
    1b8c:	ba 01       	movw	r22, r20
    1b8e:	e1 e0       	ldi	r30, 0x01	; 1
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	af 01       	movw	r20, r30
    1b94:	02 c0       	rjmp	.+4      	; 0x1b9a <gfx_mono_generic_draw_horizontal_line+0x56>
    1b96:	44 0f       	add	r20, r20
    1b98:	55 1f       	adc	r21, r21
    1b9a:	6a 95       	dec	r22
    1b9c:	e2 f7       	brpl	.-8      	; 0x1b96 <gfx_mono_generic_draw_horizontal_line+0x52>
    1b9e:	04 2f       	mov	r16, r20
    1ba0:	21 30       	cpi	r18, 0x01	; 1
    1ba2:	21 f0       	breq	.+8      	; 0x1bac <gfx_mono_generic_draw_horizontal_line+0x68>
    1ba4:	90 f0       	brcs	.+36     	; 0x1bca <gfx_mono_generic_draw_horizontal_line+0x86>
    1ba6:	22 30       	cpi	r18, 0x02	; 2
    1ba8:	79 f5       	brne	.+94     	; 0x1c08 <gfx_mono_generic_draw_horizontal_line+0xc4>
    1baa:	20 c0       	rjmp	.+64     	; 0x1bec <gfx_mono_generic_draw_horizontal_line+0xa8>
    1bac:	f8 2e       	mov	r15, r24
    1bae:	fa 94       	dec	r15
    1bb0:	1f 2d       	mov	r17, r15
    1bb2:	1c 0f       	add	r17, r28
    1bb4:	61 2f       	mov	r22, r17
    1bb6:	8d 2f       	mov	r24, r29
    1bb8:	2e df       	rcall	.-420    	; 0x1a16 <gfx_mono_st7565r_get_byte>
    1bba:	48 2f       	mov	r20, r24
    1bbc:	40 2b       	or	r20, r16
    1bbe:	61 2f       	mov	r22, r17
    1bc0:	8d 2f       	mov	r24, r29
    1bc2:	72 de       	rcall	.-796    	; 0x18a8 <gfx_mono_st7565r_put_byte>
    1bc4:	c1 50       	subi	r28, 0x01	; 1
    1bc6:	a1 f7       	brne	.-24     	; 0x1bb0 <gfx_mono_generic_draw_horizontal_line+0x6c>
    1bc8:	1f c0       	rjmp	.+62     	; 0x1c08 <gfx_mono_generic_draw_horizontal_line+0xc4>
    1bca:	f8 2e       	mov	r15, r24
    1bcc:	fa 94       	dec	r15
    1bce:	04 2f       	mov	r16, r20
    1bd0:	00 95       	com	r16
    1bd2:	1f 2d       	mov	r17, r15
    1bd4:	1c 0f       	add	r17, r28
    1bd6:	61 2f       	mov	r22, r17
    1bd8:	8d 2f       	mov	r24, r29
    1bda:	1d df       	rcall	.-454    	; 0x1a16 <gfx_mono_st7565r_get_byte>
    1bdc:	48 2f       	mov	r20, r24
    1bde:	40 23       	and	r20, r16
    1be0:	61 2f       	mov	r22, r17
    1be2:	8d 2f       	mov	r24, r29
    1be4:	61 de       	rcall	.-830    	; 0x18a8 <gfx_mono_st7565r_put_byte>
    1be6:	c1 50       	subi	r28, 0x01	; 1
    1be8:	a1 f7       	brne	.-24     	; 0x1bd2 <gfx_mono_generic_draw_horizontal_line+0x8e>
    1bea:	0e c0       	rjmp	.+28     	; 0x1c08 <gfx_mono_generic_draw_horizontal_line+0xc4>
    1bec:	f8 2e       	mov	r15, r24
    1bee:	fa 94       	dec	r15
    1bf0:	1f 2d       	mov	r17, r15
    1bf2:	1c 0f       	add	r17, r28
    1bf4:	61 2f       	mov	r22, r17
    1bf6:	8d 2f       	mov	r24, r29
    1bf8:	0e df       	rcall	.-484    	; 0x1a16 <gfx_mono_st7565r_get_byte>
    1bfa:	48 2f       	mov	r20, r24
    1bfc:	40 27       	eor	r20, r16
    1bfe:	61 2f       	mov	r22, r17
    1c00:	8d 2f       	mov	r24, r29
    1c02:	52 de       	rcall	.-860    	; 0x18a8 <gfx_mono_st7565r_put_byte>
    1c04:	c1 50       	subi	r28, 0x01	; 1
    1c06:	a1 f7       	brne	.-24     	; 0x1bf0 <gfx_mono_generic_draw_horizontal_line+0xac>
    1c08:	df 91       	pop	r29
    1c0a:	cf 91       	pop	r28
    1c0c:	1f 91       	pop	r17
    1c0e:	0f 91       	pop	r16
    1c10:	ff 90       	pop	r15
    1c12:	08 95       	ret

00001c14 <gfx_mono_generic_draw_vertical_line>:
    1c14:	ff 92       	push	r15
    1c16:	0f 93       	push	r16
    1c18:	1f 93       	push	r17
    1c1a:	cf 93       	push	r28
    1c1c:	df 93       	push	r29
    1c1e:	d8 2f       	mov	r29, r24
    1c20:	12 2f       	mov	r17, r18
    1c22:	44 23       	and	r20, r20
    1c24:	09 f4       	brne	.+2      	; 0x1c28 <gfx_mono_generic_draw_vertical_line+0x14>
    1c26:	42 c0       	rjmp	.+132    	; 0x1cac <gfx_mono_generic_draw_vertical_line+0x98>
    1c28:	96 2f       	mov	r25, r22
    1c2a:	91 50       	subi	r25, 0x01	; 1
    1c2c:	94 0f       	add	r25, r20
    1c2e:	69 13       	cpse	r22, r25
    1c30:	03 c0       	rjmp	.+6      	; 0x1c38 <gfx_mono_generic_draw_vertical_line+0x24>
    1c32:	42 2f       	mov	r20, r18
    1c34:	f2 de       	rcall	.-540    	; 0x1a1a <gfx_mono_st7565r_draw_pixel>
    1c36:	3a c0       	rjmp	.+116    	; 0x1cac <gfx_mono_generic_draw_vertical_line+0x98>
    1c38:	9f 31       	cpi	r25, 0x1F	; 31
    1c3a:	08 f0       	brcs	.+2      	; 0x1c3e <gfx_mono_generic_draw_vertical_line+0x2a>
    1c3c:	9f e1       	ldi	r25, 0x1F	; 31
    1c3e:	c6 2f       	mov	r28, r22
    1c40:	c6 95       	lsr	r28
    1c42:	c6 95       	lsr	r28
    1c44:	c6 95       	lsr	r28
    1c46:	09 2f       	mov	r16, r25
    1c48:	06 95       	lsr	r16
    1c4a:	06 95       	lsr	r16
    1c4c:	06 95       	lsr	r16
    1c4e:	67 70       	andi	r22, 0x07	; 7
    1c50:	ef ef       	ldi	r30, 0xFF	; 255
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	4e 2f       	mov	r20, r30
    1c56:	01 c0       	rjmp	.+2      	; 0x1c5a <gfx_mono_generic_draw_vertical_line+0x46>
    1c58:	44 0f       	add	r20, r20
    1c5a:	6a 95       	dec	r22
    1c5c:	ea f7       	brpl	.-6      	; 0x1c58 <gfx_mono_generic_draw_vertical_line+0x44>
    1c5e:	97 70       	andi	r25, 0x07	; 7
    1c60:	a7 e0       	ldi	r26, 0x07	; 7
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	a9 1b       	sub	r26, r25
    1c66:	b1 09       	sbc	r27, r1
    1c68:	02 c0       	rjmp	.+4      	; 0x1c6e <gfx_mono_generic_draw_vertical_line+0x5a>
    1c6a:	f5 95       	asr	r31
    1c6c:	e7 95       	ror	r30
    1c6e:	aa 95       	dec	r26
    1c70:	e2 f7       	brpl	.-8      	; 0x1c6a <gfx_mono_generic_draw_vertical_line+0x56>
    1c72:	fe 2e       	mov	r15, r30
    1c74:	c0 13       	cpse	r28, r16
    1c76:	06 c0       	rjmp	.+12     	; 0x1c84 <gfx_mono_generic_draw_vertical_line+0x70>
    1c78:	4e 23       	and	r20, r30
    1c7a:	21 2f       	mov	r18, r17
    1c7c:	6d 2f       	mov	r22, r29
    1c7e:	8c 2f       	mov	r24, r28
    1c80:	0c df       	rcall	.-488    	; 0x1a9a <gfx_mono_st7565r_mask_byte>
    1c82:	14 c0       	rjmp	.+40     	; 0x1cac <gfx_mono_generic_draw_vertical_line+0x98>
    1c84:	21 2f       	mov	r18, r17
    1c86:	6d 2f       	mov	r22, r29
    1c88:	8c 2f       	mov	r24, r28
    1c8a:	07 df       	rcall	.-498    	; 0x1a9a <gfx_mono_st7565r_mask_byte>
    1c8c:	cf 5f       	subi	r28, 0xFF	; 255
    1c8e:	c0 17       	cp	r28, r16
    1c90:	40 f4       	brcc	.+16     	; 0x1ca2 <gfx_mono_generic_draw_vertical_line+0x8e>
    1c92:	21 2f       	mov	r18, r17
    1c94:	4f ef       	ldi	r20, 0xFF	; 255
    1c96:	6d 2f       	mov	r22, r29
    1c98:	8c 2f       	mov	r24, r28
    1c9a:	ff de       	rcall	.-514    	; 0x1a9a <gfx_mono_st7565r_mask_byte>
    1c9c:	cf 5f       	subi	r28, 0xFF	; 255
    1c9e:	c0 17       	cp	r28, r16
    1ca0:	c0 f3       	brcs	.-16     	; 0x1c92 <gfx_mono_generic_draw_vertical_line+0x7e>
    1ca2:	21 2f       	mov	r18, r17
    1ca4:	4f 2d       	mov	r20, r15
    1ca6:	6d 2f       	mov	r22, r29
    1ca8:	80 2f       	mov	r24, r16
    1caa:	f7 de       	rcall	.-530    	; 0x1a9a <gfx_mono_st7565r_mask_byte>
    1cac:	df 91       	pop	r29
    1cae:	cf 91       	pop	r28
    1cb0:	1f 91       	pop	r17
    1cb2:	0f 91       	pop	r16
    1cb4:	ff 90       	pop	r15
    1cb6:	08 95       	ret

00001cb8 <gfx_mono_generic_draw_rect>:
    1cb8:	ff 92       	push	r15
    1cba:	0f 93       	push	r16
    1cbc:	1f 93       	push	r17
    1cbe:	cf 93       	push	r28
    1cc0:	df 93       	push	r29
    1cc2:	d8 2f       	mov	r29, r24
    1cc4:	c6 2f       	mov	r28, r22
    1cc6:	14 2f       	mov	r17, r20
    1cc8:	f2 2e       	mov	r15, r18
    1cca:	20 2f       	mov	r18, r16
    1ccc:	3b df       	rcall	.-394    	; 0x1b44 <gfx_mono_generic_draw_horizontal_line>
    1cce:	6c 2f       	mov	r22, r28
    1cd0:	61 50       	subi	r22, 0x01	; 1
    1cd2:	6f 0d       	add	r22, r15
    1cd4:	20 2f       	mov	r18, r16
    1cd6:	41 2f       	mov	r20, r17
    1cd8:	8d 2f       	mov	r24, r29
    1cda:	34 df       	rcall	.-408    	; 0x1b44 <gfx_mono_generic_draw_horizontal_line>
    1cdc:	20 2f       	mov	r18, r16
    1cde:	4f 2d       	mov	r20, r15
    1ce0:	6c 2f       	mov	r22, r28
    1ce2:	8d 2f       	mov	r24, r29
    1ce4:	97 df       	rcall	.-210    	; 0x1c14 <gfx_mono_generic_draw_vertical_line>
    1ce6:	8d 2f       	mov	r24, r29
    1ce8:	81 50       	subi	r24, 0x01	; 1
    1cea:	20 2f       	mov	r18, r16
    1cec:	4f 2d       	mov	r20, r15
    1cee:	6c 2f       	mov	r22, r28
    1cf0:	81 0f       	add	r24, r17
    1cf2:	90 df       	rcall	.-224    	; 0x1c14 <gfx_mono_generic_draw_vertical_line>
    1cf4:	df 91       	pop	r29
    1cf6:	cf 91       	pop	r28
    1cf8:	1f 91       	pop	r17
    1cfa:	0f 91       	pop	r16
    1cfc:	ff 90       	pop	r15
    1cfe:	08 95       	ret

00001d00 <gfx_mono_generic_draw_filled_rect>:
    1d00:	ff 92       	push	r15
    1d02:	0f 93       	push	r16
    1d04:	1f 93       	push	r17
    1d06:	cf 93       	push	r28
    1d08:	df 93       	push	r29
    1d0a:	d8 2f       	mov	r29, r24
    1d0c:	14 2f       	mov	r17, r20
    1d0e:	c2 2f       	mov	r28, r18
    1d10:	22 23       	and	r18, r18
    1d12:	51 f0       	breq	.+20     	; 0x1d28 <gfx_mono_generic_draw_filled_rect+0x28>
    1d14:	f6 2e       	mov	r15, r22
    1d16:	fa 94       	dec	r15
    1d18:	6f 2d       	mov	r22, r15
    1d1a:	6c 0f       	add	r22, r28
    1d1c:	20 2f       	mov	r18, r16
    1d1e:	41 2f       	mov	r20, r17
    1d20:	8d 2f       	mov	r24, r29
    1d22:	10 df       	rcall	.-480    	; 0x1b44 <gfx_mono_generic_draw_horizontal_line>
    1d24:	c1 50       	subi	r28, 0x01	; 1
    1d26:	c1 f7       	brne	.-16     	; 0x1d18 <gfx_mono_generic_draw_filled_rect+0x18>
    1d28:	df 91       	pop	r29
    1d2a:	cf 91       	pop	r28
    1d2c:	1f 91       	pop	r17
    1d2e:	0f 91       	pop	r16
    1d30:	ff 90       	pop	r15
    1d32:	08 95       	ret

00001d34 <gfx_mono_generic_put_bitmap>:
 * placing a bitmap at x = 10, y = 10 will put the bitmap at x = 10, y = 8
 *
 */
void gfx_mono_generic_put_bitmap(struct gfx_mono_bitmap *bitmap, gfx_coord_t x,
		gfx_coord_t y)
{
    1d34:	bf 92       	push	r11
    1d36:	cf 92       	push	r12
    1d38:	df 92       	push	r13
    1d3a:	ef 92       	push	r14
    1d3c:	ff 92       	push	r15
    1d3e:	0f 93       	push	r16
    1d40:	1f 93       	push	r17
    1d42:	cf 93       	push	r28
    1d44:	df 93       	push	r29
    1d46:	ec 01       	movw	r28, r24
    1d48:	f6 2e       	mov	r15, r22
	gfx_coord_t num_pages = bitmap->height / 8;
    1d4a:	e9 80       	ldd	r14, Y+1	; 0x01
    1d4c:	e6 94       	lsr	r14
    1d4e:	e6 94       	lsr	r14
    1d50:	e6 94       	lsr	r14
	gfx_coord_t page = y / 8;
    1d52:	d4 2e       	mov	r13, r20
    1d54:	d6 94       	lsr	r13
    1d56:	d6 94       	lsr	r13
    1d58:	d6 94       	lsr	r13
	gfx_coord_t column;
	gfx_coord_t i;
	gfx_mono_color_t temp;

	switch (bitmap->type) {
    1d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5c:	88 23       	and	r24, r24
    1d5e:	31 f0       	breq	.+12     	; 0x1d6c <gfx_mono_generic_put_bitmap+0x38>
    1d60:	81 30       	cpi	r24, 0x01	; 1
    1d62:	09 f0       	breq	.+2      	; 0x1d66 <gfx_mono_generic_put_bitmap+0x32>
    1d64:	3c c0       	rjmp	.+120    	; 0x1dde <gfx_mono_generic_put_bitmap+0xaa>
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
    1d66:	e1 10       	cpse	r14, r1
    1d68:	20 c0       	rjmp	.+64     	; 0x1daa <gfx_mono_generic_put_bitmap+0x76>
    1d6a:	39 c0       	rjmp	.+114    	; 0x1dde <gfx_mono_generic_put_bitmap+0xaa>
			}
		}
		break;

	case GFX_MONO_BITMAP_RAM:
		for (i = 0; i < num_pages; i++) {
    1d6c:	e1 10       	cpse	r14, r1
    1d6e:	23 c0       	rjmp	.+70     	; 0x1db6 <gfx_mono_generic_put_bitmap+0x82>
    1d70:	36 c0       	rjmp	.+108    	; 0x1dde <gfx_mono_generic_put_bitmap+0xaa>
	gfx_mono_color_t temp;

	switch (bitmap->type) {
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
			for (column = 0; column < bitmap->width; column++) {
    1d72:	c1 2c       	mov	r12, r1
 * The bitmap y-coordinate will be aligned with display pages, rounded down.
 * Ie: placing a bitmap at x=10, y=5 will put the bitmap at x = 10,y = 0 and
 * placing a bitmap at x = 10, y = 10 will put the bitmap at x = 10, y = 8
 *
 */
void gfx_mono_generic_put_bitmap(struct gfx_mono_bitmap *bitmap, gfx_coord_t x,
    1d74:	bd 2c       	mov	r11, r13
    1d76:	b0 0e       	add	r11, r16

	switch (bitmap->type) {
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
			for (column = 0; column < bitmap->width; column++) {
				temp = PROGMEM_READ_BYTE(bitmap->data.progmem
    1d78:	90 9f       	mul	r25, r16
    1d7a:	f0 01       	movw	r30, r0
    1d7c:	91 9f       	mul	r25, r17
    1d7e:	f0 0d       	add	r31, r0
    1d80:	11 24       	eor	r1, r1
    1d82:	ec 0d       	add	r30, r12
    1d84:	f1 1d       	adc	r31, r1
    1d86:	2b 81       	ldd	r18, Y+3	; 0x03
    1d88:	3c 81       	ldd	r19, Y+4	; 0x04
    1d8a:	e2 0f       	add	r30, r18
    1d8c:	f3 1f       	adc	r31, r19
    1d8e:	44 91       	lpm	r20, Z
 * The bitmap y-coordinate will be aligned with display pages, rounded down.
 * Ie: placing a bitmap at x=10, y=5 will put the bitmap at x = 10,y = 0 and
 * placing a bitmap at x = 10, y = 10 will put the bitmap at x = 10, y = 8
 *
 */
void gfx_mono_generic_put_bitmap(struct gfx_mono_bitmap *bitmap, gfx_coord_t x,
    1d90:	6c 2d       	mov	r22, r12
    1d92:	6f 0d       	add	r22, r15
		for (i = 0; i < num_pages; i++) {
			for (column = 0; column < bitmap->width; column++) {
				temp = PROGMEM_READ_BYTE(bitmap->data.progmem
						+ (i * bitmap->width)
						+ column);
				gfx_mono_put_byte(i + page, column + x, temp);
    1d94:	8b 2d       	mov	r24, r11
    1d96:	88 dd       	rcall	.-1264   	; 0x18a8 <gfx_mono_st7565r_put_byte>
	gfx_mono_color_t temp;

	switch (bitmap->type) {
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
			for (column = 0; column < bitmap->width; column++) {
    1d98:	c3 94       	inc	r12
    1d9a:	98 81       	ld	r25, Y
    1d9c:	c9 16       	cp	r12, r25
    1d9e:	60 f3       	brcs	.-40     	; 0x1d78 <gfx_mono_generic_put_bitmap+0x44>
    1da0:	0f 5f       	subi	r16, 0xFF	; 255
    1da2:	1f 4f       	sbci	r17, 0xFF	; 255
	gfx_coord_t i;
	gfx_mono_color_t temp;

	switch (bitmap->type) {
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
    1da4:	0e 15       	cp	r16, r14
    1da6:	18 f0       	brcs	.+6      	; 0x1dae <gfx_mono_generic_put_bitmap+0x7a>
    1da8:	1a c0       	rjmp	.+52     	; 0x1dde <gfx_mono_generic_put_bitmap+0xaa>
    1daa:	00 e0       	ldi	r16, 0x00	; 0
    1dac:	10 e0       	ldi	r17, 0x00	; 0
			for (column = 0; column < bitmap->width; column++) {
    1dae:	98 81       	ld	r25, Y
    1db0:	91 11       	cpse	r25, r1
    1db2:	df cf       	rjmp	.-66     	; 0x1d72 <gfx_mono_generic_put_bitmap+0x3e>
    1db4:	f5 cf       	rjmp	.-22     	; 0x1da0 <gfx_mono_generic_put_bitmap+0x6c>
			}
		}
		break;

	case GFX_MONO_BITMAP_RAM:
		for (i = 0; i < num_pages; i++) {
    1db6:	00 e0       	ldi	r16, 0x00	; 0
    1db8:	10 e0       	ldi	r17, 0x00	; 0
			gfx_mono_put_page(bitmap->data.pixmap
    1dba:	28 81       	ld	r18, Y
 * The bitmap y-coordinate will be aligned with display pages, rounded down.
 * Ie: placing a bitmap at x=10, y=5 will put the bitmap at x = 10,y = 0 and
 * placing a bitmap at x = 10, y = 10 will put the bitmap at x = 10, y = 8
 *
 */
void gfx_mono_generic_put_bitmap(struct gfx_mono_bitmap *bitmap, gfx_coord_t x,
    1dbc:	6d 2d       	mov	r22, r13
    1dbe:	60 0f       	add	r22, r16
		}
		break;

	case GFX_MONO_BITMAP_RAM:
		for (i = 0; i < num_pages; i++) {
			gfx_mono_put_page(bitmap->data.pixmap
    1dc0:	20 9f       	mul	r18, r16
    1dc2:	c0 01       	movw	r24, r0
    1dc4:	21 9f       	mul	r18, r17
    1dc6:	90 0d       	add	r25, r0
    1dc8:	11 24       	eor	r1, r1
    1dca:	eb 81       	ldd	r30, Y+3	; 0x03
    1dcc:	fc 81       	ldd	r31, Y+4	; 0x04
    1dce:	4f 2d       	mov	r20, r15
    1dd0:	8e 0f       	add	r24, r30
    1dd2:	9f 1f       	adc	r25, r31
    1dd4:	d8 dc       	rcall	.-1616   	; 0x1786 <gfx_mono_st7565r_put_page>
    1dd6:	0f 5f       	subi	r16, 0xFF	; 255
    1dd8:	1f 4f       	sbci	r17, 0xFF	; 255
			}
		}
		break;

	case GFX_MONO_BITMAP_RAM:
		for (i = 0; i < num_pages; i++) {
    1dda:	0e 15       	cp	r16, r14
    1ddc:	70 f3       	brcs	.-36     	; 0x1dba <gfx_mono_generic_put_bitmap+0x86>
		break;

	default:
		break;
	}
}
    1dde:	df 91       	pop	r29
    1de0:	cf 91       	pop	r28
    1de2:	1f 91       	pop	r17
    1de4:	0f 91       	pop	r16
    1de6:	ff 90       	pop	r15
    1de8:	ef 90       	pop	r14
    1dea:	df 90       	pop	r13
    1dec:	cf 90       	pop	r12
    1dee:	bf 90       	pop	r11
    1df0:	08 95       	ret

00001df2 <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
    1df2:	af 92       	push	r10
    1df4:	bf 92       	push	r11
    1df6:	cf 92       	push	r12
    1df8:	df 92       	push	r13
    1dfa:	ef 92       	push	r14
    1dfc:	ff 92       	push	r15
    1dfe:	0f 93       	push	r16
    1e00:	1f 93       	push	r17
    1e02:	cf 93       	push	r28
    1e04:	df 93       	push	r29
    1e06:	c8 2f       	mov	r28, r24
    1e08:	d6 2e       	mov	r13, r22
    1e0a:	a4 2e       	mov	r10, r20
    1e0c:	79 01       	movw	r14, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
    1e0e:	00 e0       	ldi	r16, 0x00	; 0
    1e10:	f9 01       	movw	r30, r18
    1e12:	24 81       	ldd	r18, Z+4	; 0x04
    1e14:	43 81       	ldd	r20, Z+3	; 0x03
    1e16:	6a 2d       	mov	r22, r10
    1e18:	8d 2d       	mov	r24, r13
    1e1a:	72 df       	rcall	.-284    	; 0x1d00 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
    1e1c:	f7 01       	movw	r30, r14
    1e1e:	90 81       	ld	r25, Z
    1e20:	91 11       	cpse	r25, r1
    1e22:	39 c0       	rjmp	.+114    	; 0x1e96 <gfx_mono_draw_char+0xa4>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    1e24:	83 81       	ldd	r24, Z+3	; 0x03
    1e26:	a8 2f       	mov	r26, r24
    1e28:	a6 95       	lsr	r26
    1e2a:	a6 95       	lsr	r26
    1e2c:	a6 95       	lsr	r26
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    1e2e:	87 70       	andi	r24, 0x07	; 7
    1e30:	09 f0       	breq	.+2      	; 0x1e34 <gfx_mono_draw_char+0x42>
		char_row_size++;
    1e32:	af 5f       	subi	r26, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
    1e34:	f7 01       	movw	r30, r14
    1e36:	c4 80       	ldd	r12, Z+4	; 0x04
    1e38:	ac 9d       	mul	r26, r12
    1e3a:	d0 01       	movw	r26, r0
    1e3c:	11 24       	eor	r1, r1
			((uint8_t)ch - font->first_char);
    1e3e:	ec 2f       	mov	r30, r28
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	e7 01       	movw	r28, r14
    1e44:	8d 81       	ldd	r24, Y+5	; 0x05
    1e46:	e8 1b       	sub	r30, r24
    1e48:	f1 09       	sbc	r31, r1
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
		char_row_size++;
	}

	glyph_data_offset = char_row_size * font->height *
    1e4a:	ae 9f       	mul	r26, r30
    1e4c:	90 01       	movw	r18, r0
    1e4e:	af 9f       	mul	r26, r31
    1e50:	30 0d       	add	r19, r0
    1e52:	be 9f       	mul	r27, r30
    1e54:	30 0d       	add	r19, r0
    1e56:	11 24       	eor	r1, r1
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
    1e58:	09 80       	ldd	r0, Y+1	; 0x01
    1e5a:	da 81       	ldd	r29, Y+2	; 0x02
    1e5c:	c0 2d       	mov	r28, r0
    1e5e:	c2 0f       	add	r28, r18
    1e60:	d3 1f       	adc	r29, r19
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
    1e62:	f7 01       	movw	r30, r14
    1e64:	b3 80       	ldd	r11, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
    1e66:	bb 20       	and	r11, r11
    1e68:	99 f0       	breq	.+38     	; 0x1e90 <gfx_mono_draw_char+0x9e>
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
    1e6a:	00 e0       	ldi	r16, 0x00	; 0
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    1e6c:	10 e0       	ldi	r17, 0x00	; 0
 * \param c        Character to be drawn
 * \param x        X coordinate on screen.
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
    1e6e:	81 2f       	mov	r24, r17
    1e70:	8d 0d       	add	r24, r13
	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    1e72:	91 2f       	mov	r25, r17
    1e74:	97 70       	andi	r25, 0x07	; 7
    1e76:	19 f4       	brne	.+6      	; 0x1e7e <gfx_mono_draw_char+0x8c>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    1e78:	fe 01       	movw	r30, r28
    1e7a:	04 91       	lpm	r16, Z
				glyph_data++;
    1e7c:	21 96       	adiw	r28, 0x01	; 1
			}

			if ((glyph_byte & 0x80)) {
    1e7e:	00 23       	and	r16, r16
    1e80:	1c f4       	brge	.+6      	; 0x1e88 <gfx_mono_draw_char+0x96>
				gfx_mono_draw_pixel(inc_x, inc_y,
    1e82:	41 e0       	ldi	r20, 0x01	; 1
    1e84:	6a 2d       	mov	r22, r10
    1e86:	c9 dd       	rcall	.-1134   	; 0x1a1a <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
    1e88:	00 0f       	add	r16, r16

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    1e8a:	1f 5f       	subi	r17, 0xFF	; 255
    1e8c:	1b 11       	cpse	r17, r11
    1e8e:	ef cf       	rjmp	.-34     	; 0x1e6e <gfx_mono_draw_char+0x7c>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
    1e90:	a3 94       	inc	r10
		inc_x = x;
		rows_left--;
    1e92:	ca 94       	dec	r12
	} while (rows_left > 0);
    1e94:	31 f7       	brne	.-52     	; 0x1e62 <gfx_mono_draw_char+0x70>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    1e96:	df 91       	pop	r29
    1e98:	cf 91       	pop	r28
    1e9a:	1f 91       	pop	r17
    1e9c:	0f 91       	pop	r16
    1e9e:	ff 90       	pop	r15
    1ea0:	ef 90       	pop	r14
    1ea2:	df 90       	pop	r13
    1ea4:	cf 90       	pop	r12
    1ea6:	bf 90       	pop	r11
    1ea8:	af 90       	pop	r10
    1eaa:	08 95       	ret

00001eac <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    1eac:	df 92       	push	r13
    1eae:	ef 92       	push	r14
    1eb0:	ff 92       	push	r15
    1eb2:	0f 93       	push	r16
    1eb4:	1f 93       	push	r17
    1eb6:	cf 93       	push	r28
    1eb8:	df 93       	push	r29
    1eba:	e4 2e       	mov	r14, r20
    1ebc:	89 01       	movw	r16, r18
    1ebe:	c8 2f       	mov	r28, r24
    1ec0:	d9 2f       	mov	r29, r25
    1ec2:	f6 2e       	mov	r15, r22

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    1ec4:	d6 2e       	mov	r13, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
    1ec6:	89 91       	ld	r24, Y+
    1ec8:	8a 30       	cpi	r24, 0x0A	; 10
    1eca:	31 f4       	brne	.+12     	; 0x1ed8 <gfx_mono_draw_string+0x2c>
			x = start_of_string_position_x;
			y += font->height + 1;
    1ecc:	f8 01       	movw	r30, r16
    1ece:	84 81       	ldd	r24, Z+4	; 0x04
    1ed0:	8f 5f       	subi	r24, 0xFF	; 255
    1ed2:	e8 0e       	add	r14, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    1ed4:	fd 2c       	mov	r15, r13
    1ed6:	09 c0       	rjmp	.+18     	; 0x1eea <gfx_mono_draw_string+0x3e>
			y += font->height + 1;
		} else if (*str == '\r') {
    1ed8:	8d 30       	cpi	r24, 0x0D	; 13
    1eda:	39 f0       	breq	.+14     	; 0x1eea <gfx_mono_draw_string+0x3e>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
    1edc:	98 01       	movw	r18, r16
    1ede:	4e 2d       	mov	r20, r14
    1ee0:	6f 2d       	mov	r22, r15
    1ee2:	87 df       	rcall	.-242    	; 0x1df2 <gfx_mono_draw_char>
			x += font->width;
    1ee4:	f8 01       	movw	r30, r16
    1ee6:	83 81       	ldd	r24, Z+3	; 0x03
    1ee8:	f8 0e       	add	r15, r24
		}
	} while (*(++str));
    1eea:	88 81       	ld	r24, Y
    1eec:	81 11       	cpse	r24, r1
    1eee:	eb cf       	rjmp	.-42     	; 0x1ec6 <gfx_mono_draw_string+0x1a>
}
    1ef0:	df 91       	pop	r29
    1ef2:	cf 91       	pop	r28
    1ef4:	1f 91       	pop	r17
    1ef6:	0f 91       	pop	r16
    1ef8:	ff 90       	pop	r15
    1efa:	ef 90       	pop	r14
    1efc:	df 90       	pop	r13
    1efe:	08 95       	ret

00001f00 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    1f00:	cf 93       	push	r28
    1f02:	df 93       	push	r29
 *
 */
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
    1f04:	fc 01       	movw	r30, r24
    1f06:	70 96       	adiw	r30, 0x10	; 16
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    1f0c:	c6 2f       	mov	r28, r22
    1f0e:	d0 e0       	ldi	r29, 0x00	; 0
    1f10:	de 01       	movw	r26, r28
    1f12:	02 2e       	mov	r0, r18
    1f14:	02 c0       	rjmp	.+4      	; 0x1f1a <ioport_configure_port_pin+0x1a>
    1f16:	b5 95       	asr	r27
    1f18:	a7 95       	ror	r26
    1f1a:	0a 94       	dec	r0
    1f1c:	e2 f7       	brpl	.-8      	; 0x1f16 <ioport_configure_port_pin+0x16>
    1f1e:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    1f20:	50 83       	st	Z, r21
    1f22:	2f 5f       	subi	r18, 0xFF	; 255
    1f24:	3f 4f       	sbci	r19, 0xFF	; 255
    1f26:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    1f28:	28 30       	cpi	r18, 0x08	; 8
    1f2a:	31 05       	cpc	r19, r1
    1f2c:	89 f7       	brne	.-30     	; 0x1f10 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    1f2e:	40 ff       	sbrs	r20, 0
    1f30:	0a c0       	rjmp	.+20     	; 0x1f46 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
    1f32:	41 ff       	sbrs	r20, 1
    1f34:	03 c0       	rjmp	.+6      	; 0x1f3c <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    1f36:	fc 01       	movw	r30, r24
    1f38:	65 83       	std	Z+5, r22	; 0x05
    1f3a:	02 c0       	rjmp	.+4      	; 0x1f40 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    1f3c:	fc 01       	movw	r30, r24
    1f3e:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    1f40:	fc 01       	movw	r30, r24
    1f42:	61 83       	std	Z+1, r22	; 0x01
    1f44:	02 c0       	rjmp	.+4      	; 0x1f4a <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    1f46:	fc 01       	movw	r30, r24
    1f48:	62 83       	std	Z+2, r22	; 0x02
	}
}
    1f4a:	df 91       	pop	r29
    1f4c:	cf 91       	pop	r28
    1f4e:	08 95       	ret

00001f50 <usart_spi_init>:
#include "sysclk.h"

void usart_spi_init(USART_t *usart)
{
#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
    1f50:	80 3a       	cpi	r24, 0xA0	; 160
    1f52:	28 e0       	ldi	r18, 0x08	; 8
    1f54:	92 07       	cpc	r25, r18
    1f56:	19 f4       	brne	.+6      	; 0x1f5e <usart_spi_init+0xe>
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
    1f58:	60 e1       	ldi	r22, 0x10	; 16
    1f5a:	83 e0       	ldi	r24, 0x03	; 3
    1f5c:	c7 cb       	rjmp	.-2162   	; 0x16ec <sysclk_enable_module>
	}
#endif
#ifdef USARTC1
	else
	if((uint16_t)usart == (uint16_t)&USARTC1) {
    1f5e:	80 3b       	cpi	r24, 0xB0	; 176
    1f60:	28 e0       	ldi	r18, 0x08	; 8
    1f62:	92 07       	cpc	r25, r18
    1f64:	19 f4       	brne	.+6      	; 0x1f6c <usart_spi_init+0x1c>
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART1_bm);
    1f66:	60 e2       	ldi	r22, 0x20	; 32
    1f68:	83 e0       	ldi	r24, 0x03	; 3
    1f6a:	c0 cb       	rjmp	.-2176   	; 0x16ec <sysclk_enable_module>
	}
#endif
#ifdef USARTD0
	else
	if((uint16_t)usart == (uint16_t)&USARTD0) {
    1f6c:	80 3a       	cpi	r24, 0xA0	; 160
    1f6e:	29 e0       	ldi	r18, 0x09	; 9
    1f70:	92 07       	cpc	r25, r18
    1f72:	19 f4       	brne	.+6      	; 0x1f7a <usart_spi_init+0x2a>
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
    1f74:	60 e1       	ldi	r22, 0x10	; 16
    1f76:	84 e0       	ldi	r24, 0x04	; 4
    1f78:	b9 cb       	rjmp	.-2190   	; 0x16ec <sysclk_enable_module>
	}
#endif
#ifdef USARTD1
	else
	if((uint16_t)usart == (uint16_t)&USARTD1) {
    1f7a:	80 3b       	cpi	r24, 0xB0	; 176
    1f7c:	29 e0       	ldi	r18, 0x09	; 9
    1f7e:	92 07       	cpc	r25, r18
    1f80:	19 f4       	brne	.+6      	; 0x1f88 <usart_spi_init+0x38>
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
    1f82:	60 e2       	ldi	r22, 0x20	; 32
    1f84:	84 e0       	ldi	r24, 0x04	; 4
    1f86:	b2 cb       	rjmp	.-2204   	; 0x16ec <sysclk_enable_module>
	}
#endif
#ifdef USARTE0
	else
	if((uint16_t)usart == (uint16_t)&USARTE0) {
    1f88:	80 3a       	cpi	r24, 0xA0	; 160
    1f8a:	2a e0       	ldi	r18, 0x0A	; 10
    1f8c:	92 07       	cpc	r25, r18
    1f8e:	19 f4       	brne	.+6      	; 0x1f96 <usart_spi_init+0x46>
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
    1f90:	60 e1       	ldi	r22, 0x10	; 16
    1f92:	85 e0       	ldi	r24, 0x05	; 5
    1f94:	ab cb       	rjmp	.-2218   	; 0x16ec <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART1_bm);
	}
#endif
#ifdef USARTF0
	else
	if((uint16_t)usart == (uint16_t)&USARTF0) {
    1f96:	80 3a       	cpi	r24, 0xA0	; 160
    1f98:	9b 40       	sbci	r25, 0x0B	; 11
    1f9a:	19 f4       	brne	.+6      	; 0x1fa2 <usart_spi_init+0x52>
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART0_bm);
    1f9c:	60 e1       	ldi	r22, 0x10	; 16
    1f9e:	86 e0       	ldi	r24, 0x06	; 6
    1fa0:	a5 cb       	rjmp	.-2230   	; 0x16ec <sysclk_enable_module>
    1fa2:	08 95       	ret

00001fa4 <usart_spi_setup_device>:
}

void usart_spi_setup_device(USART_t *usart, struct usart_spi_device *device,
     spi_flags_t flags, unsigned long baud_rate,
     board_spi_select_id_t sel_id)
{
    1fa4:	0f 93       	push	r16
    1fa6:	1f 93       	push	r17
    1fa8:	cf 93       	push	r28
    1faa:	df 93       	push	r29
    1fac:	00 d0       	rcall	.+0      	; 0x1fae <usart_spi_setup_device+0xa>
    1fae:	00 d0       	rcall	.+0      	; 0x1fb0 <usart_spi_setup_device+0xc>
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
	usart_spi_options_t opt;
	opt.baudrate=baud_rate;
    1fb4:	09 83       	std	Y+1, r16	; 0x01
    1fb6:	1a 83       	std	Y+2, r17	; 0x02
    1fb8:	2b 83       	std	Y+3, r18	; 0x03
    1fba:	3c 83       	std	Y+4, r19	; 0x04
	opt.spimode=flags;
    1fbc:	4d 83       	std	Y+5, r20	; 0x05
	opt.data_order=false;
    1fbe:	1e 82       	std	Y+6, r1	; 0x06
	usart_init_spi(usart, &opt);
    1fc0:	be 01       	movw	r22, r28
    1fc2:	6f 5f       	subi	r22, 0xFF	; 255
    1fc4:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc6:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <usart_init_spi>
}
    1fca:	26 96       	adiw	r28, 0x06	; 6
    1fcc:	cd bf       	out	0x3d, r28	; 61
    1fce:	de bf       	out	0x3e, r29	; 62
    1fd0:	df 91       	pop	r29
    1fd2:	cf 91       	pop	r28
    1fd4:	1f 91       	pop	r17
    1fd6:	0f 91       	pop	r16
    1fd8:	08 95       	ret

00001fda <udi_cdc_comm_enable>:
}

bool udi_cdc_is_tx_ready(void)
{
	return udi_cdc_multi_is_tx_ready(0);
}
    1fda:	10 92 bd 23 	sts	0x23BD, r1
    1fde:	10 92 be 23 	sts	0x23BE, r1
    1fe2:	10 92 bf 23 	sts	0x23BF, r1
    1fe6:	81 ea       	ldi	r24, 0xA1	; 161
    1fe8:	80 93 c0 23 	sts	0x23C0, r24
    1fec:	80 e2       	ldi	r24, 0x20	; 32
    1fee:	80 93 c1 23 	sts	0x23C1, r24
    1ff2:	10 92 c2 23 	sts	0x23C2, r1
    1ff6:	10 92 c3 23 	sts	0x23C3, r1
    1ffa:	10 92 c4 23 	sts	0x23C4, r1
    1ffe:	10 92 c5 23 	sts	0x23C5, r1
    2002:	82 e0       	ldi	r24, 0x02	; 2
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	80 93 c6 23 	sts	0x23C6, r24
    200a:	90 93 c7 23 	sts	0x23C7, r25
    200e:	10 92 c8 23 	sts	0x23C8, r1
    2012:	10 92 c9 23 	sts	0x23C9, r1
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	92 ec       	ldi	r25, 0xC2	; 194
    201a:	a1 e0       	ldi	r26, 0x01	; 1
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	80 93 ca 23 	sts	0x23CA, r24
    2022:	90 93 cb 23 	sts	0x23CB, r25
    2026:	a0 93 cc 23 	sts	0x23CC, r26
    202a:	b0 93 cd 23 	sts	0x23CD, r27
    202e:	10 92 ce 23 	sts	0x23CE, r1
    2032:	10 92 cf 23 	sts	0x23CF, r1
    2036:	88 e0       	ldi	r24, 0x08	; 8
    2038:	80 93 d0 23 	sts	0x23D0, r24
    203c:	80 91 bd 23 	lds	r24, 0x23BD
    2040:	8f 5f       	subi	r24, 0xFF	; 255
    2042:	80 93 bd 23 	sts	0x23BD, r24
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	08 95       	ret

0000204a <udi_cdc_comm_disable>:
    204a:	80 91 bd 23 	lds	r24, 0x23BD
    204e:	81 50       	subi	r24, 0x01	; 1
    2050:	80 93 bd 23 	sts	0x23BD, r24
    2054:	08 95       	ret

00002056 <udi_cdc_data_disable>:
    2056:	80 91 bc 23 	lds	r24, 0x23BC
    205a:	81 50       	subi	r24, 0x01	; 1
    205c:	80 93 bc 23 	sts	0x23BC, r24
    2060:	80 91 bc 23 	lds	r24, 0x23BC
    2064:	10 92 bb 23 	sts	0x23BB, r1
    2068:	08 95       	ret

0000206a <udi_cdc_data_setup>:
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	08 95       	ret

0000206e <udi_cdc_getsetting>:
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	08 95       	ret

00002072 <udi_cdc_line_coding_received>:
    2072:	08 95       	ret

00002074 <udi_cdc_tx_send>:
    2074:	ff 92       	push	r15
    2076:	0f 93       	push	r16
    2078:	1f 93       	push	r17
    207a:	cf 93       	push	r28
    207c:	df 93       	push	r29
    207e:	80 91 b5 23 	lds	r24, 0x23B5
    2082:	81 11       	cpse	r24, r1
    2084:	6c c0       	rjmp	.+216    	; 0x215e <udi_cdc_tx_send+0xea>
    2086:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <udd_is_high_speed>
    208a:	88 23       	and	r24, r24
    208c:	51 f0       	breq	.+20     	; 0x20a2 <udi_cdc_tx_send+0x2e>
    208e:	c0 91 d5 23 	lds	r28, 0x23D5
    2092:	d0 91 d6 23 	lds	r29, 0x23D6
    2096:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <udd_get_micro_frame_number>
    209a:	c8 17       	cp	r28, r24
    209c:	d9 07       	cpc	r29, r25
    209e:	59 f4       	brne	.+22     	; 0x20b6 <udi_cdc_tx_send+0x42>
    20a0:	5e c0       	rjmp	.+188    	; 0x215e <udi_cdc_tx_send+0xea>
    20a2:	c0 91 d5 23 	lds	r28, 0x23D5
    20a6:	d0 91 d6 23 	lds	r29, 0x23D6
    20aa:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <udd_get_frame_number>
    20ae:	c8 17       	cp	r28, r24
    20b0:	d9 07       	cpc	r29, r25
    20b2:	09 f4       	brne	.+2      	; 0x20b6 <udi_cdc_tx_send+0x42>
    20b4:	54 c0       	rjmp	.+168    	; 0x215e <udi_cdc_tx_send+0xea>
    20b6:	8f b7       	in	r24, 0x3f	; 63
    20b8:	f8 94       	cli
    20ba:	c0 91 b6 23 	lds	r28, 0x23B6
    20be:	90 91 b4 23 	lds	r25, 0x23B4
    20c2:	91 11       	cpse	r25, r1
    20c4:	06 c0       	rjmp	.+12     	; 0x20d2 <udi_cdc_tx_send+0x5e>
    20c6:	91 e0       	ldi	r25, 0x01	; 1
    20c8:	c1 11       	cpse	r28, r1
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	90 93 b6 23 	sts	0x23B6, r25
    20d0:	04 c0       	rjmp	.+8      	; 0x20da <udi_cdc_tx_send+0x66>
    20d2:	91 e0       	ldi	r25, 0x01	; 1
    20d4:	c1 11       	cpse	r28, r1
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	c9 2f       	mov	r28, r25
    20da:	91 e0       	ldi	r25, 0x01	; 1
    20dc:	90 93 b5 23 	sts	0x23B5, r25
    20e0:	8f bf       	out	0x3f, r24	; 63
    20e2:	d0 e0       	ldi	r29, 0x00	; 0
    20e4:	fe 01       	movw	r30, r28
    20e6:	ee 0f       	add	r30, r30
    20e8:	ff 1f       	adc	r31, r31
    20ea:	ef 52       	subi	r30, 0x2F	; 47
    20ec:	fc 4d       	sbci	r31, 0xDC	; 220
    20ee:	ff 24       	eor	r15, r15
    20f0:	f3 94       	inc	r15
    20f2:	80 81       	ld	r24, Z
    20f4:	91 81       	ldd	r25, Z+1	; 0x01
    20f6:	80 34       	cpi	r24, 0x40	; 64
    20f8:	91 40       	sbci	r25, 0x01	; 1
    20fa:	09 f4       	brne	.+2      	; 0x20fe <udi_cdc_tx_send+0x8a>
    20fc:	f1 2c       	mov	r15, r1
    20fe:	ff 20       	and	r15, r15
    2100:	91 f0       	breq	.+36     	; 0x2126 <udi_cdc_tx_send+0xb2>
    2102:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <udd_is_high_speed>
    2106:	88 23       	and	r24, r24
    2108:	39 f0       	breq	.+14     	; 0x2118 <udi_cdc_tx_send+0xa4>
    210a:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <udd_get_micro_frame_number>
    210e:	80 93 d5 23 	sts	0x23D5, r24
    2112:	90 93 d6 23 	sts	0x23D6, r25
    2116:	0b c0       	rjmp	.+22     	; 0x212e <udi_cdc_tx_send+0xba>
    2118:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <udd_get_frame_number>
    211c:	80 93 d5 23 	sts	0x23D5, r24
    2120:	90 93 d6 23 	sts	0x23D6, r25
    2124:	04 c0       	rjmp	.+8      	; 0x212e <udi_cdc_tx_send+0xba>
    2126:	10 92 d5 23 	sts	0x23D5, r1
    212a:	10 92 d6 23 	sts	0x23D6, r1
    212e:	fe 01       	movw	r30, r28
    2130:	ee 0f       	add	r30, r30
    2132:	ff 1f       	adc	r31, r31
    2134:	ef 52       	subi	r30, 0x2F	; 47
    2136:	fc 4d       	sbci	r31, 0xDC	; 220
    2138:	20 81       	ld	r18, Z
    213a:	31 81       	ldd	r19, Z+1	; 0x01
    213c:	80 e4       	ldi	r24, 0x40	; 64
    213e:	91 e0       	ldi	r25, 0x01	; 1
    2140:	c8 9f       	mul	r28, r24
    2142:	a0 01       	movw	r20, r0
    2144:	c9 9f       	mul	r28, r25
    2146:	50 0d       	add	r21, r0
    2148:	d8 9f       	mul	r29, r24
    214a:	50 0d       	add	r21, r0
    214c:	11 24       	eor	r1, r1
    214e:	44 52       	subi	r20, 0x24	; 36
    2150:	5c 4d       	sbci	r21, 0xDC	; 220
    2152:	07 eb       	ldi	r16, 0xB7	; 183
    2154:	10 e1       	ldi	r17, 0x10	; 16
    2156:	6f 2d       	mov	r22, r15
    2158:	81 e8       	ldi	r24, 0x81	; 129
    215a:	0e 94 76 1f 	call	0x3eec	; 0x3eec <udd_ep_run>
    215e:	df 91       	pop	r29
    2160:	cf 91       	pop	r28
    2162:	1f 91       	pop	r17
    2164:	0f 91       	pop	r16
    2166:	ff 90       	pop	r15
    2168:	08 95       	ret

0000216a <udi_cdc_data_sof_notify>:
    216a:	80 e0       	ldi	r24, 0x00	; 0
    216c:	83 cf       	rjmp	.-250    	; 0x2074 <udi_cdc_tx_send>

0000216e <udi_cdc_data_sent>:
    216e:	81 11       	cpse	r24, r1
    2170:	15 c0       	rjmp	.+42     	; 0x219c <udi_cdc_data_sent+0x2e>
    2172:	20 91 b6 23 	lds	r18, 0x23B6
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	22 23       	and	r18, r18
    217c:	11 f0       	breq	.+4      	; 0x2182 <udi_cdc_data_sent+0x14>
    217e:	80 e0       	ldi	r24, 0x00	; 0
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	fc 01       	movw	r30, r24
    2184:	ee 0f       	add	r30, r30
    2186:	ff 1f       	adc	r31, r31
    2188:	ef 52       	subi	r30, 0x2F	; 47
    218a:	fc 4d       	sbci	r31, 0xDC	; 220
    218c:	10 82       	st	Z, r1
    218e:	11 82       	std	Z+1, r1	; 0x01
    2190:	10 92 b4 23 	sts	0x23B4, r1
    2194:	10 92 b5 23 	sts	0x23B5, r1
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	6c cf       	rjmp	.-296    	; 0x2074 <udi_cdc_tx_send>
    219c:	08 95       	ret

0000219e <udi_cdc_comm_setup>:
    219e:	80 91 27 2a 	lds	r24, 0x2A27
    21a2:	88 23       	and	r24, r24
    21a4:	ec f4       	brge	.+58     	; 0x21e0 <udi_cdc_comm_setup+0x42>
    21a6:	80 76       	andi	r24, 0x60	; 96
    21a8:	80 32       	cpi	r24, 0x20	; 32
    21aa:	09 f0       	breq	.+2      	; 0x21ae <udi_cdc_comm_setup+0x10>
    21ac:	44 c0       	rjmp	.+136    	; 0x2236 <udi_cdc_comm_setup+0x98>
    21ae:	80 91 28 2a 	lds	r24, 0x2A28
    21b2:	81 32       	cpi	r24, 0x21	; 33
    21b4:	09 f0       	breq	.+2      	; 0x21b8 <udi_cdc_comm_setup+0x1a>
    21b6:	41 c0       	rjmp	.+130    	; 0x223a <udi_cdc_comm_setup+0x9c>
    21b8:	80 91 2d 2a 	lds	r24, 0x2A2D
    21bc:	90 91 2e 2a 	lds	r25, 0x2A2E
    21c0:	07 97       	sbiw	r24, 0x07	; 7
    21c2:	e9 f5       	brne	.+122    	; 0x223e <udi_cdc_comm_setup+0xa0>
    21c4:	8a ec       	ldi	r24, 0xCA	; 202
    21c6:	93 e2       	ldi	r25, 0x23	; 35
    21c8:	80 93 2f 2a 	sts	0x2A2F, r24
    21cc:	90 93 30 2a 	sts	0x2A30, r25
    21d0:	87 e0       	ldi	r24, 0x07	; 7
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	80 93 31 2a 	sts	0x2A31, r24
    21d8:	90 93 32 2a 	sts	0x2A32, r25
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	08 95       	ret
    21e0:	80 76       	andi	r24, 0x60	; 96
    21e2:	80 32       	cpi	r24, 0x20	; 32
    21e4:	71 f5       	brne	.+92     	; 0x2242 <udi_cdc_comm_setup+0xa4>
    21e6:	80 91 28 2a 	lds	r24, 0x2A28
    21ea:	80 32       	cpi	r24, 0x20	; 32
    21ec:	19 f0       	breq	.+6      	; 0x21f4 <udi_cdc_comm_setup+0x56>
    21ee:	82 32       	cpi	r24, 0x22	; 34
    21f0:	51 f5       	brne	.+84     	; 0x2246 <udi_cdc_comm_setup+0xa8>
    21f2:	1a c0       	rjmp	.+52     	; 0x2228 <udi_cdc_comm_setup+0x8a>
    21f4:	80 91 2d 2a 	lds	r24, 0x2A2D
    21f8:	90 91 2e 2a 	lds	r25, 0x2A2E
    21fc:	07 97       	sbiw	r24, 0x07	; 7
    21fe:	29 f5       	brne	.+74     	; 0x224a <udi_cdc_comm_setup+0xac>
    2200:	89 e3       	ldi	r24, 0x39	; 57
    2202:	90 e1       	ldi	r25, 0x10	; 16
    2204:	80 93 33 2a 	sts	0x2A33, r24
    2208:	90 93 34 2a 	sts	0x2A34, r25
    220c:	8a ec       	ldi	r24, 0xCA	; 202
    220e:	93 e2       	ldi	r25, 0x23	; 35
    2210:	80 93 2f 2a 	sts	0x2A2F, r24
    2214:	90 93 30 2a 	sts	0x2A30, r25
    2218:	87 e0       	ldi	r24, 0x07	; 7
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	80 93 31 2a 	sts	0x2A31, r24
    2220:	90 93 32 2a 	sts	0x2A32, r25
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	08 95       	ret
    2228:	80 91 29 2a 	lds	r24, 0x2A29
    222c:	81 70       	andi	r24, 0x01	; 1
    222e:	0e 94 07 22 	call	0x440e	; 0x440e <cdc_set_dtr>
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	08 95       	ret
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	08 95       	ret
    223a:	80 e0       	ldi	r24, 0x00	; 0
    223c:	08 95       	ret
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	08 95       	ret
    2242:	80 e0       	ldi	r24, 0x00	; 0
    2244:	08 95       	ret
    2246:	80 e0       	ldi	r24, 0x00	; 0
    2248:	08 95       	ret
    224a:	80 e0       	ldi	r24, 0x00	; 0
    224c:	08 95       	ret

0000224e <udi_cdc_multi_is_rx_ready>:
    224e:	20 91 b8 23 	lds	r18, 0x23B8
    2252:	30 91 b9 23 	lds	r19, 0x23B9
    2256:	e0 91 ba 23 	lds	r30, 0x23BA
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	ee 0f       	add	r30, r30
    225e:	ff 1f       	adc	r31, r31
    2260:	e9 52       	subi	r30, 0x29	; 41
    2262:	fc 4d       	sbci	r31, 0xDC	; 220
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	40 81       	ld	r20, Z
    2268:	51 81       	ldd	r21, Z+1	; 0x01
    226a:	24 17       	cp	r18, r20
    226c:	35 07       	cpc	r19, r21
    226e:	08 f0       	brcs	.+2      	; 0x2272 <udi_cdc_multi_is_rx_ready+0x24>
    2270:	80 e0       	ldi	r24, 0x00	; 0
    2272:	08 95       	ret

00002274 <udi_cdc_rx_start>:
    2274:	0f 93       	push	r16
    2276:	1f 93       	push	r17
    2278:	cf 93       	push	r28
    227a:	df 93       	push	r29
    227c:	4f b7       	in	r20, 0x3f	; 63
    227e:	f8 94       	cli
    2280:	50 91 ba 23 	lds	r21, 0x23BA
    2284:	80 91 b7 23 	lds	r24, 0x23B7
    2288:	81 11       	cpse	r24, r1
    228a:	10 c0       	rjmp	.+32     	; 0x22ac <udi_cdc_rx_start+0x38>
    228c:	20 91 b8 23 	lds	r18, 0x23B8
    2290:	30 91 b9 23 	lds	r19, 0x23B9
    2294:	c5 2f       	mov	r28, r21
    2296:	d0 e0       	ldi	r29, 0x00	; 0
    2298:	fe 01       	movw	r30, r28
    229a:	ee 0f       	add	r30, r30
    229c:	ff 1f       	adc	r31, r31
    229e:	e9 52       	subi	r30, 0x29	; 41
    22a0:	fc 4d       	sbci	r31, 0xDC	; 220
    22a2:	80 81       	ld	r24, Z
    22a4:	91 81       	ldd	r25, Z+1	; 0x01
    22a6:	28 17       	cp	r18, r24
    22a8:	39 07       	cpc	r19, r25
    22aa:	18 f4       	brcc	.+6      	; 0x22b2 <udi_cdc_rx_start+0x3e>
    22ac:	4f bf       	out	0x3f, r20	; 63
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	22 c0       	rjmp	.+68     	; 0x22f6 <udi_cdc_rx_start+0x82>
    22b2:	10 92 b8 23 	sts	0x23B8, r1
    22b6:	10 92 b9 23 	sts	0x23B9, r1
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	51 11       	cpse	r21, r1
    22be:	80 e0       	ldi	r24, 0x00	; 0
    22c0:	80 93 ba 23 	sts	0x23BA, r24
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	80 93 b7 23 	sts	0x23B7, r24
    22ca:	4f bf       	out	0x3f, r20	; 63
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	bf df       	rcall	.-130    	; 0x224e <udi_cdc_multi_is_rx_ready>
    22d0:	80 e4       	ldi	r24, 0x40	; 64
    22d2:	91 e0       	ldi	r25, 0x01	; 1
    22d4:	c8 9f       	mul	r28, r24
    22d6:	a0 01       	movw	r20, r0
    22d8:	c9 9f       	mul	r28, r25
    22da:	50 0d       	add	r21, r0
    22dc:	d8 9f       	mul	r29, r24
    22de:	50 0d       	add	r21, r0
    22e0:	11 24       	eor	r1, r1
    22e2:	44 5a       	subi	r20, 0xA4	; 164
    22e4:	59 4d       	sbci	r21, 0xD9	; 217
    22e6:	00 e8       	ldi	r16, 0x80	; 128
    22e8:	11 e1       	ldi	r17, 0x11	; 17
    22ea:	20 e4       	ldi	r18, 0x40	; 64
    22ec:	31 e0       	ldi	r19, 0x01	; 1
    22ee:	61 e0       	ldi	r22, 0x01	; 1
    22f0:	82 e0       	ldi	r24, 0x02	; 2
    22f2:	0e 94 76 1f 	call	0x3eec	; 0x3eec <udd_ep_run>
    22f6:	df 91       	pop	r29
    22f8:	cf 91       	pop	r28
    22fa:	1f 91       	pop	r17
    22fc:	0f 91       	pop	r16
    22fe:	08 95       	ret

00002300 <udi_cdc_data_received>:
    2300:	0f 93       	push	r16
    2302:	1f 93       	push	r17
    2304:	94 2f       	mov	r25, r20
    2306:	81 11       	cpse	r24, r1
    2308:	27 c0       	rjmp	.+78     	; 0x2358 <udi_cdc_data_received+0x58>
    230a:	80 91 ba 23 	lds	r24, 0x23BA
    230e:	e1 e0       	ldi	r30, 0x01	; 1
    2310:	81 11       	cpse	r24, r1
    2312:	e0 e0       	ldi	r30, 0x00	; 0
    2314:	61 15       	cp	r22, r1
    2316:	71 05       	cpc	r23, r1
    2318:	a1 f4       	brne	.+40     	; 0x2342 <udi_cdc_data_received+0x42>
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	20 e4       	ldi	r18, 0x40	; 64
    231e:	31 e0       	ldi	r19, 0x01	; 1
    2320:	e2 9f       	mul	r30, r18
    2322:	b0 01       	movw	r22, r0
    2324:	e3 9f       	mul	r30, r19
    2326:	70 0d       	add	r23, r0
    2328:	f2 9f       	mul	r31, r18
    232a:	70 0d       	add	r23, r0
    232c:	11 24       	eor	r1, r1
    232e:	ab 01       	movw	r20, r22
    2330:	44 5a       	subi	r20, 0xA4	; 164
    2332:	59 4d       	sbci	r21, 0xD9	; 217
    2334:	00 e8       	ldi	r16, 0x80	; 128
    2336:	11 e1       	ldi	r17, 0x11	; 17
    2338:	61 e0       	ldi	r22, 0x01	; 1
    233a:	89 2f       	mov	r24, r25
    233c:	0e 94 76 1f 	call	0x3eec	; 0x3eec <udd_ep_run>
    2340:	0b c0       	rjmp	.+22     	; 0x2358 <udi_cdc_data_received+0x58>
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	ee 0f       	add	r30, r30
    2346:	ff 1f       	adc	r31, r31
    2348:	e9 52       	subi	r30, 0x29	; 41
    234a:	fc 4d       	sbci	r31, 0xDC	; 220
    234c:	60 83       	st	Z, r22
    234e:	71 83       	std	Z+1, r23	; 0x01
    2350:	10 92 b7 23 	sts	0x23B7, r1
    2354:	80 e0       	ldi	r24, 0x00	; 0
    2356:	8e df       	rcall	.-228    	; 0x2274 <udi_cdc_rx_start>
    2358:	1f 91       	pop	r17
    235a:	0f 91       	pop	r16
    235c:	08 95       	ret

0000235e <udi_cdc_data_enable>:
    235e:	10 92 bc 23 	sts	0x23BC, r1
    2362:	10 92 b5 23 	sts	0x23B5, r1
    2366:	10 92 b4 23 	sts	0x23B4, r1
    236a:	10 92 b6 23 	sts	0x23B6, r1
    236e:	10 92 d1 23 	sts	0x23D1, r1
    2372:	10 92 d2 23 	sts	0x23D2, r1
    2376:	10 92 d3 23 	sts	0x23D3, r1
    237a:	10 92 d4 23 	sts	0x23D4, r1
    237e:	10 92 d5 23 	sts	0x23D5, r1
    2382:	10 92 d6 23 	sts	0x23D6, r1
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	75 de       	rcall	.-790    	; 0x2074 <udi_cdc_tx_send>
    238a:	10 92 b7 23 	sts	0x23B7, r1
    238e:	10 92 ba 23 	sts	0x23BA, r1
    2392:	10 92 d7 23 	sts	0x23D7, r1
    2396:	10 92 d8 23 	sts	0x23D8, r1
    239a:	10 92 b8 23 	sts	0x23B8, r1
    239e:	10 92 b9 23 	sts	0x23B9, r1
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	67 df       	rcall	.-306    	; 0x2274 <udi_cdc_rx_start>
    23a6:	88 23       	and	r24, r24
    23a8:	61 f0       	breq	.+24     	; 0x23c2 <udi_cdc_data_enable+0x64>
    23aa:	80 91 bc 23 	lds	r24, 0x23BC
    23ae:	8f 5f       	subi	r24, 0xFF	; 255
    23b0:	80 93 bc 23 	sts	0x23BC, r24
    23b4:	80 91 bc 23 	lds	r24, 0x23BC
    23b8:	81 30       	cpi	r24, 0x01	; 1
    23ba:	29 f4       	brne	.+10     	; 0x23c6 <udi_cdc_data_enable+0x68>
    23bc:	80 93 bb 23 	sts	0x23BB, r24
    23c0:	08 95       	ret
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	08 95       	ret
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	08 95       	ret

000023ca <udi_cdc_is_rx_ready>:
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	40 cf       	rjmp	.-384    	; 0x224e <udi_cdc_multi_is_rx_ready>

000023ce <udi_cdc_multi_getc>:
    23ce:	ff 92       	push	r15
    23d0:	0f 93       	push	r16
    23d2:	1f 93       	push	r17
    23d4:	cf 93       	push	r28
    23d6:	df 93       	push	r29
    23d8:	ff 24       	eor	r15, r15
    23da:	f3 94       	inc	r15
    23dc:	80 91 d0 23 	lds	r24, 0x23D0
    23e0:	89 30       	cpi	r24, 0x09	; 9
    23e2:	09 f0       	breq	.+2      	; 0x23e6 <udi_cdc_multi_getc+0x18>
    23e4:	f1 2c       	mov	r15, r1
    23e6:	00 e0       	ldi	r16, 0x00	; 0
    23e8:	10 e0       	ldi	r17, 0x00	; 0
    23ea:	c0 e4       	ldi	r28, 0x40	; 64
    23ec:	d1 e0       	ldi	r29, 0x01	; 1
    23ee:	20 91 b8 23 	lds	r18, 0x23B8
    23f2:	30 91 b9 23 	lds	r19, 0x23B9
    23f6:	40 91 ba 23 	lds	r20, 0x23BA
    23fa:	50 e0       	ldi	r21, 0x00	; 0
    23fc:	fa 01       	movw	r30, r20
    23fe:	ee 0f       	add	r30, r30
    2400:	ff 1f       	adc	r31, r31
    2402:	e9 52       	subi	r30, 0x29	; 41
    2404:	fc 4d       	sbci	r31, 0xDC	; 220
    2406:	60 81       	ld	r22, Z
    2408:	71 81       	ldd	r23, Z+1	; 0x01
    240a:	26 17       	cp	r18, r22
    240c:	37 07       	cpc	r19, r23
    240e:	38 f0       	brcs	.+14     	; 0x241e <udi_cdc_multi_getc+0x50>
    2410:	80 91 bb 23 	lds	r24, 0x23BB
    2414:	81 11       	cpse	r24, r1
    2416:	eb cf       	rjmp	.-42     	; 0x23ee <udi_cdc_multi_getc+0x20>
    2418:	00 e0       	ldi	r16, 0x00	; 0
    241a:	10 e0       	ldi	r17, 0x00	; 0
    241c:	1b c0       	rjmp	.+54     	; 0x2454 <udi_cdc_multi_getc+0x86>
    241e:	4c 9f       	mul	r20, r28
    2420:	f0 01       	movw	r30, r0
    2422:	4d 9f       	mul	r20, r29
    2424:	f0 0d       	add	r31, r0
    2426:	5c 9f       	mul	r21, r28
    2428:	f0 0d       	add	r31, r0
    242a:	11 24       	eor	r1, r1
    242c:	e2 0f       	add	r30, r18
    242e:	f3 1f       	adc	r31, r19
    2430:	e4 5a       	subi	r30, 0xA4	; 164
    2432:	f9 4d       	sbci	r31, 0xD9	; 217
    2434:	80 81       	ld	r24, Z
    2436:	08 2b       	or	r16, r24
    2438:	2f 5f       	subi	r18, 0xFF	; 255
    243a:	3f 4f       	sbci	r19, 0xFF	; 255
    243c:	20 93 b8 23 	sts	0x23B8, r18
    2440:	30 93 b9 23 	sts	0x23B9, r19
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	16 df       	rcall	.-468    	; 0x2274 <udi_cdc_rx_start>
    2448:	ff 20       	and	r15, r15
    244a:	21 f0       	breq	.+8      	; 0x2454 <udi_cdc_multi_getc+0x86>
    244c:	10 2f       	mov	r17, r16
    244e:	00 27       	eor	r16, r16
    2450:	f1 2c       	mov	r15, r1
    2452:	cd cf       	rjmp	.-102    	; 0x23ee <udi_cdc_multi_getc+0x20>
    2454:	80 2f       	mov	r24, r16
    2456:	91 2f       	mov	r25, r17
    2458:	df 91       	pop	r29
    245a:	cf 91       	pop	r28
    245c:	1f 91       	pop	r17
    245e:	0f 91       	pop	r16
    2460:	ff 90       	pop	r15
    2462:	08 95       	ret

00002464 <udi_cdc_getc>:
    2464:	80 e0       	ldi	r24, 0x00	; 0
    2466:	b3 cf       	rjmp	.-154    	; 0x23ce <udi_cdc_multi_getc>

00002468 <udi_cdc_multi_is_tx_ready>:
    2468:	e0 91 b6 23 	lds	r30, 0x23B6
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	ee 0f       	add	r30, r30
    2470:	ff 1f       	adc	r31, r31
    2472:	ef 52       	subi	r30, 0x2F	; 47
    2474:	fc 4d       	sbci	r31, 0xDC	; 220
    2476:	80 81       	ld	r24, Z
    2478:	91 81       	ldd	r25, Z+1	; 0x01
    247a:	80 34       	cpi	r24, 0x40	; 64
    247c:	91 40       	sbci	r25, 0x01	; 1
    247e:	19 f5       	brne	.+70     	; 0x24c6 <udi_cdc_multi_is_tx_ready+0x5e>
    2480:	80 91 b4 23 	lds	r24, 0x23B4
    2484:	81 11       	cpse	r24, r1
    2486:	10 c0       	rjmp	.+32     	; 0x24a8 <udi_cdc_multi_is_tx_ready+0x40>
    2488:	8f b7       	in	r24, 0x3f	; 63
    248a:	f8 94       	cli
    248c:	90 91 b5 23 	lds	r25, 0x23B5
    2490:	91 11       	cpse	r25, r1
    2492:	09 c0       	rjmp	.+18     	; 0x24a6 <udi_cdc_multi_is_tx_ready+0x3e>
    2494:	91 e0       	ldi	r25, 0x01	; 1
    2496:	90 93 b4 23 	sts	0x23B4, r25
    249a:	20 91 b6 23 	lds	r18, 0x23B6
    249e:	21 11       	cpse	r18, r1
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	90 93 b6 23 	sts	0x23B6, r25
    24a6:	8f bf       	out	0x3f, r24	; 63
    24a8:	e0 91 b6 23 	lds	r30, 0x23B6
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	ee 0f       	add	r30, r30
    24b0:	ff 1f       	adc	r31, r31
    24b2:	ef 52       	subi	r30, 0x2F	; 47
    24b4:	fc 4d       	sbci	r31, 0xDC	; 220
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	20 81       	ld	r18, Z
    24ba:	31 81       	ldd	r19, Z+1	; 0x01
    24bc:	20 34       	cpi	r18, 0x40	; 64
    24be:	31 40       	sbci	r19, 0x01	; 1
    24c0:	19 f4       	brne	.+6      	; 0x24c8 <udi_cdc_multi_is_tx_ready+0x60>
    24c2:	80 e0       	ldi	r24, 0x00	; 0
    24c4:	08 95       	ret
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	08 95       	ret

000024ca <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
    24ca:	ff 92       	push	r15
    24cc:	0f 93       	push	r16
    24ce:	1f 93       	push	r17
    24d0:	cf 93       	push	r28
    24d2:	df 93       	push	r29
    24d4:	eb 01       	movw	r28, r22

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    24d6:	ff 24       	eor	r15, r15
    24d8:	f3 94       	inc	r15
    24da:	80 91 d0 23 	lds	r24, 0x23D0
    24de:	89 30       	cpi	r24, 0x09	; 9
    24e0:	09 f0       	breq	.+2      	; 0x24e4 <udi_cdc_multi_putc+0x1a>
    24e2:	f1 2c       	mov	r15, r1
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
    24e4:	00 e4       	ldi	r16, 0x40	; 64
    24e6:	11 e0       	ldi	r17, 0x01	; 1

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
    24e8:	80 e0       	ldi	r24, 0x00	; 0
    24ea:	be df       	rcall	.-132    	; 0x2468 <udi_cdc_multi_is_tx_ready>
    24ec:	81 11       	cpse	r24, r1
    24ee:	07 c0       	rjmp	.+14     	; 0x24fe <udi_cdc_multi_putc+0x34>
		if (!udi_cdc_data_running) {
    24f0:	80 91 bb 23 	lds	r24, 0x23BB
    24f4:	81 11       	cpse	r24, r1
    24f6:	f8 cf       	rjmp	.-16     	; 0x24e8 <udi_cdc_multi_putc+0x1e>
			return false;
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	25 c0       	rjmp	.+74     	; 0x2548 <udi_cdc_multi_putc+0x7e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    24fe:	4f b7       	in	r20, 0x3f	; 63
	cpu_irq_disable();
    2500:	f8 94       	cli
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
    2502:	20 91 b6 23 	lds	r18, 0x23B6
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	f9 01       	movw	r30, r18
    250a:	ee 0f       	add	r30, r30
    250c:	ff 1f       	adc	r31, r31
    250e:	ef 52       	subi	r30, 0x2F	; 47
    2510:	fc 4d       	sbci	r31, 0xDC	; 220
    2512:	80 81       	ld	r24, Z
    2514:	91 81       	ldd	r25, Z+1	; 0x01
    2516:	20 9f       	mul	r18, r16
    2518:	d0 01       	movw	r26, r0
    251a:	21 9f       	mul	r18, r17
    251c:	b0 0d       	add	r27, r0
    251e:	30 9f       	mul	r19, r16
    2520:	b0 0d       	add	r27, r0
    2522:	11 24       	eor	r1, r1
    2524:	a8 0f       	add	r26, r24
    2526:	b9 1f       	adc	r27, r25
    2528:	a4 52       	subi	r26, 0x24	; 36
    252a:	bc 4d       	sbci	r27, 0xDC	; 220
    252c:	cc 93       	st	X, r28
    252e:	01 96       	adiw	r24, 0x01	; 1
    2530:	80 83       	st	Z, r24
    2532:	91 83       	std	Z+1, r25	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2534:	4f bf       	out	0x3f, r20	; 63
	cpu_irq_restore(flags);

	if (b_databit_9) {
    2536:	ff 20       	and	r15, r15
    2538:	29 f0       	breq	.+10     	; 0x2544 <udi_cdc_multi_putc+0x7a>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
    253a:	cd 2f       	mov	r28, r29
    253c:	dd 0f       	add	r29, r29
    253e:	dd 0b       	sbc	r29, r29
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
    2540:	f1 2c       	mov	r15, r1
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
    2542:	d2 cf       	rjmp	.-92     	; 0x24e8 <udi_cdc_multi_putc+0x1e>
	}
	return true;
    2544:	21 e0       	ldi	r18, 0x01	; 1
    2546:	30 e0       	ldi	r19, 0x00	; 0
}
    2548:	82 2f       	mov	r24, r18
    254a:	93 2f       	mov	r25, r19
    254c:	df 91       	pop	r29
    254e:	cf 91       	pop	r28
    2550:	1f 91       	pop	r17
    2552:	0f 91       	pop	r16
    2554:	ff 90       	pop	r15
    2556:	08 95       	ret

00002558 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
    2558:	bc 01       	movw	r22, r24
    255a:	80 e0       	ldi	r24, 0x00	; 0
}
    255c:	b6 cf       	rjmp	.-148    	; 0x24ca <udi_cdc_multi_putc>

0000255e <udc_get_eof_conf>:

/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
    255e:	e0 91 df 28 	lds	r30, 0x28DF
    2562:	f0 91 e0 28 	lds	r31, 0x28E0
    2566:	01 90       	ld	r0, Z+
    2568:	f0 81       	ld	r31, Z
    256a:	e0 2d       	mov	r30, r0
    256c:	22 81       	ldd	r18, Z+2	; 0x02
    256e:	33 81       	ldd	r19, Z+3	; 0x03
    2570:	2e 0f       	add	r18, r30
    2572:	3f 1f       	adc	r19, r31
    2574:	82 2f       	mov	r24, r18
    2576:	93 2f       	mov	r25, r19
    2578:	08 95       	ret

0000257a <udc_next_desc_in_iface>:
    257a:	1f 93       	push	r17
    257c:	cf 93       	push	r28
    257e:	df 93       	push	r29
    2580:	ec 01       	movw	r28, r24
    2582:	16 2f       	mov	r17, r22
    2584:	ec df       	rcall	.-40     	; 0x255e <udc_get_eof_conf>
    2586:	28 81       	ld	r18, Y
    2588:	fe 01       	movw	r30, r28
    258a:	e2 0f       	add	r30, r18
    258c:	f1 1d       	adc	r31, r1
    258e:	e8 17       	cp	r30, r24
    2590:	f9 07       	cpc	r31, r25
    2592:	a0 f4       	brcc	.+40     	; 0x25bc <udc_next_desc_in_iface+0x42>
    2594:	21 81       	ldd	r18, Z+1	; 0x01
    2596:	24 30       	cpi	r18, 0x04	; 4
    2598:	a1 f0       	breq	.+40     	; 0x25c2 <udc_next_desc_in_iface+0x48>
    259a:	21 13       	cpse	r18, r17
    259c:	06 c0       	rjmp	.+12     	; 0x25aa <udc_next_desc_in_iface+0x30>
    259e:	16 c0       	rjmp	.+44     	; 0x25cc <udc_next_desc_in_iface+0x52>
    25a0:	21 81       	ldd	r18, Z+1	; 0x01
    25a2:	24 30       	cpi	r18, 0x04	; 4
    25a4:	89 f0       	breq	.+34     	; 0x25c8 <udc_next_desc_in_iface+0x4e>
    25a6:	21 17       	cp	r18, r17
    25a8:	89 f0       	breq	.+34     	; 0x25cc <udc_next_desc_in_iface+0x52>
    25aa:	20 81       	ld	r18, Z
    25ac:	e2 0f       	add	r30, r18
    25ae:	f1 1d       	adc	r31, r1
    25b0:	e8 17       	cp	r30, r24
    25b2:	f9 07       	cpc	r31, r25
    25b4:	a8 f3       	brcs	.-22     	; 0x25a0 <udc_next_desc_in_iface+0x26>
    25b6:	e0 e0       	ldi	r30, 0x00	; 0
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	08 c0       	rjmp	.+16     	; 0x25cc <udc_next_desc_in_iface+0x52>
    25bc:	e0 e0       	ldi	r30, 0x00	; 0
    25be:	f0 e0       	ldi	r31, 0x00	; 0
    25c0:	05 c0       	rjmp	.+10     	; 0x25cc <udc_next_desc_in_iface+0x52>
    25c2:	e0 e0       	ldi	r30, 0x00	; 0
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	02 c0       	rjmp	.+4      	; 0x25cc <udc_next_desc_in_iface+0x52>
    25c8:	e0 e0       	ldi	r30, 0x00	; 0
    25ca:	f0 e0       	ldi	r31, 0x00	; 0
    25cc:	8e 2f       	mov	r24, r30
    25ce:	9f 2f       	mov	r25, r31
    25d0:	df 91       	pop	r29
    25d2:	cf 91       	pop	r28
    25d4:	1f 91       	pop	r17
    25d6:	08 95       	ret

000025d8 <udc_update_iface_desc>:
    25d8:	0f 93       	push	r16
    25da:	1f 93       	push	r17
    25dc:	cf 93       	push	r28
    25de:	df 93       	push	r29
    25e0:	18 2f       	mov	r17, r24
    25e2:	06 2f       	mov	r16, r22
    25e4:	80 91 de 28 	lds	r24, 0x28DE
    25e8:	88 23       	and	r24, r24
    25ea:	69 f1       	breq	.+90     	; 0x2646 <udc_update_iface_desc+0x6e>
    25ec:	e0 91 df 28 	lds	r30, 0x28DF
    25f0:	f0 91 e0 28 	lds	r31, 0x28E0
    25f4:	c0 81       	ld	r28, Z
    25f6:	d1 81       	ldd	r29, Z+1	; 0x01
    25f8:	8c 81       	ldd	r24, Y+4	; 0x04
    25fa:	18 17       	cp	r17, r24
    25fc:	30 f5       	brcc	.+76     	; 0x264a <udc_update_iface_desc+0x72>
    25fe:	c0 93 dc 28 	sts	0x28DC, r28
    2602:	d0 93 dd 28 	sts	0x28DD, r29
    2606:	ab df       	rcall	.-170    	; 0x255e <udc_get_eof_conf>
    2608:	9c 01       	movw	r18, r24
    260a:	c8 17       	cp	r28, r24
    260c:	d9 07       	cpc	r29, r25
    260e:	f8 f4       	brcc	.+62     	; 0x264e <udc_update_iface_desc+0x76>
    2610:	99 81       	ldd	r25, Y+1	; 0x01
    2612:	94 30       	cpi	r25, 0x04	; 4
    2614:	61 f4       	brne	.+24     	; 0x262e <udc_update_iface_desc+0x56>
    2616:	9a 81       	ldd	r25, Y+2	; 0x02
    2618:	91 13       	cpse	r25, r17
    261a:	09 c0       	rjmp	.+18     	; 0x262e <udc_update_iface_desc+0x56>
    261c:	8b 81       	ldd	r24, Y+3	; 0x03
    261e:	80 13       	cpse	r24, r16
    2620:	06 c0       	rjmp	.+12     	; 0x262e <udc_update_iface_desc+0x56>
    2622:	c0 93 dc 28 	sts	0x28DC, r28
    2626:	d0 93 dd 28 	sts	0x28DD, r29
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	11 c0       	rjmp	.+34     	; 0x2650 <udc_update_iface_desc+0x78>
    262e:	98 81       	ld	r25, Y
    2630:	c9 0f       	add	r28, r25
    2632:	d1 1d       	adc	r29, r1
    2634:	c2 17       	cp	r28, r18
    2636:	d3 07       	cpc	r29, r19
    2638:	58 f3       	brcs	.-42     	; 0x2610 <udc_update_iface_desc+0x38>
    263a:	c0 93 dc 28 	sts	0x28DC, r28
    263e:	d0 93 dd 28 	sts	0x28DD, r29
    2642:	80 e0       	ldi	r24, 0x00	; 0
    2644:	05 c0       	rjmp	.+10     	; 0x2650 <udc_update_iface_desc+0x78>
    2646:	80 e0       	ldi	r24, 0x00	; 0
    2648:	03 c0       	rjmp	.+6      	; 0x2650 <udc_update_iface_desc+0x78>
    264a:	80 e0       	ldi	r24, 0x00	; 0
    264c:	01 c0       	rjmp	.+2      	; 0x2650 <udc_update_iface_desc+0x78>
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	df 91       	pop	r29
    2652:	cf 91       	pop	r28
    2654:	1f 91       	pop	r17
    2656:	0f 91       	pop	r16
    2658:	08 95       	ret

0000265a <udc_valid_address>:
    265a:	80 91 29 2a 	lds	r24, 0x2A29
    265e:	8f 77       	andi	r24, 0x7F	; 127
    2660:	0c 94 14 1f 	jmp	0x3e28	; 0x3e28 <udd_set_address>

00002664 <udc_iface_enable>:
    2664:	1f 93       	push	r17
    2666:	cf 93       	push	r28
    2668:	df 93       	push	r29
    266a:	18 2f       	mov	r17, r24
    266c:	b5 df       	rcall	.-150    	; 0x25d8 <udc_update_iface_desc>
    266e:	88 23       	and	r24, r24
    2670:	49 f1       	breq	.+82     	; 0x26c4 <udc_iface_enable+0x60>
    2672:	c0 91 dc 28 	lds	r28, 0x28DC
    2676:	d0 91 dd 28 	lds	r29, 0x28DD
    267a:	65 e0       	ldi	r22, 0x05	; 5
    267c:	ce 01       	movw	r24, r28
    267e:	7d df       	rcall	.-262    	; 0x257a <udc_next_desc_in_iface>
    2680:	ec 01       	movw	r28, r24
    2682:	00 97       	sbiw	r24, 0x00	; 0
    2684:	49 f0       	breq	.+18     	; 0x2698 <udc_iface_enable+0x34>
    2686:	4c 81       	ldd	r20, Y+4	; 0x04
    2688:	5d 81       	ldd	r21, Y+5	; 0x05
    268a:	6b 81       	ldd	r22, Y+3	; 0x03
    268c:	8a 81       	ldd	r24, Y+2	; 0x02
    268e:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <udd_ep_alloc>
    2692:	81 11       	cpse	r24, r1
    2694:	f2 cf       	rjmp	.-28     	; 0x267a <udc_iface_enable+0x16>
    2696:	17 c0       	rjmp	.+46     	; 0x26c6 <udc_iface_enable+0x62>
    2698:	a0 91 df 28 	lds	r26, 0x28DF
    269c:	b0 91 e0 28 	lds	r27, 0x28E0
    26a0:	81 2f       	mov	r24, r17
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	88 0f       	add	r24, r24
    26a6:	99 1f       	adc	r25, r25
    26a8:	12 96       	adiw	r26, 0x02	; 2
    26aa:	ed 91       	ld	r30, X+
    26ac:	fc 91       	ld	r31, X
    26ae:	13 97       	sbiw	r26, 0x03	; 3
    26b0:	e8 0f       	add	r30, r24
    26b2:	f9 1f       	adc	r31, r25
    26b4:	01 90       	ld	r0, Z+
    26b6:	f0 81       	ld	r31, Z
    26b8:	e0 2d       	mov	r30, r0
    26ba:	01 90       	ld	r0, Z+
    26bc:	f0 81       	ld	r31, Z
    26be:	e0 2d       	mov	r30, r0
    26c0:	19 95       	eicall
    26c2:	01 c0       	rjmp	.+2      	; 0x26c6 <udc_iface_enable+0x62>
    26c4:	80 e0       	ldi	r24, 0x00	; 0
    26c6:	df 91       	pop	r29
    26c8:	cf 91       	pop	r28
    26ca:	1f 91       	pop	r17
    26cc:	08 95       	ret

000026ce <udc_iface_disable>:
    26ce:	0f 93       	push	r16
    26d0:	1f 93       	push	r17
    26d2:	cf 93       	push	r28
    26d4:	df 93       	push	r29
    26d6:	c8 2f       	mov	r28, r24
    26d8:	60 e0       	ldi	r22, 0x00	; 0
    26da:	7e df       	rcall	.-260    	; 0x25d8 <udc_update_iface_desc>
    26dc:	88 23       	and	r24, r24
    26de:	89 f1       	breq	.+98     	; 0x2742 <udc_iface_disable+0x74>
    26e0:	a0 91 df 28 	lds	r26, 0x28DF
    26e4:	b0 91 e0 28 	lds	r27, 0x28E0
    26e8:	ec 2f       	mov	r30, r28
    26ea:	f0 e0       	ldi	r31, 0x00	; 0
    26ec:	ee 0f       	add	r30, r30
    26ee:	ff 1f       	adc	r31, r31
    26f0:	12 96       	adiw	r26, 0x02	; 2
    26f2:	2d 91       	ld	r18, X+
    26f4:	3c 91       	ld	r19, X
    26f6:	13 97       	sbiw	r26, 0x03	; 3
    26f8:	e2 0f       	add	r30, r18
    26fa:	f3 1f       	adc	r31, r19
    26fc:	00 81       	ld	r16, Z
    26fe:	11 81       	ldd	r17, Z+1	; 0x01
    2700:	d8 01       	movw	r26, r16
    2702:	16 96       	adiw	r26, 0x06	; 6
    2704:	ed 91       	ld	r30, X+
    2706:	fc 91       	ld	r31, X
    2708:	17 97       	sbiw	r26, 0x07	; 7
    270a:	19 95       	eicall
    270c:	68 2f       	mov	r22, r24
    270e:	8c 2f       	mov	r24, r28
    2710:	63 df       	rcall	.-314    	; 0x25d8 <udc_update_iface_desc>
    2712:	88 23       	and	r24, r24
    2714:	c1 f0       	breq	.+48     	; 0x2746 <udc_iface_disable+0x78>
    2716:	c0 91 dc 28 	lds	r28, 0x28DC
    271a:	d0 91 dd 28 	lds	r29, 0x28DD
    271e:	65 e0       	ldi	r22, 0x05	; 5
    2720:	ce 01       	movw	r24, r28
    2722:	2b df       	rcall	.-426    	; 0x257a <udc_next_desc_in_iface>
    2724:	ec 01       	movw	r28, r24
    2726:	00 97       	sbiw	r24, 0x00	; 0
    2728:	21 f0       	breq	.+8      	; 0x2732 <udc_iface_disable+0x64>
    272a:	8a 81       	ldd	r24, Y+2	; 0x02
    272c:	0e 94 23 20 	call	0x4046	; 0x4046 <udd_ep_free>
    2730:	f6 cf       	rjmp	.-20     	; 0x271e <udc_iface_disable+0x50>
    2732:	d8 01       	movw	r26, r16
    2734:	12 96       	adiw	r26, 0x02	; 2
    2736:	ed 91       	ld	r30, X+
    2738:	fc 91       	ld	r31, X
    273a:	13 97       	sbiw	r26, 0x03	; 3
    273c:	19 95       	eicall
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	03 c0       	rjmp	.+6      	; 0x2748 <udc_iface_disable+0x7a>
    2742:	80 e0       	ldi	r24, 0x00	; 0
    2744:	01 c0       	rjmp	.+2      	; 0x2748 <udc_iface_disable+0x7a>
    2746:	80 e0       	ldi	r24, 0x00	; 0
    2748:	df 91       	pop	r29
    274a:	cf 91       	pop	r28
    274c:	1f 91       	pop	r17
    274e:	0f 91       	pop	r16
    2750:	08 95       	ret

00002752 <udc_start>:
    2752:	0c 94 7e 1e 	jmp	0x3cfc	; 0x3cfc <udd_enable>
    2756:	08 95       	ret

00002758 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
    2758:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    275a:	80 91 de 28 	lds	r24, 0x28DE
    275e:	88 23       	and	r24, r24
    2760:	c1 f0       	breq	.+48     	; 0x2792 <udc_reset+0x3a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2762:	e0 91 df 28 	lds	r30, 0x28DF
    2766:	f0 91 e0 28 	lds	r31, 0x28E0
    276a:	01 90       	ld	r0, Z+
    276c:	f0 81       	ld	r31, Z
    276e:	e0 2d       	mov	r30, r0
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    2770:	84 81       	ldd	r24, Z+4	; 0x04
    2772:	88 23       	and	r24, r24
    2774:	71 f0       	breq	.+28     	; 0x2792 <udc_reset+0x3a>
    2776:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
    2778:	8c 2f       	mov	r24, r28
    277a:	a9 df       	rcall	.-174    	; 0x26ce <udc_iface_disable>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    277c:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    277e:	e0 91 df 28 	lds	r30, 0x28DF
    2782:	f0 91 e0 28 	lds	r31, 0x28E0
    2786:	01 90       	ld	r0, Z+
    2788:	f0 81       	ld	r31, Z
    278a:	e0 2d       	mov	r30, r0
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    278c:	84 81       	ldd	r24, Z+4	; 0x04
    278e:	c8 17       	cp	r28, r24
    2790:	98 f3       	brcs	.-26     	; 0x2778 <udc_reset+0x20>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
    2792:	10 92 de 28 	sts	0x28DE, r1
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	80 93 e1 28 	sts	0x28E1, r24
    279e:	90 93 e2 28 	sts	0x28E2, r25
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
    27a2:	cf 91       	pop	r28
    27a4:	08 95       	ret

000027a6 <udc_sof_notify>:

void udc_sof_notify(void)
{
    27a6:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    27a8:	80 91 de 28 	lds	r24, 0x28DE
    27ac:	88 23       	and	r24, r24
    27ae:	41 f1       	breq	.+80     	; 0x2800 <udc_sof_notify+0x5a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    27b0:	e0 91 df 28 	lds	r30, 0x28DF
    27b4:	f0 91 e0 28 	lds	r31, 0x28E0
    27b8:	a0 81       	ld	r26, Z
    27ba:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    27bc:	14 96       	adiw	r26, 0x04	; 4
    27be:	8c 91       	ld	r24, X
    27c0:	88 23       	and	r24, r24
    27c2:	f1 f0       	breq	.+60     	; 0x2800 <udc_sof_notify+0x5a>
    27c4:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    27c6:	8c 2f       	mov	r24, r28
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	88 0f       	add	r24, r24
    27cc:	99 1f       	adc	r25, r25
    27ce:	02 80       	ldd	r0, Z+2	; 0x02
    27d0:	f3 81       	ldd	r31, Z+3	; 0x03
    27d2:	e0 2d       	mov	r30, r0
    27d4:	e8 0f       	add	r30, r24
    27d6:	f9 1f       	adc	r31, r25
    27d8:	01 90       	ld	r0, Z+
    27da:	f0 81       	ld	r31, Z
    27dc:	e0 2d       	mov	r30, r0
    27de:	00 84       	ldd	r0, Z+8	; 0x08
    27e0:	f1 85       	ldd	r31, Z+9	; 0x09
    27e2:	e0 2d       	mov	r30, r0
    27e4:	30 97       	sbiw	r30, 0x00	; 0
    27e6:	09 f0       	breq	.+2      	; 0x27ea <udc_sof_notify+0x44>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    27e8:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    27ea:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    27ec:	e0 91 df 28 	lds	r30, 0x28DF
    27f0:	f0 91 e0 28 	lds	r31, 0x28E0
    27f4:	a0 81       	ld	r26, Z
    27f6:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    27f8:	14 96       	adiw	r26, 0x04	; 4
    27fa:	8c 91       	ld	r24, X
    27fc:	c8 17       	cp	r28, r24
    27fe:	18 f3       	brcs	.-58     	; 0x27c6 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    2800:	cf 91       	pop	r28
    2802:	08 95       	ret

00002804 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    2804:	ff 92       	push	r15
    2806:	0f 93       	push	r16
    2808:	1f 93       	push	r17
    280a:	cf 93       	push	r28
    280c:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    280e:	10 92 31 2a 	sts	0x2A31, r1
    2812:	10 92 32 2a 	sts	0x2A32, r1
	udd_g_ctrlreq.callback = NULL;
    2816:	10 92 33 2a 	sts	0x2A33, r1
    281a:	10 92 34 2a 	sts	0x2A34, r1
	udd_g_ctrlreq.over_under_run = NULL;
    281e:	10 92 35 2a 	sts	0x2A35, r1
    2822:	10 92 36 2a 	sts	0x2A36, r1

	if (Udd_setup_is_in()) {
    2826:	20 91 27 2a 	lds	r18, 0x2A27
    282a:	22 23       	and	r18, r18
    282c:	0c f0       	brlt	.+2      	; 0x2830 <udc_process_setup+0x2c>
    282e:	43 c2       	rjmp	.+1158   	; 0x2cb6 <udc_process_setup+0x4b2>
		if (udd_g_ctrlreq.req.wLength == 0) {
    2830:	80 91 2d 2a 	lds	r24, 0x2A2D
    2834:	90 91 2e 2a 	lds	r25, 0x2A2E
    2838:	00 97       	sbiw	r24, 0x00	; 0
    283a:	09 f0       	breq	.+2      	; 0x283e <udc_process_setup+0x3a>
    283c:	41 c2       	rjmp	.+1154   	; 0x2cc0 <udc_process_setup+0x4bc>
    283e:	35 c2       	rjmp	.+1130   	; 0x2caa <udc_process_setup+0x4a6>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    2840:	2f 71       	andi	r18, 0x1F	; 31
    2842:	09 f0       	breq	.+2      	; 0x2846 <udc_process_setup+0x42>
    2844:	a3 c0       	rjmp	.+326    	; 0x298c <udc_process_setup+0x188>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    2846:	30 91 28 2a 	lds	r19, 0x2A28
    284a:	36 30       	cpi	r19, 0x06	; 6
    284c:	89 f0       	breq	.+34     	; 0x2870 <udc_process_setup+0x6c>
    284e:	38 30       	cpi	r19, 0x08	; 8
    2850:	09 f4       	brne	.+2      	; 0x2854 <udc_process_setup+0x50>
    2852:	90 c0       	rjmp	.+288    	; 0x2974 <udc_process_setup+0x170>
    2854:	31 11       	cpse	r19, r1
    2856:	9a c0       	rjmp	.+308    	; 0x298c <udc_process_setup+0x188>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    2858:	02 97       	sbiw	r24, 0x02	; 2
    285a:	41 f4       	brne	.+16     	; 0x286c <udc_process_setup+0x68>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    285c:	62 e0       	ldi	r22, 0x02	; 2
    285e:	70 e0       	ldi	r23, 0x00	; 0
    2860:	81 ee       	ldi	r24, 0xE1	; 225
    2862:	98 e2       	ldi	r25, 0x28	; 40
    2864:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <udd_set_setup_payload>
			sizeof(udc_device_status));
	return true;
    2868:	81 e0       	ldi	r24, 0x01	; 1
    286a:	e3 c1       	rjmp	.+966    	; 0x2c32 <udc_process_setup+0x42e>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
    286c:	80 e0       	ldi	r24, 0x00	; 0
    286e:	e1 c1       	rjmp	.+962    	; 0x2c32 <udc_process_setup+0x42e>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    2870:	20 91 29 2a 	lds	r18, 0x2A29
    2874:	30 91 2a 2a 	lds	r19, 0x2A2A
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    2878:	83 2f       	mov	r24, r19
    287a:	99 27       	eor	r25, r25
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    287c:	82 30       	cpi	r24, 0x02	; 2
    287e:	91 05       	cpc	r25, r1
    2880:	81 f0       	breq	.+32     	; 0x28a2 <udc_process_setup+0x9e>
    2882:	83 30       	cpi	r24, 0x03	; 3
    2884:	91 05       	cpc	r25, r1
    2886:	79 f1       	breq	.+94     	; 0x28e6 <udc_process_setup+0xe2>
    2888:	01 97       	sbiw	r24, 0x01	; 1
    288a:	09 f0       	breq	.+2      	; 0x288e <udc_process_setup+0x8a>
    288c:	6b c0       	rjmp	.+214    	; 0x2964 <udc_process_setup+0x160>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    288e:	80 91 22 20 	lds	r24, 0x2022
    2892:	90 91 23 20 	lds	r25, 0x2023
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    2896:	dc 01       	movw	r26, r24
    2898:	6c 91       	ld	r22, X
    289a:	70 e0       	ldi	r23, 0x00	; 0
    289c:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <udd_set_setup_payload>
    28a0:	50 c0       	rjmp	.+160    	; 0x2942 <udc_process_setup+0x13e>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    28a2:	e0 91 22 20 	lds	r30, 0x2022
    28a6:	f0 91 23 20 	lds	r31, 0x2023
    28aa:	81 89       	ldd	r24, Z+17	; 0x11
    28ac:	28 17       	cp	r18, r24
    28ae:	08 f0       	brcs	.+2      	; 0x28b2 <udc_process_setup+0xae>
    28b0:	5b c0       	rjmp	.+182    	; 0x2968 <udc_process_setup+0x164>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    28b2:	c9 01       	movw	r24, r18
    28b4:	99 27       	eor	r25, r25
    28b6:	88 0f       	add	r24, r24
    28b8:	99 1f       	adc	r25, r25
    28ba:	88 0f       	add	r24, r24
    28bc:	99 1f       	adc	r25, r25
    28be:	e0 91 24 20 	lds	r30, 0x2024
    28c2:	f0 91 25 20 	lds	r31, 0x2025
    28c6:	e8 0f       	add	r30, r24
    28c8:	f9 1f       	adc	r31, r25
    28ca:	80 81       	ld	r24, Z
    28cc:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    28ce:	fc 01       	movw	r30, r24
    28d0:	62 81       	ldd	r22, Z+2	; 0x02
    28d2:	73 81       	ldd	r23, Z+3	; 0x03
    28d4:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    28d8:	e0 91 2f 2a 	lds	r30, 0x2A2F
    28dc:	f0 91 30 2a 	lds	r31, 0x2A30
    28e0:	82 e0       	ldi	r24, 0x02	; 2
    28e2:	81 83       	std	Z+1, r24	; 0x01
    28e4:	2e c0       	rjmp	.+92     	; 0x2942 <udc_process_setup+0x13e>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    28e6:	33 27       	eor	r19, r19
    28e8:	21 30       	cpi	r18, 0x01	; 1
    28ea:	31 05       	cpc	r19, r1
    28ec:	81 f0       	breq	.+32     	; 0x290e <udc_process_setup+0x10a>
    28ee:	40 f0       	brcs	.+16     	; 0x2900 <udc_process_setup+0xfc>
    28f0:	22 30       	cpi	r18, 0x02	; 2
    28f2:	31 05       	cpc	r19, r1
    28f4:	09 f4       	brne	.+2      	; 0x28f8 <udc_process_setup+0xf4>
    28f6:	e9 c1       	rjmp	.+978    	; 0x2cca <udc_process_setup+0x4c6>
    28f8:	23 30       	cpi	r18, 0x03	; 3
    28fa:	31 05       	cpc	r19, r1
    28fc:	b9 f5       	brne	.+110    	; 0x296c <udc_process_setup+0x168>
    28fe:	e9 c1       	rjmp	.+978    	; 0x2cd2 <udc_process_setup+0x4ce>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    2900:	64 e0       	ldi	r22, 0x04	; 4
    2902:	70 e0       	ldi	r23, 0x00	; 0
    2904:	84 e8       	ldi	r24, 0x84	; 132
    2906:	90 e2       	ldi	r25, 0x20	; 32
    2908:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <udd_set_setup_payload>
    290c:	1a c0       	rjmp	.+52     	; 0x2942 <udc_process_setup+0x13e>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    290e:	88 e8       	ldi	r24, 0x88	; 136
    2910:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    2912:	29 e0       	ldi	r18, 0x09	; 9
    2914:	38 2f       	mov	r19, r24
    2916:	e4 ea       	ldi	r30, 0xA4	; 164
    2918:	f0 e2       	ldi	r31, 0x20	; 32
    291a:	a8 2f       	mov	r26, r24
    291c:	b9 2f       	mov	r27, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    291e:	8d 91       	ld	r24, X+
    2920:	80 83       	st	Z, r24
    2922:	11 82       	std	Z+1, r1	; 0x01
    2924:	32 96       	adiw	r30, 0x02	; 2
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    2926:	8a 2f       	mov	r24, r26
    2928:	83 1b       	sub	r24, r19
    292a:	82 17       	cp	r24, r18
    292c:	c0 f3       	brcs	.-16     	; 0x291e <udc_process_setup+0x11a>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    292e:	22 0f       	add	r18, r18
    2930:	62 2f       	mov	r22, r18
    2932:	6e 5f       	subi	r22, 0xFE	; 254
    2934:	60 93 a2 20 	sts	0x20A2, r22
		udd_set_setup_payload(
    2938:	70 e0       	ldi	r23, 0x00	; 0
    293a:	82 ea       	ldi	r24, 0xA2	; 162
    293c:	90 e2       	ldi	r25, 0x20	; 32
    293e:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    2942:	80 91 2d 2a 	lds	r24, 0x2A2D
    2946:	90 91 2e 2a 	lds	r25, 0x2A2E
    294a:	20 91 31 2a 	lds	r18, 0x2A31
    294e:	30 91 32 2a 	lds	r19, 0x2A32
    2952:	82 17       	cp	r24, r18
    2954:	93 07       	cpc	r25, r19
    2956:	60 f4       	brcc	.+24     	; 0x2970 <udc_process_setup+0x16c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    2958:	80 93 31 2a 	sts	0x2A31, r24
    295c:	90 93 32 2a 	sts	0x2A32, r25
	}
	return true;
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	67 c1       	rjmp	.+718    	; 0x2c32 <udc_process_setup+0x42e>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	65 c1       	rjmp	.+714    	; 0x2c32 <udc_process_setup+0x42e>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
    2968:	80 e0       	ldi	r24, 0x00	; 0
    296a:	63 c1       	rjmp	.+710    	; 0x2c32 <udc_process_setup+0x42e>
#endif

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
    296c:	80 e0       	ldi	r24, 0x00	; 0
    296e:	61 c1       	rjmp	.+706    	; 0x2c32 <udc_process_setup+0x42e>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
    2970:	81 e0       	ldi	r24, 0x01	; 1
    2972:	5f c1       	rjmp	.+702    	; 0x2c32 <udc_process_setup+0x42e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    2974:	01 97       	sbiw	r24, 0x01	; 1
    2976:	41 f4       	brne	.+16     	; 0x2988 <udc_process_setup+0x184>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    2978:	61 e0       	ldi	r22, 0x01	; 1
    297a:	70 e0       	ldi	r23, 0x00	; 0
    297c:	8e ed       	ldi	r24, 0xDE	; 222
    297e:	98 e2       	ldi	r25, 0x28	; 40
    2980:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <udd_set_setup_payload>
	return true;
    2984:	81 e0       	ldi	r24, 0x01	; 1
    2986:	55 c1       	rjmp	.+682    	; 0x2c32 <udc_process_setup+0x42e>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
    2988:	80 e0       	ldi	r24, 0x00	; 0
    298a:	53 c1       	rjmp	.+678    	; 0x2c32 <udc_process_setup+0x42e>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    298c:	21 30       	cpi	r18, 0x01	; 1
    298e:	09 f0       	breq	.+2      	; 0x2992 <udc_process_setup+0x18e>
    2990:	41 c0       	rjmp	.+130    	; 0x2a14 <udc_process_setup+0x210>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    2992:	30 91 28 2a 	lds	r19, 0x2A28
    2996:	3a 30       	cpi	r19, 0x0A	; 10
    2998:	e9 f5       	brne	.+122    	; 0x2a14 <udc_process_setup+0x210>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    299a:	01 97       	sbiw	r24, 0x01	; 1
    299c:	99 f5       	brne	.+102    	; 0x2a04 <udc_process_setup+0x200>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    299e:	80 91 de 28 	lds	r24, 0x28DE
    29a2:	88 23       	and	r24, r24
    29a4:	89 f1       	breq	.+98     	; 0x2a08 <udc_process_setup+0x204>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    29a6:	c0 91 2b 2a 	lds	r28, 0x2A2B
    29aa:	d0 91 2c 2a 	lds	r29, 0x2A2C
    29ae:	8c 2f       	mov	r24, r28
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    29b0:	00 91 df 28 	lds	r16, 0x28DF
    29b4:	10 91 e0 28 	lds	r17, 0x28E0
    29b8:	d8 01       	movw	r26, r16
    29ba:	ed 91       	ld	r30, X+
    29bc:	fc 91       	ld	r31, X
    29be:	94 81       	ldd	r25, Z+4	; 0x04
    29c0:	c9 17       	cp	r28, r25
    29c2:	20 f5       	brcc	.+72     	; 0x2a0c <udc_process_setup+0x208>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    29c4:	60 e0       	ldi	r22, 0x00	; 0
    29c6:	08 de       	rcall	.-1008   	; 0x25d8 <udc_update_iface_desc>
    29c8:	88 23       	and	r24, r24
    29ca:	11 f1       	breq	.+68     	; 0x2a10 <udc_process_setup+0x20c>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    29cc:	ce 01       	movw	r24, r28
    29ce:	99 27       	eor	r25, r25
    29d0:	88 0f       	add	r24, r24
    29d2:	99 1f       	adc	r25, r25
    29d4:	d8 01       	movw	r26, r16
    29d6:	12 96       	adiw	r26, 0x02	; 2
    29d8:	ed 91       	ld	r30, X+
    29da:	fc 91       	ld	r31, X
    29dc:	13 97       	sbiw	r26, 0x03	; 3
    29de:	e8 0f       	add	r30, r24
    29e0:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    29e2:	01 90       	ld	r0, Z+
    29e4:	f0 81       	ld	r31, Z
    29e6:	e0 2d       	mov	r30, r0
    29e8:	86 81       	ldd	r24, Z+6	; 0x06
    29ea:	97 81       	ldd	r25, Z+7	; 0x07
    29ec:	fc 01       	movw	r30, r24
    29ee:	19 95       	eicall
    29f0:	80 93 e3 28 	sts	0x28E3, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    29f4:	61 e0       	ldi	r22, 0x01	; 1
    29f6:	70 e0       	ldi	r23, 0x00	; 0
    29f8:	83 ee       	ldi	r24, 0xE3	; 227
    29fa:	98 e2       	ldi	r25, 0x28	; 40
    29fc:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <udd_set_setup_payload>
	return true;
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	17 c1       	rjmp	.+558    	; 0x2c32 <udc_process_setup+0x42e>
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
    2a04:	80 e0       	ldi	r24, 0x00	; 0
    2a06:	15 c1       	rjmp	.+554    	; 0x2c32 <udc_process_setup+0x42e>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
    2a08:	80 e0       	ldi	r24, 0x00	; 0
    2a0a:	13 c1       	rjmp	.+550    	; 0x2c32 <udc_process_setup+0x42e>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
    2a0c:	80 e0       	ldi	r24, 0x00	; 0
    2a0e:	11 c1       	rjmp	.+546    	; 0x2c32 <udc_process_setup+0x42e>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
    2a10:	80 e0       	ldi	r24, 0x00	; 0
    2a12:	0f c1       	rjmp	.+542    	; 0x2c32 <udc_process_setup+0x42e>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    2a14:	22 30       	cpi	r18, 0x02	; 2
    2a16:	09 f0       	breq	.+2      	; 0x2a1a <udc_process_setup+0x216>
    2a18:	0e c1       	rjmp	.+540    	; 0x2c36 <udc_process_setup+0x432>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    2a1a:	20 91 28 2a 	lds	r18, 0x2A28
    2a1e:	21 11       	cpse	r18, r1
    2a20:	03 c1       	rjmp	.+518    	; 0x2c28 <udc_process_setup+0x424>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    2a22:	02 97       	sbiw	r24, 0x02	; 2
    2a24:	81 f4       	brne	.+32     	; 0x2a46 <udc_process_setup+0x242>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    2a26:	80 91 2b 2a 	lds	r24, 0x2A2B
    2a2a:	0e 94 56 1f 	call	0x3eac	; 0x3eac <udd_ep_is_halted>
    2a2e:	80 93 e4 28 	sts	0x28E4, r24
    2a32:	10 92 e5 28 	sts	0x28E5, r1
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    2a36:	62 e0       	ldi	r22, 0x02	; 2
    2a38:	70 e0       	ldi	r23, 0x00	; 0
    2a3a:	84 ee       	ldi	r24, 0xE4	; 228
    2a3c:	98 e2       	ldi	r25, 0x28	; 40
    2a3e:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <udd_set_setup_payload>
			sizeof(udc_ep_status));
	return true;
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	f6 c0       	rjmp	.+492    	; 0x2c32 <udc_process_setup+0x42e>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
    2a46:	80 e0       	ldi	r24, 0x00	; 0
    2a48:	f4 c0       	rjmp	.+488    	; 0x2c32 <udc_process_setup+0x42e>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    2a4a:	2f 71       	andi	r18, 0x1F	; 31
    2a4c:	09 f0       	breq	.+2      	; 0x2a50 <udc_process_setup+0x24c>
    2a4e:	93 c0       	rjmp	.+294    	; 0x2b76 <udc_process_setup+0x372>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    2a50:	80 91 28 2a 	lds	r24, 0x2A28
    2a54:	83 30       	cpi	r24, 0x03	; 3
    2a56:	09 f4       	brne	.+2      	; 0x2a5a <udc_process_setup+0x256>
    2a58:	e9 c0       	rjmp	.+466    	; 0x2c2c <udc_process_setup+0x428>
    2a5a:	20 f4       	brcc	.+8      	; 0x2a64 <udc_process_setup+0x260>
    2a5c:	81 30       	cpi	r24, 0x01	; 1
    2a5e:	09 f0       	breq	.+2      	; 0x2a62 <udc_process_setup+0x25e>
    2a60:	8a c0       	rjmp	.+276    	; 0x2b76 <udc_process_setup+0x372>
    2a62:	16 c0       	rjmp	.+44     	; 0x2a90 <udc_process_setup+0x28c>
    2a64:	85 30       	cpi	r24, 0x05	; 5
    2a66:	21 f0       	breq	.+8      	; 0x2a70 <udc_process_setup+0x26c>
    2a68:	89 30       	cpi	r24, 0x09	; 9
    2a6a:	09 f0       	breq	.+2      	; 0x2a6e <udc_process_setup+0x26a>
    2a6c:	84 c0       	rjmp	.+264    	; 0x2b76 <udc_process_setup+0x372>
    2a6e:	2b c0       	rjmp	.+86     	; 0x2ac6 <udc_process_setup+0x2c2>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    2a70:	80 91 2d 2a 	lds	r24, 0x2A2D
    2a74:	90 91 2e 2a 	lds	r25, 0x2A2E
    2a78:	89 2b       	or	r24, r25
    2a7a:	41 f4       	brne	.+16     	; 0x2a8c <udc_process_setup+0x288>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    2a7c:	8d e2       	ldi	r24, 0x2D	; 45
    2a7e:	93 e1       	ldi	r25, 0x13	; 19
    2a80:	80 93 33 2a 	sts	0x2A33, r24
    2a84:	90 93 34 2a 	sts	0x2A34, r25
	return true;
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	d3 c0       	rjmp	.+422    	; 0x2c32 <udc_process_setup+0x42e>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	d1 c0       	rjmp	.+418    	; 0x2c32 <udc_process_setup+0x42e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    2a90:	80 91 2d 2a 	lds	r24, 0x2A2D
    2a94:	90 91 2e 2a 	lds	r25, 0x2A2E
    2a98:	89 2b       	or	r24, r25
    2a9a:	89 f4       	brne	.+34     	; 0x2abe <udc_process_setup+0x2ba>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    2a9c:	80 91 29 2a 	lds	r24, 0x2A29
    2aa0:	90 91 2a 2a 	lds	r25, 0x2A2A
    2aa4:	01 97       	sbiw	r24, 0x01	; 1
    2aa6:	69 f4       	brne	.+26     	; 0x2ac2 <udc_process_setup+0x2be>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    2aa8:	80 91 e1 28 	lds	r24, 0x28E1
    2aac:	90 91 e2 28 	lds	r25, 0x28E2
    2ab0:	8d 7f       	andi	r24, 0xFD	; 253
    2ab2:	80 93 e1 28 	sts	0x28E1, r24
    2ab6:	90 93 e2 28 	sts	0x28E2, r25
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	ba c0       	rjmp	.+372    	; 0x2c32 <udc_process_setup+0x42e>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    2abe:	80 e0       	ldi	r24, 0x00	; 0
    2ac0:	b8 c0       	rjmp	.+368    	; 0x2c32 <udc_process_setup+0x42e>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
    2ac2:	80 e0       	ldi	r24, 0x00	; 0
    2ac4:	b6 c0       	rjmp	.+364    	; 0x2c32 <udc_process_setup+0x42e>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    2ac6:	80 91 2d 2a 	lds	r24, 0x2A2D
    2aca:	90 91 2e 2a 	lds	r25, 0x2A2E
    2ace:	89 2b       	or	r24, r25
    2ad0:	09 f0       	breq	.+2      	; 0x2ad4 <udc_process_setup+0x2d0>
    2ad2:	45 c0       	rjmp	.+138    	; 0x2b5e <udc_process_setup+0x35a>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    2ad4:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <udd_getaddress>
    2ad8:	88 23       	and	r24, r24
    2ada:	09 f4       	brne	.+2      	; 0x2ade <udc_process_setup+0x2da>
    2adc:	42 c0       	rjmp	.+132    	; 0x2b62 <udc_process_setup+0x35e>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    2ade:	20 91 29 2a 	lds	r18, 0x2A29
    2ae2:	30 91 2a 2a 	lds	r19, 0x2A2A
    2ae6:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    2ae8:	e0 91 22 20 	lds	r30, 0x2022
    2aec:	f0 91 23 20 	lds	r31, 0x2023
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    2af0:	81 89       	ldd	r24, Z+17	; 0x11
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	82 17       	cp	r24, r18
    2af6:	93 07       	cpc	r25, r19
    2af8:	b0 f1       	brcs	.+108    	; 0x2b66 <udc_process_setup+0x362>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    2afa:	2e de       	rcall	.-932    	; 0x2758 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    2afc:	80 91 29 2a 	lds	r24, 0x2A29
    2b00:	90 91 2a 2a 	lds	r25, 0x2A2A
    2b04:	80 93 de 28 	sts	0x28DE, r24
	if (udc_num_configuration == 0) {
    2b08:	88 23       	and	r24, r24
    2b0a:	79 f1       	breq	.+94     	; 0x2b6a <udc_process_setup+0x366>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    2b0c:	99 27       	eor	r25, r25
    2b0e:	01 97       	sbiw	r24, 0x01	; 1
    2b10:	88 0f       	add	r24, r24
    2b12:	99 1f       	adc	r25, r25
    2b14:	88 0f       	add	r24, r24
    2b16:	99 1f       	adc	r25, r25
    2b18:	e0 91 24 20 	lds	r30, 0x2024
    2b1c:	f0 91 25 20 	lds	r31, 0x2025
    2b20:	e8 0f       	add	r30, r24
    2b22:	f9 1f       	adc	r31, r25
    2b24:	e0 93 df 28 	sts	0x28DF, r30
    2b28:	f0 93 e0 28 	sts	0x28E0, r31
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2b2c:	01 90       	ld	r0, Z+
    2b2e:	f0 81       	ld	r31, Z
    2b30:	e0 2d       	mov	r30, r0
    2b32:	84 81       	ldd	r24, Z+4	; 0x04
    2b34:	88 23       	and	r24, r24
    2b36:	d9 f0       	breq	.+54     	; 0x2b6e <udc_process_setup+0x36a>
    2b38:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    2b3a:	60 e0       	ldi	r22, 0x00	; 0
    2b3c:	8c 2f       	mov	r24, r28
    2b3e:	92 dd       	rcall	.-1244   	; 0x2664 <udc_iface_enable>
    2b40:	88 23       	and	r24, r24
    2b42:	b9 f0       	breq	.+46     	; 0x2b72 <udc_process_setup+0x36e>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    2b44:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2b46:	e0 91 df 28 	lds	r30, 0x28DF
    2b4a:	f0 91 e0 28 	lds	r31, 0x28E0
    2b4e:	01 90       	ld	r0, Z+
    2b50:	f0 81       	ld	r31, Z
    2b52:	e0 2d       	mov	r30, r0
    2b54:	84 81       	ldd	r24, Z+4	; 0x04
    2b56:	c8 17       	cp	r28, r24
    2b58:	80 f3       	brcs	.-32     	; 0x2b3a <udc_process_setup+0x336>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	6a c0       	rjmp	.+212    	; 0x2c32 <udc_process_setup+0x42e>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
    2b60:	68 c0       	rjmp	.+208    	; 0x2c32 <udc_process_setup+0x42e>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
    2b62:	80 e0       	ldi	r24, 0x00	; 0
    2b64:	66 c0       	rjmp	.+204    	; 0x2c32 <udc_process_setup+0x42e>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
    2b66:	80 e0       	ldi	r24, 0x00	; 0
    2b68:	64 c0       	rjmp	.+200    	; 0x2c32 <udc_process_setup+0x42e>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	62 c0       	rjmp	.+196    	; 0x2c32 <udc_process_setup+0x42e>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
    2b6e:	81 e0       	ldi	r24, 0x01	; 1
    2b70:	60 c0       	rjmp	.+192    	; 0x2c32 <udc_process_setup+0x42e>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
    2b72:	80 e0       	ldi	r24, 0x00	; 0
    2b74:	5e c0       	rjmp	.+188    	; 0x2c32 <udc_process_setup+0x42e>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    2b76:	21 30       	cpi	r18, 0x01	; 1
    2b78:	01 f5       	brne	.+64     	; 0x2bba <udc_process_setup+0x3b6>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    2b7a:	80 91 28 2a 	lds	r24, 0x2A28
    2b7e:	8b 30       	cpi	r24, 0x0B	; 11
    2b80:	e1 f4       	brne	.+56     	; 0x2bba <udc_process_setup+0x3b6>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    2b82:	80 91 2d 2a 	lds	r24, 0x2A2D
    2b86:	90 91 2e 2a 	lds	r25, 0x2A2E
    2b8a:	89 2b       	or	r24, r25
    2b8c:	81 f4       	brne	.+32     	; 0x2bae <udc_process_setup+0x3aa>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    2b8e:	80 91 de 28 	lds	r24, 0x28DE
    2b92:	88 23       	and	r24, r24
    2b94:	71 f0       	breq	.+28     	; 0x2bb2 <udc_process_setup+0x3ae>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    2b96:	c0 91 2b 2a 	lds	r28, 0x2A2B
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    2b9a:	d0 91 29 2a 	lds	r29, 0x2A29

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    2b9e:	8c 2f       	mov	r24, r28
    2ba0:	96 dd       	rcall	.-1236   	; 0x26ce <udc_iface_disable>
    2ba2:	88 23       	and	r24, r24
    2ba4:	41 f0       	breq	.+16     	; 0x2bb6 <udc_process_setup+0x3b2>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    2ba6:	6d 2f       	mov	r22, r29
    2ba8:	8c 2f       	mov	r24, r28
    2baa:	5c dd       	rcall	.-1352   	; 0x2664 <udc_iface_enable>
    2bac:	42 c0       	rjmp	.+132    	; 0x2c32 <udc_process_setup+0x42e>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
    2bae:	80 e0       	ldi	r24, 0x00	; 0
    2bb0:	40 c0       	rjmp	.+128    	; 0x2c32 <udc_process_setup+0x42e>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
    2bb2:	80 e0       	ldi	r24, 0x00	; 0
    2bb4:	3e c0       	rjmp	.+124    	; 0x2c32 <udc_process_setup+0x42e>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
		return false;
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
    2bb8:	3c c0       	rjmp	.+120    	; 0x2c32 <udc_process_setup+0x42e>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    2bba:	22 30       	cpi	r18, 0x02	; 2
    2bbc:	e1 f5       	brne	.+120    	; 0x2c36 <udc_process_setup+0x432>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    2bbe:	80 91 28 2a 	lds	r24, 0x2A28
    2bc2:	81 30       	cpi	r24, 0x01	; 1
    2bc4:	19 f0       	breq	.+6      	; 0x2bcc <udc_process_setup+0x3c8>
    2bc6:	83 30       	cpi	r24, 0x03	; 3
    2bc8:	99 f5       	brne	.+102    	; 0x2c30 <udc_process_setup+0x42c>
    2bca:	15 c0       	rjmp	.+42     	; 0x2bf6 <udc_process_setup+0x3f2>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    2bcc:	80 91 2d 2a 	lds	r24, 0x2A2D
    2bd0:	90 91 2e 2a 	lds	r25, 0x2A2E
    2bd4:	89 2b       	or	r24, r25
    2bd6:	59 f4       	brne	.+22     	; 0x2bee <udc_process_setup+0x3ea>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    2bd8:	80 91 29 2a 	lds	r24, 0x2A29
    2bdc:	90 91 2a 2a 	lds	r25, 0x2A2A
    2be0:	89 2b       	or	r24, r25
    2be2:	39 f4       	brne	.+14     	; 0x2bf2 <udc_process_setup+0x3ee>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    2be4:	80 91 2b 2a 	lds	r24, 0x2A2B
    2be8:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <udd_ep_clear_halt>
    2bec:	22 c0       	rjmp	.+68     	; 0x2c32 <udc_process_setup+0x42e>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    2bee:	80 e0       	ldi	r24, 0x00	; 0
    2bf0:	20 c0       	rjmp	.+64     	; 0x2c32 <udc_process_setup+0x42e>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
    2bf2:	80 e0       	ldi	r24, 0x00	; 0
    2bf4:	1e c0       	rjmp	.+60     	; 0x2c32 <udc_process_setup+0x42e>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    2bf6:	80 91 2d 2a 	lds	r24, 0x2A2D
    2bfa:	90 91 2e 2a 	lds	r25, 0x2A2E
    2bfe:	89 2b       	or	r24, r25
    2c00:	79 f4       	brne	.+30     	; 0x2c20 <udc_process_setup+0x41c>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    2c02:	80 91 29 2a 	lds	r24, 0x2A29
    2c06:	90 91 2a 2a 	lds	r25, 0x2A2A
    2c0a:	89 2b       	or	r24, r25
    2c0c:	59 f4       	brne	.+22     	; 0x2c24 <udc_process_setup+0x420>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    2c0e:	cb e2       	ldi	r28, 0x2B	; 43
    2c10:	da e2       	ldi	r29, 0x2A	; 42
    2c12:	88 81       	ld	r24, Y
    2c14:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    2c18:	88 81       	ld	r24, Y
    2c1a:	0e 94 13 20 	call	0x4026	; 0x4026 <udd_ep_set_halt>
    2c1e:	09 c0       	rjmp	.+18     	; 0x2c32 <udc_process_setup+0x42e>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    2c20:	80 e0       	ldi	r24, 0x00	; 0
    2c22:	07 c0       	rjmp	.+14     	; 0x2c32 <udc_process_setup+0x42e>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
    2c24:	80 e0       	ldi	r24, 0x00	; 0
    2c26:	05 c0       	rjmp	.+10     	; 0x2c32 <udc_process_setup+0x42e>
				break;
			}
		}
#endif
	}
	return false;
    2c28:	80 e0       	ldi	r24, 0x00	; 0
    2c2a:	03 c0       	rjmp	.+6      	; 0x2c32 <udc_process_setup+0x42e>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    2c2c:	80 e0       	ldi	r24, 0x00	; 0
    2c2e:	01 c0       	rjmp	.+2      	; 0x2c32 <udc_process_setup+0x42e>
				break;
			}
		}
#endif
	}
	return false;
    2c30:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    2c32:	81 11       	cpse	r24, r1
    2c34:	3c c0       	rjmp	.+120    	; 0x2cae <udc_process_setup+0x4aa>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    2c36:	80 91 27 2a 	lds	r24, 0x2A27
    2c3a:	8f 71       	andi	r24, 0x1F	; 31
    2c3c:	81 30       	cpi	r24, 0x01	; 1
    2c3e:	c9 f5       	brne	.+114    	; 0x2cb2 <udc_process_setup+0x4ae>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    2c40:	80 91 de 28 	lds	r24, 0x28DE
    2c44:	88 23       	and	r24, r24
    2c46:	49 f1       	breq	.+82     	; 0x2c9a <udc_process_setup+0x496>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    2c48:	00 91 2b 2a 	lds	r16, 0x2A2B
    2c4c:	10 91 2c 2a 	lds	r17, 0x2A2C
    2c50:	f0 2e       	mov	r15, r16
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    2c52:	c0 91 df 28 	lds	r28, 0x28DF
    2c56:	d0 91 e0 28 	lds	r29, 0x28E0
    2c5a:	e8 81       	ld	r30, Y
    2c5c:	f9 81       	ldd	r31, Y+1	; 0x01
    2c5e:	84 81       	ldd	r24, Z+4	; 0x04
    2c60:	08 17       	cp	r16, r24
    2c62:	e8 f4       	brcc	.+58     	; 0x2c9e <udc_process_setup+0x49a>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    2c64:	60 e0       	ldi	r22, 0x00	; 0
    2c66:	80 2f       	mov	r24, r16
    2c68:	b7 dc       	rcall	.-1682   	; 0x25d8 <udc_update_iface_desc>
    2c6a:	88 23       	and	r24, r24
    2c6c:	d1 f0       	breq	.+52     	; 0x2ca2 <udc_process_setup+0x49e>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    2c6e:	11 27       	eor	r17, r17
    2c70:	98 01       	movw	r18, r16
    2c72:	22 0f       	add	r18, r18
    2c74:	33 1f       	adc	r19, r19
    2c76:	ea 81       	ldd	r30, Y+2	; 0x02
    2c78:	fb 81       	ldd	r31, Y+3	; 0x03
    2c7a:	e2 0f       	add	r30, r18
    2c7c:	f3 1f       	adc	r31, r19
    2c7e:	c0 81       	ld	r28, Z
    2c80:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    2c82:	ee 81       	ldd	r30, Y+6	; 0x06
    2c84:	ff 81       	ldd	r31, Y+7	; 0x07
    2c86:	19 95       	eicall
    2c88:	68 2f       	mov	r22, r24
    2c8a:	8f 2d       	mov	r24, r15
    2c8c:	a5 dc       	rcall	.-1718   	; 0x25d8 <udc_update_iface_desc>
    2c8e:	88 23       	and	r24, r24
    2c90:	51 f0       	breq	.+20     	; 0x2ca6 <udc_process_setup+0x4a2>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    2c92:	ec 81       	ldd	r30, Y+4	; 0x04
    2c94:	fd 81       	ldd	r31, Y+5	; 0x05
    2c96:	19 95       	eicall
    2c98:	20 c0       	rjmp	.+64     	; 0x2cda <udc_process_setup+0x4d6>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    2c9a:	80 e0       	ldi	r24, 0x00	; 0
    2c9c:	1e c0       	rjmp	.+60     	; 0x2cda <udc_process_setup+0x4d6>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
    2c9e:	80 e0       	ldi	r24, 0x00	; 0
    2ca0:	1c c0       	rjmp	.+56     	; 0x2cda <udc_process_setup+0x4d6>

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
    2ca2:	80 e0       	ldi	r24, 0x00	; 0
    2ca4:	1a c0       	rjmp	.+52     	; 0x2cda <udc_process_setup+0x4d6>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
		return false;
    2ca6:	80 e0       	ldi	r24, 0x00	; 0
    2ca8:	18 c0       	rjmp	.+48     	; 0x2cda <udc_process_setup+0x4d6>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	16 c0       	rjmp	.+44     	; 0x2cda <udc_process_setup+0x4d6>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	14 c0       	rjmp	.+40     	; 0x2cda <udc_process_setup+0x4d6>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    2cb2:	80 e0       	ldi	r24, 0x00	; 0
    2cb4:	12 c0       	rjmp	.+36     	; 0x2cda <udc_process_setup+0x4d6>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    2cb6:	82 2f       	mov	r24, r18
    2cb8:	80 76       	andi	r24, 0x60	; 96
    2cba:	09 f0       	breq	.+2      	; 0x2cbe <udc_process_setup+0x4ba>
    2cbc:	bc cf       	rjmp	.-136    	; 0x2c36 <udc_process_setup+0x432>
    2cbe:	c5 ce       	rjmp	.-630    	; 0x2a4a <udc_process_setup+0x246>
    2cc0:	32 2f       	mov	r19, r18
    2cc2:	30 76       	andi	r19, 0x60	; 96
    2cc4:	09 f0       	breq	.+2      	; 0x2cc8 <udc_process_setup+0x4c4>
    2cc6:	b7 cf       	rjmp	.-146    	; 0x2c36 <udc_process_setup+0x432>
    2cc8:	bb cd       	rjmp	.-1162   	; 0x2840 <udc_process_setup+0x3c>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    2cca:	2f e0       	ldi	r18, 0x0F	; 15
		str = udc_string_product_name;
    2ccc:	82 e9       	ldi	r24, 0x92	; 146
    2cce:	90 e2       	ldi	r25, 0x20	; 32
    2cd0:	21 ce       	rjmp	.-958    	; 0x2914 <udc_process_setup+0x110>
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    2cd2:	2c e0       	ldi	r18, 0x0C	; 12
		str = udc_get_string_serial_name();
    2cd4:	87 e3       	ldi	r24, 0x37	; 55
    2cd6:	9a e2       	ldi	r25, 0x2A	; 42
    2cd8:	1d ce       	rjmp	.-966    	; 0x2914 <udc_process_setup+0x110>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    2cda:	df 91       	pop	r29
    2cdc:	cf 91       	pop	r28
    2cde:	1f 91       	pop	r17
    2ce0:	0f 91       	pop	r16
    2ce2:	ff 90       	pop	r15
    2ce4:	08 95       	ret

00002ce6 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    2ce6:	43 e0       	ldi	r20, 0x03	; 3
    2ce8:	50 e0       	ldi	r21, 0x00	; 0
    2cea:	61 e0       	ldi	r22, 0x01	; 1
    2cec:	80 ee       	ldi	r24, 0xE0	; 224
    2cee:	97 e0       	ldi	r25, 0x07	; 7
    2cf0:	07 d9       	rcall	.-3570   	; 0x1f00 <ioport_configure_port_pin>
    2cf2:	43 e0       	ldi	r20, 0x03	; 3
    2cf4:	50 e0       	ldi	r21, 0x00	; 0
    2cf6:	62 e0       	ldi	r22, 0x02	; 2
    2cf8:	80 ee       	ldi	r24, 0xE0	; 224
    2cfa:	97 e0       	ldi	r25, 0x07	; 7
    2cfc:	01 d9       	rcall	.-3582   	; 0x1f00 <ioport_configure_port_pin>
    2cfe:	43 e0       	ldi	r20, 0x03	; 3
    2d00:	50 e0       	ldi	r21, 0x00	; 0
    2d02:	60 e1       	ldi	r22, 0x10	; 16
    2d04:	80 e6       	ldi	r24, 0x60	; 96
    2d06:	96 e0       	ldi	r25, 0x06	; 6
    2d08:	fb d8       	rcall	.-3594   	; 0x1f00 <ioport_configure_port_pin>
    2d0a:	41 e0       	ldi	r20, 0x01	; 1
    2d0c:	50 e4       	ldi	r21, 0x40	; 64
    2d0e:	60 e2       	ldi	r22, 0x20	; 32
    2d10:	80 e6       	ldi	r24, 0x60	; 96
    2d12:	96 e0       	ldi	r25, 0x06	; 6
    2d14:	f5 d8       	rcall	.-3606   	; 0x1f00 <ioport_configure_port_pin>
    2d16:	40 e0       	ldi	r20, 0x00	; 0
    2d18:	5b e1       	ldi	r21, 0x1B	; 27
    2d1a:	60 e2       	ldi	r22, 0x20	; 32
    2d1c:	80 e8       	ldi	r24, 0x80	; 128
    2d1e:	96 e0       	ldi	r25, 0x06	; 6
    2d20:	ef d8       	rcall	.-3618   	; 0x1f00 <ioport_configure_port_pin>
    2d22:	40 e0       	ldi	r20, 0x00	; 0
    2d24:	5b e1       	ldi	r21, 0x1B	; 27
    2d26:	62 e0       	ldi	r22, 0x02	; 2
    2d28:	80 ea       	ldi	r24, 0xA0	; 160
    2d2a:	96 e0       	ldi	r25, 0x06	; 6
    2d2c:	e9 d8       	rcall	.-3630   	; 0x1f00 <ioport_configure_port_pin>
    2d2e:	40 e0       	ldi	r20, 0x00	; 0
    2d30:	5b e1       	ldi	r21, 0x1B	; 27
    2d32:	64 e0       	ldi	r22, 0x04	; 4
    2d34:	80 ea       	ldi	r24, 0xA0	; 160
    2d36:	96 e0       	ldi	r25, 0x06	; 6
    2d38:	e3 d8       	rcall	.-3642   	; 0x1f00 <ioport_configure_port_pin>
    2d3a:	43 e0       	ldi	r20, 0x03	; 3
    2d3c:	50 e0       	ldi	r21, 0x00	; 0
    2d3e:	62 e0       	ldi	r22, 0x02	; 2
    2d40:	80 e6       	ldi	r24, 0x60	; 96
    2d42:	96 e0       	ldi	r25, 0x06	; 6
    2d44:	dd d8       	rcall	.-3654   	; 0x1f00 <ioport_configure_port_pin>
    2d46:	43 e0       	ldi	r20, 0x03	; 3
    2d48:	50 e0       	ldi	r21, 0x00	; 0
    2d4a:	68 e0       	ldi	r22, 0x08	; 8
    2d4c:	80 e6       	ldi	r24, 0x60	; 96
    2d4e:	96 e0       	ldi	r25, 0x06	; 6
    2d50:	d7 d8       	rcall	.-3666   	; 0x1f00 <ioport_configure_port_pin>
    2d52:	43 e0       	ldi	r20, 0x03	; 3
    2d54:	50 e0       	ldi	r21, 0x00	; 0
    2d56:	68 e0       	ldi	r22, 0x08	; 8
    2d58:	80 ea       	ldi	r24, 0xA0	; 160
    2d5a:	96 e0       	ldi	r25, 0x06	; 6
    2d5c:	d1 d8       	rcall	.-3678   	; 0x1f00 <ioport_configure_port_pin>
    2d5e:	43 e0       	ldi	r20, 0x03	; 3
    2d60:	50 e0       	ldi	r21, 0x00	; 0
    2d62:	61 e0       	ldi	r22, 0x01	; 1
    2d64:	80 e6       	ldi	r24, 0x60	; 96
    2d66:	96 e0       	ldi	r25, 0x06	; 6
    2d68:	cb d8       	rcall	.-3690   	; 0x1f00 <ioport_configure_port_pin>
    2d6a:	43 e0       	ldi	r20, 0x03	; 3
    2d6c:	50 e0       	ldi	r21, 0x00	; 0
    2d6e:	68 e0       	ldi	r22, 0x08	; 8
    2d70:	80 e0       	ldi	r24, 0x00	; 0
    2d72:	96 e0       	ldi	r25, 0x06	; 6
    2d74:	c5 d8       	rcall	.-3702   	; 0x1f00 <ioport_configure_port_pin>
    2d76:	41 e0       	ldi	r20, 0x01	; 1
    2d78:	50 e0       	ldi	r21, 0x00	; 0
    2d7a:	60 e1       	ldi	r22, 0x10	; 16
    2d7c:	80 e8       	ldi	r24, 0x80	; 128
    2d7e:	96 e0       	ldi	r25, 0x06	; 6
    2d80:	bf d8       	rcall	.-3714   	; 0x1f00 <ioport_configure_port_pin>
    2d82:	43 e0       	ldi	r20, 0x03	; 3
    2d84:	50 e0       	ldi	r21, 0x00	; 0
    2d86:	62 e0       	ldi	r22, 0x02	; 2
    2d88:	80 e6       	ldi	r24, 0x60	; 96
    2d8a:	96 e0       	ldi	r25, 0x06	; 6
    2d8c:	b9 d8       	rcall	.-3726   	; 0x1f00 <ioport_configure_port_pin>
    2d8e:	43 e0       	ldi	r20, 0x03	; 3
    2d90:	50 e0       	ldi	r21, 0x00	; 0
    2d92:	68 e0       	ldi	r22, 0x08	; 8
    2d94:	80 e6       	ldi	r24, 0x60	; 96
    2d96:	96 e0       	ldi	r25, 0x06	; 6
    2d98:	b3 d8       	rcall	.-3738   	; 0x1f00 <ioport_configure_port_pin>
    2d9a:	40 e0       	ldi	r20, 0x00	; 0
    2d9c:	50 e0       	ldi	r21, 0x00	; 0
    2d9e:	64 e0       	ldi	r22, 0x04	; 4
    2da0:	80 e6       	ldi	r24, 0x60	; 96
    2da2:	96 e0       	ldi	r25, 0x06	; 6
    2da4:	ad d8       	rcall	.-3750   	; 0x1f00 <ioport_configure_port_pin>
    2da6:	43 e0       	ldi	r20, 0x03	; 3
    2da8:	50 e0       	ldi	r21, 0x00	; 0
    2daa:	60 e1       	ldi	r22, 0x10	; 16
    2dac:	80 ea       	ldi	r24, 0xA0	; 160
    2dae:	96 e0       	ldi	r25, 0x06	; 6
    2db0:	a7 c8       	rjmp	.-3762   	; 0x1f00 <ioport_configure_port_pin>

00002db2 <adc_set_callback>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2db2:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
    2db4:	f8 94       	cli
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    2db6:	81 15       	cp	r24, r1
    2db8:	32 e0       	ldi	r19, 0x02	; 2
    2dba:	93 07       	cpc	r25, r19
    2dbc:	29 f4       	brne	.+10     	; 0x2dc8 <adc_set_callback+0x16>
		adca_callback = callback;
    2dbe:	60 93 23 2a 	sts	0x2A23, r22
    2dc2:	70 93 24 2a 	sts	0x2A24, r23
    2dc6:	07 c0       	rjmp	.+14     	; 0x2dd6 <adc_set_callback+0x24>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    2dc8:	80 34       	cpi	r24, 0x40	; 64
    2dca:	92 40       	sbci	r25, 0x02	; 2
    2dcc:	21 f4       	brne	.+8      	; 0x2dd6 <adc_set_callback+0x24>
		adcb_callback = callback;
    2dce:	60 93 21 2a 	sts	0x2A21, r22
    2dd2:	70 93 22 2a 	sts	0x2A22, r23
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2dd6:	2f bf       	out	0x3f, r18	; 63
    2dd8:	08 95       	ret

00002dda <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    2dda:	81 15       	cp	r24, r1
    2ddc:	22 e0       	ldi	r18, 0x02	; 2
    2dde:	92 07       	cpc	r25, r18
    2de0:	61 f4       	brne	.+24     	; 0x2dfa <adc_enable_clock+0x20>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    2de2:	80 91 e6 28 	lds	r24, 0x28E6
    2de6:	98 2f       	mov	r25, r24
    2de8:	9f 5f       	subi	r25, 0xFF	; 255
    2dea:	90 93 e6 28 	sts	0x28E6, r25
    2dee:	81 11       	cpse	r24, r1
    2df0:	13 c0       	rjmp	.+38     	; 0x2e18 <adc_enable_clock+0x3e>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2df2:	62 e0       	ldi	r22, 0x02	; 2
    2df4:	81 e0       	ldi	r24, 0x01	; 1
    2df6:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <sysclk_enable_module>
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    2dfa:	80 34       	cpi	r24, 0x40	; 64
    2dfc:	92 40       	sbci	r25, 0x02	; 2
    2dfe:	61 f4       	brne	.+24     	; 0x2e18 <adc_enable_clock+0x3e>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
    2e00:	80 91 e7 28 	lds	r24, 0x28E7
    2e04:	98 2f       	mov	r25, r24
    2e06:	9f 5f       	subi	r25, 0xFF	; 255
    2e08:	90 93 e7 28 	sts	0x28E7, r25
    2e0c:	81 11       	cpse	r24, r1
    2e0e:	04 c0       	rjmp	.+8      	; 0x2e18 <adc_enable_clock+0x3e>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    2e10:	62 e0       	ldi	r22, 0x02	; 2
    2e12:	82 e0       	ldi	r24, 0x02	; 2
    2e14:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <sysclk_enable_module>
    2e18:	08 95       	ret

00002e1a <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    2e1a:	81 15       	cp	r24, r1
    2e1c:	22 e0       	ldi	r18, 0x02	; 2
    2e1e:	92 07       	cpc	r25, r18
    2e20:	59 f4       	brne	.+22     	; 0x2e38 <adc_disable_clock+0x1e>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    2e22:	80 91 e6 28 	lds	r24, 0x28E6
    2e26:	81 50       	subi	r24, 0x01	; 1
    2e28:	80 93 e6 28 	sts	0x28E6, r24
    2e2c:	81 11       	cpse	r24, r1
    2e2e:	12 c0       	rjmp	.+36     	; 0x2e54 <adc_disable_clock+0x3a>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2e30:	62 e0       	ldi	r22, 0x02	; 2
    2e32:	81 e0       	ldi	r24, 0x01	; 1
    2e34:	0c 94 82 0b 	jmp	0x1704	; 0x1704 <sysclk_disable_module>
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    2e38:	80 34       	cpi	r24, 0x40	; 64
    2e3a:	92 40       	sbci	r25, 0x02	; 2
    2e3c:	59 f4       	brne	.+22     	; 0x2e54 <adc_disable_clock+0x3a>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
    2e3e:	80 91 e7 28 	lds	r24, 0x28E7
    2e42:	81 50       	subi	r24, 0x01	; 1
    2e44:	80 93 e7 28 	sts	0x28E7, r24
    2e48:	81 11       	cpse	r24, r1
    2e4a:	04 c0       	rjmp	.+8      	; 0x2e54 <adc_disable_clock+0x3a>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    2e4c:	62 e0       	ldi	r22, 0x02	; 2
    2e4e:	82 e0       	ldi	r24, 0x02	; 2
    2e50:	0c 94 82 0b 	jmp	0x1704	; 0x1704 <sysclk_disable_module>
    2e54:	08 95       	ret

00002e56 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    2e56:	1f 93       	push	r17
    2e58:	cf 93       	push	r28
    2e5a:	df 93       	push	r29
    2e5c:	ec 01       	movw	r28, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2e5e:	1f b7       	in	r17, 0x3f	; 63
	cpu_irq_disable();
    2e60:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    2e62:	bb df       	rcall	.-138    	; 0x2dda <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    2e64:	88 81       	ld	r24, Y
    2e66:	81 60       	ori	r24, 0x01	; 1
    2e68:	88 83       	st	Y, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2e6a:	1f bf       	out	0x3f, r17	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2e6c:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    2e6e:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    2e70:	ec e1       	ldi	r30, 0x1C	; 28
    2e72:	fa e2       	ldi	r31, 0x2A	; 42
    2e74:	90 81       	ld	r25, Z
    2e76:	9f 5f       	subi	r25, 0xFF	; 255
    2e78:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2e7a:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    2e7c:	df 91       	pop	r29
    2e7e:	cf 91       	pop	r28
    2e80:	1f 91       	pop	r17
    2e82:	08 95       	ret

00002e84 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    2e84:	1f 92       	push	r1
    2e86:	0f 92       	push	r0
    2e88:	0f b6       	in	r0, 0x3f	; 63
    2e8a:	0f 92       	push	r0
    2e8c:	11 24       	eor	r1, r1
    2e8e:	0b b6       	in	r0, 0x3b	; 59
    2e90:	0f 92       	push	r0
    2e92:	2f 93       	push	r18
    2e94:	3f 93       	push	r19
    2e96:	4f 93       	push	r20
    2e98:	5f 93       	push	r21
    2e9a:	6f 93       	push	r22
    2e9c:	7f 93       	push	r23
    2e9e:	8f 93       	push	r24
    2ea0:	9f 93       	push	r25
    2ea2:	af 93       	push	r26
    2ea4:	bf 93       	push	r27
    2ea6:	ef 93       	push	r30
    2ea8:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    2eaa:	e0 e0       	ldi	r30, 0x00	; 0
    2eac:	f2 e0       	ldi	r31, 0x02	; 2
    2eae:	44 a1       	ldd	r20, Z+36	; 0x24
    2eb0:	55 a1       	ldd	r21, Z+37	; 0x25
    2eb2:	e0 91 23 2a 	lds	r30, 0x2A23
    2eb6:	f0 91 24 2a 	lds	r31, 0x2A24
    2eba:	61 e0       	ldi	r22, 0x01	; 1
    2ebc:	80 e0       	ldi	r24, 0x00	; 0
    2ebe:	92 e0       	ldi	r25, 0x02	; 2
    2ec0:	19 95       	eicall
}
    2ec2:	ff 91       	pop	r31
    2ec4:	ef 91       	pop	r30
    2ec6:	bf 91       	pop	r27
    2ec8:	af 91       	pop	r26
    2eca:	9f 91       	pop	r25
    2ecc:	8f 91       	pop	r24
    2ece:	7f 91       	pop	r23
    2ed0:	6f 91       	pop	r22
    2ed2:	5f 91       	pop	r21
    2ed4:	4f 91       	pop	r20
    2ed6:	3f 91       	pop	r19
    2ed8:	2f 91       	pop	r18
    2eda:	0f 90       	pop	r0
    2edc:	0b be       	out	0x3b, r0	; 59
    2ede:	0f 90       	pop	r0
    2ee0:	0f be       	out	0x3f, r0	; 63
    2ee2:	0f 90       	pop	r0
    2ee4:	1f 90       	pop	r1
    2ee6:	18 95       	reti

00002ee8 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    2ee8:	1f 92       	push	r1
    2eea:	0f 92       	push	r0
    2eec:	0f b6       	in	r0, 0x3f	; 63
    2eee:	0f 92       	push	r0
    2ef0:	11 24       	eor	r1, r1
    2ef2:	0b b6       	in	r0, 0x3b	; 59
    2ef4:	0f 92       	push	r0
    2ef6:	2f 93       	push	r18
    2ef8:	3f 93       	push	r19
    2efa:	4f 93       	push	r20
    2efc:	5f 93       	push	r21
    2efe:	6f 93       	push	r22
    2f00:	7f 93       	push	r23
    2f02:	8f 93       	push	r24
    2f04:	9f 93       	push	r25
    2f06:	af 93       	push	r26
    2f08:	bf 93       	push	r27
    2f0a:	ef 93       	push	r30
    2f0c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    2f0e:	e0 e0       	ldi	r30, 0x00	; 0
    2f10:	f2 e0       	ldi	r31, 0x02	; 2
    2f12:	44 a5       	ldd	r20, Z+44	; 0x2c
    2f14:	55 a5       	ldd	r21, Z+45	; 0x2d
    2f16:	e0 91 23 2a 	lds	r30, 0x2A23
    2f1a:	f0 91 24 2a 	lds	r31, 0x2A24
    2f1e:	62 e0       	ldi	r22, 0x02	; 2
    2f20:	80 e0       	ldi	r24, 0x00	; 0
    2f22:	92 e0       	ldi	r25, 0x02	; 2
    2f24:	19 95       	eicall
}
    2f26:	ff 91       	pop	r31
    2f28:	ef 91       	pop	r30
    2f2a:	bf 91       	pop	r27
    2f2c:	af 91       	pop	r26
    2f2e:	9f 91       	pop	r25
    2f30:	8f 91       	pop	r24
    2f32:	7f 91       	pop	r23
    2f34:	6f 91       	pop	r22
    2f36:	5f 91       	pop	r21
    2f38:	4f 91       	pop	r20
    2f3a:	3f 91       	pop	r19
    2f3c:	2f 91       	pop	r18
    2f3e:	0f 90       	pop	r0
    2f40:	0b be       	out	0x3b, r0	; 59
    2f42:	0f 90       	pop	r0
    2f44:	0f be       	out	0x3f, r0	; 63
    2f46:	0f 90       	pop	r0
    2f48:	1f 90       	pop	r1
    2f4a:	18 95       	reti

00002f4c <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    2f4c:	1f 92       	push	r1
    2f4e:	0f 92       	push	r0
    2f50:	0f b6       	in	r0, 0x3f	; 63
    2f52:	0f 92       	push	r0
    2f54:	11 24       	eor	r1, r1
    2f56:	0b b6       	in	r0, 0x3b	; 59
    2f58:	0f 92       	push	r0
    2f5a:	2f 93       	push	r18
    2f5c:	3f 93       	push	r19
    2f5e:	4f 93       	push	r20
    2f60:	5f 93       	push	r21
    2f62:	6f 93       	push	r22
    2f64:	7f 93       	push	r23
    2f66:	8f 93       	push	r24
    2f68:	9f 93       	push	r25
    2f6a:	af 93       	push	r26
    2f6c:	bf 93       	push	r27
    2f6e:	ef 93       	push	r30
    2f70:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    2f72:	e0 e0       	ldi	r30, 0x00	; 0
    2f74:	f2 e0       	ldi	r31, 0x02	; 2
    2f76:	44 a9       	ldd	r20, Z+52	; 0x34
    2f78:	55 a9       	ldd	r21, Z+53	; 0x35
    2f7a:	e0 91 23 2a 	lds	r30, 0x2A23
    2f7e:	f0 91 24 2a 	lds	r31, 0x2A24
    2f82:	64 e0       	ldi	r22, 0x04	; 4
    2f84:	80 e0       	ldi	r24, 0x00	; 0
    2f86:	92 e0       	ldi	r25, 0x02	; 2
    2f88:	19 95       	eicall
}
    2f8a:	ff 91       	pop	r31
    2f8c:	ef 91       	pop	r30
    2f8e:	bf 91       	pop	r27
    2f90:	af 91       	pop	r26
    2f92:	9f 91       	pop	r25
    2f94:	8f 91       	pop	r24
    2f96:	7f 91       	pop	r23
    2f98:	6f 91       	pop	r22
    2f9a:	5f 91       	pop	r21
    2f9c:	4f 91       	pop	r20
    2f9e:	3f 91       	pop	r19
    2fa0:	2f 91       	pop	r18
    2fa2:	0f 90       	pop	r0
    2fa4:	0b be       	out	0x3b, r0	; 59
    2fa6:	0f 90       	pop	r0
    2fa8:	0f be       	out	0x3f, r0	; 63
    2faa:	0f 90       	pop	r0
    2fac:	1f 90       	pop	r1
    2fae:	18 95       	reti

00002fb0 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    2fb0:	1f 92       	push	r1
    2fb2:	0f 92       	push	r0
    2fb4:	0f b6       	in	r0, 0x3f	; 63
    2fb6:	0f 92       	push	r0
    2fb8:	11 24       	eor	r1, r1
    2fba:	0b b6       	in	r0, 0x3b	; 59
    2fbc:	0f 92       	push	r0
    2fbe:	2f 93       	push	r18
    2fc0:	3f 93       	push	r19
    2fc2:	4f 93       	push	r20
    2fc4:	5f 93       	push	r21
    2fc6:	6f 93       	push	r22
    2fc8:	7f 93       	push	r23
    2fca:	8f 93       	push	r24
    2fcc:	9f 93       	push	r25
    2fce:	af 93       	push	r26
    2fd0:	bf 93       	push	r27
    2fd2:	ef 93       	push	r30
    2fd4:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    2fd6:	e0 e0       	ldi	r30, 0x00	; 0
    2fd8:	f2 e0       	ldi	r31, 0x02	; 2
    2fda:	44 ad       	ldd	r20, Z+60	; 0x3c
    2fdc:	55 ad       	ldd	r21, Z+61	; 0x3d
    2fde:	e0 91 23 2a 	lds	r30, 0x2A23
    2fe2:	f0 91 24 2a 	lds	r31, 0x2A24
    2fe6:	68 e0       	ldi	r22, 0x08	; 8
    2fe8:	80 e0       	ldi	r24, 0x00	; 0
    2fea:	92 e0       	ldi	r25, 0x02	; 2
    2fec:	19 95       	eicall
}
    2fee:	ff 91       	pop	r31
    2ff0:	ef 91       	pop	r30
    2ff2:	bf 91       	pop	r27
    2ff4:	af 91       	pop	r26
    2ff6:	9f 91       	pop	r25
    2ff8:	8f 91       	pop	r24
    2ffa:	7f 91       	pop	r23
    2ffc:	6f 91       	pop	r22
    2ffe:	5f 91       	pop	r21
    3000:	4f 91       	pop	r20
    3002:	3f 91       	pop	r19
    3004:	2f 91       	pop	r18
    3006:	0f 90       	pop	r0
    3008:	0b be       	out	0x3b, r0	; 59
    300a:	0f 90       	pop	r0
    300c:	0f be       	out	0x3f, r0	; 63
    300e:	0f 90       	pop	r0
    3010:	1f 90       	pop	r1
    3012:	18 95       	reti

00003014 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    3014:	1f 92       	push	r1
    3016:	0f 92       	push	r0
    3018:	0f b6       	in	r0, 0x3f	; 63
    301a:	0f 92       	push	r0
    301c:	11 24       	eor	r1, r1
    301e:	0b b6       	in	r0, 0x3b	; 59
    3020:	0f 92       	push	r0
    3022:	2f 93       	push	r18
    3024:	3f 93       	push	r19
    3026:	4f 93       	push	r20
    3028:	5f 93       	push	r21
    302a:	6f 93       	push	r22
    302c:	7f 93       	push	r23
    302e:	8f 93       	push	r24
    3030:	9f 93       	push	r25
    3032:	af 93       	push	r26
    3034:	bf 93       	push	r27
    3036:	ef 93       	push	r30
    3038:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    303a:	e0 e4       	ldi	r30, 0x40	; 64
    303c:	f2 e0       	ldi	r31, 0x02	; 2
    303e:	44 a1       	ldd	r20, Z+36	; 0x24
    3040:	55 a1       	ldd	r21, Z+37	; 0x25
    3042:	e0 91 21 2a 	lds	r30, 0x2A21
    3046:	f0 91 22 2a 	lds	r31, 0x2A22
    304a:	61 e0       	ldi	r22, 0x01	; 1
    304c:	80 e4       	ldi	r24, 0x40	; 64
    304e:	92 e0       	ldi	r25, 0x02	; 2
    3050:	19 95       	eicall
}
    3052:	ff 91       	pop	r31
    3054:	ef 91       	pop	r30
    3056:	bf 91       	pop	r27
    3058:	af 91       	pop	r26
    305a:	9f 91       	pop	r25
    305c:	8f 91       	pop	r24
    305e:	7f 91       	pop	r23
    3060:	6f 91       	pop	r22
    3062:	5f 91       	pop	r21
    3064:	4f 91       	pop	r20
    3066:	3f 91       	pop	r19
    3068:	2f 91       	pop	r18
    306a:	0f 90       	pop	r0
    306c:	0b be       	out	0x3b, r0	; 59
    306e:	0f 90       	pop	r0
    3070:	0f be       	out	0x3f, r0	; 63
    3072:	0f 90       	pop	r0
    3074:	1f 90       	pop	r1
    3076:	18 95       	reti

00003078 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    3078:	1f 92       	push	r1
    307a:	0f 92       	push	r0
    307c:	0f b6       	in	r0, 0x3f	; 63
    307e:	0f 92       	push	r0
    3080:	11 24       	eor	r1, r1
    3082:	0b b6       	in	r0, 0x3b	; 59
    3084:	0f 92       	push	r0
    3086:	2f 93       	push	r18
    3088:	3f 93       	push	r19
    308a:	4f 93       	push	r20
    308c:	5f 93       	push	r21
    308e:	6f 93       	push	r22
    3090:	7f 93       	push	r23
    3092:	8f 93       	push	r24
    3094:	9f 93       	push	r25
    3096:	af 93       	push	r26
    3098:	bf 93       	push	r27
    309a:	ef 93       	push	r30
    309c:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    309e:	e0 e4       	ldi	r30, 0x40	; 64
    30a0:	f2 e0       	ldi	r31, 0x02	; 2
    30a2:	44 a5       	ldd	r20, Z+44	; 0x2c
    30a4:	55 a5       	ldd	r21, Z+45	; 0x2d
    30a6:	e0 91 21 2a 	lds	r30, 0x2A21
    30aa:	f0 91 22 2a 	lds	r31, 0x2A22
    30ae:	62 e0       	ldi	r22, 0x02	; 2
    30b0:	80 e4       	ldi	r24, 0x40	; 64
    30b2:	92 e0       	ldi	r25, 0x02	; 2
    30b4:	19 95       	eicall
}
    30b6:	ff 91       	pop	r31
    30b8:	ef 91       	pop	r30
    30ba:	bf 91       	pop	r27
    30bc:	af 91       	pop	r26
    30be:	9f 91       	pop	r25
    30c0:	8f 91       	pop	r24
    30c2:	7f 91       	pop	r23
    30c4:	6f 91       	pop	r22
    30c6:	5f 91       	pop	r21
    30c8:	4f 91       	pop	r20
    30ca:	3f 91       	pop	r19
    30cc:	2f 91       	pop	r18
    30ce:	0f 90       	pop	r0
    30d0:	0b be       	out	0x3b, r0	; 59
    30d2:	0f 90       	pop	r0
    30d4:	0f be       	out	0x3f, r0	; 63
    30d6:	0f 90       	pop	r0
    30d8:	1f 90       	pop	r1
    30da:	18 95       	reti

000030dc <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    30dc:	1f 92       	push	r1
    30de:	0f 92       	push	r0
    30e0:	0f b6       	in	r0, 0x3f	; 63
    30e2:	0f 92       	push	r0
    30e4:	11 24       	eor	r1, r1
    30e6:	0b b6       	in	r0, 0x3b	; 59
    30e8:	0f 92       	push	r0
    30ea:	2f 93       	push	r18
    30ec:	3f 93       	push	r19
    30ee:	4f 93       	push	r20
    30f0:	5f 93       	push	r21
    30f2:	6f 93       	push	r22
    30f4:	7f 93       	push	r23
    30f6:	8f 93       	push	r24
    30f8:	9f 93       	push	r25
    30fa:	af 93       	push	r26
    30fc:	bf 93       	push	r27
    30fe:	ef 93       	push	r30
    3100:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    3102:	e0 e4       	ldi	r30, 0x40	; 64
    3104:	f2 e0       	ldi	r31, 0x02	; 2
    3106:	44 a9       	ldd	r20, Z+52	; 0x34
    3108:	55 a9       	ldd	r21, Z+53	; 0x35
    310a:	e0 91 21 2a 	lds	r30, 0x2A21
    310e:	f0 91 22 2a 	lds	r31, 0x2A22
    3112:	64 e0       	ldi	r22, 0x04	; 4
    3114:	80 e4       	ldi	r24, 0x40	; 64
    3116:	92 e0       	ldi	r25, 0x02	; 2
    3118:	19 95       	eicall
}
    311a:	ff 91       	pop	r31
    311c:	ef 91       	pop	r30
    311e:	bf 91       	pop	r27
    3120:	af 91       	pop	r26
    3122:	9f 91       	pop	r25
    3124:	8f 91       	pop	r24
    3126:	7f 91       	pop	r23
    3128:	6f 91       	pop	r22
    312a:	5f 91       	pop	r21
    312c:	4f 91       	pop	r20
    312e:	3f 91       	pop	r19
    3130:	2f 91       	pop	r18
    3132:	0f 90       	pop	r0
    3134:	0b be       	out	0x3b, r0	; 59
    3136:	0f 90       	pop	r0
    3138:	0f be       	out	0x3f, r0	; 63
    313a:	0f 90       	pop	r0
    313c:	1f 90       	pop	r1
    313e:	18 95       	reti

00003140 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    3140:	1f 92       	push	r1
    3142:	0f 92       	push	r0
    3144:	0f b6       	in	r0, 0x3f	; 63
    3146:	0f 92       	push	r0
    3148:	11 24       	eor	r1, r1
    314a:	0b b6       	in	r0, 0x3b	; 59
    314c:	0f 92       	push	r0
    314e:	2f 93       	push	r18
    3150:	3f 93       	push	r19
    3152:	4f 93       	push	r20
    3154:	5f 93       	push	r21
    3156:	6f 93       	push	r22
    3158:	7f 93       	push	r23
    315a:	8f 93       	push	r24
    315c:	9f 93       	push	r25
    315e:	af 93       	push	r26
    3160:	bf 93       	push	r27
    3162:	ef 93       	push	r30
    3164:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    3166:	e0 e4       	ldi	r30, 0x40	; 64
    3168:	f2 e0       	ldi	r31, 0x02	; 2
    316a:	44 ad       	ldd	r20, Z+60	; 0x3c
    316c:	55 ad       	ldd	r21, Z+61	; 0x3d
    316e:	e0 91 21 2a 	lds	r30, 0x2A21
    3172:	f0 91 22 2a 	lds	r31, 0x2A22
    3176:	68 e0       	ldi	r22, 0x08	; 8
    3178:	80 e4       	ldi	r24, 0x40	; 64
    317a:	92 e0       	ldi	r25, 0x02	; 2
    317c:	19 95       	eicall
}
    317e:	ff 91       	pop	r31
    3180:	ef 91       	pop	r30
    3182:	bf 91       	pop	r27
    3184:	af 91       	pop	r26
    3186:	9f 91       	pop	r25
    3188:	8f 91       	pop	r24
    318a:	7f 91       	pop	r23
    318c:	6f 91       	pop	r22
    318e:	5f 91       	pop	r21
    3190:	4f 91       	pop	r20
    3192:	3f 91       	pop	r19
    3194:	2f 91       	pop	r18
    3196:	0f 90       	pop	r0
    3198:	0b be       	out	0x3b, r0	; 59
    319a:	0f 90       	pop	r0
    319c:	0f be       	out	0x3f, r0	; 63
    319e:	0f 90       	pop	r0
    31a0:	1f 90       	pop	r1
    31a2:	18 95       	reti

000031a4 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    31a4:	df 92       	push	r13
    31a6:	ef 92       	push	r14
    31a8:	ff 92       	push	r15
    31aa:	0f 93       	push	r16
    31ac:	1f 93       	push	r17
    31ae:	cf 93       	push	r28
    31b0:	df 93       	push	r29
    31b2:	ec 01       	movw	r28, r24
    31b4:	8b 01       	movw	r16, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    31b6:	c1 15       	cp	r28, r1
    31b8:	82 e0       	ldi	r24, 0x02	; 2
    31ba:	d8 07       	cpc	r29, r24
    31bc:	69 f4       	brne	.+26     	; 0x31d8 <adc_write_configuration+0x34>
    31be:	61 e2       	ldi	r22, 0x21	; 33
    31c0:	70 e0       	ldi	r23, 0x00	; 0
    31c2:	82 e0       	ldi	r24, 0x02	; 2
    31c4:	f6 d0       	rcall	.+492    	; 0x33b2 <nvm_read_byte>
    31c6:	d8 2e       	mov	r13, r24
    31c8:	60 e2       	ldi	r22, 0x20	; 32
    31ca:	70 e0       	ldi	r23, 0x00	; 0
    31cc:	82 e0       	ldi	r24, 0x02	; 2
    31ce:	f1 d0       	rcall	.+482    	; 0x33b2 <nvm_read_byte>

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
		data <<= 8;
    31d0:	fd 2c       	mov	r15, r13
    31d2:	e1 2c       	mov	r14, r1
		data |= nvm_read_production_signature_row(ADCACAL0);
    31d4:	e8 2a       	or	r14, r24
    31d6:	11 c0       	rjmp	.+34     	; 0x31fa <adc_write_configuration+0x56>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    31d8:	c0 34       	cpi	r28, 0x40	; 64
    31da:	e2 e0       	ldi	r30, 0x02	; 2
    31dc:	de 07       	cpc	r29, r30
    31de:	59 f5       	brne	.+86     	; 0x3236 <adc_write_configuration+0x92>
    31e0:	65 e2       	ldi	r22, 0x25	; 37
    31e2:	70 e0       	ldi	r23, 0x00	; 0
    31e4:	82 e0       	ldi	r24, 0x02	; 2
    31e6:	e5 d0       	rcall	.+458    	; 0x33b2 <nvm_read_byte>
    31e8:	f8 2e       	mov	r15, r24
    31ea:	64 e2       	ldi	r22, 0x24	; 36
    31ec:	70 e0       	ldi	r23, 0x00	; 0
    31ee:	82 e0       	ldi	r24, 0x02	; 2
    31f0:	e0 d0       	rcall	.+448    	; 0x33b2 <nvm_read_byte>
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
		data <<= 8;
    31f2:	3f 2d       	mov	r19, r15
    31f4:	20 e0       	ldi	r18, 0x00	; 0
		data |= nvm_read_production_signature_row(ADCBCAL0);
    31f6:	79 01       	movw	r14, r18
    31f8:	e8 2a       	or	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    31fa:	df b6       	in	r13, 0x3f	; 63
	cpu_irq_disable();
    31fc:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    31fe:	ce 01       	movw	r24, r28
    3200:	ec dd       	rcall	.-1064   	; 0x2dda <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    3202:	28 81       	ld	r18, Y

	adc->CTRLA = ADC_FLUSH_bm;
    3204:	82 e0       	ldi	r24, 0x02	; 2
    3206:	88 83       	st	Y, r24
	adc->CAL = cal;
    3208:	ec 86       	std	Y+12, r14	; 0x0c
    320a:	fd 86       	std	Y+13, r15	; 0x0d
	adc->CMP = conf->cmp;
    320c:	f8 01       	movw	r30, r16
    320e:	85 81       	ldd	r24, Z+5	; 0x05
    3210:	96 81       	ldd	r25, Z+6	; 0x06
    3212:	88 8f       	std	Y+24, r24	; 0x18
    3214:	99 8f       	std	Y+25, r25	; 0x19
	adc->REFCTRL = conf->refctrl;
    3216:	82 81       	ldd	r24, Z+2	; 0x02
    3218:	8a 83       	std	Y+2, r24	; 0x02
	adc->PRESCALER = conf->prescaler;
    321a:	84 81       	ldd	r24, Z+4	; 0x04
    321c:	8c 83       	std	Y+4, r24	; 0x04
	adc->EVCTRL = conf->evctrl;
    321e:	83 81       	ldd	r24, Z+3	; 0x03
    3220:	8b 83       	std	Y+3, r24	; 0x03
	adc->CTRLB = conf->ctrlb;
    3222:	81 81       	ldd	r24, Z+1	; 0x01
    3224:	89 83       	std	Y+1, r24	; 0x01
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
	enable = adc->CTRLA & ADC_ENABLE_bm;
    3226:	82 2f       	mov	r24, r18
    3228:	81 70       	andi	r24, 0x01	; 1
	adc->REFCTRL = conf->refctrl;
	adc->PRESCALER = conf->prescaler;
	adc->EVCTRL = conf->evctrl;
	adc->CTRLB = conf->ctrlb;

	adc->CTRLA = enable | conf->ctrla;
    322a:	90 81       	ld	r25, Z
    322c:	89 2b       	or	r24, r25
    322e:	88 83       	st	Y, r24

	adc_disable_clock(adc);
    3230:	ce 01       	movw	r24, r28
    3232:	f3 dd       	rcall	.-1050   	; 0x2e1a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3234:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    3236:	df 91       	pop	r29
    3238:	cf 91       	pop	r28
    323a:	1f 91       	pop	r17
    323c:	0f 91       	pop	r16
    323e:	ff 90       	pop	r15
    3240:	ef 90       	pop	r14
    3242:	df 90       	pop	r13
    3244:	08 95       	ret

00003246 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    3246:	ff 92       	push	r15
    3248:	0f 93       	push	r16
    324a:	1f 93       	push	r17
    324c:	cf 93       	push	r28
    324e:	df 93       	push	r29
    3250:	ec 01       	movw	r28, r24
    3252:	8b 01       	movw	r16, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3254:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    3256:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    3258:	c0 dd       	rcall	.-1152   	; 0x2dda <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    325a:	88 81       	ld	r24, Y
    325c:	80 7c       	andi	r24, 0xC0	; 192
    325e:	f8 01       	movw	r30, r16
    3260:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    3262:	88 8d       	ldd	r24, Y+24	; 0x18
    3264:	99 8d       	ldd	r25, Y+25	; 0x19
    3266:	85 83       	std	Z+5, r24	; 0x05
    3268:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    326a:	8a 81       	ldd	r24, Y+2	; 0x02
    326c:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    326e:	8c 81       	ldd	r24, Y+4	; 0x04
    3270:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    3272:	8b 81       	ldd	r24, Y+3	; 0x03
    3274:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    3276:	89 81       	ldd	r24, Y+1	; 0x01
    3278:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
    327a:	ce 01       	movw	r24, r28
    327c:	ce dd       	rcall	.-1124   	; 0x2e1a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    327e:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    3280:	df 91       	pop	r29
    3282:	cf 91       	pop	r28
    3284:	1f 91       	pop	r17
    3286:	0f 91       	pop	r16
    3288:	ff 90       	pop	r15
    328a:	08 95       	ret

0000328c <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    328c:	cf 92       	push	r12
    328e:	df 92       	push	r13
    3290:	ef 92       	push	r14
    3292:	ff 92       	push	r15
    3294:	0f 93       	push	r16
    3296:	1f 93       	push	r17
    3298:	cf 93       	push	r28
    329a:	df 93       	push	r29
    329c:	7c 01       	movw	r14, r24
    329e:	d6 2e       	mov	r13, r22
    32a0:	8a 01       	movw	r16, r20
		ch_mask >>= 4;
	}

#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    32a2:	86 2f       	mov	r24, r22
    32a4:	83 70       	andi	r24, 0x03	; 3
    32a6:	29 f4       	brne	.+10     	; 0x32b2 <adcch_write_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
    32a8:	96 2f       	mov	r25, r22
    32aa:	96 95       	lsr	r25
    32ac:	96 95       	lsr	r25
	}

#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    32ae:	82 e0       	ldi	r24, 0x02	; 2
    32b0:	02 c0       	rjmp	.+4      	; 0x32b6 <adcch_write_configuration+0x2a>
		ch_mask >>= 4;
	}

#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    32b2:	96 2f       	mov	r25, r22
 */
__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask);

__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    32b4:	80 e0       	ldi	r24, 0x00	; 0
		ch_mask >>= 2;
	}

#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    32b6:	90 ff       	sbrs	r25, 0
		index++;
    32b8:	8f 5f       	subi	r24, 0xFF	; 255
	}

#endif

	return (ADC_CH_tmpfix_t *)(&adc->CH0 + index);
    32ba:	e7 01       	movw	r28, r14
    32bc:	a0 96       	adiw	r28, 0x20	; 32
    32be:	98 e0       	ldi	r25, 0x08	; 8
    32c0:	89 9f       	mul	r24, r25
    32c2:	c0 0d       	add	r28, r0
    32c4:	d1 1d       	adc	r29, r1
    32c6:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    32c8:	cf b6       	in	r12, 0x3f	; 63
	cpu_irq_disable();
    32ca:	f8 94       	cli
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    32cc:	c7 01       	movw	r24, r14
    32ce:	85 dd       	rcall	.-1270   	; 0x2dda <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    32d0:	f8 01       	movw	r30, r16
    32d2:	80 81       	ld	r24, Z
    32d4:	88 83       	st	Y, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    32d6:	82 81       	ldd	r24, Z+2	; 0x02
    32d8:	8a 83       	std	Y+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    32da:	81 81       	ldd	r24, Z+1	; 0x01
    32dc:	89 83       	std	Y+1, r24	; 0x01
#if CONFIG_ADC_VERSION == 2
	if (ch_mask & ADC_CH0) {
    32de:	d0 fe       	sbrs	r13, 0
    32e0:	02 c0       	rjmp	.+4      	; 0x32e6 <adcch_write_configuration+0x5a>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    32e2:	83 81       	ldd	r24, Z+3	; 0x03
    32e4:	8e 83       	std	Y+6, r24	; 0x06
	}
#endif
	adc_disable_clock(adc);
    32e6:	c7 01       	movw	r24, r14
    32e8:	98 dd       	rcall	.-1232   	; 0x2e1a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    32ea:	cf be       	out	0x3f, r12	; 63

	cpu_irq_restore(flags);
}
    32ec:	df 91       	pop	r29
    32ee:	cf 91       	pop	r28
    32f0:	1f 91       	pop	r17
    32f2:	0f 91       	pop	r16
    32f4:	ff 90       	pop	r15
    32f6:	ef 90       	pop	r14
    32f8:	df 90       	pop	r13
    32fa:	cf 90       	pop	r12
    32fc:	08 95       	ret

000032fe <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    32fe:	cf 92       	push	r12
    3300:	df 92       	push	r13
    3302:	ef 92       	push	r14
    3304:	ff 92       	push	r15
    3306:	0f 93       	push	r16
    3308:	1f 93       	push	r17
    330a:	cf 93       	push	r28
    330c:	df 93       	push	r29
    330e:	7c 01       	movw	r14, r24
    3310:	d6 2e       	mov	r13, r22
    3312:	ea 01       	movw	r28, r20
		ch_mask >>= 4;
	}

#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    3314:	86 2f       	mov	r24, r22
    3316:	83 70       	andi	r24, 0x03	; 3
    3318:	29 f4       	brne	.+10     	; 0x3324 <adcch_read_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
    331a:	96 2f       	mov	r25, r22
    331c:	96 95       	lsr	r25
    331e:	96 95       	lsr	r25
	}

#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    3320:	82 e0       	ldi	r24, 0x02	; 2
    3322:	02 c0       	rjmp	.+4      	; 0x3328 <adcch_read_configuration+0x2a>
		ch_mask >>= 4;
	}

#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    3324:	96 2f       	mov	r25, r22
 */
__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask);

__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    3326:	80 e0       	ldi	r24, 0x00	; 0
		ch_mask >>= 2;
	}

#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    3328:	90 ff       	sbrs	r25, 0
		index++;
    332a:	8f 5f       	subi	r24, 0xFF	; 255
	}

#endif

	return (ADC_CH_tmpfix_t *)(&adc->CH0 + index);
    332c:	87 01       	movw	r16, r14
    332e:	00 5e       	subi	r16, 0xE0	; 224
    3330:	1f 4f       	sbci	r17, 0xFF	; 255
    3332:	98 e0       	ldi	r25, 0x08	; 8
    3334:	89 9f       	mul	r24, r25
    3336:	00 0d       	add	r16, r0
    3338:	11 1d       	adc	r17, r1
    333a:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    333c:	cf b6       	in	r12, 0x3f	; 63
	cpu_irq_disable();
    333e:	f8 94       	cli

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    3340:	c7 01       	movw	r24, r14
    3342:	4b dd       	rcall	.-1386   	; 0x2dda <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    3344:	f8 01       	movw	r30, r16
    3346:	80 81       	ld	r24, Z
    3348:	88 83       	st	Y, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    334a:	82 81       	ldd	r24, Z+2	; 0x02
    334c:	8a 83       	std	Y+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    334e:	81 81       	ldd	r24, Z+1	; 0x01
    3350:	89 83       	std	Y+1, r24	; 0x01
#if CONFIG_ADC_VERSION == 2
	if (ch_mask & ADC_CH0) {
    3352:	d0 fe       	sbrs	r13, 0
    3354:	02 c0       	rjmp	.+4      	; 0x335a <adcch_read_configuration+0x5c>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    3356:	86 81       	ldd	r24, Z+6	; 0x06
    3358:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
	adc_disable_clock(adc);
    335a:	c7 01       	movw	r24, r14
    335c:	5e dd       	rcall	.-1348   	; 0x2e1a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    335e:	cf be       	out	0x3f, r12	; 63

	cpu_irq_restore(flags);
}
    3360:	df 91       	pop	r29
    3362:	cf 91       	pop	r28
    3364:	1f 91       	pop	r17
    3366:	0f 91       	pop	r16
    3368:	ff 90       	pop	r15
    336a:	ef 90       	pop	r14
    336c:	df 90       	pop	r13
    336e:	cf 90       	pop	r12
    3370:	08 95       	ret

00003372 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    3372:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    3374:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    3376:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    3378:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    337a:	60 83       	st	Z, r22
	ret                             // Return to caller
    337c:	08 95       	ret

0000337e <nvm_eeprom_read_byte>:
 * \param  addr       EEPROM address, between 0 and EEPROM_SIZE
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t nvm_eeprom_read_byte(eeprom_addr_t addr)
{
    337e:	1f 93       	push	r17
    3380:	cf 93       	push	r28
    3382:	df 93       	push	r29
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3384:	e0 ec       	ldi	r30, 0xC0	; 192
    3386:	f1 e0       	ldi	r31, 0x01	; 1
    3388:	27 85       	ldd	r18, Z+15	; 0x0f
    338a:	22 23       	and	r18, r18
    338c:	ec f3       	brlt	.-6      	; 0x3388 <nvm_eeprom_read_byte+0xa>

	/* Wait until NVM is ready */
	nvm_wait_until_ready();

	/* Set address to read from */
	NVM.ADDR2 = 0x00;
    338e:	c0 ec       	ldi	r28, 0xC0	; 192
    3390:	d1 e0       	ldi	r29, 0x01	; 1
    3392:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (addr >> 8) & 0xFF;
    3394:	99 83       	std	Y+1, r25	; 0x01
	NVM.ADDR0 = addr & 0xFF;
    3396:	88 83       	st	Y, r24
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
    3398:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    339a:	86 e0       	ldi	r24, 0x06	; 6
    339c:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    339e:	61 e0       	ldi	r22, 0x01	; 1
    33a0:	8b ec       	ldi	r24, 0xCB	; 203
    33a2:	91 e0       	ldi	r25, 0x01	; 1
    33a4:	e6 df       	rcall	.-52     	; 0x3372 <ccp_write_io>
	NVM.CMD = old_cmd;
    33a6:	1a 87       	std	Y+10, r17	; 0x0a

	/* Issue EEPROM Read command */
	nvm_issue_command(NVM_CMD_READ_EEPROM_gc);

	return NVM.DATA0;
    33a8:	8c 81       	ldd	r24, Y+4	; 0x04
}
    33aa:	df 91       	pop	r29
    33ac:	cf 91       	pop	r28
    33ae:	1f 91       	pop	r17
    33b0:	08 95       	ret

000033b2 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    33b2:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    33b6:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    33b8:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    33ba:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    33be:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    33c0:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    33c4:	08 95       	ret

000033c6 <rtc_set_time>:
 *
 * \param callback Callback function pointer
 */
void rtc_set_callback(rtc_callback_t callback)
{
	rtc_data.callback = callback;
    33c6:	10 92 20 04 	sts	0x0420, r1
    33ca:	e0 e2       	ldi	r30, 0x20	; 32
    33cc:	f4 e0       	ldi	r31, 0x04	; 4
    33ce:	21 81       	ldd	r18, Z+1	; 0x01
    33d0:	20 fd       	sbrc	r18, 0
    33d2:	fd cf       	rjmp	.-6      	; 0x33ce <rtc_set_time+0x8>
    33d4:	e0 e2       	ldi	r30, 0x20	; 32
    33d6:	f4 e0       	ldi	r31, 0x04	; 4
    33d8:	64 83       	std	Z+4, r22	; 0x04
    33da:	75 83       	std	Z+5, r23	; 0x05
    33dc:	86 83       	std	Z+6, r24	; 0x06
    33de:	97 83       	std	Z+7, r25	; 0x07
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	80 83       	st	Z, r24
    33e4:	08 95       	ret

000033e6 <rtc_get_time>:
    33e6:	0f 93       	push	r16
    33e8:	1f 93       	push	r17
    33ea:	80 e1       	ldi	r24, 0x10	; 16
    33ec:	e0 e2       	ldi	r30, 0x20	; 32
    33ee:	f4 e0       	ldi	r31, 0x04	; 4
    33f0:	81 83       	std	Z+1, r24	; 0x01
    33f2:	81 81       	ldd	r24, Z+1	; 0x01
    33f4:	84 fd       	sbrc	r24, 4
    33f6:	fd cf       	rjmp	.-6      	; 0x33f2 <rtc_get_time+0xc>
    33f8:	e0 e2       	ldi	r30, 0x20	; 32
    33fa:	f4 e0       	ldi	r31, 0x04	; 4
    33fc:	04 81       	ldd	r16, Z+4	; 0x04
    33fe:	15 81       	ldd	r17, Z+5	; 0x05
    3400:	26 81       	ldd	r18, Z+6	; 0x06
    3402:	37 81       	ldd	r19, Z+7	; 0x07
    3404:	60 2f       	mov	r22, r16
    3406:	71 2f       	mov	r23, r17
    3408:	82 2f       	mov	r24, r18
    340a:	93 2f       	mov	r25, r19
    340c:	1f 91       	pop	r17
    340e:	0f 91       	pop	r16
    3410:	08 95       	ret

00003412 <rtc_vbat_system_check>:
 * when main system power is lost.
 *
 * \returns Battery backup system status.
 */
enum vbat_status_code rtc_vbat_system_check(bool first_time_startup)
{
    3412:	cf 93       	push	r28
    3414:	df 93       	push	r29
    3416:	d8 2f       	mov	r29, r24
	enum vbat_status_code vbat_status;
	uint8_t flags = VBAT.STATUS;
    3418:	e0 ef       	ldi	r30, 0xF0	; 240
    341a:	f0 e0       	ldi	r31, 0x00	; 0
    341c:	c1 81       	ldd	r28, Z+1	; 0x01

	/* Ensure the module is clocked to be able to check the registers */
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    341e:	64 e0       	ldi	r22, 0x04	; 4
    3420:	80 e0       	ldi	r24, 0x00	; 0
    3422:	0e 94 76 0b 	call	0x16ec	; 0x16ec <sysclk_enable_module>
	/*
	 * Check if a sufficient voltage was detected on the VBAT input.
	 * The brown-out detector (BBBOD) will be sampled once when the
	 * device starts up and the result is visible as the BBPWR flag.
	 */
	if (flags & VBAT_BBPWR_bm) {
    3426:	cc 23       	and	r28, r28
    3428:	7c f0       	brlt	.+30     	; 0x3448 <rtc_vbat_system_check+0x36>
		/*
		 * We have sufficient power, now we check if a power-on-reset
		 * (BBPOR) was detected on VBAT. This is visible from the BBPORF
		 * flag which is also only updated once when the device starts.
		 */
		if (flags & VBAT_BBPORF_bm) {
    342a:	c0 ff       	sbrs	r28, 0
    342c:	04 c0       	rjmp	.+8      	; 0x3436 <rtc_vbat_system_check+0x24>
			if (first_time_startup) {
    342e:	dd 23       	and	r29, r29
    3430:	69 f0       	breq	.+26     	; 0x344c <rtc_vbat_system_check+0x3a>
				vbat_status = VBAT_STATUS_INIT;
    3432:	82 e0       	ldi	r24, 0x02	; 2
    3434:	10 c0       	rjmp	.+32     	; 0x3456 <rtc_vbat_system_check+0x44>
			} else {
				vbat_status = VBAT_STATUS_BBPOR;
			}
		} else if (flags & VBAT_BBBORF_bm) {
    3436:	c1 fd       	sbrc	r28, 1
    3438:	0b c0       	rjmp	.+22     	; 0x3450 <rtc_vbat_system_check+0x3e>
			vbat_status = VBAT_STATUS_BBBOD;
		} else {
			VBAT.CTRL = VBAT_ACCEN_bm;
    343a:	82 e0       	ldi	r24, 0x02	; 2
    343c:	80 93 f0 00 	sts	0x00F0, r24
			if (flags & VBAT_XOSCFAIL_bm) {
    3440:	c2 ff       	sbrs	r28, 2
    3442:	08 c0       	rjmp	.+16     	; 0x3454 <rtc_vbat_system_check+0x42>
				vbat_status = VBAT_STATUS_XOSCFAIL;
    3444:	85 e0       	ldi	r24, 0x05	; 5
    3446:	07 c0       	rjmp	.+14     	; 0x3456 <rtc_vbat_system_check+0x44>
	 * Check if a sufficient voltage was detected on the VBAT input.
	 * The brown-out detector (BBBOD) will be sampled once when the
	 * device starts up and the result is visible as the BBPWR flag.
	 */
	if (flags & VBAT_BBPWR_bm) {
		vbat_status = VBAT_STATUS_NO_POWER;
    3448:	81 e0       	ldi	r24, 0x01	; 1
    344a:	05 c0       	rjmp	.+10     	; 0x3456 <rtc_vbat_system_check+0x44>
		 */
		if (flags & VBAT_BBPORF_bm) {
			if (first_time_startup) {
				vbat_status = VBAT_STATUS_INIT;
			} else {
				vbat_status = VBAT_STATUS_BBPOR;
    344c:	83 e0       	ldi	r24, 0x03	; 3
    344e:	03 c0       	rjmp	.+6      	; 0x3456 <rtc_vbat_system_check+0x44>
			}
		} else if (flags & VBAT_BBBORF_bm) {
			vbat_status = VBAT_STATUS_BBBOD;
    3450:	84 e0       	ldi	r24, 0x04	; 4
    3452:	01 c0       	rjmp	.+2      	; 0x3456 <rtc_vbat_system_check+0x44>
		} else {
			VBAT.CTRL = VBAT_ACCEN_bm;
			if (flags & VBAT_XOSCFAIL_bm) {
				vbat_status = VBAT_STATUS_XOSCFAIL;
			} else {
				vbat_status = VBAT_STATUS_OK;
    3454:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
	return vbat_status;
}
    3456:	df 91       	pop	r29
    3458:	cf 91       	pop	r28
    345a:	08 95       	ret

0000345c <rtc_init>:
 * \note When the backup system is used, the function \ref
 * rtc_vbat_system_check should be called to determine if a re-initialization
 * must be done.
 */
void rtc_init(void)
{
    345c:	cf 93       	push	r28
    345e:	df 93       	push	r29
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    3460:	64 e0       	ldi	r22, 0x04	; 4
    3462:	80 e0       	ldi	r24, 0x00	; 0
    3464:	0e 94 76 0b 	call	0x16ec	; 0x16ec <sysclk_enable_module>
 * \ref CONFIG_RTC32_CLOCK_1024HZ.
 */
static void vbat_init(void)
{
	// Enable access to VBAT
	VBAT.CTRL |= VBAT_ACCEN_bm;
    3468:	c0 ef       	ldi	r28, 0xF0	; 240
    346a:	d0 e0       	ldi	r29, 0x00	; 0
    346c:	88 81       	ld	r24, Y
    346e:	82 60       	ori	r24, 0x02	; 2
    3470:	88 83       	st	Y, r24

	ccp_write_io((void *)&VBAT.CTRL, VBAT_RESET_bm);
    3472:	61 e0       	ldi	r22, 0x01	; 1
    3474:	80 ef       	ldi	r24, 0xF0	; 240
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	7c df       	rcall	.-264    	; 0x3372 <ccp_write_io>

	VBAT.CTRL |= VBAT_XOSCFDEN_bm;
    347a:	88 81       	ld	r24, Y
    347c:	84 60       	ori	r24, 0x04	; 4
    347e:	88 83       	st	Y, r24
    3480:	80 e0       	ldi	r24, 0x00	; 0
    3482:	90 e0       	ldi	r25, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    3484:	01 96       	adiw	r24, 0x01	; 1
    3486:	80 32       	cpi	r24, 0x20	; 32
    3488:	23 e0       	ldi	r18, 0x03	; 3
    348a:	92 07       	cpc	r25, r18
    348c:	d9 f7       	brne	.-10     	; 0x3484 <rtc_init+0x28>
	/* This delay is needed to give the voltage in the backup system some
	* time to stabilize before we turn on the oscillator. If we do not
	* have this delay we may get a failure detection.
	*/
	delay_us(200);
	VBAT.CTRL |= VBAT_XOSCEN_bm | RTC32_CLOCK;
    348e:	e0 ef       	ldi	r30, 0xF0	; 240
    3490:	f0 e0       	ldi	r31, 0x00	; 0
    3492:	80 81       	ld	r24, Z
    3494:	88 60       	ori	r24, 0x08	; 8
    3496:	80 83       	st	Z, r24
	while (!(VBAT.STATUS & VBAT_XOSCRDY_bm));
    3498:	81 81       	ldd	r24, Z+1	; 0x01
    349a:	83 ff       	sbrs	r24, 3
    349c:	fd cf       	rjmp	.-6      	; 0x3498 <rtc_init+0x3c>
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	// Set up VBAT system and start oscillator
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;
    349e:	10 92 20 04 	sts	0x0420, r1
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    34a2:	e0 e2       	ldi	r30, 0x20	; 32
    34a4:	f4 e0       	ldi	r31, 0x04	; 4
    34a6:	81 81       	ldd	r24, Z+1	; 0x01
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;

	while (rtc_is_busy());
    34a8:	80 fd       	sbrc	r24, 0
    34aa:	fd cf       	rjmp	.-6      	; 0x34a6 <rtc_init+0x4a>

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
    34ac:	e0 e2       	ldi	r30, 0x20	; 32
    34ae:	f4 e0       	ldi	r31, 0x04	; 4
    34b0:	8f ef       	ldi	r24, 0xFF	; 255
    34b2:	9f ef       	ldi	r25, 0xFF	; 255
    34b4:	dc 01       	movw	r26, r24
    34b6:	80 87       	std	Z+8, r24	; 0x08
    34b8:	91 87       	std	Z+9, r25	; 0x09
    34ba:	a2 87       	std	Z+10, r26	; 0x0a
    34bc:	b3 87       	std	Z+11, r27	; 0x0b
	RTC32.CNT = 0;
    34be:	14 82       	std	Z+4, r1	; 0x04
    34c0:	15 82       	std	Z+5, r1	; 0x05
    34c2:	16 82       	std	Z+6, r1	; 0x06
    34c4:	17 82       	std	Z+7, r1	; 0x07
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    34c6:	81 81       	ldd	r24, Z+1	; 0x01

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
	RTC32.CNT = 0;

	while (rtc_is_busy());
    34c8:	80 fd       	sbrc	r24, 0
    34ca:	fd cf       	rjmp	.-6      	; 0x34c6 <rtc_init+0x6a>

	RTC32.INTCTRL = 0;
    34cc:	e0 e2       	ldi	r30, 0x20	; 32
    34ce:	f4 e0       	ldi	r31, 0x04	; 4
    34d0:	12 82       	std	Z+2, r1	; 0x02
	RTC32.CTRL = RTC32_ENABLE_bm;
    34d2:	81 e0       	ldi	r24, 0x01	; 1
    34d4:	80 83       	st	Z, r24
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    34d6:	81 81       	ldd	r24, Z+1	; 0x01

	RTC32.INTCTRL = 0;
	RTC32.CTRL = RTC32_ENABLE_bm;

	// Make sure it's sync'ed before return
	while (rtc_is_busy());
    34d8:	80 fd       	sbrc	r24, 0
    34da:	fd cf       	rjmp	.-6      	; 0x34d6 <rtc_init+0x7a>
}
    34dc:	df 91       	pop	r29
    34de:	cf 91       	pop	r28
    34e0:	08 95       	ret

000034e2 <__vector_11>:
 *
 * Disables the RTC32 interrupts, then calls the alarm callback function if one
 * has been set.
 */
ISR(RTC32_COMP_vect)
{
    34e2:	1f 92       	push	r1
    34e4:	0f 92       	push	r0
    34e6:	0f b6       	in	r0, 0x3f	; 63
    34e8:	0f 92       	push	r0
    34ea:	11 24       	eor	r1, r1
    34ec:	0b b6       	in	r0, 0x3b	; 59
    34ee:	0f 92       	push	r0
    34f0:	2f 93       	push	r18
    34f2:	3f 93       	push	r19
    34f4:	4f 93       	push	r20
    34f6:	5f 93       	push	r21
    34f8:	6f 93       	push	r22
    34fa:	7f 93       	push	r23
    34fc:	8f 93       	push	r24
    34fe:	9f 93       	push	r25
    3500:	af 93       	push	r26
    3502:	bf 93       	push	r27
    3504:	cf 93       	push	r28
    3506:	df 93       	push	r29
    3508:	ef 93       	push	r30
    350a:	ff 93       	push	r31
	RTC32.INTCTRL = 0;
    350c:	e0 e2       	ldi	r30, 0x20	; 32
    350e:	f4 e0       	ldi	r31, 0x04	; 4
    3510:	12 82       	std	Z+2, r1	; 0x02
	if (rtc_data.callback)
    3512:	c0 91 25 2a 	lds	r28, 0x2A25
    3516:	d0 91 26 2a 	lds	r29, 0x2A26
    351a:	20 97       	sbiw	r28, 0x00	; 0
    351c:	19 f0       	breq	.+6      	; 0x3524 <__vector_11+0x42>
		rtc_data.callback(rtc_get_time());
    351e:	63 df       	rcall	.-314    	; 0x33e6 <rtc_get_time>
    3520:	fe 01       	movw	r30, r28
    3522:	19 95       	eicall
}
    3524:	ff 91       	pop	r31
    3526:	ef 91       	pop	r30
    3528:	df 91       	pop	r29
    352a:	cf 91       	pop	r28
    352c:	bf 91       	pop	r27
    352e:	af 91       	pop	r26
    3530:	9f 91       	pop	r25
    3532:	8f 91       	pop	r24
    3534:	7f 91       	pop	r23
    3536:	6f 91       	pop	r22
    3538:	5f 91       	pop	r21
    353a:	4f 91       	pop	r20
    353c:	3f 91       	pop	r19
    353e:	2f 91       	pop	r18
    3540:	0f 90       	pop	r0
    3542:	0b be       	out	0x3b, r0	; 59
    3544:	0f 90       	pop	r0
    3546:	0f be       	out	0x3f, r0	; 63
    3548:	0f 90       	pop	r0
    354a:	1f 90       	pop	r1
    354c:	18 95       	reti

0000354e <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    354e:	cf 92       	push	r12
    3550:	df 92       	push	r13
    3552:	ef 92       	push	r14
    3554:	ff 92       	push	r15
    3556:	0f 93       	push	r16
    3558:	1f 93       	push	r17
    355a:	cf 93       	push	r28
    355c:	df 93       	push	r29
    355e:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
    3560:	d9 01       	movw	r26, r18
    3562:	c8 01       	movw	r24, r16
    3564:	b6 95       	lsr	r27
    3566:	a7 95       	ror	r26
    3568:	97 95       	ror	r25
    356a:	87 95       	ror	r24
    356c:	48 17       	cp	r20, r24
    356e:	59 07       	cpc	r21, r25
    3570:	6a 07       	cpc	r22, r26
    3572:	7b 07       	cpc	r23, r27
    3574:	78 f4       	brcc	.+30     	; 0x3594 <usart_spi_set_baudrate+0x46>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
    3576:	6a 01       	movw	r12, r20
    3578:	7b 01       	movw	r14, r22
    357a:	cc 0c       	add	r12, r12
    357c:	dd 1c       	adc	r13, r13
    357e:	ee 1c       	adc	r14, r14
    3580:	ff 1c       	adc	r15, r15
    3582:	c9 01       	movw	r24, r18
    3584:	b8 01       	movw	r22, r16
    3586:	a7 01       	movw	r20, r14
    3588:	96 01       	movw	r18, r12
    358a:	0e 94 d7 26 	call	0x4dae	; 0x4dae <__udivmodsi4>
    358e:	21 50       	subi	r18, 0x01	; 1
    3590:	31 09       	sbc	r19, r1
    3592:	02 c0       	rjmp	.+4      	; 0x3598 <usart_spi_set_baudrate+0x4a>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
    3594:	20 e0       	ldi	r18, 0x00	; 0
    3596:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
    3598:	83 2f       	mov	r24, r19
    359a:	99 27       	eor	r25, r25
    359c:	8f 70       	andi	r24, 0x0F	; 15
    359e:	99 27       	eor	r25, r25
    35a0:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
    35a2:	2e 83       	std	Y+6, r18	; 0x06
}
    35a4:	df 91       	pop	r29
    35a6:	cf 91       	pop	r28
    35a8:	1f 91       	pop	r17
    35aa:	0f 91       	pop	r16
    35ac:	ff 90       	pop	r15
    35ae:	ef 90       	pop	r14
    35b0:	df 90       	pop	r13
    35b2:	cf 90       	pop	r12
    35b4:	08 95       	ret

000035b6 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    35b6:	0f 93       	push	r16
    35b8:	1f 93       	push	r17
    35ba:	cf 93       	push	r28
    35bc:	df 93       	push	r29
    35be:	ec 01       	movw	r28, r24
    35c0:	8b 01       	movw	r16, r22
 * \brief usart Pointer to an USART module.
 */
static inline void usart_enable_module_clock(USART_t *usart)
{
#ifdef USARTC0
	if ((uintptr_t)usart == (uintptr_t)&USARTC0) {
    35c2:	c0 3a       	cpi	r28, 0xA0	; 160
    35c4:	88 e0       	ldi	r24, 0x08	; 8
    35c6:	d8 07       	cpc	r29, r24
    35c8:	29 f4       	brne	.+10     	; 0x35d4 <usart_init_spi+0x1e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    35ca:	60 e1       	ldi	r22, 0x10	; 16
    35cc:	83 e0       	ldi	r24, 0x03	; 3
    35ce:	0e 94 76 0b 	call	0x16ec	; 0x16ec <sysclk_enable_module>
    35d2:	12 c0       	rjmp	.+36     	; 0x35f8 <usart_init_spi+0x42>
	}
#endif
#ifdef USARTC1
	if ((uintptr_t)usart == (uintptr_t)&USARTC1) {
    35d4:	c0 3b       	cpi	r28, 0xB0	; 176
    35d6:	e8 e0       	ldi	r30, 0x08	; 8
    35d8:	de 07       	cpc	r29, r30
    35da:	29 f4       	brne	.+10     	; 0x35e6 <usart_init_spi+0x30>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    35dc:	60 e2       	ldi	r22, 0x20	; 32
    35de:	83 e0       	ldi	r24, 0x03	; 3
    35e0:	0e 94 76 0b 	call	0x16ec	; 0x16ec <sysclk_enable_module>
    35e4:	12 c0       	rjmp	.+36     	; 0x360a <usart_init_spi+0x54>
	}
#endif
#ifdef USARTD0
	if ((uintptr_t)usart == (uintptr_t)&USARTD0) {
    35e6:	c0 3a       	cpi	r28, 0xA0	; 160
    35e8:	f9 e0       	ldi	r31, 0x09	; 9
    35ea:	df 07       	cpc	r29, r31
    35ec:	29 f4       	brne	.+10     	; 0x35f8 <usart_init_spi+0x42>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    35ee:	60 e1       	ldi	r22, 0x10	; 16
    35f0:	84 e0       	ldi	r24, 0x04	; 4
    35f2:	0e 94 76 0b 	call	0x16ec	; 0x16ec <sysclk_enable_module>
    35f6:	12 c0       	rjmp	.+36     	; 0x361c <usart_init_spi+0x66>
	}
#endif
#ifdef USARTD1
	if ((uintptr_t)usart == (uintptr_t)&USARTD1) {
    35f8:	c0 3b       	cpi	r28, 0xB0	; 176
    35fa:	89 e0       	ldi	r24, 0x09	; 9
    35fc:	d8 07       	cpc	r29, r24
    35fe:	29 f4       	brne	.+10     	; 0x360a <usart_init_spi+0x54>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    3600:	60 e2       	ldi	r22, 0x20	; 32
    3602:	84 e0       	ldi	r24, 0x04	; 4
    3604:	0e 94 76 0b 	call	0x16ec	; 0x16ec <sysclk_enable_module>
    3608:	11 c0       	rjmp	.+34     	; 0x362c <usart_init_spi+0x76>
	}
#endif
#ifdef USARTE0
	if ((uintptr_t)usart == (uintptr_t)&USARTE0) {
    360a:	c0 3a       	cpi	r28, 0xA0	; 160
    360c:	ea e0       	ldi	r30, 0x0A	; 10
    360e:	de 07       	cpc	r29, r30
    3610:	29 f4       	brne	.+10     	; 0x361c <usart_init_spi+0x66>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    3612:	60 e1       	ldi	r22, 0x10	; 16
    3614:	85 e0       	ldi	r24, 0x05	; 5
    3616:	0e 94 76 0b 	call	0x16ec	; 0x16ec <sysclk_enable_module>
    361a:	08 c0       	rjmp	.+16     	; 0x362c <usart_init_spi+0x76>
	if ((uintptr_t)usart == (uintptr_t)&USARTE1) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
	}
#endif
#ifdef USARTF0
	if ((uintptr_t)usart == (uintptr_t)&USARTF0) {
    361c:	c0 3a       	cpi	r28, 0xA0	; 160
    361e:	fb e0       	ldi	r31, 0x0B	; 11
    3620:	df 07       	cpc	r29, r31
    3622:	21 f4       	brne	.+8      	; 0x362c <usart_init_spi+0x76>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    3624:	60 e1       	ldi	r22, 0x10	; 16
    3626:	86 e0       	ldi	r24, 0x06	; 6
    3628:	0e 94 76 0b 	call	0x16ec	; 0x16ec <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    362c:	8d 81       	ldd	r24, Y+5	; 0x05
    362e:	80 6c       	ori	r24, 0xC0	; 192
    3630:	8d 83       	std	Y+5, r24	; 0x05
{
	usart_enable_module_clock(usart);
	usart_set_mode(usart, USART_CMODE_MSPI_gc);
	port_pin_t sck_pin;

	if (opt->spimode == 1 || opt->spimode == 3) {
    3632:	f8 01       	movw	r30, r16
    3634:	84 81       	ldd	r24, Z+4	; 0x04
    3636:	81 30       	cpi	r24, 0x01	; 1
    3638:	11 f0       	breq	.+4      	; 0x363e <usart_init_spi+0x88>
    363a:	83 30       	cpi	r24, 0x03	; 3
    363c:	21 f4       	brne	.+8      	; 0x3646 <usart_init_spi+0x90>
		/** \todo Fix when UCPHA_bm is added to header file. */
		usart->CTRLC |= 0x02;
    363e:	8d 81       	ldd	r24, Y+5	; 0x05
    3640:	82 60       	ori	r24, 0x02	; 2
    3642:	8d 83       	std	Y+5, r24	; 0x05
    3644:	03 c0       	rjmp	.+6      	; 0x364c <usart_init_spi+0x96>
	} else {
		/** \todo Fix when UCPHA_bm is added to header file. */
		usart->CTRLC &= ~0x02;
    3646:	8d 81       	ldd	r24, Y+5	; 0x05
    3648:	8d 7f       	andi	r24, 0xFD	; 253
    364a:	8d 83       	std	Y+5, r24	; 0x05
	}

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	if (opt->spimode == 2 || opt->spimode == 3) {
    364c:	f8 01       	movw	r30, r16
    364e:	84 81       	ldd	r24, Z+4	; 0x04
    3650:	82 50       	subi	r24, 0x02	; 2
    3652:	82 30       	cpi	r24, 0x02	; 2
    3654:	08 f0       	brcs	.+2      	; 0x3658 <usart_init_spi+0xa2>
    3656:	47 c0       	rjmp	.+142    	; 0x36e6 <usart_init_spi+0x130>
#ifdef USARTC0
		if ((uint16_t)usart == (uint16_t)&USARTC0) {
    3658:	c0 3a       	cpi	r28, 0xA0	; 160
    365a:	f8 e0       	ldi	r31, 0x08	; 8
    365c:	df 07       	cpc	r29, r31
    365e:	41 f4       	brne	.+16     	; 0x3670 <usart_init_spi+0xba>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
			ioport_configure_port_pin(ioport_pin_to_port(sck_pin),
    3660:	43 e0       	ldi	r20, 0x03	; 3
    3662:	50 e4       	ldi	r21, 0x40	; 64
    3664:	62 e0       	ldi	r22, 0x02	; 2
    3666:	80 e4       	ldi	r24, 0x40	; 64
    3668:	96 e0       	ldi	r25, 0x06	; 6
    366a:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <ioport_configure_port_pin>
    366e:	18 c0       	rjmp	.+48     	; 0x36a0 <usart_init_spi+0xea>
					IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH |
					IOPORT_INV_ENABLED);
		}
#endif
#ifdef USARTC1
		if ((uint16_t)usart == (uint16_t)&USARTC1) {
    3670:	c0 3b       	cpi	r28, 0xB0	; 176
    3672:	88 e0       	ldi	r24, 0x08	; 8
    3674:	d8 07       	cpc	r29, r24
    3676:	41 f4       	brne	.+16     	; 0x3688 <usart_init_spi+0xd2>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
			ioport_configure_port_pin(ioport_pin_to_port(sck_pin),
    3678:	43 e0       	ldi	r20, 0x03	; 3
    367a:	50 e4       	ldi	r21, 0x40	; 64
    367c:	60 e2       	ldi	r22, 0x20	; 32
    367e:	80 e4       	ldi	r24, 0x40	; 64
    3680:	96 e0       	ldi	r25, 0x06	; 6
    3682:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <ioport_configure_port_pin>
    3686:	18 c0       	rjmp	.+48     	; 0x36b8 <usart_init_spi+0x102>
					IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH |
					IOPORT_INV_ENABLED);
		}
#endif
#ifdef USARTD0
		if ((uint16_t)usart == (uint16_t)&USARTD0) {
    3688:	c0 3a       	cpi	r28, 0xA0	; 160
    368a:	e9 e0       	ldi	r30, 0x09	; 9
    368c:	de 07       	cpc	r29, r30
    368e:	41 f4       	brne	.+16     	; 0x36a0 <usart_init_spi+0xea>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
			ioport_configure_port_pin(ioport_pin_to_port(sck_pin),
    3690:	43 e0       	ldi	r20, 0x03	; 3
    3692:	50 e4       	ldi	r21, 0x40	; 64
    3694:	62 e0       	ldi	r22, 0x02	; 2
    3696:	80 e6       	ldi	r24, 0x60	; 96
    3698:	96 e0       	ldi	r25, 0x06	; 6
    369a:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <ioport_configure_port_pin>
    369e:	18 c0       	rjmp	.+48     	; 0x36d0 <usart_init_spi+0x11a>
					IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH |
					IOPORT_INV_ENABLED);
		}
#endif
#ifdef USARTD1
		if ((uint16_t)usart == (uint16_t)&USARTD1) {
    36a0:	c0 3b       	cpi	r28, 0xB0	; 176
    36a2:	f9 e0       	ldi	r31, 0x09	; 9
    36a4:	df 07       	cpc	r29, r31
    36a6:	41 f4       	brne	.+16     	; 0x36b8 <usart_init_spi+0x102>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
			ioport_configure_port_pin(ioport_pin_to_port(sck_pin),
    36a8:	43 e0       	ldi	r20, 0x03	; 3
    36aa:	50 e4       	ldi	r21, 0x40	; 64
    36ac:	60 e2       	ldi	r22, 0x20	; 32
    36ae:	80 e6       	ldi	r24, 0x60	; 96
    36b0:	96 e0       	ldi	r25, 0x06	; 6
    36b2:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <ioport_configure_port_pin>
    36b6:	17 c0       	rjmp	.+46     	; 0x36e6 <usart_init_spi+0x130>
					IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH |
					IOPORT_INV_ENABLED);
		}
#endif
#ifdef USARTE0
		if ((uint16_t)usart == (uint16_t)&USARTE0) {
    36b8:	c0 3a       	cpi	r28, 0xA0	; 160
    36ba:	8a e0       	ldi	r24, 0x0A	; 10
    36bc:	d8 07       	cpc	r29, r24
    36be:	41 f4       	brne	.+16     	; 0x36d0 <usart_init_spi+0x11a>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
			ioport_configure_port_pin(ioport_pin_to_port(sck_pin),
    36c0:	43 e0       	ldi	r20, 0x03	; 3
    36c2:	50 e4       	ldi	r21, 0x40	; 64
    36c4:	62 e0       	ldi	r22, 0x02	; 2
    36c6:	80 e8       	ldi	r24, 0x80	; 128
    36c8:	96 e0       	ldi	r25, 0x06	; 6
    36ca:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <ioport_configure_port_pin>
    36ce:	0b c0       	rjmp	.+22     	; 0x36e6 <usart_init_spi+0x130>
					IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH |
					IOPORT_INV_ENABLED);
		}
#endif
#ifdef USARTF0
		if ((uint16_t)usart == (uint16_t)&USARTF0) {
    36d0:	c0 3a       	cpi	r28, 0xA0	; 160
    36d2:	eb e0       	ldi	r30, 0x0B	; 11
    36d4:	de 07       	cpc	r29, r30
    36d6:	39 f4       	brne	.+14     	; 0x36e6 <usart_init_spi+0x130>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
			ioport_configure_port_pin(ioport_pin_to_port(sck_pin),
    36d8:	43 e0       	ldi	r20, 0x03	; 3
    36da:	50 e4       	ldi	r21, 0x40	; 64
    36dc:	62 e0       	ldi	r22, 0x02	; 2
    36de:	80 ea       	ldi	r24, 0xA0	; 160
    36e0:	96 e0       	ldi	r25, 0x06	; 6
    36e2:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <ioport_configure_port_pin>
					IOPORT_INV_ENABLED);
		}
#endif
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    36e6:	f8 01       	movw	r30, r16
    36e8:	40 81       	ld	r20, Z
    36ea:	51 81       	ldd	r21, Z+1	; 0x01
    36ec:	62 81       	ldd	r22, Z+2	; 0x02
    36ee:	73 81       	ldd	r23, Z+3	; 0x03
    36f0:	00 e0       	ldi	r16, 0x00	; 0
    36f2:	16 e3       	ldi	r17, 0x36	; 54
    36f4:	2e e6       	ldi	r18, 0x6E	; 110
    36f6:	31 e0       	ldi	r19, 0x01	; 1
    36f8:	ce 01       	movw	r24, r28
    36fa:	29 df       	rcall	.-430    	; 0x354e <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    36fc:	8c 81       	ldd	r24, Y+4	; 0x04
    36fe:	88 60       	ori	r24, 0x08	; 8
    3700:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    3702:	8c 81       	ldd	r24, Y+4	; 0x04
    3704:	80 61       	ori	r24, 0x10	; 16
    3706:	8c 83       	std	Y+4, r24	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    3708:	df 91       	pop	r29
    370a:	cf 91       	pop	r28
    370c:	1f 91       	pop	r17
    370e:	0f 91       	pop	r16
    3710:	08 95       	ret

00003712 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    3712:	81 11       	cpse	r24, r1
    3714:	18 c0       	rjmp	.+48     	; 0x3746 <udd_sleep_mode+0x34>
    3716:	90 91 4c 29 	lds	r25, 0x294C
    371a:	99 23       	and	r25, r25
    371c:	89 f0       	breq	.+34     	; 0x3740 <udd_sleep_mode+0x2e>
    371e:	9f b7       	in	r25, 0x3f	; 63
    3720:	f8 94       	cli
    3722:	ec e1       	ldi	r30, 0x1C	; 28
    3724:	fa e2       	ldi	r31, 0x2A	; 42
    3726:	20 81       	ld	r18, Z
    3728:	21 50       	subi	r18, 0x01	; 1
    372a:	20 83       	st	Z, r18
    372c:	9f bf       	out	0x3f, r25	; 63
    372e:	08 c0       	rjmp	.+16     	; 0x3740 <udd_sleep_mode+0x2e>
    3730:	9f b7       	in	r25, 0x3f	; 63
    3732:	f8 94       	cli
    3734:	ec e1       	ldi	r30, 0x1C	; 28
    3736:	fa e2       	ldi	r31, 0x2A	; 42
    3738:	20 81       	ld	r18, Z
    373a:	2f 5f       	subi	r18, 0xFF	; 255
    373c:	20 83       	st	Z, r18
    373e:	9f bf       	out	0x3f, r25	; 63
    3740:	80 93 4c 29 	sts	0x294C, r24
    3744:	08 95       	ret
    3746:	90 91 4c 29 	lds	r25, 0x294C
    374a:	99 23       	and	r25, r25
    374c:	89 f3       	breq	.-30     	; 0x3730 <udd_sleep_mode+0x1e>
    374e:	f8 cf       	rjmp	.-16     	; 0x3740 <udd_sleep_mode+0x2e>

00003750 <udd_ep_get_ctrl>:
    3750:	28 2f       	mov	r18, r24
    3752:	2f 70       	andi	r18, 0x0F	; 15
    3754:	30 e0       	ldi	r19, 0x00	; 0
    3756:	22 0f       	add	r18, r18
    3758:	33 1f       	adc	r19, r19
    375a:	99 27       	eor	r25, r25
    375c:	87 fd       	sbrc	r24, 7
    375e:	90 95       	com	r25
    3760:	88 27       	eor	r24, r24
    3762:	99 0f       	add	r25, r25
    3764:	88 1f       	adc	r24, r24
    3766:	99 27       	eor	r25, r25
    3768:	28 0f       	add	r18, r24
    376a:	39 1f       	adc	r19, r25
    376c:	22 0f       	add	r18, r18
    376e:	33 1f       	adc	r19, r19
    3770:	22 0f       	add	r18, r18
    3772:	33 1f       	adc	r19, r19
    3774:	22 0f       	add	r18, r18
    3776:	33 1f       	adc	r19, r19
    3778:	2c 50       	subi	r18, 0x0C	; 12
    377a:	37 4d       	sbci	r19, 0xD7	; 215
    377c:	82 2f       	mov	r24, r18
    377e:	93 2f       	mov	r25, r19
    3780:	08 95       	ret

00003782 <udd_ep_init>:
    3782:	cf 93       	push	r28
    3784:	df 93       	push	r29
    3786:	63 70       	andi	r22, 0x03	; 3
    3788:	61 30       	cpi	r22, 0x01	; 1
    378a:	11 f0       	breq	.+4      	; 0x3790 <udd_ep_init+0xe>
    378c:	28 f0       	brcs	.+10     	; 0x3798 <udd_ep_init+0x16>
    378e:	02 c0       	rjmp	.+4      	; 0x3794 <udd_ep_init+0x12>
    3790:	d0 ec       	ldi	r29, 0xC0	; 192
    3792:	03 c0       	rjmp	.+6      	; 0x379a <udd_ep_init+0x18>
    3794:	d0 e8       	ldi	r29, 0x80	; 128
    3796:	01 c0       	rjmp	.+2      	; 0x379a <udd_ep_init+0x18>
    3798:	d0 e4       	ldi	r29, 0x40	; 64
    379a:	40 38       	cpi	r20, 0x80	; 128
    379c:	51 05       	cpc	r21, r1
    379e:	e1 f0       	breq	.+56     	; 0x37d8 <udd_ep_init+0x56>
    37a0:	50 f4       	brcc	.+20     	; 0x37b6 <udd_ep_init+0x34>
    37a2:	40 32       	cpi	r20, 0x20	; 32
    37a4:	51 05       	cpc	r21, r1
    37a6:	a1 f0       	breq	.+40     	; 0x37d0 <udd_ep_init+0x4e>
    37a8:	40 34       	cpi	r20, 0x40	; 64
    37aa:	51 05       	cpc	r21, r1
    37ac:	99 f0       	breq	.+38     	; 0x37d4 <udd_ep_init+0x52>
    37ae:	40 31       	cpi	r20, 0x10	; 16
    37b0:	51 05       	cpc	r21, r1
    37b2:	61 f4       	brne	.+24     	; 0x37cc <udd_ep_init+0x4a>
    37b4:	19 c0       	rjmp	.+50     	; 0x37e8 <udd_ep_init+0x66>
    37b6:	41 15       	cp	r20, r1
    37b8:	92 e0       	ldi	r25, 0x02	; 2
    37ba:	59 07       	cpc	r21, r25
    37bc:	89 f0       	breq	.+34     	; 0x37e0 <udd_ep_init+0x5e>
    37be:	4f 3f       	cpi	r20, 0xFF	; 255
    37c0:	93 e0       	ldi	r25, 0x03	; 3
    37c2:	59 07       	cpc	r21, r25
    37c4:	79 f0       	breq	.+30     	; 0x37e4 <udd_ep_init+0x62>
    37c6:	41 15       	cp	r20, r1
    37c8:	51 40       	sbci	r21, 0x01	; 1
    37ca:	41 f0       	breq	.+16     	; 0x37dc <udd_ep_init+0x5a>
    37cc:	c0 e0       	ldi	r28, 0x00	; 0
    37ce:	0d c0       	rjmp	.+26     	; 0x37ea <udd_ep_init+0x68>
    37d0:	c2 e0       	ldi	r28, 0x02	; 2
    37d2:	0b c0       	rjmp	.+22     	; 0x37ea <udd_ep_init+0x68>
    37d4:	c3 e0       	ldi	r28, 0x03	; 3
    37d6:	09 c0       	rjmp	.+18     	; 0x37ea <udd_ep_init+0x68>
    37d8:	c4 e0       	ldi	r28, 0x04	; 4
    37da:	07 c0       	rjmp	.+14     	; 0x37ea <udd_ep_init+0x68>
    37dc:	c5 e0       	ldi	r28, 0x05	; 5
    37de:	05 c0       	rjmp	.+10     	; 0x37ea <udd_ep_init+0x68>
    37e0:	c6 e0       	ldi	r28, 0x06	; 6
    37e2:	03 c0       	rjmp	.+6      	; 0x37ea <udd_ep_init+0x68>
    37e4:	c7 e0       	ldi	r28, 0x07	; 7
    37e6:	01 c0       	rjmp	.+2      	; 0x37ea <udd_ep_init+0x68>
    37e8:	c1 e0       	ldi	r28, 0x01	; 1
    37ea:	b2 df       	rcall	.-156    	; 0x3750 <udd_ep_get_ctrl>
    37ec:	fc 01       	movw	r30, r24
    37ee:	11 82       	std	Z+1, r1	; 0x01
    37f0:	86 e0       	ldi	r24, 0x06	; 6
    37f2:	80 83       	st	Z, r24
    37f4:	cd 2b       	or	r28, r29
    37f6:	c1 83       	std	Z+1, r28	; 0x01
    37f8:	df 91       	pop	r29
    37fa:	cf 91       	pop	r28
    37fc:	08 95       	ret

000037fe <udd_ctrl_init>:
    37fe:	0f 93       	push	r16
    3800:	e8 ec       	ldi	r30, 0xC8	; 200
    3802:	f4 e0       	ldi	r31, 0x04	; 4
    3804:	80 81       	ld	r24, Z
    3806:	8f 7d       	andi	r24, 0xDF	; 223
    3808:	80 83       	st	Z, r24
    380a:	80 81       	ld	r24, Z
    380c:	8f 7d       	andi	r24, 0xDF	; 223
    380e:	80 83       	st	Z, r24
    3810:	ec ef       	ldi	r30, 0xFC	; 252
    3812:	f8 e2       	ldi	r31, 0x28	; 40
    3814:	02 e0       	ldi	r16, 0x02	; 2
    3816:	05 93       	las	Z, r16
    3818:	10 92 fe 28 	sts	0x28FE, r1
    381c:	10 92 ff 28 	sts	0x28FF, r1
    3820:	00 e2       	ldi	r16, 0x20	; 32
    3822:	06 93       	lac	Z, r16
    3824:	00 e4       	ldi	r16, 0x40	; 64
    3826:	06 93       	lac	Z, r16
    3828:	e4 ef       	ldi	r30, 0xF4	; 244
    382a:	f8 e2       	ldi	r31, 0x28	; 40
    382c:	00 e2       	ldi	r16, 0x20	; 32
    382e:	06 93       	lac	Z, r16
    3830:	00 e4       	ldi	r16, 0x40	; 64
    3832:	06 93       	lac	Z, r16
    3834:	10 92 33 2a 	sts	0x2A33, r1
    3838:	10 92 34 2a 	sts	0x2A34, r1
    383c:	10 92 35 2a 	sts	0x2A35, r1
    3840:	10 92 36 2a 	sts	0x2A36, r1
    3844:	10 92 31 2a 	sts	0x2A31, r1
    3848:	10 92 32 2a 	sts	0x2A32, r1
    384c:	10 92 0d 2a 	sts	0x2A0D, r1
    3850:	0f 91       	pop	r16
    3852:	08 95       	ret

00003854 <udd_ctrl_stall_data>:
    3854:	0f 93       	push	r16
    3856:	85 e0       	ldi	r24, 0x05	; 5
    3858:	80 93 0d 2a 	sts	0x2A0D, r24
    385c:	ed ef       	ldi	r30, 0xFD	; 253
    385e:	f8 e2       	ldi	r31, 0x28	; 40
    3860:	04 e0       	ldi	r16, 0x04	; 4
    3862:	05 93       	las	Z, r16
    3864:	e5 ef       	ldi	r30, 0xF5	; 245
    3866:	f8 e2       	ldi	r31, 0x28	; 40
    3868:	04 e0       	ldi	r16, 0x04	; 4
    386a:	05 93       	las	Z, r16
    386c:	0f 91       	pop	r16
    386e:	08 95       	ret

00003870 <udd_ctrl_send_zlp_in>:
    3870:	0f 93       	push	r16
    3872:	83 e0       	ldi	r24, 0x03	; 3
    3874:	80 93 0d 2a 	sts	0x2A0D, r24
    3878:	10 92 fe 28 	sts	0x28FE, r1
    387c:	10 92 ff 28 	sts	0x28FF, r1
    3880:	ec ef       	ldi	r30, 0xFC	; 252
    3882:	f8 e2       	ldi	r31, 0x28	; 40
    3884:	02 e0       	ldi	r16, 0x02	; 2
    3886:	06 93       	lac	Z, r16
    3888:	0f 91       	pop	r16
    388a:	08 95       	ret

0000388c <udd_ctrl_send_zlp_out>:
    388c:	0f 93       	push	r16
    388e:	84 e0       	ldi	r24, 0x04	; 4
    3890:	80 93 0d 2a 	sts	0x2A0D, r24
    3894:	e4 ef       	ldi	r30, 0xF4	; 244
    3896:	f8 e2       	ldi	r31, 0x28	; 40
    3898:	02 e0       	ldi	r16, 0x02	; 2
    389a:	06 93       	lac	Z, r16
    389c:	0f 91       	pop	r16
    389e:	08 95       	ret

000038a0 <udd_ctrl_endofrequest>:
    38a0:	e0 91 33 2a 	lds	r30, 0x2A33
    38a4:	f0 91 34 2a 	lds	r31, 0x2A34
    38a8:	30 97       	sbiw	r30, 0x00	; 0
    38aa:	09 f0       	breq	.+2      	; 0x38ae <udd_ctrl_endofrequest+0xe>
    38ac:	19 95       	eicall
    38ae:	08 95       	ret

000038b0 <udd_ctrl_in_sent>:
    38b0:	0f 93       	push	r16
    38b2:	cf 93       	push	r28
    38b4:	df 93       	push	r29
    38b6:	80 91 0d 2a 	lds	r24, 0x2A0D
    38ba:	83 30       	cpi	r24, 0x03	; 3
    38bc:	19 f4       	brne	.+6      	; 0x38c4 <udd_ctrl_in_sent+0x14>
    38be:	f0 df       	rcall	.-32     	; 0x38a0 <udd_ctrl_endofrequest>
    38c0:	9e df       	rcall	.-196    	; 0x37fe <udd_ctrl_init>
    38c2:	5a c0       	rjmp	.+180    	; 0x3978 <udd_ctrl_in_sent+0xc8>
    38c4:	80 91 10 2a 	lds	r24, 0x2A10
    38c8:	90 91 11 2a 	lds	r25, 0x2A11
    38cc:	c0 91 31 2a 	lds	r28, 0x2A31
    38d0:	d0 91 32 2a 	lds	r29, 0x2A32
    38d4:	c8 1b       	sub	r28, r24
    38d6:	d9 0b       	sbc	r29, r25
    38d8:	41 f5       	brne	.+80     	; 0x392a <udd_ctrl_in_sent+0x7a>
    38da:	20 91 0e 2a 	lds	r18, 0x2A0E
    38de:	30 91 0f 2a 	lds	r19, 0x2A0F
    38e2:	82 0f       	add	r24, r18
    38e4:	93 1f       	adc	r25, r19
    38e6:	80 93 0e 2a 	sts	0x2A0E, r24
    38ea:	90 93 0f 2a 	sts	0x2A0F, r25
    38ee:	20 91 2d 2a 	lds	r18, 0x2A2D
    38f2:	30 91 2e 2a 	lds	r19, 0x2A2E
    38f6:	82 17       	cp	r24, r18
    38f8:	93 07       	cpc	r25, r19
    38fa:	21 f0       	breq	.+8      	; 0x3904 <udd_ctrl_in_sent+0x54>
    38fc:	80 91 12 2a 	lds	r24, 0x2A12
    3900:	88 23       	and	r24, r24
    3902:	11 f0       	breq	.+4      	; 0x3908 <udd_ctrl_in_sent+0x58>
    3904:	c3 df       	rcall	.-122    	; 0x388c <udd_ctrl_send_zlp_out>
    3906:	38 c0       	rjmp	.+112    	; 0x3978 <udd_ctrl_in_sent+0xc8>
    3908:	e0 91 35 2a 	lds	r30, 0x2A35
    390c:	f0 91 36 2a 	lds	r31, 0x2A36
    3910:	30 97       	sbiw	r30, 0x00	; 0
    3912:	99 f0       	breq	.+38     	; 0x393a <udd_ctrl_in_sent+0x8a>
    3914:	19 95       	eicall
    3916:	88 23       	and	r24, r24
    3918:	81 f0       	breq	.+32     	; 0x393a <udd_ctrl_in_sent+0x8a>
    391a:	10 92 10 2a 	sts	0x2A10, r1
    391e:	10 92 11 2a 	sts	0x2A11, r1
    3922:	c0 91 31 2a 	lds	r28, 0x2A31
    3926:	d0 91 32 2a 	lds	r29, 0x2A32
    392a:	c0 34       	cpi	r28, 0x40	; 64
    392c:	d1 05       	cpc	r29, r1
    392e:	28 f0       	brcs	.+10     	; 0x393a <udd_ctrl_in_sent+0x8a>
    3930:	10 92 12 2a 	sts	0x2A12, r1
    3934:	c0 e4       	ldi	r28, 0x40	; 64
    3936:	d0 e0       	ldi	r29, 0x00	; 0
    3938:	03 c0       	rjmp	.+6      	; 0x3940 <udd_ctrl_in_sent+0x90>
    393a:	81 e0       	ldi	r24, 0x01	; 1
    393c:	80 93 12 2a 	sts	0x2A12, r24
    3940:	c0 93 fe 28 	sts	0x28FE, r28
    3944:	d0 93 ff 28 	sts	0x28FF, r29
    3948:	80 91 10 2a 	lds	r24, 0x2A10
    394c:	90 91 11 2a 	lds	r25, 0x2A11
    3950:	20 91 2f 2a 	lds	r18, 0x2A2F
    3954:	30 91 30 2a 	lds	r19, 0x2A30
    3958:	28 0f       	add	r18, r24
    395a:	39 1f       	adc	r19, r25
    395c:	20 93 00 29 	sts	0x2900, r18
    3960:	30 93 01 29 	sts	0x2901, r19
    3964:	c8 0f       	add	r28, r24
    3966:	d9 1f       	adc	r29, r25
    3968:	c0 93 10 2a 	sts	0x2A10, r28
    396c:	d0 93 11 2a 	sts	0x2A11, r29
    3970:	ec ef       	ldi	r30, 0xFC	; 252
    3972:	f8 e2       	ldi	r31, 0x28	; 40
    3974:	02 e0       	ldi	r16, 0x02	; 2
    3976:	06 93       	lac	Z, r16
    3978:	df 91       	pop	r29
    397a:	cf 91       	pop	r28
    397c:	0f 91       	pop	r16
    397e:	08 95       	ret

00003980 <udd_ep_get_size>:
    3980:	fc 01       	movw	r30, r24
    3982:	81 81       	ldd	r24, Z+1	; 0x01
    3984:	87 70       	andi	r24, 0x07	; 7
    3986:	84 30       	cpi	r24, 0x04	; 4
    3988:	a9 f0       	breq	.+42     	; 0x39b4 <udd_ep_get_size+0x34>
    398a:	30 f4       	brcc	.+12     	; 0x3998 <udd_ep_get_size+0x18>
    398c:	82 30       	cpi	r24, 0x02	; 2
    398e:	61 f0       	breq	.+24     	; 0x39a8 <udd_ep_get_size+0x28>
    3990:	70 f4       	brcc	.+28     	; 0x39ae <udd_ep_get_size+0x2e>
    3992:	81 30       	cpi	r24, 0x01	; 1
    3994:	31 f4       	brne	.+12     	; 0x39a2 <udd_ep_get_size+0x22>
    3996:	1a c0       	rjmp	.+52     	; 0x39cc <udd_ep_get_size+0x4c>
    3998:	86 30       	cpi	r24, 0x06	; 6
    399a:	91 f0       	breq	.+36     	; 0x39c0 <udd_ep_get_size+0x40>
    399c:	70 f0       	brcs	.+28     	; 0x39ba <udd_ep_get_size+0x3a>
    399e:	87 30       	cpi	r24, 0x07	; 7
    39a0:	91 f0       	breq	.+36     	; 0x39c6 <udd_ep_get_size+0x46>
    39a2:	28 e0       	ldi	r18, 0x08	; 8
    39a4:	30 e0       	ldi	r19, 0x00	; 0
    39a6:	14 c0       	rjmp	.+40     	; 0x39d0 <udd_ep_get_size+0x50>
    39a8:	20 e2       	ldi	r18, 0x20	; 32
    39aa:	30 e0       	ldi	r19, 0x00	; 0
    39ac:	11 c0       	rjmp	.+34     	; 0x39d0 <udd_ep_get_size+0x50>
    39ae:	20 e4       	ldi	r18, 0x40	; 64
    39b0:	30 e0       	ldi	r19, 0x00	; 0
    39b2:	0e c0       	rjmp	.+28     	; 0x39d0 <udd_ep_get_size+0x50>
    39b4:	20 e8       	ldi	r18, 0x80	; 128
    39b6:	30 e0       	ldi	r19, 0x00	; 0
    39b8:	0b c0       	rjmp	.+22     	; 0x39d0 <udd_ep_get_size+0x50>
    39ba:	20 e0       	ldi	r18, 0x00	; 0
    39bc:	31 e0       	ldi	r19, 0x01	; 1
    39be:	08 c0       	rjmp	.+16     	; 0x39d0 <udd_ep_get_size+0x50>
    39c0:	20 e0       	ldi	r18, 0x00	; 0
    39c2:	32 e0       	ldi	r19, 0x02	; 2
    39c4:	05 c0       	rjmp	.+10     	; 0x39d0 <udd_ep_get_size+0x50>
    39c6:	2f ef       	ldi	r18, 0xFF	; 255
    39c8:	33 e0       	ldi	r19, 0x03	; 3
    39ca:	02 c0       	rjmp	.+4      	; 0x39d0 <udd_ep_get_size+0x50>
    39cc:	20 e1       	ldi	r18, 0x10	; 16
    39ce:	30 e0       	ldi	r19, 0x00	; 0
    39d0:	82 2f       	mov	r24, r18
    39d2:	93 2f       	mov	r25, r19
    39d4:	08 95       	ret

000039d6 <udd_ep_get_job>:
    39d6:	28 2f       	mov	r18, r24
    39d8:	2f 70       	andi	r18, 0x0F	; 15
    39da:	30 e0       	ldi	r19, 0x00	; 0
    39dc:	22 0f       	add	r18, r18
    39de:	33 1f       	adc	r19, r19
    39e0:	99 27       	eor	r25, r25
    39e2:	87 fd       	sbrc	r24, 7
    39e4:	90 95       	com	r25
    39e6:	88 27       	eor	r24, r24
    39e8:	99 0f       	add	r25, r25
    39ea:	88 1f       	adc	r24, r24
    39ec:	99 27       	eor	r25, r25
    39ee:	28 0f       	add	r18, r24
    39f0:	39 1f       	adc	r19, r25
    39f2:	22 50       	subi	r18, 0x02	; 2
    39f4:	31 09       	sbc	r19, r1
    39f6:	c9 01       	movw	r24, r18
    39f8:	88 0f       	add	r24, r24
    39fa:	99 1f       	adc	r25, r25
    39fc:	88 0f       	add	r24, r24
    39fe:	99 1f       	adc	r25, r25
    3a00:	88 0f       	add	r24, r24
    3a02:	99 1f       	adc	r25, r25
    3a04:	28 0f       	add	r18, r24
    3a06:	39 1f       	adc	r19, r25
    3a08:	28 5d       	subi	r18, 0xD8	; 216
    3a0a:	36 4d       	sbci	r19, 0xD6	; 214
    3a0c:	82 2f       	mov	r24, r18
    3a0e:	93 2f       	mov	r25, r19
    3a10:	08 95       	ret

00003a12 <udd_ctrl_interrupt_tc_setup>:
    3a12:	0f 93       	push	r16
    3a14:	80 91 cc 04 	lds	r24, 0x04CC
    3a18:	80 ff       	sbrs	r24, 0
    3a1a:	64 c0       	rjmp	.+200    	; 0x3ae4 <udd_ctrl_interrupt_tc_setup+0xd2>
    3a1c:	81 e0       	ldi	r24, 0x01	; 1
    3a1e:	80 93 cc 04 	sts	0x04CC, r24
    3a22:	e4 ef       	ldi	r30, 0xF4	; 244
    3a24:	f8 e2       	ldi	r31, 0x28	; 40
    3a26:	00 e8       	ldi	r16, 0x80	; 128
    3a28:	06 93       	lac	Z, r16
    3a2a:	ec ef       	ldi	r30, 0xFC	; 252
    3a2c:	f8 e2       	ldi	r31, 0x28	; 40
    3a2e:	00 e8       	ldi	r16, 0x80	; 128
    3a30:	06 93       	lac	Z, r16
    3a32:	80 93 ca 04 	sts	0x04CA, r24
    3a36:	e4 ef       	ldi	r30, 0xF4	; 244
    3a38:	f8 e2       	ldi	r31, 0x28	; 40
    3a3a:	00 e1       	ldi	r16, 0x10	; 16
    3a3c:	06 93       	lac	Z, r16
    3a3e:	80 91 0d 2a 	lds	r24, 0x2A0D
    3a42:	88 23       	and	r24, r24
    3a44:	29 f0       	breq	.+10     	; 0x3a50 <udd_ctrl_interrupt_tc_setup+0x3e>
    3a46:	83 50       	subi	r24, 0x03	; 3
    3a48:	82 30       	cpi	r24, 0x02	; 2
    3a4a:	08 f4       	brcc	.+2      	; 0x3a4e <udd_ctrl_interrupt_tc_setup+0x3c>
    3a4c:	29 df       	rcall	.-430    	; 0x38a0 <udd_ctrl_endofrequest>
    3a4e:	d7 de       	rcall	.-594    	; 0x37fe <udd_ctrl_init>
    3a50:	80 91 f6 28 	lds	r24, 0x28F6
    3a54:	90 91 f7 28 	lds	r25, 0x28F7
    3a58:	08 97       	sbiw	r24, 0x08	; 8
    3a5a:	09 f0       	breq	.+2      	; 0x3a5e <udd_ctrl_interrupt_tc_setup+0x4c>
    3a5c:	45 c0       	rjmp	.+138    	; 0x3ae8 <udd_ctrl_interrupt_tc_setup+0xd6>
    3a5e:	88 e0       	ldi	r24, 0x08	; 8
    3a60:	ed ec       	ldi	r30, 0xCD	; 205
    3a62:	f9 e2       	ldi	r31, 0x29	; 41
    3a64:	a7 e2       	ldi	r26, 0x27	; 39
    3a66:	ba e2       	ldi	r27, 0x2A	; 42
    3a68:	01 90       	ld	r0, Z+
    3a6a:	0d 92       	st	X+, r0
    3a6c:	8a 95       	dec	r24
    3a6e:	e1 f7       	brne	.-8      	; 0x3a68 <udd_ctrl_interrupt_tc_setup+0x56>
    3a70:	e8 ec       	ldi	r30, 0xC8	; 200
    3a72:	f4 e0       	ldi	r31, 0x04	; 4
    3a74:	80 81       	ld	r24, Z
    3a76:	80 62       	ori	r24, 0x20	; 32
    3a78:	80 83       	st	Z, r24
    3a7a:	80 81       	ld	r24, Z
    3a7c:	80 62       	ori	r24, 0x20	; 32
    3a7e:	80 83       	st	Z, r24
    3a80:	0e 94 02 14 	call	0x2804	; 0x2804 <udc_process_setup>
    3a84:	81 11       	cpse	r24, r1
    3a86:	03 c0       	rjmp	.+6      	; 0x3a8e <udd_ctrl_interrupt_tc_setup+0x7c>
    3a88:	e5 de       	rcall	.-566    	; 0x3854 <udd_ctrl_stall_data>
    3a8a:	81 e0       	ldi	r24, 0x01	; 1
    3a8c:	2e c0       	rjmp	.+92     	; 0x3aea <udd_ctrl_interrupt_tc_setup+0xd8>
    3a8e:	80 91 27 2a 	lds	r24, 0x2A27
    3a92:	88 23       	and	r24, r24
    3a94:	74 f4       	brge	.+28     	; 0x3ab2 <udd_ctrl_interrupt_tc_setup+0xa0>
    3a96:	10 92 0e 2a 	sts	0x2A0E, r1
    3a9a:	10 92 0f 2a 	sts	0x2A0F, r1
    3a9e:	10 92 10 2a 	sts	0x2A10, r1
    3aa2:	10 92 11 2a 	sts	0x2A11, r1
    3aa6:	82 e0       	ldi	r24, 0x02	; 2
    3aa8:	80 93 0d 2a 	sts	0x2A0D, r24
    3aac:	01 df       	rcall	.-510    	; 0x38b0 <udd_ctrl_in_sent>
    3aae:	81 e0       	ldi	r24, 0x01	; 1
    3ab0:	1c c0       	rjmp	.+56     	; 0x3aea <udd_ctrl_interrupt_tc_setup+0xd8>
    3ab2:	80 91 2d 2a 	lds	r24, 0x2A2D
    3ab6:	90 91 2e 2a 	lds	r25, 0x2A2E
    3aba:	89 2b       	or	r24, r25
    3abc:	19 f4       	brne	.+6      	; 0x3ac4 <udd_ctrl_interrupt_tc_setup+0xb2>
    3abe:	d8 de       	rcall	.-592    	; 0x3870 <udd_ctrl_send_zlp_in>
    3ac0:	81 e0       	ldi	r24, 0x01	; 1
    3ac2:	13 c0       	rjmp	.+38     	; 0x3aea <udd_ctrl_interrupt_tc_setup+0xd8>
    3ac4:	10 92 0e 2a 	sts	0x2A0E, r1
    3ac8:	10 92 0f 2a 	sts	0x2A0F, r1
    3acc:	10 92 10 2a 	sts	0x2A10, r1
    3ad0:	10 92 11 2a 	sts	0x2A11, r1
    3ad4:	81 e0       	ldi	r24, 0x01	; 1
    3ad6:	80 93 0d 2a 	sts	0x2A0D, r24
    3ada:	e4 ef       	ldi	r30, 0xF4	; 244
    3adc:	f8 e2       	ldi	r31, 0x28	; 40
    3ade:	02 e0       	ldi	r16, 0x02	; 2
    3ae0:	06 93       	lac	Z, r16
    3ae2:	03 c0       	rjmp	.+6      	; 0x3aea <udd_ctrl_interrupt_tc_setup+0xd8>
    3ae4:	80 e0       	ldi	r24, 0x00	; 0
    3ae6:	01 c0       	rjmp	.+2      	; 0x3aea <udd_ctrl_interrupt_tc_setup+0xd8>
    3ae8:	81 e0       	ldi	r24, 0x01	; 1
    3aea:	0f 91       	pop	r16
    3aec:	08 95       	ret

00003aee <udd_ep_trans_complet>:
    3aee:	bf 92       	push	r11
    3af0:	cf 92       	push	r12
    3af2:	df 92       	push	r13
    3af4:	ef 92       	push	r14
    3af6:	ff 92       	push	r15
    3af8:	0f 93       	push	r16
    3afa:	1f 93       	push	r17
    3afc:	cf 93       	push	r28
    3afe:	df 93       	push	r29
    3b00:	b8 2e       	mov	r11, r24
    3b02:	69 df       	rcall	.-302    	; 0x39d6 <udd_ep_get_job>
    3b04:	ec 01       	movw	r28, r24
    3b06:	8b 2d       	mov	r24, r11
    3b08:	23 de       	rcall	.-954    	; 0x3750 <udd_ep_get_ctrl>
    3b0a:	7c 01       	movw	r14, r24
    3b0c:	39 df       	rcall	.-398    	; 0x3980 <udd_ep_get_size>
    3b0e:	6c 01       	movw	r12, r24
    3b10:	bb 20       	and	r11, r11
    3b12:	0c f0       	brlt	.+2      	; 0x3b16 <udd_ep_trans_complet+0x28>
    3b14:	5f c0       	rjmp	.+190    	; 0x3bd4 <udd_ep_trans_complet+0xe6>
    3b16:	d7 01       	movw	r26, r14
    3b18:	16 96       	adiw	r26, 0x06	; 6
    3b1a:	2d 91       	ld	r18, X+
    3b1c:	3c 91       	ld	r19, X
    3b1e:	17 97       	sbiw	r26, 0x07	; 7
    3b20:	8d 81       	ldd	r24, Y+5	; 0x05
    3b22:	9e 81       	ldd	r25, Y+6	; 0x06
    3b24:	28 0f       	add	r18, r24
    3b26:	39 1f       	adc	r19, r25
    3b28:	2d 83       	std	Y+5, r18	; 0x05
    3b2a:	3e 83       	std	Y+6, r19	; 0x06
    3b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b2e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b30:	28 17       	cp	r18, r24
    3b32:	39 07       	cpc	r19, r25
    3b34:	09 f4       	brne	.+2      	; 0x3b38 <udd_ep_trans_complet+0x4a>
    3b36:	3c c0       	rjmp	.+120    	; 0x3bb0 <udd_ep_trans_complet+0xc2>
    3b38:	fc 01       	movw	r30, r24
    3b3a:	e2 1b       	sub	r30, r18
    3b3c:	f3 0b       	sbc	r31, r19
    3b3e:	9f 01       	movw	r18, r30
    3b40:	21 15       	cp	r18, r1
    3b42:	f4 e0       	ldi	r31, 0x04	; 4
    3b44:	3f 07       	cpc	r19, r31
    3b46:	40 f0       	brcs	.+16     	; 0x3b58 <udd_ep_trans_complet+0x6a>
    3b48:	2f ef       	ldi	r18, 0xFF	; 255
    3b4a:	33 e0       	ldi	r19, 0x03	; 3
    3b4c:	c9 01       	movw	r24, r18
    3b4e:	b6 01       	movw	r22, r12
    3b50:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <__udivmodhi4>
    3b54:	28 1b       	sub	r18, r24
    3b56:	39 0b       	sbc	r19, r25
    3b58:	88 81       	ld	r24, Y
    3b5a:	81 ff       	sbrs	r24, 1
    3b5c:	0c c0       	rjmp	.+24     	; 0x3b76 <udd_ep_trans_complet+0x88>
    3b5e:	c9 01       	movw	r24, r18
    3b60:	b6 01       	movw	r22, r12
    3b62:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <__udivmodhi4>
    3b66:	41 e0       	ldi	r20, 0x01	; 1
    3b68:	50 e0       	ldi	r21, 0x00	; 0
    3b6a:	89 2b       	or	r24, r25
    3b6c:	11 f0       	breq	.+4      	; 0x3b72 <udd_ep_trans_complet+0x84>
    3b6e:	40 e0       	ldi	r20, 0x00	; 0
    3b70:	50 e0       	ldi	r21, 0x00	; 0
    3b72:	ca 01       	movw	r24, r20
    3b74:	02 c0       	rjmp	.+4      	; 0x3b7a <udd_ep_trans_complet+0x8c>
    3b76:	80 e0       	ldi	r24, 0x00	; 0
    3b78:	90 e0       	ldi	r25, 0x00	; 0
    3b7a:	98 81       	ld	r25, Y
    3b7c:	80 fb       	bst	r24, 0
    3b7e:	91 f9       	bld	r25, 1
    3b80:	98 83       	st	Y, r25
    3b82:	d7 01       	movw	r26, r14
    3b84:	16 96       	adiw	r26, 0x06	; 6
    3b86:	1d 92       	st	X+, r1
    3b88:	1c 92       	st	X, r1
    3b8a:	17 97       	sbiw	r26, 0x07	; 7
    3b8c:	12 96       	adiw	r26, 0x02	; 2
    3b8e:	2d 93       	st	X+, r18
    3b90:	3c 93       	st	X, r19
    3b92:	13 97       	sbiw	r26, 0x03	; 3
    3b94:	29 81       	ldd	r18, Y+1	; 0x01
    3b96:	3a 81       	ldd	r19, Y+2	; 0x02
    3b98:	8d 81       	ldd	r24, Y+5	; 0x05
    3b9a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b9c:	82 0f       	add	r24, r18
    3b9e:	93 1f       	adc	r25, r19
    3ba0:	14 96       	adiw	r26, 0x04	; 4
    3ba2:	8d 93       	st	X+, r24
    3ba4:	9c 93       	st	X, r25
    3ba6:	15 97       	sbiw	r26, 0x05	; 5
    3ba8:	f7 01       	movw	r30, r14
    3baa:	02 e0       	ldi	r16, 0x02	; 2
    3bac:	06 93       	lac	Z, r16
    3bae:	9c c0       	rjmp	.+312    	; 0x3ce8 <udd_ep_trans_complet+0x1fa>
    3bb0:	88 81       	ld	r24, Y
    3bb2:	81 ff       	sbrs	r24, 1
    3bb4:	8b c0       	rjmp	.+278    	; 0x3ccc <udd_ep_trans_complet+0x1de>
    3bb6:	8d 7f       	andi	r24, 0xFD	; 253
    3bb8:	88 83       	st	Y, r24
    3bba:	d7 01       	movw	r26, r14
    3bbc:	16 96       	adiw	r26, 0x06	; 6
    3bbe:	1d 92       	st	X+, r1
    3bc0:	1c 92       	st	X, r1
    3bc2:	17 97       	sbiw	r26, 0x07	; 7
    3bc4:	12 96       	adiw	r26, 0x02	; 2
    3bc6:	1d 92       	st	X+, r1
    3bc8:	1c 92       	st	X, r1
    3bca:	13 97       	sbiw	r26, 0x03	; 3
    3bcc:	f7 01       	movw	r30, r14
    3bce:	02 e0       	ldi	r16, 0x02	; 2
    3bd0:	06 93       	lac	Z, r16
    3bd2:	8a c0       	rjmp	.+276    	; 0x3ce8 <udd_ep_trans_complet+0x1fa>
    3bd4:	d7 01       	movw	r26, r14
    3bd6:	12 96       	adiw	r26, 0x02	; 2
    3bd8:	0d 91       	ld	r16, X+
    3bda:	1c 91       	ld	r17, X
    3bdc:	13 97       	sbiw	r26, 0x03	; 3
    3bde:	88 81       	ld	r24, Y
    3be0:	82 ff       	sbrs	r24, 2
    3be2:	19 c0       	rjmp	.+50     	; 0x3c16 <udd_ep_trans_complet+0x128>
    3be4:	29 81       	ldd	r18, Y+1	; 0x01
    3be6:	3a 81       	ldd	r19, Y+2	; 0x02
    3be8:	8d 81       	ldd	r24, Y+5	; 0x05
    3bea:	9e 81       	ldd	r25, Y+6	; 0x06
    3bec:	28 0f       	add	r18, r24
    3bee:	39 1f       	adc	r19, r25
    3bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    3bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    3bf4:	b6 01       	movw	r22, r12
    3bf6:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <__udivmodhi4>
    3bfa:	b0 e4       	ldi	r27, 0x40	; 64
    3bfc:	bb 9e       	mul	r11, r27
    3bfe:	f0 01       	movw	r30, r0
    3c00:	11 24       	eor	r1, r1
    3c02:	e3 5f       	subi	r30, 0xF3	; 243
    3c04:	f6 4d       	sbci	r31, 0xD6	; 214
    3c06:	48 2f       	mov	r20, r24
    3c08:	59 2f       	mov	r21, r25
    3c0a:	6e 2f       	mov	r22, r30
    3c0c:	7f 2f       	mov	r23, r31
    3c0e:	82 2f       	mov	r24, r18
    3c10:	93 2f       	mov	r25, r19
    3c12:	0e 94 80 28 	call	0x5100	; 0x5100 <memcpy>
    3c16:	2d 81       	ldd	r18, Y+5	; 0x05
    3c18:	3e 81       	ldd	r19, Y+6	; 0x06
    3c1a:	20 0f       	add	r18, r16
    3c1c:	31 1f       	adc	r19, r17
    3c1e:	2d 83       	std	Y+5, r18	; 0x05
    3c20:	3e 83       	std	Y+6, r19	; 0x06
    3c22:	eb 81       	ldd	r30, Y+3	; 0x03
    3c24:	fc 81       	ldd	r31, Y+4	; 0x04
    3c26:	e2 17       	cp	r30, r18
    3c28:	f3 07       	cpc	r31, r19
    3c2a:	10 f4       	brcc	.+4      	; 0x3c30 <udd_ep_trans_complet+0x142>
    3c2c:	ed 83       	std	Y+5, r30	; 0x05
    3c2e:	fe 83       	std	Y+6, r31	; 0x06
    3c30:	d7 01       	movw	r26, r14
    3c32:	16 96       	adiw	r26, 0x06	; 6
    3c34:	2d 91       	ld	r18, X+
    3c36:	3c 91       	ld	r19, X
    3c38:	17 97       	sbiw	r26, 0x07	; 7
    3c3a:	20 17       	cp	r18, r16
    3c3c:	31 07       	cpc	r19, r17
    3c3e:	09 f0       	breq	.+2      	; 0x3c42 <udd_ep_trans_complet+0x154>
    3c40:	45 c0       	rjmp	.+138    	; 0x3ccc <udd_ep_trans_complet+0x1de>
    3c42:	8d 81       	ldd	r24, Y+5	; 0x05
    3c44:	9e 81       	ldd	r25, Y+6	; 0x06
    3c46:	e8 17       	cp	r30, r24
    3c48:	f9 07       	cpc	r31, r25
    3c4a:	09 f4       	brne	.+2      	; 0x3c4e <udd_ep_trans_complet+0x160>
    3c4c:	3f c0       	rjmp	.+126    	; 0x3ccc <udd_ep_trans_complet+0x1de>
    3c4e:	e8 1b       	sub	r30, r24
    3c50:	f9 0b       	sbc	r31, r25
    3c52:	e1 15       	cp	r30, r1
    3c54:	b4 e0       	ldi	r27, 0x04	; 4
    3c56:	fb 07       	cpc	r31, r27
    3c58:	48 f0       	brcs	.+18     	; 0x3c6c <udd_ep_trans_complet+0x17e>
    3c5a:	ef ef       	ldi	r30, 0xFF	; 255
    3c5c:	f3 e0       	ldi	r31, 0x03	; 3
    3c5e:	cf 01       	movw	r24, r30
    3c60:	b6 01       	movw	r22, r12
    3c62:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <__udivmodhi4>
    3c66:	e8 1b       	sub	r30, r24
    3c68:	f9 0b       	sbc	r31, r25
    3c6a:	06 c0       	rjmp	.+12     	; 0x3c78 <udd_ep_trans_complet+0x18a>
    3c6c:	cf 01       	movw	r24, r30
    3c6e:	b6 01       	movw	r22, r12
    3c70:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <__udivmodhi4>
    3c74:	e8 1b       	sub	r30, r24
    3c76:	f9 0b       	sbc	r31, r25
    3c78:	d7 01       	movw	r26, r14
    3c7a:	12 96       	adiw	r26, 0x02	; 2
    3c7c:	1d 92       	st	X+, r1
    3c7e:	1c 92       	st	X, r1
    3c80:	13 97       	sbiw	r26, 0x03	; 3
    3c82:	ec 15       	cp	r30, r12
    3c84:	fd 05       	cpc	r31, r13
    3c86:	78 f4       	brcc	.+30     	; 0x3ca6 <udd_ep_trans_complet+0x1b8>
    3c88:	88 81       	ld	r24, Y
    3c8a:	84 60       	ori	r24, 0x04	; 4
    3c8c:	88 83       	st	Y, r24
    3c8e:	b0 e4       	ldi	r27, 0x40	; 64
    3c90:	bb 9e       	mul	r11, r27
    3c92:	c0 01       	movw	r24, r0
    3c94:	11 24       	eor	r1, r1
    3c96:	83 5f       	subi	r24, 0xF3	; 243
    3c98:	96 4d       	sbci	r25, 0xD6	; 214
    3c9a:	f7 01       	movw	r30, r14
    3c9c:	84 83       	std	Z+4, r24	; 0x04
    3c9e:	95 83       	std	Z+5, r25	; 0x05
    3ca0:	c6 82       	std	Z+6, r12	; 0x06
    3ca2:	d7 82       	std	Z+7, r13	; 0x07
    3ca4:	0f c0       	rjmp	.+30     	; 0x3cc4 <udd_ep_trans_complet+0x1d6>
    3ca6:	29 81       	ldd	r18, Y+1	; 0x01
    3ca8:	3a 81       	ldd	r19, Y+2	; 0x02
    3caa:	8d 81       	ldd	r24, Y+5	; 0x05
    3cac:	9e 81       	ldd	r25, Y+6	; 0x06
    3cae:	82 0f       	add	r24, r18
    3cb0:	93 1f       	adc	r25, r19
    3cb2:	d7 01       	movw	r26, r14
    3cb4:	14 96       	adiw	r26, 0x04	; 4
    3cb6:	8d 93       	st	X+, r24
    3cb8:	9c 93       	st	X, r25
    3cba:	15 97       	sbiw	r26, 0x05	; 5
    3cbc:	16 96       	adiw	r26, 0x06	; 6
    3cbe:	ed 93       	st	X+, r30
    3cc0:	fc 93       	st	X, r31
    3cc2:	17 97       	sbiw	r26, 0x07	; 7
    3cc4:	f7 01       	movw	r30, r14
    3cc6:	02 e0       	ldi	r16, 0x02	; 2
    3cc8:	06 93       	lac	Z, r16
    3cca:	0e c0       	rjmp	.+28     	; 0x3ce8 <udd_ep_trans_complet+0x1fa>
    3ccc:	88 81       	ld	r24, Y
    3cce:	80 ff       	sbrs	r24, 0
    3cd0:	0b c0       	rjmp	.+22     	; 0x3ce8 <udd_ep_trans_complet+0x1fa>
    3cd2:	8e 7f       	andi	r24, 0xFE	; 254
    3cd4:	88 83       	st	Y, r24
    3cd6:	ef 81       	ldd	r30, Y+7	; 0x07
    3cd8:	f8 85       	ldd	r31, Y+8	; 0x08
    3cda:	30 97       	sbiw	r30, 0x00	; 0
    3cdc:	29 f0       	breq	.+10     	; 0x3ce8 <udd_ep_trans_complet+0x1fa>
    3cde:	6d 81       	ldd	r22, Y+5	; 0x05
    3ce0:	7e 81       	ldd	r23, Y+6	; 0x06
    3ce2:	4b 2d       	mov	r20, r11
    3ce4:	80 e0       	ldi	r24, 0x00	; 0
    3ce6:	19 95       	eicall
    3ce8:	df 91       	pop	r29
    3cea:	cf 91       	pop	r28
    3cec:	1f 91       	pop	r17
    3cee:	0f 91       	pop	r16
    3cf0:	ff 90       	pop	r15
    3cf2:	ef 90       	pop	r14
    3cf4:	df 90       	pop	r13
    3cf6:	cf 90       	pop	r12
    3cf8:	bf 90       	pop	r11
    3cfa:	08 95       	ret

00003cfc <udd_enable>:
    3cfc:	cf 93       	push	r28
    3cfe:	df 93       	push	r29
    3d00:	c0 e6       	ldi	r28, 0x60	; 96
    3d02:	d0 e0       	ldi	r29, 0x00	; 0
    3d04:	18 82       	st	Y, r1
    3d06:	80 e3       	ldi	r24, 0x30	; 48
    3d08:	0e 94 8d 0b 	call	0x171a	; 0x171a <sysclk_enable_usb>
    3d0c:	e0 ec       	ldi	r30, 0xC0	; 192
    3d0e:	f4 e0       	ldi	r31, 0x04	; 4
    3d10:	80 81       	ld	r24, Z
    3d12:	80 64       	ori	r24, 0x40	; 64
    3d14:	80 83       	st	Z, r24
    3d16:	81 e0       	ldi	r24, 0x01	; 1
    3d18:	88 83       	st	Y, r24
    3d1a:	cf b7       	in	r28, 0x3f	; 63
    3d1c:	f8 94       	cli
    3d1e:	10 92 f5 28 	sts	0x28F5, r1
    3d22:	10 92 fd 28 	sts	0x28FD, r1
    3d26:	10 92 05 29 	sts	0x2905, r1
    3d2a:	10 92 0d 29 	sts	0x290D, r1
    3d2e:	10 92 15 29 	sts	0x2915, r1
    3d32:	10 92 1d 29 	sts	0x291D, r1
    3d36:	e8 e2       	ldi	r30, 0x28	; 40
    3d38:	f9 e2       	ldi	r31, 0x29	; 41
    3d3a:	80 81       	ld	r24, Z
    3d3c:	8e 7f       	andi	r24, 0xFE	; 254
    3d3e:	80 83       	st	Z, r24
    3d40:	e1 e3       	ldi	r30, 0x31	; 49
    3d42:	f9 e2       	ldi	r31, 0x29	; 41
    3d44:	80 81       	ld	r24, Z
    3d46:	8e 7f       	andi	r24, 0xFE	; 254
    3d48:	80 83       	st	Z, r24
    3d4a:	ea e3       	ldi	r30, 0x3A	; 58
    3d4c:	f9 e2       	ldi	r31, 0x29	; 41
    3d4e:	80 81       	ld	r24, Z
    3d50:	8e 7f       	andi	r24, 0xFE	; 254
    3d52:	80 83       	st	Z, r24
    3d54:	e3 e4       	ldi	r30, 0x43	; 67
    3d56:	f9 e2       	ldi	r31, 0x29	; 41
    3d58:	80 81       	ld	r24, Z
    3d5a:	8e 7f       	andi	r24, 0xFE	; 254
    3d5c:	80 83       	st	Z, r24
    3d5e:	6a e1       	ldi	r22, 0x1A	; 26
    3d60:	70 e0       	ldi	r23, 0x00	; 0
    3d62:	82 e0       	ldi	r24, 0x02	; 2
    3d64:	26 db       	rcall	.-2484   	; 0x33b2 <nvm_read_byte>
    3d66:	8f 3f       	cpi	r24, 0xFF	; 255
    3d68:	19 f0       	breq	.+6      	; 0x3d70 <udd_enable+0x74>
    3d6a:	80 93 fa 04 	sts	0x04FA, r24
    3d6e:	03 c0       	rjmp	.+6      	; 0x3d76 <udd_enable+0x7a>
    3d70:	8f e1       	ldi	r24, 0x1F	; 31
    3d72:	80 93 fa 04 	sts	0x04FA, r24
    3d76:	6b e1       	ldi	r22, 0x1B	; 27
    3d78:	70 e0       	ldi	r23, 0x00	; 0
    3d7a:	82 e0       	ldi	r24, 0x02	; 2
    3d7c:	1a db       	rcall	.-2508   	; 0x33b2 <nvm_read_byte>
    3d7e:	8f 3f       	cpi	r24, 0xFF	; 255
    3d80:	19 f0       	breq	.+6      	; 0x3d88 <udd_enable+0x8c>
    3d82:	80 93 fb 04 	sts	0x04FB, r24
    3d86:	03 c0       	rjmp	.+6      	; 0x3d8e <udd_enable+0x92>
    3d88:	8f e1       	ldi	r24, 0x1F	; 31
    3d8a:	80 93 fb 04 	sts	0x04FB, r24
    3d8e:	e0 ec       	ldi	r30, 0xC0	; 192
    3d90:	f4 e0       	ldi	r31, 0x04	; 4
    3d92:	80 81       	ld	r24, Z
    3d94:	82 60       	ori	r24, 0x02	; 2
    3d96:	80 83       	st	Z, r24
    3d98:	80 81       	ld	r24, Z
    3d9a:	80 68       	ori	r24, 0x80	; 128
    3d9c:	80 83       	st	Z, r24
    3d9e:	80 81       	ld	r24, Z
    3da0:	80 61       	ori	r24, 0x10	; 16
    3da2:	80 83       	st	Z, r24
    3da4:	84 ef       	ldi	r24, 0xF4	; 244
    3da6:	98 e2       	ldi	r25, 0x28	; 40
    3da8:	86 83       	std	Z+6, r24	; 0x06
    3daa:	97 83       	std	Z+7, r25	; 0x07
    3dac:	80 81       	ld	r24, Z
    3dae:	80 62       	ori	r24, 0x20	; 32
    3db0:	80 83       	st	Z, r24
    3db2:	8f ef       	ldi	r24, 0xFF	; 255
    3db4:	80 93 c5 04 	sts	0x04C5, r24
    3db8:	e8 ec       	ldi	r30, 0xC8	; 200
    3dba:	f4 e0       	ldi	r31, 0x04	; 4
    3dbc:	80 81       	ld	r24, Z
    3dbe:	81 60       	ori	r24, 0x01	; 1
    3dc0:	80 83       	st	Z, r24
    3dc2:	10 92 4c 29 	sts	0x294C, r1
    3dc6:	8f b7       	in	r24, 0x3f	; 63
    3dc8:	f8 94       	cli
    3dca:	e0 e2       	ldi	r30, 0x20	; 32
    3dcc:	fa e2       	ldi	r31, 0x2A	; 42
    3dce:	90 81       	ld	r25, Z
    3dd0:	9f 5f       	subi	r25, 0xFF	; 255
    3dd2:	90 83       	st	Z, r25
    3dd4:	8f bf       	out	0x3f, r24	; 63
    3dd6:	cf bf       	out	0x3f, r28	; 63
    3dd8:	df 91       	pop	r29
    3dda:	cf 91       	pop	r28
    3ddc:	08 95       	ret

00003dde <udd_attach>:
    3dde:	cf 93       	push	r28
    3de0:	cf b7       	in	r28, 0x3f	; 63
    3de2:	f8 94       	cli
    3de4:	81 e0       	ldi	r24, 0x01	; 1
    3de6:	95 dc       	rcall	.-1750   	; 0x3712 <udd_sleep_mode>
    3de8:	ea ec       	ldi	r30, 0xCA	; 202
    3dea:	f4 e0       	ldi	r31, 0x04	; 4
    3dec:	80 e4       	ldi	r24, 0x40	; 64
    3dee:	80 83       	st	Z, r24
    3df0:	80 e2       	ldi	r24, 0x20	; 32
    3df2:	80 83       	st	Z, r24
    3df4:	e1 ec       	ldi	r30, 0xC1	; 193
    3df6:	f4 e0       	ldi	r31, 0x04	; 4
    3df8:	80 81       	ld	r24, Z
    3dfa:	81 60       	ori	r24, 0x01	; 1
    3dfc:	80 83       	st	Z, r24
    3dfe:	a9 ec       	ldi	r26, 0xC9	; 201
    3e00:	b4 e0       	ldi	r27, 0x04	; 4
    3e02:	8c 91       	ld	r24, X
    3e04:	82 60       	ori	r24, 0x02	; 2
    3e06:	8c 93       	st	X, r24
    3e08:	e8 ec       	ldi	r30, 0xC8	; 200
    3e0a:	f4 e0       	ldi	r31, 0x04	; 4
    3e0c:	80 81       	ld	r24, Z
    3e0e:	80 64       	ori	r24, 0x40	; 64
    3e10:	80 83       	st	Z, r24
    3e12:	8c 91       	ld	r24, X
    3e14:	81 60       	ori	r24, 0x01	; 1
    3e16:	8c 93       	st	X, r24
    3e18:	80 81       	ld	r24, Z
    3e1a:	80 68       	ori	r24, 0x80	; 128
    3e1c:	80 83       	st	Z, r24
    3e1e:	cf bf       	out	0x3f, r28	; 63
    3e20:	cf 91       	pop	r28
    3e22:	08 95       	ret

00003e24 <udd_is_high_speed>:
    3e24:	80 e0       	ldi	r24, 0x00	; 0
    3e26:	08 95       	ret

00003e28 <udd_set_address>:
    3e28:	80 93 c3 04 	sts	0x04C3, r24
    3e2c:	08 95       	ret

00003e2e <udd_getaddress>:
    3e2e:	80 91 c3 04 	lds	r24, 0x04C3
    3e32:	08 95       	ret

00003e34 <udd_get_frame_number>:
    3e34:	20 91 24 29 	lds	r18, 0x2924
    3e38:	30 91 25 29 	lds	r19, 0x2925
    3e3c:	82 2f       	mov	r24, r18
    3e3e:	93 2f       	mov	r25, r19
    3e40:	08 95       	ret

00003e42 <udd_get_micro_frame_number>:
    3e42:	80 e0       	ldi	r24, 0x00	; 0
    3e44:	90 e0       	ldi	r25, 0x00	; 0
    3e46:	08 95       	ret

00003e48 <udd_set_setup_payload>:
    3e48:	80 93 2f 2a 	sts	0x2A2F, r24
    3e4c:	90 93 30 2a 	sts	0x2A30, r25
    3e50:	60 93 31 2a 	sts	0x2A31, r22
    3e54:	70 93 32 2a 	sts	0x2A32, r23
    3e58:	08 95       	ret

00003e5a <udd_ep_alloc>:
    3e5a:	ef 92       	push	r14
    3e5c:	ff 92       	push	r15
    3e5e:	0f 93       	push	r16
    3e60:	1f 93       	push	r17
    3e62:	cf 93       	push	r28
    3e64:	df 93       	push	r29
    3e66:	f8 2e       	mov	r15, r24
    3e68:	e6 2e       	mov	r14, r22
    3e6a:	8a 01       	movw	r16, r20
    3e6c:	71 dc       	rcall	.-1822   	; 0x3750 <udd_ep_get_ctrl>
    3e6e:	ec 01       	movw	r28, r24
    3e70:	89 81       	ldd	r24, Y+1	; 0x01
    3e72:	80 7c       	andi	r24, 0xC0	; 192
    3e74:	89 f4       	brne	.+34     	; 0x3e98 <udd_ep_alloc+0x3e>
    3e76:	a8 01       	movw	r20, r16
    3e78:	6e 2d       	mov	r22, r14
    3e7a:	8f 2d       	mov	r24, r15
    3e7c:	82 dc       	rcall	.-1788   	; 0x3782 <udd_ep_init>
    3e7e:	89 81       	ldd	r24, Y+1	; 0x01
    3e80:	80 7c       	andi	r24, 0xC0	; 192
    3e82:	80 3c       	cpi	r24, 0xC0	; 192
    3e84:	21 f4       	brne	.+8      	; 0x3e8e <udd_ep_alloc+0x34>
    3e86:	89 81       	ldd	r24, Y+1	; 0x01
    3e88:	87 70       	andi	r24, 0x07	; 7
    3e8a:	87 30       	cpi	r24, 0x07	; 7
    3e8c:	39 f0       	breq	.+14     	; 0x3e9c <udd_ep_alloc+0x42>
    3e8e:	89 81       	ldd	r24, Y+1	; 0x01
    3e90:	80 62       	ori	r24, 0x20	; 32
    3e92:	89 83       	std	Y+1, r24	; 0x01
    3e94:	81 e0       	ldi	r24, 0x01	; 1
    3e96:	03 c0       	rjmp	.+6      	; 0x3e9e <udd_ep_alloc+0x44>
    3e98:	80 e0       	ldi	r24, 0x00	; 0
    3e9a:	01 c0       	rjmp	.+2      	; 0x3e9e <udd_ep_alloc+0x44>
    3e9c:	81 e0       	ldi	r24, 0x01	; 1
    3e9e:	df 91       	pop	r29
    3ea0:	cf 91       	pop	r28
    3ea2:	1f 91       	pop	r17
    3ea4:	0f 91       	pop	r16
    3ea6:	ff 90       	pop	r15
    3ea8:	ef 90       	pop	r14
    3eaa:	08 95       	ret

00003eac <udd_ep_is_halted>:
    3eac:	51 dc       	rcall	.-1886   	; 0x3750 <udd_ep_get_ctrl>
    3eae:	fc 01       	movw	r30, r24
    3eb0:	81 81       	ldd	r24, Z+1	; 0x01
    3eb2:	82 fb       	bst	r24, 2
    3eb4:	88 27       	eor	r24, r24
    3eb6:	80 f9       	bld	r24, 0
    3eb8:	08 95       	ret

00003eba <udd_ep_clear_halt>:
    3eba:	cf 93       	push	r28
    3ebc:	c8 2f       	mov	r28, r24
    3ebe:	48 dc       	rcall	.-1904   	; 0x3750 <udd_ep_get_ctrl>
    3ec0:	fc 01       	movw	r30, r24
    3ec2:	81 81       	ldd	r24, Z+1	; 0x01
    3ec4:	82 ff       	sbrs	r24, 2
    3ec6:	0f c0       	rjmp	.+30     	; 0x3ee6 <udd_ep_clear_halt+0x2c>
    3ec8:	81 81       	ldd	r24, Z+1	; 0x01
    3eca:	8b 7f       	andi	r24, 0xFB	; 251
    3ecc:	81 83       	std	Z+1, r24	; 0x01
    3ece:	8c 2f       	mov	r24, r28
    3ed0:	82 dd       	rcall	.-1276   	; 0x39d6 <udd_ep_get_job>
    3ed2:	fc 01       	movw	r30, r24
    3ed4:	80 81       	ld	r24, Z
    3ed6:	80 ff       	sbrs	r24, 0
    3ed8:	06 c0       	rjmp	.+12     	; 0x3ee6 <udd_ep_clear_halt+0x2c>
    3eda:	8e 7f       	andi	r24, 0xFE	; 254
    3edc:	80 83       	st	Z, r24
    3ede:	07 80       	ldd	r0, Z+7	; 0x07
    3ee0:	f0 85       	ldd	r31, Z+8	; 0x08
    3ee2:	e0 2d       	mov	r30, r0
    3ee4:	19 95       	eicall
    3ee6:	81 e0       	ldi	r24, 0x01	; 1
    3ee8:	cf 91       	pop	r28
    3eea:	08 95       	ret

00003eec <udd_ep_run>:
    3eec:	8f 92       	push	r8
    3eee:	9f 92       	push	r9
    3ef0:	af 92       	push	r10
    3ef2:	bf 92       	push	r11
    3ef4:	cf 92       	push	r12
    3ef6:	df 92       	push	r13
    3ef8:	ef 92       	push	r14
    3efa:	ff 92       	push	r15
    3efc:	0f 93       	push	r16
    3efe:	1f 93       	push	r17
    3f00:	cf 93       	push	r28
    3f02:	df 93       	push	r29
    3f04:	98 2e       	mov	r9, r24
    3f06:	86 2e       	mov	r8, r22
    3f08:	5a 01       	movw	r10, r20
    3f0a:	69 01       	movw	r12, r18
    3f0c:	64 dd       	rcall	.-1336   	; 0x39d6 <udd_ep_get_job>
    3f0e:	7c 01       	movw	r14, r24
    3f10:	89 2d       	mov	r24, r9
    3f12:	1e dc       	rcall	.-1988   	; 0x3750 <udd_ep_get_ctrl>
    3f14:	ec 01       	movw	r28, r24
    3f16:	89 81       	ldd	r24, Y+1	; 0x01
    3f18:	80 7c       	andi	r24, 0xC0	; 192
    3f1a:	09 f4       	brne	.+2      	; 0x3f1e <udd_ep_run+0x32>
    3f1c:	4d c0       	rjmp	.+154    	; 0x3fb8 <udd_ep_run+0xcc>
    3f1e:	89 81       	ldd	r24, Y+1	; 0x01
    3f20:	80 7c       	andi	r24, 0xC0	; 192
    3f22:	80 3c       	cpi	r24, 0xC0	; 192
    3f24:	19 f0       	breq	.+6      	; 0x3f2c <udd_ep_run+0x40>
    3f26:	89 81       	ldd	r24, Y+1	; 0x01
    3f28:	82 fd       	sbrc	r24, 2
    3f2a:	48 c0       	rjmp	.+144    	; 0x3fbc <udd_ep_run+0xd0>
    3f2c:	8f b7       	in	r24, 0x3f	; 63
    3f2e:	f8 94       	cli
    3f30:	f7 01       	movw	r30, r14
    3f32:	90 81       	ld	r25, Z
    3f34:	90 ff       	sbrs	r25, 0
    3f36:	03 c0       	rjmp	.+6      	; 0x3f3e <udd_ep_run+0x52>
    3f38:	8f bf       	out	0x3f, r24	; 63
    3f3a:	80 e0       	ldi	r24, 0x00	; 0
    3f3c:	40 c0       	rjmp	.+128    	; 0x3fbe <udd_ep_run+0xd2>
    3f3e:	f7 01       	movw	r30, r14
    3f40:	90 81       	ld	r25, Z
    3f42:	91 60       	ori	r25, 0x01	; 1
    3f44:	90 83       	st	Z, r25
    3f46:	8f bf       	out	0x3f, r24	; 63
    3f48:	a1 82       	std	Z+1, r10	; 0x01
    3f4a:	b2 82       	std	Z+2, r11	; 0x02
    3f4c:	c3 82       	std	Z+3, r12	; 0x03
    3f4e:	d4 82       	std	Z+4, r13	; 0x04
    3f50:	15 82       	std	Z+5, r1	; 0x05
    3f52:	16 82       	std	Z+6, r1	; 0x06
    3f54:	07 83       	std	Z+7, r16	; 0x07
    3f56:	10 87       	std	Z+8, r17	; 0x08
    3f58:	81 10       	cpse	r8, r1
    3f5a:	08 c0       	rjmp	.+16     	; 0x3f6c <udd_ep_run+0x80>
    3f5c:	21 e0       	ldi	r18, 0x01	; 1
    3f5e:	30 e0       	ldi	r19, 0x00	; 0
    3f60:	c1 14       	cp	r12, r1
    3f62:	d1 04       	cpc	r13, r1
    3f64:	29 f0       	breq	.+10     	; 0x3f70 <udd_ep_run+0x84>
    3f66:	20 e0       	ldi	r18, 0x00	; 0
    3f68:	30 e0       	ldi	r19, 0x00	; 0
    3f6a:	02 c0       	rjmp	.+4      	; 0x3f70 <udd_ep_run+0x84>
    3f6c:	21 e0       	ldi	r18, 0x01	; 1
    3f6e:	30 e0       	ldi	r19, 0x00	; 0
    3f70:	f7 01       	movw	r30, r14
    3f72:	80 81       	ld	r24, Z
    3f74:	20 fb       	bst	r18, 0
    3f76:	81 f9       	bld	r24, 1
    3f78:	8b 7f       	andi	r24, 0xFB	; 251
    3f7a:	80 83       	st	Z, r24
    3f7c:	99 20       	and	r9, r9
    3f7e:	1c f4       	brge	.+6      	; 0x3f86 <udd_ep_run+0x9a>
    3f80:	1e 82       	std	Y+6, r1	; 0x06
    3f82:	1f 82       	std	Y+7, r1	; 0x07
    3f84:	15 c0       	rjmp	.+42     	; 0x3fb0 <udd_ep_run+0xc4>
    3f86:	89 81       	ldd	r24, Y+1	; 0x01
    3f88:	80 7c       	andi	r24, 0xC0	; 192
    3f8a:	80 3c       	cpi	r24, 0xC0	; 192
    3f8c:	69 f4       	brne	.+26     	; 0x3fa8 <udd_ep_run+0xbc>
    3f8e:	ce 01       	movw	r24, r28
    3f90:	f7 dc       	rcall	.-1554   	; 0x3980 <udd_ep_get_size>
    3f92:	bc 01       	movw	r22, r24
    3f94:	c6 01       	movw	r24, r12
    3f96:	f7 d6       	rcall	.+3566   	; 0x4d86 <__udivmodhi4>
    3f98:	89 2b       	or	r24, r25
    3f9a:	31 f0       	breq	.+12     	; 0x3fa8 <udd_ep_run+0xbc>
    3f9c:	f7 01       	movw	r30, r14
    3f9e:	80 81       	ld	r24, Z
    3fa0:	8e 7f       	andi	r24, 0xFE	; 254
    3fa2:	80 83       	st	Z, r24
    3fa4:	80 e0       	ldi	r24, 0x00	; 0
    3fa6:	0b c0       	rjmp	.+22     	; 0x3fbe <udd_ep_run+0xd2>
    3fa8:	1a 82       	std	Y+2, r1	; 0x02
    3faa:	1b 82       	std	Y+3, r1	; 0x03
    3fac:	1e 82       	std	Y+6, r1	; 0x06
    3fae:	1f 82       	std	Y+7, r1	; 0x07
    3fb0:	89 2d       	mov	r24, r9
    3fb2:	9d dd       	rcall	.-1222   	; 0x3aee <udd_ep_trans_complet>
    3fb4:	81 e0       	ldi	r24, 0x01	; 1
    3fb6:	03 c0       	rjmp	.+6      	; 0x3fbe <udd_ep_run+0xd2>
    3fb8:	80 e0       	ldi	r24, 0x00	; 0
    3fba:	01 c0       	rjmp	.+2      	; 0x3fbe <udd_ep_run+0xd2>
    3fbc:	80 e0       	ldi	r24, 0x00	; 0
    3fbe:	df 91       	pop	r29
    3fc0:	cf 91       	pop	r28
    3fc2:	1f 91       	pop	r17
    3fc4:	0f 91       	pop	r16
    3fc6:	ff 90       	pop	r15
    3fc8:	ef 90       	pop	r14
    3fca:	df 90       	pop	r13
    3fcc:	cf 90       	pop	r12
    3fce:	bf 90       	pop	r11
    3fd0:	af 90       	pop	r10
    3fd2:	9f 90       	pop	r9
    3fd4:	8f 90       	pop	r8
    3fd6:	08 95       	ret

00003fd8 <udd_ep_abort>:
    3fd8:	0f 93       	push	r16
    3fda:	1f 93       	push	r17
    3fdc:	cf 93       	push	r28
    3fde:	df 93       	push	r29
    3fe0:	18 2f       	mov	r17, r24
    3fe2:	b6 db       	rcall	.-2196   	; 0x3750 <udd_ep_get_ctrl>
    3fe4:	ec 01       	movw	r28, r24
    3fe6:	81 2f       	mov	r24, r17
    3fe8:	f6 dc       	rcall	.-1556   	; 0x39d6 <udd_ep_get_job>
    3fea:	dc 01       	movw	r26, r24
    3fec:	fe 01       	movw	r30, r28
    3fee:	02 e0       	ldi	r16, 0x02	; 2
    3ff0:	05 93       	las	Z, r16
    3ff2:	8c 91       	ld	r24, X
    3ff4:	80 ff       	sbrs	r24, 0
    3ff6:	12 c0       	rjmp	.+36     	; 0x401c <udd_ep_abort+0x44>
    3ff8:	8e 7f       	andi	r24, 0xFE	; 254
    3ffa:	8c 93       	st	X, r24
    3ffc:	17 96       	adiw	r26, 0x07	; 7
    3ffe:	ed 91       	ld	r30, X+
    4000:	fc 91       	ld	r31, X
    4002:	18 97       	sbiw	r26, 0x08	; 8
    4004:	30 97       	sbiw	r30, 0x00	; 0
    4006:	51 f0       	breq	.+20     	; 0x401c <udd_ep_abort+0x44>
    4008:	11 23       	and	r17, r17
    400a:	1c f4       	brge	.+6      	; 0x4012 <udd_ep_abort+0x3a>
    400c:	6e 81       	ldd	r22, Y+6	; 0x06
    400e:	7f 81       	ldd	r23, Y+7	; 0x07
    4010:	02 c0       	rjmp	.+4      	; 0x4016 <udd_ep_abort+0x3e>
    4012:	6a 81       	ldd	r22, Y+2	; 0x02
    4014:	7b 81       	ldd	r23, Y+3	; 0x03
    4016:	41 2f       	mov	r20, r17
    4018:	81 e0       	ldi	r24, 0x01	; 1
    401a:	19 95       	eicall
    401c:	df 91       	pop	r29
    401e:	cf 91       	pop	r28
    4020:	1f 91       	pop	r17
    4022:	0f 91       	pop	r16
    4024:	08 95       	ret

00004026 <udd_ep_set_halt>:
    4026:	0f 93       	push	r16
    4028:	cf 93       	push	r28
    402a:	c8 2f       	mov	r28, r24
    402c:	91 db       	rcall	.-2270   	; 0x3750 <udd_ep_get_ctrl>
    402e:	fc 01       	movw	r30, r24
    4030:	81 81       	ldd	r24, Z+1	; 0x01
    4032:	84 60       	ori	r24, 0x04	; 4
    4034:	81 83       	std	Z+1, r24	; 0x01
    4036:	01 e0       	ldi	r16, 0x01	; 1
    4038:	06 93       	lac	Z, r16
    403a:	8c 2f       	mov	r24, r28
    403c:	cd df       	rcall	.-102    	; 0x3fd8 <udd_ep_abort>
    403e:	81 e0       	ldi	r24, 0x01	; 1
    4040:	cf 91       	pop	r28
    4042:	0f 91       	pop	r16
    4044:	08 95       	ret

00004046 <udd_ep_free>:
    4046:	cf 93       	push	r28
    4048:	c8 2f       	mov	r28, r24
    404a:	c6 df       	rcall	.-116    	; 0x3fd8 <udd_ep_abort>
    404c:	8c 2f       	mov	r24, r28
    404e:	80 db       	rcall	.-2304   	; 0x3750 <udd_ep_get_ctrl>
    4050:	fc 01       	movw	r30, r24
    4052:	11 82       	std	Z+1, r1	; 0x01
    4054:	cf 91       	pop	r28
    4056:	08 95       	ret

00004058 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    4058:	1f 92       	push	r1
    405a:	0f 92       	push	r0
    405c:	0f b6       	in	r0, 0x3f	; 63
    405e:	0f 92       	push	r0
    4060:	11 24       	eor	r1, r1
    4062:	0b b6       	in	r0, 0x3b	; 59
    4064:	0f 92       	push	r0
    4066:	0f 93       	push	r16
    4068:	2f 93       	push	r18
    406a:	3f 93       	push	r19
    406c:	4f 93       	push	r20
    406e:	5f 93       	push	r21
    4070:	6f 93       	push	r22
    4072:	7f 93       	push	r23
    4074:	8f 93       	push	r24
    4076:	9f 93       	push	r25
    4078:	af 93       	push	r26
    407a:	bf 93       	push	r27
    407c:	ef 93       	push	r30
    407e:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    4080:	80 91 cb 04 	lds	r24, 0x04CB
    4084:	88 23       	and	r24, r24
    4086:	34 f4       	brge	.+12     	; 0x4094 <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    4088:	80 e8       	ldi	r24, 0x80	; 128
    408a:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    408e:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    4092:	7e c0       	rjmp	.+252    	; 0x4190 <__vector_125+0x138>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    4094:	80 91 cb 04 	lds	r24, 0x04CB
    4098:	82 ff       	sbrs	r24, 2
    409a:	20 c0       	rjmp	.+64     	; 0x40dc <__vector_125+0x84>
		udd_ack_underflow_event();
    409c:	84 e0       	ldi	r24, 0x04	; 4
    409e:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    40a2:	80 91 fc 28 	lds	r24, 0x28FC
    40a6:	86 ff       	sbrs	r24, 6
    40a8:	73 c0       	rjmp	.+230    	; 0x4190 <__vector_125+0x138>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    40aa:	80 91 cc 04 	lds	r24, 0x04CC
    40ae:	81 fd       	sbrc	r24, 1
    40b0:	6f c0       	rjmp	.+222    	; 0x4190 <__vector_125+0x138>
    40b2:	af dc       	rcall	.-1698   	; 0x3a12 <udd_ctrl_interrupt_tc_setup>
    40b4:	81 11       	cpse	r24, r1
    40b6:	6c c0       	rjmp	.+216    	; 0x4190 <__vector_125+0x138>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    40b8:	80 91 0d 2a 	lds	r24, 0x2A0D
    40bc:	81 30       	cpi	r24, 0x01	; 1
    40be:	11 f4       	brne	.+4      	; 0x40c4 <__vector_125+0x6c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    40c0:	d7 db       	rcall	.-2130   	; 0x3870 <udd_ctrl_send_zlp_in>
    40c2:	66 c0       	rjmp	.+204    	; 0x4190 <__vector_125+0x138>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    40c4:	84 30       	cpi	r24, 0x04	; 4
    40c6:	09 f0       	breq	.+2      	; 0x40ca <__vector_125+0x72>
    40c8:	63 c0       	rjmp	.+198    	; 0x4190 <__vector_125+0x138>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    40ca:	ed ef       	ldi	r30, 0xFD	; 253
    40cc:	f8 e2       	ldi	r31, 0x28	; 40
    40ce:	04 e0       	ldi	r16, 0x04	; 4
    40d0:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    40d2:	e5 ef       	ldi	r30, 0xF5	; 245
    40d4:	f8 e2       	ldi	r31, 0x28	; 40
    40d6:	04 e0       	ldi	r16, 0x04	; 4
    40d8:	05 93       	las	Z, r16
    40da:	5a c0       	rjmp	.+180    	; 0x4190 <__vector_125+0x138>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    40dc:	80 91 cb 04 	lds	r24, 0x04CB
    40e0:	81 ff       	sbrs	r24, 1
    40e2:	51 c0       	rjmp	.+162    	; 0x4186 <__vector_125+0x12e>
		udd_ack_overflow_event();
    40e4:	82 e0       	ldi	r24, 0x02	; 2
    40e6:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    40ea:	80 91 f4 28 	lds	r24, 0x28F4
    40ee:	86 ff       	sbrs	r24, 6
    40f0:	4f c0       	rjmp	.+158    	; 0x4190 <__vector_125+0x138>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    40f2:	80 91 cc 04 	lds	r24, 0x04CC
    40f6:	81 fd       	sbrc	r24, 1
    40f8:	4b c0       	rjmp	.+150    	; 0x4190 <__vector_125+0x138>
    40fa:	8b dc       	rcall	.-1770   	; 0x3a12 <udd_ctrl_interrupt_tc_setup>
    40fc:	81 11       	cpse	r24, r1
    40fe:	48 c0       	rjmp	.+144    	; 0x4190 <__vector_125+0x138>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    4100:	80 91 0d 2a 	lds	r24, 0x2A0D
    4104:	82 30       	cpi	r24, 0x02	; 2
    4106:	11 f4       	brne	.+4      	; 0x410c <__vector_125+0xb4>
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
    4108:	c1 db       	rcall	.-2174   	; 0x388c <udd_ctrl_send_zlp_out>
    410a:	42 c0       	rjmp	.+132    	; 0x4190 <__vector_125+0x138>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    410c:	83 30       	cpi	r24, 0x03	; 3
    410e:	09 f0       	breq	.+2      	; 0x4112 <__vector_125+0xba>
    4110:	3f c0       	rjmp	.+126    	; 0x4190 <__vector_125+0x138>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    4112:	ed ef       	ldi	r30, 0xFD	; 253
    4114:	f8 e2       	ldi	r31, 0x28	; 40
    4116:	04 e0       	ldi	r16, 0x04	; 4
    4118:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    411a:	e5 ef       	ldi	r30, 0xF5	; 245
    411c:	f8 e2       	ldi	r31, 0x28	; 40
    411e:	04 e0       	ldi	r16, 0x04	; 4
    4120:	05 93       	las	Z, r16
    4122:	36 c0       	rjmp	.+108    	; 0x4190 <__vector_125+0x138>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    4124:	80 e1       	ldi	r24, 0x10	; 16
    4126:	80 93 ca 04 	sts	0x04CA, r24
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    412a:	81 e0       	ldi	r24, 0x01	; 1
    412c:	55 df       	rcall	.-342    	; 0x3fd8 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    412e:	81 e8       	ldi	r24, 0x81	; 129
    4130:	53 df       	rcall	.-346    	; 0x3fd8 <udd_ep_abort>
		}
#endif
		udc_reset();
    4132:	0e 94 ac 13 	call	0x2758	; 0x2758 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    4136:	10 92 c3 04 	sts	0x04C3, r1
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
    413a:	40 e4       	ldi	r20, 0x40	; 64
    413c:	50 e0       	ldi	r21, 0x00	; 0
    413e:	60 e0       	ldi	r22, 0x00	; 0
    4140:	80 e0       	ldi	r24, 0x00	; 0
    4142:	1f db       	rcall	.-2498   	; 0x3782 <udd_ep_init>
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
    4144:	40 e4       	ldi	r20, 0x40	; 64
    4146:	50 e0       	ldi	r21, 0x00	; 0
    4148:	60 e0       	ldi	r22, 0x00	; 0
    414a:	80 e8       	ldi	r24, 0x80	; 128
    414c:	1a db       	rcall	.-2508   	; 0x3782 <udd_ep_init>
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    414e:	8d ec       	ldi	r24, 0xCD	; 205
    4150:	99 e2       	ldi	r25, 0x29	; 41
    4152:	80 93 f8 28 	sts	0x28F8, r24
    4156:	90 93 f9 28 	sts	0x28F9, r25
		// Reset endpoint control management
		udd_ctrl_init();
    415a:	51 db       	rcall	.-2398   	; 0x37fe <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    415c:	19 c0       	rjmp	.+50     	; 0x4190 <__vector_125+0x138>
	}

	if (udd_is_suspend_event()) {
    415e:	80 91 cb 04 	lds	r24, 0x04CB
    4162:	86 ff       	sbrs	r24, 6
    4164:	06 c0       	rjmp	.+12     	; 0x4172 <__vector_125+0x11a>
		udd_ack_suspend_event();
    4166:	80 e4       	ldi	r24, 0x40	; 64
    4168:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    416c:	80 e0       	ldi	r24, 0x00	; 0
    416e:	d1 da       	rcall	.-2654   	; 0x3712 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    4170:	0f c0       	rjmp	.+30     	; 0x4190 <__vector_125+0x138>
	}

	if (udd_is_resume_event()) {
    4172:	80 91 cb 04 	lds	r24, 0x04CB
    4176:	85 ff       	sbrs	r24, 5
    4178:	0b c0       	rjmp	.+22     	; 0x4190 <__vector_125+0x138>
		udd_ack_resume_event();
    417a:	80 e2       	ldi	r24, 0x20	; 32
    417c:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    4180:	81 e0       	ldi	r24, 0x01	; 1
    4182:	c7 da       	rcall	.-2674   	; 0x3712 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    4184:	05 c0       	rjmp	.+10     	; 0x4190 <__vector_125+0x138>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    4186:	80 91 cb 04 	lds	r24, 0x04CB
    418a:	84 fd       	sbrc	r24, 4
    418c:	cb cf       	rjmp	.-106    	; 0x4124 <__vector_125+0xcc>
    418e:	e7 cf       	rjmp	.-50     	; 0x415e <__vector_125+0x106>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    4190:	ff 91       	pop	r31
    4192:	ef 91       	pop	r30
    4194:	bf 91       	pop	r27
    4196:	af 91       	pop	r26
    4198:	9f 91       	pop	r25
    419a:	8f 91       	pop	r24
    419c:	7f 91       	pop	r23
    419e:	6f 91       	pop	r22
    41a0:	5f 91       	pop	r21
    41a2:	4f 91       	pop	r20
    41a4:	3f 91       	pop	r19
    41a6:	2f 91       	pop	r18
    41a8:	0f 91       	pop	r16
    41aa:	0f 90       	pop	r0
    41ac:	0b be       	out	0x3b, r0	; 59
    41ae:	0f 90       	pop	r0
    41b0:	0f be       	out	0x3f, r0	; 63
    41b2:	0f 90       	pop	r0
    41b4:	1f 90       	pop	r1
    41b6:	18 95       	reti

000041b8 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    41b8:	1f 92       	push	r1
    41ba:	0f 92       	push	r0
    41bc:	0f b6       	in	r0, 0x3f	; 63
    41be:	0f 92       	push	r0
    41c0:	11 24       	eor	r1, r1
    41c2:	0b b6       	in	r0, 0x3b	; 59
    41c4:	0f 92       	push	r0
    41c6:	0f 93       	push	r16
    41c8:	1f 93       	push	r17
    41ca:	2f 93       	push	r18
    41cc:	3f 93       	push	r19
    41ce:	4f 93       	push	r20
    41d0:	5f 93       	push	r21
    41d2:	6f 93       	push	r22
    41d4:	7f 93       	push	r23
    41d6:	8f 93       	push	r24
    41d8:	9f 93       	push	r25
    41da:	af 93       	push	r26
    41dc:	bf 93       	push	r27
    41de:	cf 93       	push	r28
    41e0:	df 93       	push	r29
    41e2:	ef 93       	push	r30
    41e4:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    41e6:	80 91 cc 04 	lds	r24, 0x04CC
    41ea:	81 fd       	sbrc	r24, 1
    41ec:	03 c0       	rjmp	.+6      	; 0x41f4 <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    41ee:	11 dc       	rcall	.-2014   	; 0x3a12 <udd_ctrl_interrupt_tc_setup>
    41f0:	81 11       	cpse	r24, r1
    41f2:	aa c0       	rjmp	.+340    	; 0x4348 <__vector_126+0x190>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    41f4:	82 e0       	ldi	r24, 0x02	; 2
    41f6:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    41fa:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    41fe:	81 95       	neg	r24
    4200:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    4202:	e4 ef       	ldi	r30, 0xF4	; 244
    4204:	f8 e2       	ldi	r31, 0x28	; 40
    4206:	e8 1b       	sub	r30, r24
    4208:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    420a:	20 81       	ld	r18, Z
    420c:	31 81       	ldd	r19, Z+1	; 0x01
    420e:	24 5f       	subi	r18, 0xF4	; 244
    4210:	38 42       	sbci	r19, 0x28	; 40
    4212:	36 95       	lsr	r19
    4214:	27 95       	ror	r18
    4216:	36 95       	lsr	r19
    4218:	27 95       	ror	r18
    421a:	36 95       	lsr	r19
    421c:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    421e:	82 2f       	mov	r24, r18
    4220:	86 95       	lsr	r24
    4222:	20 ff       	sbrs	r18, 0
    4224:	02 c0       	rjmp	.+4      	; 0x422a <__vector_126+0x72>
    4226:	c0 e8       	ldi	r28, 0x80	; 128
    4228:	01 c0       	rjmp	.+2      	; 0x422c <__vector_126+0x74>
    422a:	c0 e0       	ldi	r28, 0x00	; 0
    422c:	c8 0f       	add	r28, r24
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    422e:	8c 2f       	mov	r24, r28
    4230:	8f da       	rcall	.-2786   	; 0x3750 <udd_ep_get_ctrl>
    4232:	fc 01       	movw	r30, r24
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    4234:	80 81       	ld	r24, Z
    4236:	85 ff       	sbrs	r24, 5
    4238:	87 c0       	rjmp	.+270    	; 0x4348 <__vector_126+0x190>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    423a:	00 e2       	ldi	r16, 0x20	; 32
    423c:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    423e:	c1 11       	cpse	r28, r1
    4240:	7d c0       	rjmp	.+250    	; 0x433c <__vector_126+0x184>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    4242:	80 91 0d 2a 	lds	r24, 0x2A0D
    4246:	84 30       	cpi	r24, 0x04	; 4
    4248:	19 f4       	brne	.+6      	; 0x4250 <__vector_126+0x98>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    424a:	2a db       	rcall	.-2476   	; 0x38a0 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    424c:	d8 da       	rcall	.-2640   	; 0x37fe <udd_ctrl_init>
    424e:	7c c0       	rjmp	.+248    	; 0x4348 <__vector_126+0x190>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    4250:	c0 91 f6 28 	lds	r28, 0x28F6
    4254:	d0 91 f7 28 	lds	r29, 0x28F7

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    4258:	80 91 31 2a 	lds	r24, 0x2A31
    425c:	90 91 32 2a 	lds	r25, 0x2A32
    4260:	00 91 10 2a 	lds	r16, 0x2A10
    4264:	10 91 11 2a 	lds	r17, 0x2A11
    4268:	98 01       	movw	r18, r16
    426a:	2c 0f       	add	r18, r28
    426c:	3d 1f       	adc	r19, r29
    426e:	82 17       	cp	r24, r18
    4270:	93 07       	cpc	r25, r19
    4272:	18 f4       	brcc	.+6      	; 0x427a <__vector_126+0xc2>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    4274:	ec 01       	movw	r28, r24
    4276:	c0 1b       	sub	r28, r16
    4278:	d1 0b       	sbc	r29, r17
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    427a:	20 91 2f 2a 	lds	r18, 0x2A2F
    427e:	30 91 30 2a 	lds	r19, 0x2A30
    4282:	20 0f       	add	r18, r16
    4284:	31 1f       	adc	r19, r17
    4286:	8d ec       	ldi	r24, 0xCD	; 205
    4288:	99 e2       	ldi	r25, 0x29	; 41
    428a:	4c 2f       	mov	r20, r28
    428c:	5d 2f       	mov	r21, r29
    428e:	68 2f       	mov	r22, r24
    4290:	79 2f       	mov	r23, r25
    4292:	82 2f       	mov	r24, r18
    4294:	93 2f       	mov	r25, r19
    4296:	34 d7       	rcall	.+3688   	; 0x5100 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    4298:	0c 0f       	add	r16, r28
    429a:	1d 1f       	adc	r17, r29
    429c:	00 93 10 2a 	sts	0x2A10, r16
    42a0:	10 93 11 2a 	sts	0x2A11, r17

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    42a4:	c0 34       	cpi	r28, 0x40	; 64
    42a6:	d1 05       	cpc	r29, r1
    42a8:	69 f4       	brne	.+26     	; 0x42c4 <__vector_126+0x10c>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    42aa:	80 91 0e 2a 	lds	r24, 0x2A0E
    42ae:	90 91 0f 2a 	lds	r25, 0x2A0F
    42b2:	80 0f       	add	r24, r16
    42b4:	91 1f       	adc	r25, r17

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    42b6:	20 91 2d 2a 	lds	r18, 0x2A2D
    42ba:	30 91 2e 2a 	lds	r19, 0x2A2E
    42be:	82 17       	cp	r24, r18
    42c0:	93 07       	cpc	r25, r19
    42c2:	88 f0       	brcs	.+34     	; 0x42e6 <__vector_126+0x12e>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    42c4:	00 93 31 2a 	sts	0x2A31, r16
    42c8:	10 93 32 2a 	sts	0x2A32, r17
		if (NULL != udd_g_ctrlreq.over_under_run) {
    42cc:	e0 91 35 2a 	lds	r30, 0x2A35
    42d0:	f0 91 36 2a 	lds	r31, 0x2A36
    42d4:	30 97       	sbiw	r30, 0x00	; 0
    42d6:	29 f0       	breq	.+10     	; 0x42e2 <__vector_126+0x12a>
			if (!udd_g_ctrlreq.over_under_run()) {
    42d8:	19 95       	eicall
    42da:	81 11       	cpse	r24, r1
    42dc:	02 c0       	rjmp	.+4      	; 0x42e2 <__vector_126+0x12a>
				// Stall ZLP
				udd_ctrl_stall_data();
    42de:	ba da       	rcall	.-2700   	; 0x3854 <udd_ctrl_stall_data>
    42e0:	33 c0       	rjmp	.+102    	; 0x4348 <__vector_126+0x190>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    42e2:	c6 da       	rcall	.-2676   	; 0x3870 <udd_ctrl_send_zlp_in>
    42e4:	31 c0       	rjmp	.+98     	; 0x4348 <__vector_126+0x190>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    42e6:	80 91 31 2a 	lds	r24, 0x2A31
    42ea:	90 91 32 2a 	lds	r25, 0x2A32
    42ee:	08 17       	cp	r16, r24
    42f0:	19 07       	cpc	r17, r25
    42f2:	f9 f4       	brne	.+62     	; 0x4332 <__vector_126+0x17a>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    42f4:	e0 91 35 2a 	lds	r30, 0x2A35
    42f8:	f0 91 36 2a 	lds	r31, 0x2A36
    42fc:	30 97       	sbiw	r30, 0x00	; 0
    42fe:	11 f4       	brne	.+4      	; 0x4304 <__vector_126+0x14c>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    4300:	a9 da       	rcall	.-2734   	; 0x3854 <udd_ctrl_stall_data>
    4302:	22 c0       	rjmp	.+68     	; 0x4348 <__vector_126+0x190>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    4304:	19 95       	eicall
    4306:	81 11       	cpse	r24, r1
    4308:	02 c0       	rjmp	.+4      	; 0x430e <__vector_126+0x156>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    430a:	a4 da       	rcall	.-2744   	; 0x3854 <udd_ctrl_stall_data>
    430c:	1d c0       	rjmp	.+58     	; 0x4348 <__vector_126+0x190>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    430e:	20 91 0e 2a 	lds	r18, 0x2A0E
    4312:	30 91 0f 2a 	lds	r19, 0x2A0F
    4316:	80 91 10 2a 	lds	r24, 0x2A10
    431a:	90 91 11 2a 	lds	r25, 0x2A11
    431e:	82 0f       	add	r24, r18
    4320:	93 1f       	adc	r25, r19
    4322:	80 93 0e 2a 	sts	0x2A0E, r24
    4326:	90 93 0f 2a 	sts	0x2A0F, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    432a:	10 92 10 2a 	sts	0x2A10, r1
    432e:	10 92 11 2a 	sts	0x2A11, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    4332:	e4 ef       	ldi	r30, 0xF4	; 244
    4334:	f8 e2       	ldi	r31, 0x28	; 40
    4336:	02 e0       	ldi	r16, 0x02	; 2
    4338:	06 93       	lac	Z, r16
    433a:	06 c0       	rjmp	.+12     	; 0x4348 <__vector_126+0x190>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    433c:	c0 38       	cpi	r28, 0x80	; 128
    433e:	11 f4       	brne	.+4      	; 0x4344 <__vector_126+0x18c>
		udd_ctrl_in_sent();
    4340:	b7 da       	rcall	.-2706   	; 0x38b0 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    4342:	02 c0       	rjmp	.+4      	; 0x4348 <__vector_126+0x190>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    4344:	8c 2f       	mov	r24, r28
    4346:	d3 db       	rcall	.-2138   	; 0x3aee <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    4348:	ff 91       	pop	r31
    434a:	ef 91       	pop	r30
    434c:	df 91       	pop	r29
    434e:	cf 91       	pop	r28
    4350:	bf 91       	pop	r27
    4352:	af 91       	pop	r26
    4354:	9f 91       	pop	r25
    4356:	8f 91       	pop	r24
    4358:	7f 91       	pop	r23
    435a:	6f 91       	pop	r22
    435c:	5f 91       	pop	r21
    435e:	4f 91       	pop	r20
    4360:	3f 91       	pop	r19
    4362:	2f 91       	pop	r18
    4364:	1f 91       	pop	r17
    4366:	0f 91       	pop	r16
    4368:	0f 90       	pop	r0
    436a:	0b be       	out	0x3b, r0	; 59
    436c:	0f 90       	pop	r0
    436e:	0f be       	out	0x3f, r0	; 63
    4370:	0f 90       	pop	r0
    4372:	1f 90       	pop	r1
    4374:	18 95       	reti

00004376 <cdc_start>:
		help++;
	}
}

void cdc_start(void)
{
    4376:	ef 92       	push	r14
    4378:	ff 92       	push	r15
    437a:	0f 93       	push	r16
    437c:	1f 93       	push	r17
    437e:	cf 93       	push	r28
    4380:	df 93       	push	r29
    4382:	cd b7       	in	r28, 0x3d	; 61
    4384:	de b7       	in	r29, 0x3e	; 62
    4386:	60 97       	sbiw	r28, 0x10	; 16
    4388:	cd bf       	out	0x3d, r28	; 61
    438a:	de bf       	out	0x3e, r29	; 62
	uint8_t i;
	uint8_t temp;
	uint8_t nibble_to_ascii[16] = "0123456789ABCDEF";
    438c:	80 e1       	ldi	r24, 0x10	; 16
    438e:	e4 e2       	ldi	r30, 0x24	; 36
    4390:	f1 e2       	ldi	r31, 0x21	; 33
    4392:	de 01       	movw	r26, r28
    4394:	11 96       	adiw	r26, 0x01	; 1
    4396:	01 90       	ld	r0, Z+
    4398:	0d 92       	st	X+, r0
    439a:	8a 95       	dec	r24
    439c:	e1 f7       	brne	.-8      	; 0x4396 <cdc_start+0x20>
    439e:	0f 2e       	mov	r0, r31
    43a0:	f8 e3       	ldi	r31, 0x38	; 56
    43a2:	ef 2e       	mov	r14, r31
    43a4:	fa e2       	ldi	r31, 0x2A	; 42
    43a6:	ff 2e       	mov	r15, r31
    43a8:	f0 2d       	mov	r31, r0
    43aa:	08 e0       	ldi	r16, 0x08	; 8
    43ac:	10 e0       	ldi	r17, 0x00	; 0
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_user_signature_row(uint16_t address)
{
	return nvm_read_byte(NVM_CMD_READ_USER_SIG_ROW_gc, address);
    43ae:	b8 01       	movw	r22, r16
    43b0:	81 e0       	ldi	r24, 0x01	; 1
    43b2:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <nvm_read_byte>
		udi_cdc_putc(val);
		help++;
	}
}

void cdc_start(void)
    43b6:	f7 01       	movw	r30, r14
    43b8:	31 97       	sbiw	r30, 0x01	; 1
	 */
	for (i = 0; i < USER_SIGNATURE_USBID_SIZE / 2; i++) {
		temp = nvm_read_user_signature_row(
				i + USER_SIGNATURE_USBID_POS);
		// Upper nibble
		cdc_serial_number[i * 2] = nibble_to_ascii[(temp & 0xF0) >> 4];
    43ba:	98 2f       	mov	r25, r24
    43bc:	92 95       	swap	r25
    43be:	9f 70       	andi	r25, 0x0F	; 15
    43c0:	a1 e0       	ldi	r26, 0x01	; 1
    43c2:	b0 e0       	ldi	r27, 0x00	; 0
    43c4:	ac 0f       	add	r26, r28
    43c6:	bd 1f       	adc	r27, r29
    43c8:	a9 0f       	add	r26, r25
    43ca:	b1 1d       	adc	r27, r1
    43cc:	9c 91       	ld	r25, X
    43ce:	90 83       	st	Z, r25
		// Lower nibble
		cdc_serial_number[(i * 2) + 1] = nibble_to_ascii[temp & 0x0F];
    43d0:	8f 70       	andi	r24, 0x0F	; 15
    43d2:	e1 e0       	ldi	r30, 0x01	; 1
    43d4:	f0 e0       	ldi	r31, 0x00	; 0
    43d6:	ec 0f       	add	r30, r28
    43d8:	fd 1f       	adc	r31, r29
    43da:	e8 0f       	add	r30, r24
    43dc:	f1 1d       	adc	r31, r1
    43de:	80 81       	ld	r24, Z
    43e0:	f7 01       	movw	r30, r14
    43e2:	80 83       	st	Z, r24
    43e4:	0f 5f       	subi	r16, 0xFF	; 255
    43e6:	1f 4f       	sbci	r17, 0xFF	; 255
    43e8:	f2 e0       	ldi	r31, 0x02	; 2
    43ea:	ef 0e       	add	r14, r31
    43ec:	f1 1c       	adc	r15, r1
	uint8_t nibble_to_ascii[16] = "0123456789ABCDEF";

	/* Copy serial number from user signature row and convert to ASCII
	 * The 6 byte id results in a 12 byte string (1 character per nibble)
	 */
	for (i = 0; i < USER_SIGNATURE_USBID_SIZE / 2; i++) {
    43ee:	0e 30       	cpi	r16, 0x0E	; 14
    43f0:	11 05       	cpc	r17, r1
    43f2:	e9 f6       	brne	.-70     	; 0x43ae <cdc_start+0x38>
		cdc_serial_number[i * 2] = nibble_to_ascii[(temp & 0xF0) >> 4];
		// Lower nibble
		cdc_serial_number[(i * 2) + 1] = nibble_to_ascii[temp & 0x0F];
	}

	udc_start();
    43f4:	0e 94 a9 13 	call	0x2752	; 0x2752 <udc_start>
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
    43f8:	f2 dc       	rcall	.-1564   	; 0x3dde <udd_attach>
	udc_attach();
}
    43fa:	60 96       	adiw	r28, 0x10	; 16
    43fc:	cd bf       	out	0x3d, r28	; 61
    43fe:	de bf       	out	0x3e, r29	; 62
    4400:	df 91       	pop	r29
    4402:	cf 91       	pop	r28
    4404:	1f 91       	pop	r17
    4406:	0f 91       	pop	r16
    4408:	ff 90       	pop	r15
    440a:	ef 90       	pop	r14
    440c:	08 95       	ret

0000440e <cdc_set_dtr>:

void cdc_set_dtr(bool enable)
{
	cdc_opened = enable;
    440e:	80 93 13 2a 	sts	0x2A13, r24
    4412:	08 95       	ret

00004414 <cdc_getkey>:
{
	char key;
	static uint8_t esc_state = 0;

	// If the cdc was opened, print out the help
	if (cdc_opened) {
    4414:	80 91 13 2a 	lds	r24, 0x2A13
    4418:	81 11       	cpse	r24, r1
		cdc_opened = false;
    441a:	10 92 13 2a 	sts	0x2A13, r1
		//cdc_put_help();
	}

	if (!udi_cdc_is_rx_ready()) {
    441e:	0e 94 e5 11 	call	0x23ca	; 0x23ca <udi_cdc_is_rx_ready>
    4422:	88 23       	and	r24, r24
    4424:	f1 f0       	breq	.+60     	; 0x4462 <cdc_getkey+0x4e>
		return KEYBOARD_NO_KEY;
	}

	key = udi_cdc_getc();
    4426:	0e 94 32 12 	call	0x2464	; 0x2464 <udi_cdc_getc>

	if (esc_state == 1) {
    442a:	90 91 14 2a 	lds	r25, 0x2A14
    442e:	91 30       	cpi	r25, 0x01	; 1
    4430:	49 f4       	brne	.+18     	; 0x4444 <cdc_getkey+0x30>
		if (key == 0x5b) {
    4432:	8b 35       	cpi	r24, 0x5B	; 91
    4434:	21 f4       	brne	.+8      	; 0x443e <cdc_getkey+0x2a>
			esc_state = 2;
    4436:	92 e0       	ldi	r25, 0x02	; 2
    4438:	90 93 14 2a 	sts	0x2A14, r25
    443c:	08 95       	ret
		} else {
			esc_state = 0;
    443e:	10 92 14 2a 	sts	0x2A14, r1
    4442:	08 c0       	rjmp	.+16     	; 0x4454 <cdc_getkey+0x40>
		}
	} else if (esc_state == 2) {
    4444:	92 30       	cpi	r25, 0x02	; 2
    4446:	31 f4       	brne	.+12     	; 0x4454 <cdc_getkey+0x40>
		esc_state = 0;
    4448:	10 92 14 2a 	sts	0x2A14, r1
		// Translate up/down arrow keys to keycodes
		switch (key) {
    444c:	81 34       	cpi	r24, 0x41	; 65
    444e:	59 f0       	breq	.+22     	; 0x4466 <cdc_getkey+0x52>
    4450:	82 34       	cpi	r24, 0x42	; 66
    4452:	59 f0       	breq	.+22     	; 0x446a <cdc_getkey+0x56>
			break;
		}
	}

	// Check for escape sequence
	if (key == 0x1b) {
    4454:	8b 31       	cpi	r24, 0x1B	; 27
    4456:	51 f4       	brne	.+20     	; 0x446c <cdc_getkey+0x58>
		esc_state = 1;
    4458:	81 e0       	ldi	r24, 0x01	; 1
    445a:	80 93 14 2a 	sts	0x2A14, r24
		return KEYBOARD_NO_KEY;
    445e:	80 e0       	ldi	r24, 0x00	; 0
    4460:	08 95       	ret
		cdc_opened = false;
		//cdc_put_help();
	}

	if (!udi_cdc_is_rx_ready()) {
		return KEYBOARD_NO_KEY;
    4462:	80 e0       	ldi	r24, 0x00	; 0
    4464:	08 95       	ret
	} else if (esc_state == 2) {
		esc_state = 0;
		// Translate up/down arrow keys to keycodes
		switch (key) {
		case 'A':
			key = KEYBOARD_UP;
    4466:	86 e2       	ldi	r24, 0x26	; 38
    4468:	08 95       	ret
			break;
		case 'B':
			key = KEYBOARD_DOWN;
    446a:	88 e2       	ldi	r24, 0x28	; 40
		return KEYBOARD_NO_KEY;
	}

	// Just return any other key directly
	return key;
}
    446c:	08 95       	ret

0000446e <keyboard_get_key_state>:
 * \brief Check the status of the keyboard
 *
 * \param keybuffer  a keyboard_event struct to store keyboard status
 */
void keyboard_get_key_state(struct keyboard_event *keybuffer)
{
    446e:	cf 93       	push	r28
    4470:	df 93       	push	r29
    4472:	ec 01       	movw	r28, r24

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    4474:	e0 e8       	ldi	r30, 0x80	; 128
    4476:	f6 e0       	ldi	r31, 0x06	; 6
    4478:	80 85       	ldd	r24, Z+8	; 0x08
	// Variable to hold the key mask
	static uint8_t key_state;
	char key;

	if ((gpio_pin_is_low(GPIO_PUSH_BUTTON_0)) &&
    447a:	85 fd       	sbrc	r24, 5
    447c:	0c c0       	rjmp	.+24     	; 0x4496 <keyboard_get_key_state+0x28>
			!(key_state & KEYBOARD_ENTER_MASK)) {
    447e:	80 91 15 2a 	lds	r24, 0x2A15
{
	// Variable to hold the key mask
	static uint8_t key_state;
	char key;

	if ((gpio_pin_is_low(GPIO_PUSH_BUTTON_0)) &&
    4482:	80 fd       	sbrc	r24, 0
    4484:	08 c0       	rjmp	.+16     	; 0x4496 <keyboard_get_key_state+0x28>
			!(key_state & KEYBOARD_ENTER_MASK)) {
		// Key pressed
		key_state |= KEYBOARD_ENTER_MASK;
    4486:	81 60       	ori	r24, 0x01	; 1
    4488:	80 93 15 2a 	sts	0x2A15, r24
		keybuffer->keycode = KEYBOARD_ENTER;
    448c:	8d e0       	ldi	r24, 0x0D	; 13
    448e:	88 83       	st	Y, r24
		keybuffer->type = KEYBOARD_PRESS;
    4490:	81 e0       	ldi	r24, 0x01	; 1
    4492:	89 83       	std	Y+1, r24	; 0x01
    4494:	7c c0       	rjmp	.+248    	; 0x458e <keyboard_get_key_state+0x120>
    4496:	e0 e8       	ldi	r30, 0x80	; 128
    4498:	f6 e0       	ldi	r31, 0x06	; 6
    449a:	80 85       	ldd	r24, Z+8	; 0x08
	} else if ((gpio_pin_is_high(GPIO_PUSH_BUTTON_0))
    449c:	85 ff       	sbrs	r24, 5
    449e:	0c c0       	rjmp	.+24     	; 0x44b8 <keyboard_get_key_state+0x4a>
			&& (key_state & KEYBOARD_ENTER_MASK)) {
    44a0:	80 91 15 2a 	lds	r24, 0x2A15
    44a4:	80 ff       	sbrs	r24, 0
    44a6:	08 c0       	rjmp	.+16     	; 0x44b8 <keyboard_get_key_state+0x4a>
		// Key released
		key_state &= ~KEYBOARD_ENTER_MASK;
    44a8:	8e 7f       	andi	r24, 0xFE	; 254
    44aa:	80 93 15 2a 	sts	0x2A15, r24
		keybuffer->keycode = KEYBOARD_ENTER;
    44ae:	8d e0       	ldi	r24, 0x0D	; 13
    44b0:	88 83       	st	Y, r24
		keybuffer->type = KEYBOARD_RELEASE;
    44b2:	82 e0       	ldi	r24, 0x02	; 2
    44b4:	89 83       	std	Y+1, r24	; 0x01
    44b6:	6b c0       	rjmp	.+214    	; 0x458e <keyboard_get_key_state+0x120>
    44b8:	e0 ea       	ldi	r30, 0xA0	; 160
    44ba:	f6 e0       	ldi	r31, 0x06	; 6
    44bc:	80 85       	ldd	r24, Z+8	; 0x08
	} else if ((gpio_pin_is_low(GPIO_PUSH_BUTTON_1)) &&
    44be:	81 fd       	sbrc	r24, 1
    44c0:	0c c0       	rjmp	.+24     	; 0x44da <keyboard_get_key_state+0x6c>
			!(key_state & KEYBOARD_UP_MASK)) {
    44c2:	80 91 15 2a 	lds	r24, 0x2A15
			&& (key_state & KEYBOARD_ENTER_MASK)) {
		// Key released
		key_state &= ~KEYBOARD_ENTER_MASK;
		keybuffer->keycode = KEYBOARD_ENTER;
		keybuffer->type = KEYBOARD_RELEASE;
	} else if ((gpio_pin_is_low(GPIO_PUSH_BUTTON_1)) &&
    44c6:	81 fd       	sbrc	r24, 1
    44c8:	08 c0       	rjmp	.+16     	; 0x44da <keyboard_get_key_state+0x6c>
			!(key_state & KEYBOARD_UP_MASK)) {
		// Key pressed
		key_state |= KEYBOARD_UP_MASK;
    44ca:	82 60       	ori	r24, 0x02	; 2
    44cc:	80 93 15 2a 	sts	0x2A15, r24
		keybuffer->keycode = KEYBOARD_UP;
    44d0:	86 e2       	ldi	r24, 0x26	; 38
    44d2:	88 83       	st	Y, r24
		keybuffer->type = KEYBOARD_PRESS;
    44d4:	81 e0       	ldi	r24, 0x01	; 1
    44d6:	89 83       	std	Y+1, r24	; 0x01
    44d8:	5a c0       	rjmp	.+180    	; 0x458e <keyboard_get_key_state+0x120>
    44da:	e0 ea       	ldi	r30, 0xA0	; 160
    44dc:	f6 e0       	ldi	r31, 0x06	; 6
    44de:	80 85       	ldd	r24, Z+8	; 0x08
	} else if ((gpio_pin_is_high(GPIO_PUSH_BUTTON_1))
    44e0:	81 ff       	sbrs	r24, 1
    44e2:	0c c0       	rjmp	.+24     	; 0x44fc <keyboard_get_key_state+0x8e>
			&& (key_state & KEYBOARD_UP_MASK)) {
    44e4:	80 91 15 2a 	lds	r24, 0x2A15
    44e8:	81 ff       	sbrs	r24, 1
    44ea:	08 c0       	rjmp	.+16     	; 0x44fc <keyboard_get_key_state+0x8e>
		// Key released
		key_state &= ~KEYBOARD_UP_MASK;
    44ec:	8d 7f       	andi	r24, 0xFD	; 253
    44ee:	80 93 15 2a 	sts	0x2A15, r24
		keybuffer->keycode = KEYBOARD_UP;
    44f2:	86 e2       	ldi	r24, 0x26	; 38
    44f4:	88 83       	st	Y, r24
		keybuffer->type = KEYBOARD_RELEASE;
    44f6:	82 e0       	ldi	r24, 0x02	; 2
    44f8:	89 83       	std	Y+1, r24	; 0x01
    44fa:	49 c0       	rjmp	.+146    	; 0x458e <keyboard_get_key_state+0x120>
    44fc:	e0 ea       	ldi	r30, 0xA0	; 160
    44fe:	f6 e0       	ldi	r31, 0x06	; 6
    4500:	80 85       	ldd	r24, Z+8	; 0x08
	} else if ((gpio_pin_is_low(GPIO_PUSH_BUTTON_2)) &&
    4502:	82 fd       	sbrc	r24, 2
    4504:	0c c0       	rjmp	.+24     	; 0x451e <keyboard_get_key_state+0xb0>
			!(key_state & KEYBOARD_DOWN_MASK)) {
    4506:	80 91 15 2a 	lds	r24, 0x2A15
			&& (key_state & KEYBOARD_UP_MASK)) {
		// Key released
		key_state &= ~KEYBOARD_UP_MASK;
		keybuffer->keycode = KEYBOARD_UP;
		keybuffer->type = KEYBOARD_RELEASE;
	} else if ((gpio_pin_is_low(GPIO_PUSH_BUTTON_2)) &&
    450a:	82 fd       	sbrc	r24, 2
    450c:	08 c0       	rjmp	.+16     	; 0x451e <keyboard_get_key_state+0xb0>
			!(key_state & KEYBOARD_DOWN_MASK)) {
		// Key pressed
		key_state |= KEYBOARD_DOWN_MASK;
    450e:	84 60       	ori	r24, 0x04	; 4
    4510:	80 93 15 2a 	sts	0x2A15, r24
		keybuffer->keycode = KEYBOARD_DOWN;
    4514:	88 e2       	ldi	r24, 0x28	; 40
    4516:	88 83       	st	Y, r24
		keybuffer->type = KEYBOARD_PRESS;
    4518:	81 e0       	ldi	r24, 0x01	; 1
    451a:	89 83       	std	Y+1, r24	; 0x01
    451c:	38 c0       	rjmp	.+112    	; 0x458e <keyboard_get_key_state+0x120>
    451e:	e0 ea       	ldi	r30, 0xA0	; 160
    4520:	f6 e0       	ldi	r31, 0x06	; 6
    4522:	80 85       	ldd	r24, Z+8	; 0x08
	} else if ((gpio_pin_is_high(GPIO_PUSH_BUTTON_2))
    4524:	82 ff       	sbrs	r24, 2
    4526:	0c c0       	rjmp	.+24     	; 0x4540 <keyboard_get_key_state+0xd2>
			&& (key_state & KEYBOARD_DOWN_MASK)) {
    4528:	80 91 15 2a 	lds	r24, 0x2A15
    452c:	82 ff       	sbrs	r24, 2
    452e:	08 c0       	rjmp	.+16     	; 0x4540 <keyboard_get_key_state+0xd2>
		// Key released
		key_state &= ~KEYBOARD_DOWN_MASK;
    4530:	8b 7f       	andi	r24, 0xFB	; 251
    4532:	80 93 15 2a 	sts	0x2A15, r24
		keybuffer->keycode = KEYBOARD_DOWN;
    4536:	88 e2       	ldi	r24, 0x28	; 40
    4538:	88 83       	st	Y, r24
		keybuffer->type = KEYBOARD_RELEASE;
    453a:	82 e0       	ldi	r24, 0x02	; 2
    453c:	89 83       	std	Y+1, r24	; 0x01
    453e:	27 c0       	rjmp	.+78     	; 0x458e <keyboard_get_key_state+0x120>

	// touch key
	} else if ((check_touch_key_pressed()) &&
    4540:	4b d2       	rcall	.+1174   	; 0x49d8 <check_touch_key_pressed>
    4542:	88 23       	and	r24, r24
    4544:	61 f0       	breq	.+24     	; 0x455e <keyboard_get_key_state+0xf0>
			!(key_state & KEYBOARD_BACK_MASK)) {
    4546:	80 91 15 2a 	lds	r24, 0x2A15
		key_state &= ~KEYBOARD_DOWN_MASK;
		keybuffer->keycode = KEYBOARD_DOWN;
		keybuffer->type = KEYBOARD_RELEASE;

	// touch key
	} else if ((check_touch_key_pressed()) &&
    454a:	83 fd       	sbrc	r24, 3
    454c:	08 c0       	rjmp	.+16     	; 0x455e <keyboard_get_key_state+0xf0>
			!(key_state & KEYBOARD_BACK_MASK)) {
		// Touch key pressed
		key_state |= KEYBOARD_BACK_MASK;
    454e:	88 60       	ori	r24, 0x08	; 8
    4550:	80 93 15 2a 	sts	0x2A15, r24
		keybuffer->keycode = KEYBOARD_BACK;
    4554:	88 e0       	ldi	r24, 0x08	; 8
    4556:	88 83       	st	Y, r24
		keybuffer->type = KEYBOARD_PRESS;
    4558:	81 e0       	ldi	r24, 0x01	; 1
    455a:	89 83       	std	Y+1, r24	; 0x01
    455c:	18 c0       	rjmp	.+48     	; 0x458e <keyboard_get_key_state+0x120>
	} else if ((!check_touch_key_pressed()) &&
    455e:	3c d2       	rcall	.+1144   	; 0x49d8 <check_touch_key_pressed>
    4560:	81 11       	cpse	r24, r1
    4562:	0c c0       	rjmp	.+24     	; 0x457c <keyboard_get_key_state+0x10e>
			(key_state & KEYBOARD_BACK_MASK)) {
    4564:	80 91 15 2a 	lds	r24, 0x2A15
			!(key_state & KEYBOARD_BACK_MASK)) {
		// Touch key pressed
		key_state |= KEYBOARD_BACK_MASK;
		keybuffer->keycode = KEYBOARD_BACK;
		keybuffer->type = KEYBOARD_PRESS;
	} else if ((!check_touch_key_pressed()) &&
    4568:	83 ff       	sbrs	r24, 3
    456a:	08 c0       	rjmp	.+16     	; 0x457c <keyboard_get_key_state+0x10e>
			(key_state & KEYBOARD_BACK_MASK)) {
		// Touch key released
		key_state &= ~KEYBOARD_BACK_MASK;
    456c:	87 7f       	andi	r24, 0xF7	; 247
    456e:	80 93 15 2a 	sts	0x2A15, r24
		keybuffer->keycode = KEYBOARD_BACK;
    4572:	88 e0       	ldi	r24, 0x08	; 8
    4574:	88 83       	st	Y, r24
		keybuffer->type = KEYBOARD_RELEASE;
    4576:	82 e0       	ldi	r24, 0x02	; 2
    4578:	89 83       	std	Y+1, r24	; 0x01
    457a:	09 c0       	rjmp	.+18     	; 0x458e <keyboard_get_key_state+0x120>
	} else if ((key = cdc_getkey()) != KEYBOARD_NO_KEY) {
    457c:	4b df       	rcall	.-362    	; 0x4414 <cdc_getkey>
    457e:	88 23       	and	r24, r24
    4580:	21 f0       	breq	.+8      	; 0x458a <keyboard_get_key_state+0x11c>
		keybuffer->keycode = key;
    4582:	88 83       	st	Y, r24
		keybuffer->type = KEYBOARD_RELEASE;
    4584:	82 e0       	ldi	r24, 0x02	; 2
    4586:	89 83       	std	Y+1, r24	; 0x01
    4588:	02 c0       	rjmp	.+4      	; 0x458e <keyboard_get_key_state+0x120>
	} else {
		keybuffer->keycode = KEYBOARD_NO_KEY;
    458a:	18 82       	st	Y, r1
		keybuffer->type = KEYBOARD_NO_EVENT;
    458c:	19 82       	std	Y+1, r1	; 0x01
	}
}
    458e:	df 91       	pop	r29
    4590:	cf 91       	pop	r28
    4592:	08 95       	ret

00004594 <cdc_putstr>:
		keyboard_get_key_state(&input);
		if (input.type == KEYBOARD_RELEASE) {
			break;
		}
	}
}
    4594:	cf 93       	push	r28
    4596:	df 93       	push	r29
    4598:	ec 01       	movw	r28, r24
    459a:	88 81       	ld	r24, Y
    459c:	88 23       	and	r24, r24
    459e:	49 f0       	breq	.+18     	; 0x45b2 <cdc_putstr+0x1e>
    45a0:	21 96       	adiw	r28, 0x01	; 1
    45a2:	99 27       	eor	r25, r25
    45a4:	87 fd       	sbrc	r24, 7
    45a6:	90 95       	com	r25
    45a8:	0e 94 ac 12 	call	0x2558	; 0x2558 <udi_cdc_putc>
    45ac:	89 91       	ld	r24, Y+
    45ae:	81 11       	cpse	r24, r1
    45b0:	f8 cf       	rjmp	.-16     	; 0x45a2 <cdc_putstr+0xe>
    45b2:	df 91       	pop	r29
    45b4:	cf 91       	pop	r28
    45b6:	08 95       	ret

000045b8 <temp_disp_init>:
uint8_t temp_scale;
// Variable for holding the actual temperature in Celsius
int16_t temperature;

void temp_disp_init()
{
    45b8:	0f 93       	push	r16

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    45ba:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    45bc:	f8 94       	cli
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
    45be:	e0 e0       	ldi	r30, 0x00	; 0
    45c0:	f2 e0       	ldi	r31, 0x02	; 2
    45c2:	90 81       	ld	r25, Z
    45c4:	98 60       	ori	r25, 0x08	; 8
    45c6:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    45c8:	8f bf       	out	0x3f, r24	; 63
	// Initiate a temperature sensor reading
	ntc_measure();

	// Struct for holding the temperature scale background
	tempscale.type = GFX_MONO_BITMAP_RAM;
    45ca:	10 92 49 2a 	sts	0x2A49, r1
	tempscale.width = 6;
    45ce:	86 e0       	ldi	r24, 0x06	; 6
    45d0:	80 93 47 2a 	sts	0x2A47, r24
	tempscale.height = 32;
    45d4:	80 e2       	ldi	r24, 0x20	; 32
    45d6:	80 93 48 2a 	sts	0x2A48, r24
	tempscale.data.pixmap = tempscale_img;
    45da:	82 ec       	ldi	r24, 0xC2	; 194
    45dc:	90 e2       	ldi	r25, 0x20	; 32
    45de:	80 93 4a 2a 	sts	0x2A4A, r24
    45e2:	90 93 4b 2a 	sts	0x2A4B, r25

	// Screen border
	gfx_mono_draw_rect(0, 0, 128, 32, GFX_PIXEL_SET);
    45e6:	01 e0       	ldi	r16, 0x01	; 1
    45e8:	20 e2       	ldi	r18, 0x20	; 32
    45ea:	40 e8       	ldi	r20, 0x80	; 128
    45ec:	60 e0       	ldi	r22, 0x00	; 0
    45ee:	80 e0       	ldi	r24, 0x00	; 0
    45f0:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <gfx_mono_generic_draw_rect>
	// Clear screen
	gfx_mono_draw_filled_rect(1, 1, 126, 30, GFX_PIXEL_CLR);
    45f4:	00 e0       	ldi	r16, 0x00	; 0
    45f6:	2e e1       	ldi	r18, 0x1E	; 30
    45f8:	4e e7       	ldi	r20, 0x7E	; 126
    45fa:	61 e0       	ldi	r22, 0x01	; 1
    45fc:	81 e0       	ldi	r24, 0x01	; 1
    45fe:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <gfx_mono_generic_draw_filled_rect>
	
	//Paint thermometer on screen
	gfx_mono_put_bitmap(&tempscale, 10, 0);
    4602:	40 e0       	ldi	r20, 0x00	; 0
    4604:	6a e0       	ldi	r22, 0x0A	; 10
    4606:	87 e4       	ldi	r24, 0x47	; 71
    4608:	9a e2       	ldi	r25, 0x2A	; 42
    460a:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <gfx_mono_generic_put_bitmap>
	
	// wait for NTC data to ready
	while (!ntc_data_is_ready());
    460e:	0e 94 01 09 	call	0x1202	; 0x1202 <ntc_data_is_ready>
    4612:	88 23       	and	r24, r24
    4614:	e1 f3       	breq	.-8      	; 0x460e <temp_disp_init+0x56>
	// Read the temperature once the ADC reading is done
	temperature = ntc_get_temperature();
    4616:	0e 94 63 09 	call	0x12c6	; 0x12c6 <ntc_get_temperature>
    461a:	28 2f       	mov	r18, r24
    461c:	33 27       	eor	r19, r19
    461e:	27 fd       	sbrc	r18, 7
    4620:	30 95       	com	r19
    4622:	20 93 44 2a 	sts	0x2A44, r18
    4626:	30 93 45 2a 	sts	0x2A45, r19
	
	// Convert the temperature into the thermometer scale
	temp_scale = -0.36 * temperature + 20.25;
    462a:	68 2f       	mov	r22, r24
    462c:	77 27       	eor	r23, r23
    462e:	67 fd       	sbrc	r22, 7
    4630:	70 95       	com	r23
    4632:	87 2f       	mov	r24, r23
    4634:	97 2f       	mov	r25, r23
    4636:	b8 d2       	rcall	.+1392   	; 0x4ba8 <__floatsisf>
    4638:	2c ee       	ldi	r18, 0xEC	; 236
    463a:	31 e5       	ldi	r19, 0x51	; 81
    463c:	48 eb       	ldi	r20, 0xB8	; 184
    463e:	5e eb       	ldi	r21, 0xBE	; 190
    4640:	3f d3       	rcall	.+1662   	; 0x4cc0 <__mulsf3>
    4642:	20 e0       	ldi	r18, 0x00	; 0
    4644:	30 e0       	ldi	r19, 0x00	; 0
    4646:	42 ea       	ldi	r20, 0xA2	; 162
    4648:	51 e4       	ldi	r21, 0x41	; 65
    464a:	17 d2       	rcall	.+1070   	; 0x4a7a <__addsf3>
    464c:	7f d2       	rcall	.+1278   	; 0x4b4c <__fixunssfsi>
    464e:	26 2f       	mov	r18, r22
    4650:	60 93 46 2a 	sts	0x2A46, r22
	if (temp_scale <= 0) {
		temp_scale = 0;
	}
	
	// Draw the scale element on top of the background temperature image
	gfx_mono_draw_filled_rect(12, 3, 2, temp_scale,
    4654:	00 e0       	ldi	r16, 0x00	; 0
    4656:	42 e0       	ldi	r20, 0x02	; 2
    4658:	63 e0       	ldi	r22, 0x03	; 3
    465a:	8c e0       	ldi	r24, 0x0C	; 12
    465c:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <gfx_mono_generic_draw_filled_rect>
	GFX_PIXEL_CLR);
	
	snprintf(temperature_string, sizeof(temperature_string), "%3i Celsius",
    4660:	80 91 45 2a 	lds	r24, 0x2A45
    4664:	8f 93       	push	r24
    4666:	80 91 44 2a 	lds	r24, 0x2A44
    466a:	8f 93       	push	r24
    466c:	88 e4       	ldi	r24, 0x48	; 72
    466e:	91 e2       	ldi	r25, 0x21	; 33
    4670:	9f 93       	push	r25
    4672:	8f 93       	push	r24
    4674:	1f 92       	push	r1
    4676:	8f e0       	ldi	r24, 0x0F	; 15
    4678:	8f 93       	push	r24
    467a:	8c e4       	ldi	r24, 0x4C	; 76
    467c:	9a e2       	ldi	r25, 0x2A	; 42
    467e:	9f 93       	push	r25
    4680:	8f 93       	push	r24
    4682:	6d d5       	rcall	.+2778   	; 0x515e <snprintf>
	temperature);

	// Draw the Celsius string
	gfx_mono_draw_string(temperature_string, 22, 13, &sysfont);
    4684:	27 e0       	ldi	r18, 0x07	; 7
    4686:	30 e2       	ldi	r19, 0x20	; 32
    4688:	4d e0       	ldi	r20, 0x0D	; 13
    468a:	66 e1       	ldi	r22, 0x16	; 22
    468c:	8c e4       	ldi	r24, 0x4C	; 76
    468e:	9a e2       	ldi	r25, 0x2A	; 42
    4690:	0e 94 56 0f 	call	0x1eac	; 0x1eac <gfx_mono_draw_string>
    4694:	8d b7       	in	r24, 0x3d	; 61
    4696:	9e b7       	in	r25, 0x3e	; 62
    4698:	08 96       	adiw	r24, 0x08	; 8
    469a:	8d bf       	out	0x3d, r24	; 61
    469c:	9e bf       	out	0x3e, r25	; 62
}
    469e:	0f 91       	pop	r16
    46a0:	08 95       	ret

000046a2 <main>:
 * set timezone from EEPROM if it is set. If it is not set it will open the
 * timezone selector to select the local timezone. It then runs the menu system
 * in an infinite while loop.
 */
int main(void)
{
    46a2:	cf 93       	push	r28
    46a4:	df 93       	push	r29
    46a6:	1f 92       	push	r1
    46a8:	1f 92       	push	r1
    46aa:	cd b7       	in	r28, 0x3d	; 61
    46ac:	de b7       	in	r29, 0x3e	; 62
	uint8_t menu_status;
	struct keyboard_event input;
	uint32_t rtc_timestamp;

	sysclk_init();
    46ae:	0e 94 02 0b 	call	0x1604	; 0x1604 <sysclk_init>
	board_init();
    46b2:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <board_init>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    46b6:	87 e0       	ldi	r24, 0x07	; 7
    46b8:	e0 ea       	ldi	r30, 0xA0	; 160
    46ba:	f0 e0       	ldi	r31, 0x00	; 0
    46bc:	82 83       	std	Z+2, r24	; 0x02
	pmic_init();
	gfx_mono_init();
    46be:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <gfx_mono_st7565r_init>
	touch_init();
    46c2:	3b d1       	rcall	.+630    	; 0x493a <touch_init>
	adc_sensors_init();
    46c4:	0e 94 0f 09 	call	0x121e	; 0x121e <adc_sensors_init>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    46c8:	80 e1       	ldi	r24, 0x10	; 16
    46ca:	e0 e8       	ldi	r30, 0x80	; 128
    46cc:	f6 e0       	ldi	r31, 0x06	; 6
    46ce:	85 83       	std	Z+5, r24	; 0x05

	// Enable display backlight
	gpio_set_pin_high(NHD_C12832A1Z_BACKLIGHT);

	// Workaround for known issue: Enable RTC32 sysclk
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    46d0:	64 e0       	ldi	r22, 0x04	; 4
    46d2:	80 e0       	ldi	r24, 0x00	; 0
    46d4:	0e 94 76 0b 	call	0x16ec	; 0x16ec <sysclk_enable_module>
	while (RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm) {
    46d8:	e0 e2       	ldi	r30, 0x20	; 32
    46da:	f4 e0       	ldi	r31, 0x04	; 4
    46dc:	81 81       	ldd	r24, Z+1	; 0x01
    46de:	80 fd       	sbrc	r24, 0
    46e0:	fd cf       	rjmp	.-6      	; 0x46dc <main+0x3a>
		// Wait for RTC32 sysclk to become stable
	}

	// If we have battery power and RTC is running, don't initialize RTC32
	if (rtc_vbat_system_check(false) != VBAT_STATUS_OK) {
    46e2:	80 e0       	ldi	r24, 0x00	; 0
    46e4:	0e 94 09 1a 	call	0x3412	; 0x3412 <rtc_vbat_system_check>
    46e8:	88 23       	and	r24, r24
    46ea:	49 f0       	breq	.+18     	; 0x46fe <main+0x5c>
		rtc_init();
    46ec:	0e 94 2e 1a 	call	0x345c	; 0x345c <rtc_init>

		// Set current time to after production date
		rtc_timestamp = production_date_get_timestamp() + 1;
    46f0:	c5 d0       	rcall	.+394    	; 0x487c <production_date_get_timestamp>
    46f2:	6f 5f       	subi	r22, 0xFF	; 255
    46f4:	7f 4f       	sbci	r23, 0xFF	; 255
    46f6:	8f 4f       	sbci	r24, 0xFF	; 255
    46f8:	9f 4f       	sbci	r25, 0xFF	; 255
		rtc_set_time(rtc_timestamp);
    46fa:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <rtc_set_time>
	}

	// Get current time
	rtc_timestamp = rtc_get_time();
    46fe:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <rtc_get_time>
	// Make sure RTC has not been set to a too early date .
	if (rtc_timestamp < FIRST_POSSIBLE_TIMESTAMP) {
    4702:	60 38       	cpi	r22, 0x80	; 128
    4704:	7e 46       	sbci	r23, 0x6E	; 110
    4706:	8e 41       	sbci	r24, 0x1E	; 30
    4708:	9d 44       	sbci	r25, 0x4D	; 77
    470a:	30 f4       	brcc	.+12     	; 0x4718 <main+0x76>
		// Set time to 01.01.2011 00:00:00
		rtc_set_time(FIRST_POSSIBLE_TIMESTAMP);
    470c:	60 e8       	ldi	r22, 0x80	; 128
    470e:	7e e6       	ldi	r23, 0x6E	; 110
    4710:	8e e1       	ldi	r24, 0x1E	; 30
    4712:	9d e4       	ldi	r25, 0x4D	; 77
    4714:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <rtc_set_time>
	}

	// Initialize USB CDC class
	cdc_start();
    4718:	2e de       	rcall	.-932    	; 0x4376 <cdc_start>

	cpu_irq_enable();
    471a:	78 94       	sei

	// Display a splash screen showing button functions
	//button_splash();

	// Set timezone from EEPROM or to a default value
	timezone_init();
    471c:	7e d1       	rcall	.+764    	; 0x4a1a <timezone_init>
	
	
	// ADDED: Initializing temperature display 
	temp_disp_init();
    471e:	4c df       	rcall	.-360    	; 0x45b8 <temp_disp_init>
	}
}

static void cdc_putuint32(uint32_t value) {
	char* buffer = (char*)calloc(10,sizeof(char));
	sprintf(buffer,"%u", value);
    4720:	0f 2e       	mov	r0, r31
    4722:	fb e5       	ldi	r31, 0x5B	; 91
    4724:	8f 2e       	mov	r8, r31
    4726:	f1 e2       	ldi	r31, 0x21	; 33
    4728:	9f 2e       	mov	r9, r31
    472a:	f0 2d       	mov	r31, r0
    472c:	a1 2c       	mov	r10, r1
    472e:	68 94       	set
    4730:	bb 24       	eor	r11, r11
    4732:	b1 f8       	bld	r11, 1
				
				// Draw the scale element on top of the background temperature image
				gfx_mono_draw_filled_rect(12, 3, 2, temp_scale,
				GFX_PIXEL_CLR);
				
				snprintf(temperature_string, sizeof(temperature_string), "%3i Celsius",
    4734:	0f 2e       	mov	r0, r31
    4736:	f8 e4       	ldi	r31, 0x48	; 72
    4738:	cf 2e       	mov	r12, r31
    473a:	f1 e2       	ldi	r31, 0x21	; 33
    473c:	df 2e       	mov	r13, r31
    473e:	f0 2d       	mov	r31, r0
    4740:	1f e0       	ldi	r17, 0x0F	; 15
    4742:	0f 2e       	mov	r0, r31
    4744:	fc e4       	ldi	r31, 0x4C	; 76
    4746:	ef 2e       	mov	r14, r31
    4748:	fa e2       	ldi	r31, 0x2A	; 42
    474a:	ff 2e       	mov	r15, r31
    474c:	f0 2d       	mov	r31, r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    474e:	8f e3       	ldi	r24, 0x3F	; 63
    4750:	9d e0       	ldi	r25, 0x0D	; 13
    4752:	e3 e0       	ldi	r30, 0x03	; 3
    4754:	81 50       	subi	r24, 0x01	; 1
    4756:	90 40       	sbci	r25, 0x00	; 0
    4758:	e0 40       	sbci	r30, 0x00	; 0
    475a:	e1 f7       	brne	.-8      	; 0x4754 <main+0xb2>
    475c:	00 c0       	rjmp	.+0      	; 0x475e <main+0xbc>
    475e:	00 00       	nop

		do {			
			do {
				//START TEMP PRINT
				_delay_ms(1000);
				rtc_timestamp = rtc_get_time();
    4760:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <rtc_get_time>
    4764:	06 2f       	mov	r16, r22
    4766:	57 2e       	mov	r5, r23
    4768:	48 2e       	mov	r4, r24
    476a:	39 2e       	mov	r3, r25
				{
					//TEST: Print temperature to udi_cdc
					
					//ID
					char * logid = "NTC_OC";
					cdc_putstr(logid);	//Identify sample as on-chip NTC temp.
    476c:	84 e5       	ldi	r24, 0x54	; 84
    476e:	91 e2       	ldi	r25, 0x21	; 33
    4770:	11 df       	rcall	.-478    	; 0x4594 <cdc_putstr>
					
					//Data separator character
					udi_cdc_putc(',');
    4772:	8c e2       	ldi	r24, 0x2C	; 44
    4774:	90 e0       	ldi	r25, 0x00	; 0
    4776:	0e 94 ac 12 	call	0x2558	; 0x2558 <udi_cdc_putc>
		i++;
	}
}

static void cdc_putuint32(uint32_t value) {
	char* buffer = (char*)calloc(10,sizeof(char));
    477a:	61 e0       	ldi	r22, 0x01	; 1
    477c:	70 e0       	ldi	r23, 0x00	; 0
    477e:	8a e0       	ldi	r24, 0x0A	; 10
    4780:	90 e0       	ldi	r25, 0x00	; 0
    4782:	68 d3       	rcall	.+1744   	; 0x4e54 <calloc>
    4784:	68 2e       	mov	r6, r24
    4786:	79 2e       	mov	r7, r25
	sprintf(buffer,"%u", value);
    4788:	3f 92       	push	r3
    478a:	4f 92       	push	r4
    478c:	5f 92       	push	r5
    478e:	0f 93       	push	r16
    4790:	9f 92       	push	r9
    4792:	8f 92       	push	r8
    4794:	9f 93       	push	r25
    4796:	8f 93       	push	r24
    4798:	18 d5       	rcall	.+2608   	; 0x51ca <sprintf>
	cdc_putstr(buffer);
    479a:	86 2d       	mov	r24, r6
    479c:	97 2d       	mov	r25, r7
    479e:	fa de       	rcall	.-524    	; 0x4594 <cdc_putstr>
	free(buffer);
    47a0:	86 2d       	mov	r24, r6
    47a2:	97 2d       	mov	r25, r7
    47a4:	0e d4       	rcall	.+2076   	; 0x4fc2 <free>
					
					//Timestamp
					cdc_putuint32(rtc_timestamp);
					
					//Data separator character
					udi_cdc_putc(',');
    47a6:	8c e2       	ldi	r24, 0x2C	; 44
    47a8:	90 e0       	ldi	r25, 0x00	; 0
    47aa:	0e 94 ac 12 	call	0x2558	; 0x2558 <udi_cdc_putc>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    47ae:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    47b0:	f8 94       	cli
    47b2:	f5 01       	movw	r30, r10
    47b4:	90 81       	ld	r25, Z
    47b6:	98 60       	ori	r25, 0x08	; 8
    47b8:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    47ba:	8f bf       	out	0x3f, r24	; 63
					
					//Temperature
					ntc_measure();
					int8_t temp = ntc_get_temperature();
    47bc:	0e 94 63 09 	call	0x12c6	; 0x12c6 <ntc_get_temperature>
	main_menu_5,
};

static char * cdc_putint8(int8_t intval) {
	char * char_int;
	itoa(intval, char_int, 10);
    47c0:	4a e0       	ldi	r20, 0x0A	; 10
    47c2:	50 e0       	ldi	r21, 0x00	; 0
    47c4:	61 2c       	mov	r6, r1
    47c6:	71 2c       	mov	r7, r1
    47c8:	b3 01       	movw	r22, r6
    47ca:	99 27       	eor	r25, r25
    47cc:	87 fd       	sbrc	r24, 7
    47ce:	90 95       	com	r25
    47d0:	a7 d4       	rcall	.+2382   	; 0x5120 <itoa>
					
					//Temperature
					ntc_measure();
					int8_t temp = ntc_get_temperature();
					char * temp_s = cdc_putint8(temp);
					cdc_putstr(temp_s);	//temperature in string form
    47d2:	c3 01       	movw	r24, r6
    47d4:	df de       	rcall	.-578    	; 0x4594 <cdc_putstr>
					udi_cdc_putc('\r');	//return
    47d6:	8d e0       	ldi	r24, 0x0D	; 13
    47d8:	90 e0       	ldi	r25, 0x00	; 0
    47da:	0e 94 ac 12 	call	0x2558	; 0x2558 <udi_cdc_putc>
					udi_cdc_putc('\n');	//newline
    47de:	8a e0       	ldi	r24, 0x0A	; 10
    47e0:	90 e0       	ldi	r25, 0x00	; 0
    47e2:	0e 94 ac 12 	call	0x2558	; 0x2558 <udi_cdc_putc>
				//END TEMP PRINT
				
				//START Drawing Temperature:
				
				//Paint thermometer on screen
				gfx_mono_put_bitmap(&tempscale, 10, 0);
    47e6:	40 e0       	ldi	r20, 0x00	; 0
    47e8:	6a e0       	ldi	r22, 0x0A	; 10
    47ea:	87 e4       	ldi	r24, 0x47	; 71
    47ec:	9a e2       	ldi	r25, 0x2A	; 42
    47ee:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <gfx_mono_generic_put_bitmap>
				
				// wait for NTC data to ready
				while (!ntc_data_is_ready());
    47f2:	cd bf       	out	0x3d, r28	; 61
    47f4:	de bf       	out	0x3e, r29	; 62
    47f6:	0e 94 01 09 	call	0x1202	; 0x1202 <ntc_data_is_ready>
    47fa:	88 23       	and	r24, r24
    47fc:	e1 f3       	breq	.-8      	; 0x47f6 <main+0x154>
				// Read the temperature once the ADC reading is done
				temperature = ntc_get_temperature();
    47fe:	0e 94 63 09 	call	0x12c6	; 0x12c6 <ntc_get_temperature>
    4802:	28 2f       	mov	r18, r24
    4804:	33 27       	eor	r19, r19
    4806:	27 fd       	sbrc	r18, 7
    4808:	30 95       	com	r19
    480a:	20 93 44 2a 	sts	0x2A44, r18
    480e:	30 93 45 2a 	sts	0x2A45, r19
				
				// Convert the temperature into the thermometer scale
				temp_scale = -0.36 * temperature + 20.25;
    4812:	68 2f       	mov	r22, r24
    4814:	77 27       	eor	r23, r23
    4816:	67 fd       	sbrc	r22, 7
    4818:	70 95       	com	r23
    481a:	87 2f       	mov	r24, r23
    481c:	97 2f       	mov	r25, r23
    481e:	c4 d1       	rcall	.+904    	; 0x4ba8 <__floatsisf>
    4820:	2c ee       	ldi	r18, 0xEC	; 236
    4822:	31 e5       	ldi	r19, 0x51	; 81
    4824:	48 eb       	ldi	r20, 0xB8	; 184
    4826:	5e eb       	ldi	r21, 0xBE	; 190
    4828:	4b d2       	rcall	.+1174   	; 0x4cc0 <__mulsf3>
    482a:	20 e0       	ldi	r18, 0x00	; 0
    482c:	30 e0       	ldi	r19, 0x00	; 0
    482e:	42 ea       	ldi	r20, 0xA2	; 162
    4830:	51 e4       	ldi	r21, 0x41	; 65
    4832:	23 d1       	rcall	.+582    	; 0x4a7a <__addsf3>
    4834:	8b d1       	rcall	.+790    	; 0x4b4c <__fixunssfsi>
    4836:	26 2f       	mov	r18, r22
    4838:	60 93 46 2a 	sts	0x2A46, r22
				if (temp_scale <= 0) {
					temp_scale = 0;
				}
				
				// Draw the scale element on top of the background temperature image
				gfx_mono_draw_filled_rect(12, 3, 2, temp_scale,
    483c:	00 e0       	ldi	r16, 0x00	; 0
    483e:	42 e0       	ldi	r20, 0x02	; 2
    4840:	63 e0       	ldi	r22, 0x03	; 3
    4842:	8c e0       	ldi	r24, 0x0C	; 12
    4844:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <gfx_mono_generic_draw_filled_rect>
				GFX_PIXEL_CLR);
				
				snprintf(temperature_string, sizeof(temperature_string), "%3i Celsius",
    4848:	80 91 45 2a 	lds	r24, 0x2A45
    484c:	8f 93       	push	r24
    484e:	80 91 44 2a 	lds	r24, 0x2A44
    4852:	8f 93       	push	r24
    4854:	df 92       	push	r13
    4856:	cf 92       	push	r12
    4858:	1f 92       	push	r1
    485a:	1f 93       	push	r17
    485c:	ff 92       	push	r15
    485e:	ef 92       	push	r14
    4860:	7e d4       	rcall	.+2300   	; 0x515e <snprintf>
				temperature);

				// Draw the Celsius string
				gfx_mono_draw_string(temperature_string, 22, 13, &sysfont);
    4862:	27 e0       	ldi	r18, 0x07	; 7
    4864:	30 e2       	ldi	r19, 0x20	; 32
    4866:	4d e0       	ldi	r20, 0x0D	; 13
    4868:	66 e1       	ldi	r22, 0x16	; 22
    486a:	c7 01       	movw	r24, r14
    486c:	0e 94 56 0f 	call	0x1eac	; 0x1eac <gfx_mono_draw_string>
				//END Draw temperature
				
				keyboard_get_key_state(&input);
    4870:	ce 01       	movw	r24, r28
    4872:	01 96       	adiw	r24, 0x01	; 1
    4874:	fc dd       	rcall	.-1032   	; 0x446e <keyboard_get_key_state>
    4876:	cd bf       	out	0x3d, r28	; 61
    4878:	de bf       	out	0x3e, r29	; 62
    487a:	69 cf       	rjmp	.-302    	; 0x474e <main+0xac>

0000487c <production_date_get_timestamp>:
 * UNIX time format.
 *
 * \return Production date timestamp
 */
uint32_t production_date_get_timestamp(void)
{
    487c:	0f 93       	push	r16
    487e:	1f 93       	push	r17
    4880:	cf 93       	push	r28
    4882:	df 93       	push	r29
    4884:	60 e1       	ldi	r22, 0x10	; 16
    4886:	70 e0       	ldi	r23, 0x00	; 0
    4888:	81 e0       	ldi	r24, 0x01	; 1
    488a:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <nvm_read_byte>
    488e:	d8 2f       	mov	r29, r24
    4890:	61 e1       	ldi	r22, 0x11	; 17
    4892:	70 e0       	ldi	r23, 0x00	; 0
    4894:	81 e0       	ldi	r24, 0x01	; 1
    4896:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <nvm_read_byte>
    489a:	08 2f       	mov	r16, r24
    489c:	62 e1       	ldi	r22, 0x12	; 18
    489e:	70 e0       	ldi	r23, 0x00	; 0
    48a0:	81 e0       	ldi	r24, 0x01	; 1
    48a2:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <nvm_read_byte>
    48a6:	c8 2f       	mov	r28, r24
    48a8:	63 e1       	ldi	r22, 0x13	; 19
    48aa:	70 e0       	ldi	r23, 0x00	; 0
    48ac:	81 e0       	ldi	r24, 0x01	; 1
    48ae:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <nvm_read_byte>
	// Read timestamp from signature
	uint32_t production_date_timestamp =                             \
		(uint32_t) nvm_read_user_signature_row(                      \
				PRODUCTION_DATE_ADDRESS)          << 24 |            \
		(uint32_t) nvm_read_user_signature_row(                      \
    48b2:	10 e0       	ldi	r17, 0x00	; 0
    48b4:	20 e0       	ldi	r18, 0x00	; 0
    48b6:	30 e0       	ldi	r19, 0x00	; 0
				PRODUCTION_DATE_ADDRESS + 1)      << 16 |            \
    48b8:	98 01       	movw	r18, r16
    48ba:	11 27       	eor	r17, r17
    48bc:	00 27       	eor	r16, r16
uint32_t production_date_get_timestamp(void)
{
	// Read timestamp from signature
	uint32_t production_date_timestamp =                             \
		(uint32_t) nvm_read_user_signature_row(                      \
				PRODUCTION_DATE_ADDRESS)          << 24 |            \
    48be:	3d 2b       	or	r19, r29
		(uint32_t) nvm_read_user_signature_row(                      \
				PRODUCTION_DATE_ADDRESS + 1)      << 16 |            \
    48c0:	08 2b       	or	r16, r24
 * \return Production date timestamp
 */
uint32_t production_date_get_timestamp(void)
{
	// Read timestamp from signature
	uint32_t production_date_timestamp =                             \
    48c2:	1c 2b       	or	r17, r28
				PRODUCTION_DATE_ADDRESS + 2)      <<  8 |            \
		(uint32_t) nvm_read_user_signature_row(                      \
				PRODUCTION_DATE_ADDRESS + 3);

	// Check if timestamp is invalid
	if ((production_date_timestamp == 0xFFFFFFFF) ||
    48c4:	d9 01       	movw	r26, r18
    48c6:	c8 01       	movw	r24, r16
    48c8:	80 58       	subi	r24, 0x80	; 128
    48ca:	9e 46       	sbci	r25, 0x6E	; 110
    48cc:	ae 41       	sbci	r26, 0x1E	; 30
    48ce:	bd 44       	sbci	r27, 0x4D	; 77
    48d0:	8f 37       	cpi	r24, 0x7F	; 127
    48d2:	91 49       	sbci	r25, 0x91	; 145
    48d4:	a1 4e       	sbci	r26, 0xE1	; 225
    48d6:	b2 4b       	sbci	r27, 0xB2	; 178
    48d8:	20 f0       	brcs	.+8      	; 0x48e2 <production_date_get_timestamp+0x66>
			(production_date_timestamp < FIRST_POSSIBLE_TIMESTAMP)) {
		production_date_timestamp = FIRST_POSSIBLE_TIMESTAMP;
    48da:	00 e8       	ldi	r16, 0x80	; 128
    48dc:	1e e6       	ldi	r17, 0x6E	; 110
    48de:	2e e1       	ldi	r18, 0x1E	; 30
    48e0:	3d e4       	ldi	r19, 0x4D	; 77
	}

	return production_date_timestamp;
}
    48e2:	60 2f       	mov	r22, r16
    48e4:	71 2f       	mov	r23, r17
    48e6:	82 2f       	mov	r24, r18
    48e8:	93 2f       	mov	r25, r19
    48ea:	df 91       	pop	r29
    48ec:	cf 91       	pop	r28
    48ee:	1f 91       	pop	r17
    48f0:	0f 91       	pop	r16
    48f2:	08 95       	ret

000048f4 <__vector_22>:
	/*  Set Compare A interrupt to low level   */
	TCC1.INTCTRLB = 1;
}

ISR(TCC1_CCA_vect)
{
    48f4:	1f 92       	push	r1
    48f6:	0f 92       	push	r0
    48f8:	0f b6       	in	r0, 0x3f	; 63
    48fa:	0f 92       	push	r0
    48fc:	11 24       	eor	r1, r1
    48fe:	2f 93       	push	r18
    4900:	3f 93       	push	r19
    4902:	8f 93       	push	r24
    4904:	9f 93       	push	r25
    time_to_measure_touch = true;
    4906:	81 e0       	ldi	r24, 0x01	; 1
    4908:	80 93 18 2a 	sts	0x2A18, r24
    current_time_ms_touch += qt_measurement_period_msec;
    490c:	20 91 16 2a 	lds	r18, 0x2A16
    4910:	30 91 17 2a 	lds	r19, 0x2A17
    4914:	80 91 da 20 	lds	r24, 0x20DA
    4918:	90 91 db 20 	lds	r25, 0x20DB
    491c:	82 0f       	add	r24, r18
    491e:	93 1f       	adc	r25, r19
    4920:	80 93 16 2a 	sts	0x2A16, r24
    4924:	90 93 17 2a 	sts	0x2A17, r25
}
    4928:	9f 91       	pop	r25
    492a:	8f 91       	pop	r24
    492c:	3f 91       	pop	r19
    492e:	2f 91       	pop	r18
    4930:	0f 90       	pop	r0
    4932:	0f be       	out	0x3f, r0	; 63
    4934:	0f 90       	pop	r0
    4936:	1f 90       	pop	r1
    4938:	18 95       	reti

0000493a <touch_init>:
 */
void touch_init(void)
{

#ifdef QTOUCH_STUDIO_MASKS
	SNS_array[0][0]= 0x40;
    493a:	80 e4       	ldi	r24, 0x40	; 64
    493c:	80 93 a2 21 	sts	0x21A2, r24
	SNS_array[0][1]= 0x0;
    4940:	10 92 a3 21 	sts	0x21A3, r1
	SNS_array[1][0]= 0x0;
    4944:	10 92 a4 21 	sts	0x21A4, r1
	SNS_array[1][1]= 0x0;
    4948:	10 92 a5 21 	sts	0x21A5, r1

	SNSK_array[0][0]= 0x80;
    494c:	80 e8       	ldi	r24, 0x80	; 128
    494e:	80 93 a6 21 	sts	0x21A6, r24
	SNSK_array[0][1]= 0x0;
    4952:	10 92 a7 21 	sts	0x21A7, r1
	SNSK_array[1][0]= 0x0;
    4956:	10 92 a8 21 	sts	0x21A8, r1
	SNSK_array[1][1]= 0x0;
    495a:	10 92 a9 21 	sts	0x21A9, r1
	 * When using "pin configurability" this will result in channel 0
	 * because it is the first and only channel that is used.
	 * For the standard qtouch library setup we would need to use
	 * channel 3 since we are using the last two pins on the port.
	 */
	 qt_enable_key(CHANNEL_0, NO_AKS_GROUP, 10, HYST_6_25);
    495e:	23 e0       	ldi	r18, 0x03	; 3
    4960:	4a e0       	ldi	r20, 0x0A	; 10
    4962:	60 e0       	ldi	r22, 0x00	; 0
    4964:	80 e0       	ldi	r24, 0x00	; 0
    4966:	0e 94 3a 04 	call	0x874	; 0x874 <qt_enable_key>
	SNSK_array[1][0]= 0x0;
	SNSK_array[1][1]= 0x0;
#endif

	config_sensor();
	qt_init_sensing();
    496a:	60 e0       	ldi	r22, 0x00	; 0
    496c:	70 e0       	ldi	r23, 0x00	; 0
    496e:	87 e5       	ldi	r24, 0x57	; 87
    4970:	93 e0       	ldi	r25, 0x03	; 3
    4972:	0e 94 4b 05 	call	0xa96	; 0xa96 <qt_init_sensing_with_burst>

/** \brief Passes default parameters from config file to touch library
 */
static void qt_set_parameters( void )
{
    qt_config_data.qt_di              = DEF_QT_DI;
    4976:	84 e0       	ldi	r24, 0x04	; 4
    4978:	80 93 65 21 	sts	0x2165, r24
    qt_config_data.qt_neg_drift_rate  = DEF_QT_NEG_DRIFT_RATE;
    497c:	84 e1       	ldi	r24, 0x14	; 20
    497e:	80 93 68 21 	sts	0x2168, r24
    qt_config_data.qt_pos_drift_rate  = DEF_QT_POS_DRIFT_RATE;
    4982:	95 e0       	ldi	r25, 0x05	; 5
    4984:	90 93 69 21 	sts	0x2169, r25
    qt_config_data.qt_max_on_duration = DEF_QT_MAX_ON_DURATION;
    4988:	10 92 67 21 	sts	0x2167, r1
    qt_config_data.qt_drift_hold_time = DEF_QT_DRIFT_HOLD_TIME;
    498c:	80 93 66 21 	sts	0x2166, r24
    qt_config_data.qt_recal_threshold = DEF_QT_RECAL_THRESHOLD;
    4990:	61 e0       	ldi	r22, 0x01	; 1
    4992:	60 93 64 21 	sts	0x2164, r22
    qt_config_data.qt_pos_recal_delay = DEF_QT_POS_RECAL_DELAY;
    4996:	83 e0       	ldi	r24, 0x03	; 3
    4998:	80 93 6a 21 	sts	0x216A, r24
	 qt_enable_key(CHANNEL_0, NO_AKS_GROUP, 10, HYST_6_25);
}

static void init_timer_isr( void )
{
	PR.PRPC &= ~(0x02);
    499c:	e0 e7       	ldi	r30, 0x70	; 112
    499e:	f0 e0       	ldi	r31, 0x00	; 0
    49a0:	83 81       	ldd	r24, Z+3	; 0x03
    49a2:	8d 7f       	andi	r24, 0xFD	; 253
    49a4:	83 83       	std	Z+3, r24	; 0x03
	/* We divide the peripheral 2MHz clock by 2 to get 1MHz*/
	TCC1.CTRLA = 2;
    49a6:	e0 e4       	ldi	r30, 0x40	; 64
    49a8:	f8 e0       	ldi	r31, 0x08	; 8
    49aa:	82 e0       	ldi	r24, 0x02	; 2
    49ac:	80 83       	st	Z, r24
	/* 1000 counts is 1ms at 1MHz input clock */
	TCC1.PER = 1000 * qt_measurement_period_msec;
    49ae:	40 91 da 20 	lds	r20, 0x20DA
    49b2:	50 91 db 20 	lds	r21, 0x20DB
    49b6:	28 ee       	ldi	r18, 0xE8	; 232
    49b8:	33 e0       	ldi	r19, 0x03	; 3
    49ba:	42 9f       	mul	r20, r18
    49bc:	c0 01       	movw	r24, r0
    49be:	43 9f       	mul	r20, r19
    49c0:	90 0d       	add	r25, r0
    49c2:	52 9f       	mul	r21, r18
    49c4:	90 0d       	add	r25, r0
    49c6:	11 24       	eor	r1, r1
    49c8:	86 a3       	std	Z+38, r24	; 0x26
    49ca:	97 a3       	std	Z+39, r25	; 0x27
	/*  Set Compare A interrupt to low level   */
	TCC1.INTCTRLB = 1;
    49cc:	67 83       	std	Z+7, r22	; 0x07
	/* Set up callback function. This function is called after the library
	 * has made capacitive measurements, but before it has processed them.
	 * The user can use this hook to apply filter functions to the measured
	 * signal values.(Possibly to fix sensor layout faults)
	 */
	qt_filter_callback = 0;
    49ce:	10 92 7e 21 	sts	0x217E, r1
    49d2:	10 92 7f 21 	sts	0x217F, r1
    49d6:	08 95       	ret

000049d8 <check_touch_key_pressed>:
#ifdef _DEBUG_INTERFACE_
    /* Process commands from PC */
    QDebug_ProcessCommands();
#endif

	if (time_to_measure_touch)
    49d8:	80 91 18 2a 	lds	r24, 0x2A18
    49dc:	88 23       	and	r24, r24
    49de:	51 f0       	breq	.+20     	; 0x49f4 <check_touch_key_pressed+0x1c>
	{
		time_to_measure_touch = false;
    49e0:	10 92 18 2a 	sts	0x2A18, r1

		do {
			status_flag = qt_measure_sensors( current_time_ms_touch );
    49e4:	80 91 16 2a 	lds	r24, 0x2A16
    49e8:	90 91 17 2a 	lds	r25, 0x2A17
    49ec:	0e 94 aa 04 	call	0x954	; 0x954 <qt_measure_sensors>
#endif
		/* Time-critical host application code should be placed here since
		 * a full burst cycle may delay critical task in the main application
		 */

		}while (burst_flag) ;
    49f0:	90 fd       	sbrc	r25, 0
    49f2:	f8 cf       	rjmp	.-16     	; 0x49e4 <check_touch_key_pressed+0xc>
#ifdef _DEBUG_INTERFACE_
		/* Process commands from PC */
		QDebug_ProcessCommands();
#endif
	}
	if(GET_SENSOR_STATE(0))
    49f4:	80 91 7b 21 	lds	r24, 0x217B
    49f8:	80 95       	com	r24
		return 0;
	else
		return 1;
}
    49fa:	81 70       	andi	r24, 0x01	; 1
    49fc:	08 95       	ret

000049fe <tz_index_to_minutes>:
 * \retval timezone offset (minutes)
 */
int8_t timezone_get_minutes(void)
{
	return tz_minutes;
}
    49fe:	82 30       	cpi	r24, 0x02	; 2
    4a00:	31 f0       	breq	.+12     	; 0x4a0e <tz_index_to_minutes+0x10>
    4a02:	83 30       	cpi	r24, 0x03	; 3
    4a04:	31 f0       	breq	.+12     	; 0x4a12 <tz_index_to_minutes+0x14>
    4a06:	81 30       	cpi	r24, 0x01	; 1
    4a08:	31 f0       	breq	.+12     	; 0x4a16 <tz_index_to_minutes+0x18>
    4a0a:	80 e0       	ldi	r24, 0x00	; 0
    4a0c:	08 95       	ret
    4a0e:	8e e1       	ldi	r24, 0x1E	; 30
    4a10:	08 95       	ret
    4a12:	8d e2       	ldi	r24, 0x2D	; 45
    4a14:	08 95       	ret
    4a16:	8f e0       	ldi	r24, 0x0F	; 15
    4a18:	08 95       	ret

00004a1a <timezone_init>:
 * If this is the case it will be set, and used by the date&time application.
 * If it is not set, the "select timezone" application will be started to set
 * it
 */
void timezone_init(void)
{
    4a1a:	cf 93       	push	r28
    4a1c:	df 93       	push	r29
	uint8_t temp;
	uint8_t invalid_tz = false;

	// Read timezone (hours) from EEPROM
	temp = nvm_eeprom_read_byte(TZ_HOURS_EEPROM_ADDR);
    4a1e:	84 e0       	ldi	r24, 0x04	; 4
    4a20:	90 e0       	ldi	r25, 0x00	; 0
    4a22:	0e 94 bf 19 	call	0x337e	; 0x337e <nvm_eeprom_read_byte>

	// convert tz_hours_menu index to actual timezone offset
	tz_hours = ((int8_t)temp) - 12;
    4a26:	98 2f       	mov	r25, r24
    4a28:	9c 50       	subi	r25, 0x0C	; 12
    4a2a:	90 93 19 2a 	sts	0x2A19, r25
	
	// Check if the timezone is valid
	if((tz_hours <= 12) && (tz_hours >= -12)) {
    4a2e:	89 31       	cpi	r24, 0x19	; 25
    4a30:	20 f4       	brcc	.+8      	; 0x4a3a <timezone_init+0x20>
		// Set timezone menu selection to the selected timezone
		tz_hours_menu.current_selection = temp;
    4a32:	80 93 f0 20 	sts	0x20F0, r24
 * it
 */
void timezone_init(void)
{
	uint8_t temp;
	uint8_t invalid_tz = false;
    4a36:	d0 e0       	ldi	r29, 0x00	; 0
    4a38:	06 c0       	rjmp	.+12     	; 0x4a46 <timezone_init+0x2c>
	} else {
		/*
		 * Timezone is outside the range; reset to default and set
		 * invalid.
		 */
		tz_hours = 0;
    4a3a:	10 92 19 2a 	sts	0x2A19, r1
		tz_hours_menu.current_selection = 12;
    4a3e:	8c e0       	ldi	r24, 0x0C	; 12
    4a40:	80 93 f0 20 	sts	0x20F0, r24
		invalid_tz = true;
    4a44:	d1 e0       	ldi	r29, 0x01	; 1
	}

	temp = nvm_eeprom_read_byte(TZ_MINUTES_EEPROM_ADDR);
    4a46:	85 e0       	ldi	r24, 0x05	; 5
    4a48:	90 e0       	ldi	r25, 0x00	; 0
    4a4a:	0e 94 bf 19 	call	0x337e	; 0x337e <nvm_eeprom_read_byte>
    4a4e:	c8 2f       	mov	r28, r24

	// Check if we have a valid timezone_minutes_menu index
	if(temp < 4) {
    4a50:	84 30       	cpi	r24, 0x04	; 4
    4a52:	40 f4       	brcc	.+16     	; 0x4a64 <timezone_init+0x4a>
		// Convert to actual minutes from stored menu index
		tz_minutes = tz_index_to_minutes(temp);
    4a54:	d4 df       	rcall	.-88     	; 0x49fe <tz_index_to_minutes>
    4a56:	80 93 1a 2a 	sts	0x2A1A, r24
		// Set the selection in tz_minutes_menu to selected timezone
		tz_minutes_menu.current_selection = temp;
    4a5a:	c0 93 e1 20 	sts	0x20E1, r28
		tz_minutes_menu.current_selection = 0;
		invalid_tz = true;
	}

	// If hours or minutes timezone offset was invalid
	if(invalid_tz == true) {
    4a5e:	d1 30       	cpi	r29, 0x01	; 1
    4a60:	41 f4       	brne	.+16     	; 0x4a72 <timezone_init+0x58>
    4a62:	02 c0       	rjmp	.+4      	; 0x4a68 <timezone_init+0x4e>
		// Set the selection in tz_minutes_menu to selected timezone
		tz_minutes_menu.current_selection = temp;
	} else {
		// Outside the range, reset to default and set invalid
		tz_minutes = 0;
		tz_minutes_menu.current_selection = 0;
    4a64:	10 92 e1 20 	sts	0x20E1, r1
		 * timezone selection.
		 */
		//timezone_select_application();
		
		//Setting Timezone to GMT +1, +0 minutes
		tz_hours = 1;
    4a68:	81 e0       	ldi	r24, 0x01	; 1
    4a6a:	80 93 19 2a 	sts	0x2A19, r24
		tz_minutes = 0;
    4a6e:	10 92 1a 2a 	sts	0x2A1A, r1
	}
}
    4a72:	df 91       	pop	r29
    4a74:	cf 91       	pop	r28
    4a76:	08 95       	ret

00004a78 <__subsf3>:
    4a78:	50 58       	subi	r21, 0x80	; 128

00004a7a <__addsf3>:
    4a7a:	bb 27       	eor	r27, r27
    4a7c:	aa 27       	eor	r26, r26
    4a7e:	0e d0       	rcall	.+28     	; 0x4a9c <__addsf3x>
    4a80:	e5 c0       	rjmp	.+458    	; 0x4c4c <__fp_round>
    4a82:	d6 d0       	rcall	.+428    	; 0x4c30 <__fp_pscA>
    4a84:	30 f0       	brcs	.+12     	; 0x4a92 <__addsf3+0x18>
    4a86:	db d0       	rcall	.+438    	; 0x4c3e <__fp_pscB>
    4a88:	20 f0       	brcs	.+8      	; 0x4a92 <__addsf3+0x18>
    4a8a:	31 f4       	brne	.+12     	; 0x4a98 <__addsf3+0x1e>
    4a8c:	9f 3f       	cpi	r25, 0xFF	; 255
    4a8e:	11 f4       	brne	.+4      	; 0x4a94 <__addsf3+0x1a>
    4a90:	1e f4       	brtc	.+6      	; 0x4a98 <__addsf3+0x1e>
    4a92:	cb c0       	rjmp	.+406    	; 0x4c2a <__fp_nan>
    4a94:	0e f4       	brtc	.+2      	; 0x4a98 <__addsf3+0x1e>
    4a96:	e0 95       	com	r30
    4a98:	e7 fb       	bst	r30, 7
    4a9a:	c1 c0       	rjmp	.+386    	; 0x4c1e <__fp_inf>

00004a9c <__addsf3x>:
    4a9c:	e9 2f       	mov	r30, r25
    4a9e:	e7 d0       	rcall	.+462    	; 0x4c6e <__fp_split3>
    4aa0:	80 f3       	brcs	.-32     	; 0x4a82 <__addsf3+0x8>
    4aa2:	ba 17       	cp	r27, r26
    4aa4:	62 07       	cpc	r22, r18
    4aa6:	73 07       	cpc	r23, r19
    4aa8:	84 07       	cpc	r24, r20
    4aaa:	95 07       	cpc	r25, r21
    4aac:	18 f0       	brcs	.+6      	; 0x4ab4 <__addsf3x+0x18>
    4aae:	71 f4       	brne	.+28     	; 0x4acc <__addsf3x+0x30>
    4ab0:	9e f5       	brtc	.+102    	; 0x4b18 <__addsf3x+0x7c>
    4ab2:	ff c0       	rjmp	.+510    	; 0x4cb2 <__fp_zero>
    4ab4:	0e f4       	brtc	.+2      	; 0x4ab8 <__addsf3x+0x1c>
    4ab6:	e0 95       	com	r30
    4ab8:	0b 2e       	mov	r0, r27
    4aba:	ba 2f       	mov	r27, r26
    4abc:	a0 2d       	mov	r26, r0
    4abe:	0b 01       	movw	r0, r22
    4ac0:	b9 01       	movw	r22, r18
    4ac2:	90 01       	movw	r18, r0
    4ac4:	0c 01       	movw	r0, r24
    4ac6:	ca 01       	movw	r24, r20
    4ac8:	a0 01       	movw	r20, r0
    4aca:	11 24       	eor	r1, r1
    4acc:	ff 27       	eor	r31, r31
    4ace:	59 1b       	sub	r21, r25
    4ad0:	99 f0       	breq	.+38     	; 0x4af8 <__addsf3x+0x5c>
    4ad2:	59 3f       	cpi	r21, 0xF9	; 249
    4ad4:	50 f4       	brcc	.+20     	; 0x4aea <__addsf3x+0x4e>
    4ad6:	50 3e       	cpi	r21, 0xE0	; 224
    4ad8:	68 f1       	brcs	.+90     	; 0x4b34 <__addsf3x+0x98>
    4ada:	1a 16       	cp	r1, r26
    4adc:	f0 40       	sbci	r31, 0x00	; 0
    4ade:	a2 2f       	mov	r26, r18
    4ae0:	23 2f       	mov	r18, r19
    4ae2:	34 2f       	mov	r19, r20
    4ae4:	44 27       	eor	r20, r20
    4ae6:	58 5f       	subi	r21, 0xF8	; 248
    4ae8:	f3 cf       	rjmp	.-26     	; 0x4ad0 <__addsf3x+0x34>
    4aea:	46 95       	lsr	r20
    4aec:	37 95       	ror	r19
    4aee:	27 95       	ror	r18
    4af0:	a7 95       	ror	r26
    4af2:	f0 40       	sbci	r31, 0x00	; 0
    4af4:	53 95       	inc	r21
    4af6:	c9 f7       	brne	.-14     	; 0x4aea <__addsf3x+0x4e>
    4af8:	7e f4       	brtc	.+30     	; 0x4b18 <__addsf3x+0x7c>
    4afa:	1f 16       	cp	r1, r31
    4afc:	ba 0b       	sbc	r27, r26
    4afe:	62 0b       	sbc	r22, r18
    4b00:	73 0b       	sbc	r23, r19
    4b02:	84 0b       	sbc	r24, r20
    4b04:	ba f0       	brmi	.+46     	; 0x4b34 <__addsf3x+0x98>
    4b06:	91 50       	subi	r25, 0x01	; 1
    4b08:	a1 f0       	breq	.+40     	; 0x4b32 <__addsf3x+0x96>
    4b0a:	ff 0f       	add	r31, r31
    4b0c:	bb 1f       	adc	r27, r27
    4b0e:	66 1f       	adc	r22, r22
    4b10:	77 1f       	adc	r23, r23
    4b12:	88 1f       	adc	r24, r24
    4b14:	c2 f7       	brpl	.-16     	; 0x4b06 <__addsf3x+0x6a>
    4b16:	0e c0       	rjmp	.+28     	; 0x4b34 <__addsf3x+0x98>
    4b18:	ba 0f       	add	r27, r26
    4b1a:	62 1f       	adc	r22, r18
    4b1c:	73 1f       	adc	r23, r19
    4b1e:	84 1f       	adc	r24, r20
    4b20:	48 f4       	brcc	.+18     	; 0x4b34 <__addsf3x+0x98>
    4b22:	87 95       	ror	r24
    4b24:	77 95       	ror	r23
    4b26:	67 95       	ror	r22
    4b28:	b7 95       	ror	r27
    4b2a:	f7 95       	ror	r31
    4b2c:	9e 3f       	cpi	r25, 0xFE	; 254
    4b2e:	08 f0       	brcs	.+2      	; 0x4b32 <__addsf3x+0x96>
    4b30:	b3 cf       	rjmp	.-154    	; 0x4a98 <__addsf3+0x1e>
    4b32:	93 95       	inc	r25
    4b34:	88 0f       	add	r24, r24
    4b36:	08 f0       	brcs	.+2      	; 0x4b3a <__addsf3x+0x9e>
    4b38:	99 27       	eor	r25, r25
    4b3a:	ee 0f       	add	r30, r30
    4b3c:	97 95       	ror	r25
    4b3e:	87 95       	ror	r24
    4b40:	08 95       	ret

00004b42 <__fixsfsi>:
    4b42:	04 d0       	rcall	.+8      	; 0x4b4c <__fixunssfsi>
    4b44:	68 94       	set
    4b46:	b1 11       	cpse	r27, r1
    4b48:	b5 c0       	rjmp	.+362    	; 0x4cb4 <__fp_szero>
    4b4a:	08 95       	ret

00004b4c <__fixunssfsi>:
    4b4c:	98 d0       	rcall	.+304    	; 0x4c7e <__fp_splitA>
    4b4e:	88 f0       	brcs	.+34     	; 0x4b72 <__fixunssfsi+0x26>
    4b50:	9f 57       	subi	r25, 0x7F	; 127
    4b52:	90 f0       	brcs	.+36     	; 0x4b78 <__fixunssfsi+0x2c>
    4b54:	b9 2f       	mov	r27, r25
    4b56:	99 27       	eor	r25, r25
    4b58:	b7 51       	subi	r27, 0x17	; 23
    4b5a:	a0 f0       	brcs	.+40     	; 0x4b84 <__fixunssfsi+0x38>
    4b5c:	d1 f0       	breq	.+52     	; 0x4b92 <__fixunssfsi+0x46>
    4b5e:	66 0f       	add	r22, r22
    4b60:	77 1f       	adc	r23, r23
    4b62:	88 1f       	adc	r24, r24
    4b64:	99 1f       	adc	r25, r25
    4b66:	1a f0       	brmi	.+6      	; 0x4b6e <__fixunssfsi+0x22>
    4b68:	ba 95       	dec	r27
    4b6a:	c9 f7       	brne	.-14     	; 0x4b5e <__fixunssfsi+0x12>
    4b6c:	12 c0       	rjmp	.+36     	; 0x4b92 <__fixunssfsi+0x46>
    4b6e:	b1 30       	cpi	r27, 0x01	; 1
    4b70:	81 f0       	breq	.+32     	; 0x4b92 <__fixunssfsi+0x46>
    4b72:	9f d0       	rcall	.+318    	; 0x4cb2 <__fp_zero>
    4b74:	b1 e0       	ldi	r27, 0x01	; 1
    4b76:	08 95       	ret
    4b78:	9c c0       	rjmp	.+312    	; 0x4cb2 <__fp_zero>
    4b7a:	67 2f       	mov	r22, r23
    4b7c:	78 2f       	mov	r23, r24
    4b7e:	88 27       	eor	r24, r24
    4b80:	b8 5f       	subi	r27, 0xF8	; 248
    4b82:	39 f0       	breq	.+14     	; 0x4b92 <__fixunssfsi+0x46>
    4b84:	b9 3f       	cpi	r27, 0xF9	; 249
    4b86:	cc f3       	brlt	.-14     	; 0x4b7a <__fixunssfsi+0x2e>
    4b88:	86 95       	lsr	r24
    4b8a:	77 95       	ror	r23
    4b8c:	67 95       	ror	r22
    4b8e:	b3 95       	inc	r27
    4b90:	d9 f7       	brne	.-10     	; 0x4b88 <__fixunssfsi+0x3c>
    4b92:	3e f4       	brtc	.+14     	; 0x4ba2 <__fixunssfsi+0x56>
    4b94:	90 95       	com	r25
    4b96:	80 95       	com	r24
    4b98:	70 95       	com	r23
    4b9a:	61 95       	neg	r22
    4b9c:	7f 4f       	sbci	r23, 0xFF	; 255
    4b9e:	8f 4f       	sbci	r24, 0xFF	; 255
    4ba0:	9f 4f       	sbci	r25, 0xFF	; 255
    4ba2:	08 95       	ret

00004ba4 <__floatunsisf>:
    4ba4:	e8 94       	clt
    4ba6:	09 c0       	rjmp	.+18     	; 0x4bba <__floatsisf+0x12>

00004ba8 <__floatsisf>:
    4ba8:	97 fb       	bst	r25, 7
    4baa:	3e f4       	brtc	.+14     	; 0x4bba <__floatsisf+0x12>
    4bac:	90 95       	com	r25
    4bae:	80 95       	com	r24
    4bb0:	70 95       	com	r23
    4bb2:	61 95       	neg	r22
    4bb4:	7f 4f       	sbci	r23, 0xFF	; 255
    4bb6:	8f 4f       	sbci	r24, 0xFF	; 255
    4bb8:	9f 4f       	sbci	r25, 0xFF	; 255
    4bba:	99 23       	and	r25, r25
    4bbc:	a9 f0       	breq	.+42     	; 0x4be8 <__floatsisf+0x40>
    4bbe:	f9 2f       	mov	r31, r25
    4bc0:	96 e9       	ldi	r25, 0x96	; 150
    4bc2:	bb 27       	eor	r27, r27
    4bc4:	93 95       	inc	r25
    4bc6:	f6 95       	lsr	r31
    4bc8:	87 95       	ror	r24
    4bca:	77 95       	ror	r23
    4bcc:	67 95       	ror	r22
    4bce:	b7 95       	ror	r27
    4bd0:	f1 11       	cpse	r31, r1
    4bd2:	f8 cf       	rjmp	.-16     	; 0x4bc4 <__floatsisf+0x1c>
    4bd4:	fa f4       	brpl	.+62     	; 0x4c14 <__floatsisf+0x6c>
    4bd6:	bb 0f       	add	r27, r27
    4bd8:	11 f4       	brne	.+4      	; 0x4bde <__floatsisf+0x36>
    4bda:	60 ff       	sbrs	r22, 0
    4bdc:	1b c0       	rjmp	.+54     	; 0x4c14 <__floatsisf+0x6c>
    4bde:	6f 5f       	subi	r22, 0xFF	; 255
    4be0:	7f 4f       	sbci	r23, 0xFF	; 255
    4be2:	8f 4f       	sbci	r24, 0xFF	; 255
    4be4:	9f 4f       	sbci	r25, 0xFF	; 255
    4be6:	16 c0       	rjmp	.+44     	; 0x4c14 <__floatsisf+0x6c>
    4be8:	88 23       	and	r24, r24
    4bea:	11 f0       	breq	.+4      	; 0x4bf0 <__floatsisf+0x48>
    4bec:	96 e9       	ldi	r25, 0x96	; 150
    4bee:	11 c0       	rjmp	.+34     	; 0x4c12 <__floatsisf+0x6a>
    4bf0:	77 23       	and	r23, r23
    4bf2:	21 f0       	breq	.+8      	; 0x4bfc <__floatsisf+0x54>
    4bf4:	9e e8       	ldi	r25, 0x8E	; 142
    4bf6:	87 2f       	mov	r24, r23
    4bf8:	76 2f       	mov	r23, r22
    4bfa:	05 c0       	rjmp	.+10     	; 0x4c06 <__floatsisf+0x5e>
    4bfc:	66 23       	and	r22, r22
    4bfe:	71 f0       	breq	.+28     	; 0x4c1c <__floatsisf+0x74>
    4c00:	96 e8       	ldi	r25, 0x86	; 134
    4c02:	86 2f       	mov	r24, r22
    4c04:	70 e0       	ldi	r23, 0x00	; 0
    4c06:	60 e0       	ldi	r22, 0x00	; 0
    4c08:	2a f0       	brmi	.+10     	; 0x4c14 <__floatsisf+0x6c>
    4c0a:	9a 95       	dec	r25
    4c0c:	66 0f       	add	r22, r22
    4c0e:	77 1f       	adc	r23, r23
    4c10:	88 1f       	adc	r24, r24
    4c12:	da f7       	brpl	.-10     	; 0x4c0a <__floatsisf+0x62>
    4c14:	88 0f       	add	r24, r24
    4c16:	96 95       	lsr	r25
    4c18:	87 95       	ror	r24
    4c1a:	97 f9       	bld	r25, 7
    4c1c:	08 95       	ret

00004c1e <__fp_inf>:
    4c1e:	97 f9       	bld	r25, 7
    4c20:	9f 67       	ori	r25, 0x7F	; 127
    4c22:	80 e8       	ldi	r24, 0x80	; 128
    4c24:	70 e0       	ldi	r23, 0x00	; 0
    4c26:	60 e0       	ldi	r22, 0x00	; 0
    4c28:	08 95       	ret

00004c2a <__fp_nan>:
    4c2a:	9f ef       	ldi	r25, 0xFF	; 255
    4c2c:	80 ec       	ldi	r24, 0xC0	; 192
    4c2e:	08 95       	ret

00004c30 <__fp_pscA>:
    4c30:	00 24       	eor	r0, r0
    4c32:	0a 94       	dec	r0
    4c34:	16 16       	cp	r1, r22
    4c36:	17 06       	cpc	r1, r23
    4c38:	18 06       	cpc	r1, r24
    4c3a:	09 06       	cpc	r0, r25
    4c3c:	08 95       	ret

00004c3e <__fp_pscB>:
    4c3e:	00 24       	eor	r0, r0
    4c40:	0a 94       	dec	r0
    4c42:	12 16       	cp	r1, r18
    4c44:	13 06       	cpc	r1, r19
    4c46:	14 06       	cpc	r1, r20
    4c48:	05 06       	cpc	r0, r21
    4c4a:	08 95       	ret

00004c4c <__fp_round>:
    4c4c:	09 2e       	mov	r0, r25
    4c4e:	03 94       	inc	r0
    4c50:	00 0c       	add	r0, r0
    4c52:	11 f4       	brne	.+4      	; 0x4c58 <__fp_round+0xc>
    4c54:	88 23       	and	r24, r24
    4c56:	52 f0       	brmi	.+20     	; 0x4c6c <__fp_round+0x20>
    4c58:	bb 0f       	add	r27, r27
    4c5a:	40 f4       	brcc	.+16     	; 0x4c6c <__fp_round+0x20>
    4c5c:	bf 2b       	or	r27, r31
    4c5e:	11 f4       	brne	.+4      	; 0x4c64 <__fp_round+0x18>
    4c60:	60 ff       	sbrs	r22, 0
    4c62:	04 c0       	rjmp	.+8      	; 0x4c6c <__fp_round+0x20>
    4c64:	6f 5f       	subi	r22, 0xFF	; 255
    4c66:	7f 4f       	sbci	r23, 0xFF	; 255
    4c68:	8f 4f       	sbci	r24, 0xFF	; 255
    4c6a:	9f 4f       	sbci	r25, 0xFF	; 255
    4c6c:	08 95       	ret

00004c6e <__fp_split3>:
    4c6e:	57 fd       	sbrc	r21, 7
    4c70:	90 58       	subi	r25, 0x80	; 128
    4c72:	44 0f       	add	r20, r20
    4c74:	55 1f       	adc	r21, r21
    4c76:	59 f0       	breq	.+22     	; 0x4c8e <__fp_splitA+0x10>
    4c78:	5f 3f       	cpi	r21, 0xFF	; 255
    4c7a:	71 f0       	breq	.+28     	; 0x4c98 <__fp_splitA+0x1a>
    4c7c:	47 95       	ror	r20

00004c7e <__fp_splitA>:
    4c7e:	88 0f       	add	r24, r24
    4c80:	97 fb       	bst	r25, 7
    4c82:	99 1f       	adc	r25, r25
    4c84:	61 f0       	breq	.+24     	; 0x4c9e <__fp_splitA+0x20>
    4c86:	9f 3f       	cpi	r25, 0xFF	; 255
    4c88:	79 f0       	breq	.+30     	; 0x4ca8 <__fp_splitA+0x2a>
    4c8a:	87 95       	ror	r24
    4c8c:	08 95       	ret
    4c8e:	12 16       	cp	r1, r18
    4c90:	13 06       	cpc	r1, r19
    4c92:	14 06       	cpc	r1, r20
    4c94:	55 1f       	adc	r21, r21
    4c96:	f2 cf       	rjmp	.-28     	; 0x4c7c <__fp_split3+0xe>
    4c98:	46 95       	lsr	r20
    4c9a:	f1 df       	rcall	.-30     	; 0x4c7e <__fp_splitA>
    4c9c:	08 c0       	rjmp	.+16     	; 0x4cae <__fp_splitA+0x30>
    4c9e:	16 16       	cp	r1, r22
    4ca0:	17 06       	cpc	r1, r23
    4ca2:	18 06       	cpc	r1, r24
    4ca4:	99 1f       	adc	r25, r25
    4ca6:	f1 cf       	rjmp	.-30     	; 0x4c8a <__fp_splitA+0xc>
    4ca8:	86 95       	lsr	r24
    4caa:	71 05       	cpc	r23, r1
    4cac:	61 05       	cpc	r22, r1
    4cae:	08 94       	sec
    4cb0:	08 95       	ret

00004cb2 <__fp_zero>:
    4cb2:	e8 94       	clt

00004cb4 <__fp_szero>:
    4cb4:	bb 27       	eor	r27, r27
    4cb6:	66 27       	eor	r22, r22
    4cb8:	77 27       	eor	r23, r23
    4cba:	cb 01       	movw	r24, r22
    4cbc:	97 f9       	bld	r25, 7
    4cbe:	08 95       	ret

00004cc0 <__mulsf3>:
    4cc0:	0b d0       	rcall	.+22     	; 0x4cd8 <__mulsf3x>
    4cc2:	c4 cf       	rjmp	.-120    	; 0x4c4c <__fp_round>
    4cc4:	b5 df       	rcall	.-150    	; 0x4c30 <__fp_pscA>
    4cc6:	28 f0       	brcs	.+10     	; 0x4cd2 <__mulsf3+0x12>
    4cc8:	ba df       	rcall	.-140    	; 0x4c3e <__fp_pscB>
    4cca:	18 f0       	brcs	.+6      	; 0x4cd2 <__mulsf3+0x12>
    4ccc:	95 23       	and	r25, r21
    4cce:	09 f0       	breq	.+2      	; 0x4cd2 <__mulsf3+0x12>
    4cd0:	a6 cf       	rjmp	.-180    	; 0x4c1e <__fp_inf>
    4cd2:	ab cf       	rjmp	.-170    	; 0x4c2a <__fp_nan>
    4cd4:	11 24       	eor	r1, r1
    4cd6:	ee cf       	rjmp	.-36     	; 0x4cb4 <__fp_szero>

00004cd8 <__mulsf3x>:
    4cd8:	ca df       	rcall	.-108    	; 0x4c6e <__fp_split3>
    4cda:	a0 f3       	brcs	.-24     	; 0x4cc4 <__mulsf3+0x4>

00004cdc <__mulsf3_pse>:
    4cdc:	95 9f       	mul	r25, r21
    4cde:	d1 f3       	breq	.-12     	; 0x4cd4 <__mulsf3+0x14>
    4ce0:	95 0f       	add	r25, r21
    4ce2:	50 e0       	ldi	r21, 0x00	; 0
    4ce4:	55 1f       	adc	r21, r21
    4ce6:	62 9f       	mul	r22, r18
    4ce8:	f0 01       	movw	r30, r0
    4cea:	72 9f       	mul	r23, r18
    4cec:	bb 27       	eor	r27, r27
    4cee:	f0 0d       	add	r31, r0
    4cf0:	b1 1d       	adc	r27, r1
    4cf2:	63 9f       	mul	r22, r19
    4cf4:	aa 27       	eor	r26, r26
    4cf6:	f0 0d       	add	r31, r0
    4cf8:	b1 1d       	adc	r27, r1
    4cfa:	aa 1f       	adc	r26, r26
    4cfc:	64 9f       	mul	r22, r20
    4cfe:	66 27       	eor	r22, r22
    4d00:	b0 0d       	add	r27, r0
    4d02:	a1 1d       	adc	r26, r1
    4d04:	66 1f       	adc	r22, r22
    4d06:	82 9f       	mul	r24, r18
    4d08:	22 27       	eor	r18, r18
    4d0a:	b0 0d       	add	r27, r0
    4d0c:	a1 1d       	adc	r26, r1
    4d0e:	62 1f       	adc	r22, r18
    4d10:	73 9f       	mul	r23, r19
    4d12:	b0 0d       	add	r27, r0
    4d14:	a1 1d       	adc	r26, r1
    4d16:	62 1f       	adc	r22, r18
    4d18:	83 9f       	mul	r24, r19
    4d1a:	a0 0d       	add	r26, r0
    4d1c:	61 1d       	adc	r22, r1
    4d1e:	22 1f       	adc	r18, r18
    4d20:	74 9f       	mul	r23, r20
    4d22:	33 27       	eor	r19, r19
    4d24:	a0 0d       	add	r26, r0
    4d26:	61 1d       	adc	r22, r1
    4d28:	23 1f       	adc	r18, r19
    4d2a:	84 9f       	mul	r24, r20
    4d2c:	60 0d       	add	r22, r0
    4d2e:	21 1d       	adc	r18, r1
    4d30:	82 2f       	mov	r24, r18
    4d32:	76 2f       	mov	r23, r22
    4d34:	6a 2f       	mov	r22, r26
    4d36:	11 24       	eor	r1, r1
    4d38:	9f 57       	subi	r25, 0x7F	; 127
    4d3a:	50 40       	sbci	r21, 0x00	; 0
    4d3c:	8a f0       	brmi	.+34     	; 0x4d60 <__mulsf3_pse+0x84>
    4d3e:	e1 f0       	breq	.+56     	; 0x4d78 <__mulsf3_pse+0x9c>
    4d40:	88 23       	and	r24, r24
    4d42:	4a f0       	brmi	.+18     	; 0x4d56 <__mulsf3_pse+0x7a>
    4d44:	ee 0f       	add	r30, r30
    4d46:	ff 1f       	adc	r31, r31
    4d48:	bb 1f       	adc	r27, r27
    4d4a:	66 1f       	adc	r22, r22
    4d4c:	77 1f       	adc	r23, r23
    4d4e:	88 1f       	adc	r24, r24
    4d50:	91 50       	subi	r25, 0x01	; 1
    4d52:	50 40       	sbci	r21, 0x00	; 0
    4d54:	a9 f7       	brne	.-22     	; 0x4d40 <__mulsf3_pse+0x64>
    4d56:	9e 3f       	cpi	r25, 0xFE	; 254
    4d58:	51 05       	cpc	r21, r1
    4d5a:	70 f0       	brcs	.+28     	; 0x4d78 <__mulsf3_pse+0x9c>
    4d5c:	60 cf       	rjmp	.-320    	; 0x4c1e <__fp_inf>
    4d5e:	aa cf       	rjmp	.-172    	; 0x4cb4 <__fp_szero>
    4d60:	5f 3f       	cpi	r21, 0xFF	; 255
    4d62:	ec f3       	brlt	.-6      	; 0x4d5e <__mulsf3_pse+0x82>
    4d64:	98 3e       	cpi	r25, 0xE8	; 232
    4d66:	dc f3       	brlt	.-10     	; 0x4d5e <__mulsf3_pse+0x82>
    4d68:	86 95       	lsr	r24
    4d6a:	77 95       	ror	r23
    4d6c:	67 95       	ror	r22
    4d6e:	b7 95       	ror	r27
    4d70:	f7 95       	ror	r31
    4d72:	e7 95       	ror	r30
    4d74:	9f 5f       	subi	r25, 0xFF	; 255
    4d76:	c1 f7       	brne	.-16     	; 0x4d68 <__mulsf3_pse+0x8c>
    4d78:	fe 2b       	or	r31, r30
    4d7a:	88 0f       	add	r24, r24
    4d7c:	91 1d       	adc	r25, r1
    4d7e:	96 95       	lsr	r25
    4d80:	87 95       	ror	r24
    4d82:	97 f9       	bld	r25, 7
    4d84:	08 95       	ret

00004d86 <__udivmodhi4>:
    4d86:	aa 1b       	sub	r26, r26
    4d88:	bb 1b       	sub	r27, r27
    4d8a:	51 e1       	ldi	r21, 0x11	; 17
    4d8c:	07 c0       	rjmp	.+14     	; 0x4d9c <__udivmodhi4_ep>

00004d8e <__udivmodhi4_loop>:
    4d8e:	aa 1f       	adc	r26, r26
    4d90:	bb 1f       	adc	r27, r27
    4d92:	a6 17       	cp	r26, r22
    4d94:	b7 07       	cpc	r27, r23
    4d96:	10 f0       	brcs	.+4      	; 0x4d9c <__udivmodhi4_ep>
    4d98:	a6 1b       	sub	r26, r22
    4d9a:	b7 0b       	sbc	r27, r23

00004d9c <__udivmodhi4_ep>:
    4d9c:	88 1f       	adc	r24, r24
    4d9e:	99 1f       	adc	r25, r25
    4da0:	5a 95       	dec	r21
    4da2:	a9 f7       	brne	.-22     	; 0x4d8e <__udivmodhi4_loop>
    4da4:	80 95       	com	r24
    4da6:	90 95       	com	r25
    4da8:	bc 01       	movw	r22, r24
    4daa:	cd 01       	movw	r24, r26
    4dac:	08 95       	ret

00004dae <__udivmodsi4>:
    4dae:	a1 e2       	ldi	r26, 0x21	; 33
    4db0:	1a 2e       	mov	r1, r26
    4db2:	aa 1b       	sub	r26, r26
    4db4:	bb 1b       	sub	r27, r27
    4db6:	fd 01       	movw	r30, r26
    4db8:	0d c0       	rjmp	.+26     	; 0x4dd4 <__udivmodsi4_ep>

00004dba <__udivmodsi4_loop>:
    4dba:	aa 1f       	adc	r26, r26
    4dbc:	bb 1f       	adc	r27, r27
    4dbe:	ee 1f       	adc	r30, r30
    4dc0:	ff 1f       	adc	r31, r31
    4dc2:	a2 17       	cp	r26, r18
    4dc4:	b3 07       	cpc	r27, r19
    4dc6:	e4 07       	cpc	r30, r20
    4dc8:	f5 07       	cpc	r31, r21
    4dca:	20 f0       	brcs	.+8      	; 0x4dd4 <__udivmodsi4_ep>
    4dcc:	a2 1b       	sub	r26, r18
    4dce:	b3 0b       	sbc	r27, r19
    4dd0:	e4 0b       	sbc	r30, r20
    4dd2:	f5 0b       	sbc	r31, r21

00004dd4 <__udivmodsi4_ep>:
    4dd4:	66 1f       	adc	r22, r22
    4dd6:	77 1f       	adc	r23, r23
    4dd8:	88 1f       	adc	r24, r24
    4dda:	99 1f       	adc	r25, r25
    4ddc:	1a 94       	dec	r1
    4dde:	69 f7       	brne	.-38     	; 0x4dba <__udivmodsi4_loop>
    4de0:	60 95       	com	r22
    4de2:	70 95       	com	r23
    4de4:	80 95       	com	r24
    4de6:	90 95       	com	r25
    4de8:	9b 01       	movw	r18, r22
    4dea:	ac 01       	movw	r20, r24
    4dec:	bd 01       	movw	r22, r26
    4dee:	cf 01       	movw	r24, r30
    4df0:	08 95       	ret

00004df2 <__prologue_saves__>:
    4df2:	2f 92       	push	r2
    4df4:	3f 92       	push	r3
    4df6:	4f 92       	push	r4
    4df8:	5f 92       	push	r5
    4dfa:	6f 92       	push	r6
    4dfc:	7f 92       	push	r7
    4dfe:	8f 92       	push	r8
    4e00:	9f 92       	push	r9
    4e02:	af 92       	push	r10
    4e04:	bf 92       	push	r11
    4e06:	cf 92       	push	r12
    4e08:	df 92       	push	r13
    4e0a:	ef 92       	push	r14
    4e0c:	ff 92       	push	r15
    4e0e:	0f 93       	push	r16
    4e10:	1f 93       	push	r17
    4e12:	cf 93       	push	r28
    4e14:	df 93       	push	r29
    4e16:	cd b7       	in	r28, 0x3d	; 61
    4e18:	de b7       	in	r29, 0x3e	; 62
    4e1a:	ca 1b       	sub	r28, r26
    4e1c:	db 0b       	sbc	r29, r27
    4e1e:	cd bf       	out	0x3d, r28	; 61
    4e20:	de bf       	out	0x3e, r29	; 62
    4e22:	19 94       	eijmp

00004e24 <__epilogue_restores__>:
    4e24:	2a 88       	ldd	r2, Y+18	; 0x12
    4e26:	39 88       	ldd	r3, Y+17	; 0x11
    4e28:	48 88       	ldd	r4, Y+16	; 0x10
    4e2a:	5f 84       	ldd	r5, Y+15	; 0x0f
    4e2c:	6e 84       	ldd	r6, Y+14	; 0x0e
    4e2e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4e30:	8c 84       	ldd	r8, Y+12	; 0x0c
    4e32:	9b 84       	ldd	r9, Y+11	; 0x0b
    4e34:	aa 84       	ldd	r10, Y+10	; 0x0a
    4e36:	b9 84       	ldd	r11, Y+9	; 0x09
    4e38:	c8 84       	ldd	r12, Y+8	; 0x08
    4e3a:	df 80       	ldd	r13, Y+7	; 0x07
    4e3c:	ee 80       	ldd	r14, Y+6	; 0x06
    4e3e:	fd 80       	ldd	r15, Y+5	; 0x05
    4e40:	0c 81       	ldd	r16, Y+4	; 0x04
    4e42:	1b 81       	ldd	r17, Y+3	; 0x03
    4e44:	aa 81       	ldd	r26, Y+2	; 0x02
    4e46:	b9 81       	ldd	r27, Y+1	; 0x01
    4e48:	ce 0f       	add	r28, r30
    4e4a:	d1 1d       	adc	r29, r1
    4e4c:	cd bf       	out	0x3d, r28	; 61
    4e4e:	de bf       	out	0x3e, r29	; 62
    4e50:	ed 01       	movw	r28, r26
    4e52:	08 95       	ret

00004e54 <calloc>:
    4e54:	0f 93       	push	r16
    4e56:	1f 93       	push	r17
    4e58:	cf 93       	push	r28
    4e5a:	df 93       	push	r29
    4e5c:	68 9f       	mul	r22, r24
    4e5e:	80 01       	movw	r16, r0
    4e60:	69 9f       	mul	r22, r25
    4e62:	10 0d       	add	r17, r0
    4e64:	78 9f       	mul	r23, r24
    4e66:	10 0d       	add	r17, r0
    4e68:	11 24       	eor	r1, r1
    4e6a:	c8 01       	movw	r24, r16
    4e6c:	0f d0       	rcall	.+30     	; 0x4e8c <malloc>
    4e6e:	c8 2f       	mov	r28, r24
    4e70:	d9 2f       	mov	r29, r25
    4e72:	20 97       	sbiw	r28, 0x00	; 0
    4e74:	29 f0       	breq	.+10     	; 0x4e80 <calloc+0x2c>
    4e76:	a8 01       	movw	r20, r16
    4e78:	60 e0       	ldi	r22, 0x00	; 0
    4e7a:	70 e0       	ldi	r23, 0x00	; 0
    4e7c:	8c 2f       	mov	r24, r28
    4e7e:	49 d1       	rcall	.+658    	; 0x5112 <memset>
    4e80:	ce 01       	movw	r24, r28
    4e82:	df 91       	pop	r29
    4e84:	cf 91       	pop	r28
    4e86:	1f 91       	pop	r17
    4e88:	0f 91       	pop	r16
    4e8a:	08 95       	ret

00004e8c <malloc>:
    4e8c:	0f 93       	push	r16
    4e8e:	1f 93       	push	r17
    4e90:	cf 93       	push	r28
    4e92:	df 93       	push	r29
    4e94:	82 30       	cpi	r24, 0x02	; 2
    4e96:	91 05       	cpc	r25, r1
    4e98:	10 f4       	brcc	.+4      	; 0x4e9e <malloc+0x12>
    4e9a:	82 e0       	ldi	r24, 0x02	; 2
    4e9c:	90 e0       	ldi	r25, 0x00	; 0
    4e9e:	e0 91 5d 2a 	lds	r30, 0x2A5D
    4ea2:	f0 91 5e 2a 	lds	r31, 0x2A5E
    4ea6:	20 e0       	ldi	r18, 0x00	; 0
    4ea8:	30 e0       	ldi	r19, 0x00	; 0
    4eaa:	c0 e0       	ldi	r28, 0x00	; 0
    4eac:	d0 e0       	ldi	r29, 0x00	; 0
    4eae:	23 c0       	rjmp	.+70     	; 0x4ef6 <malloc+0x6a>
    4eb0:	40 81       	ld	r20, Z
    4eb2:	51 81       	ldd	r21, Z+1	; 0x01
    4eb4:	48 17       	cp	r20, r24
    4eb6:	59 07       	cpc	r21, r25
    4eb8:	a8 f0       	brcs	.+42     	; 0x4ee4 <malloc+0x58>
    4eba:	48 17       	cp	r20, r24
    4ebc:	59 07       	cpc	r21, r25
    4ebe:	61 f4       	brne	.+24     	; 0x4ed8 <malloc+0x4c>
    4ec0:	82 81       	ldd	r24, Z+2	; 0x02
    4ec2:	93 81       	ldd	r25, Z+3	; 0x03
    4ec4:	20 97       	sbiw	r28, 0x00	; 0
    4ec6:	19 f0       	breq	.+6      	; 0x4ece <malloc+0x42>
    4ec8:	8a 83       	std	Y+2, r24	; 0x02
    4eca:	9b 83       	std	Y+3, r25	; 0x03
    4ecc:	2e c0       	rjmp	.+92     	; 0x4f2a <malloc+0x9e>
    4ece:	80 93 5d 2a 	sts	0x2A5D, r24
    4ed2:	90 93 5e 2a 	sts	0x2A5E, r25
    4ed6:	29 c0       	rjmp	.+82     	; 0x4f2a <malloc+0x9e>
    4ed8:	21 15       	cp	r18, r1
    4eda:	31 05       	cpc	r19, r1
    4edc:	29 f0       	breq	.+10     	; 0x4ee8 <malloc+0x5c>
    4ede:	42 17       	cp	r20, r18
    4ee0:	53 07       	cpc	r21, r19
    4ee2:	10 f0       	brcs	.+4      	; 0x4ee8 <malloc+0x5c>
    4ee4:	a9 01       	movw	r20, r18
    4ee6:	02 c0       	rjmp	.+4      	; 0x4eec <malloc+0x60>
    4ee8:	be 01       	movw	r22, r28
    4eea:	df 01       	movw	r26, r30
    4eec:	02 81       	ldd	r16, Z+2	; 0x02
    4eee:	13 81       	ldd	r17, Z+3	; 0x03
    4ef0:	ef 01       	movw	r28, r30
    4ef2:	9a 01       	movw	r18, r20
    4ef4:	f8 01       	movw	r30, r16
    4ef6:	30 97       	sbiw	r30, 0x00	; 0
    4ef8:	d9 f6       	brne	.-74     	; 0x4eb0 <malloc+0x24>
    4efa:	21 15       	cp	r18, r1
    4efc:	31 05       	cpc	r19, r1
    4efe:	09 f1       	breq	.+66     	; 0x4f42 <malloc+0xb6>
    4f00:	28 1b       	sub	r18, r24
    4f02:	39 0b       	sbc	r19, r25
    4f04:	24 30       	cpi	r18, 0x04	; 4
    4f06:	31 05       	cpc	r19, r1
    4f08:	90 f4       	brcc	.+36     	; 0x4f2e <malloc+0xa2>
    4f0a:	12 96       	adiw	r26, 0x02	; 2
    4f0c:	8d 91       	ld	r24, X+
    4f0e:	9c 91       	ld	r25, X
    4f10:	13 97       	sbiw	r26, 0x03	; 3
    4f12:	61 15       	cp	r22, r1
    4f14:	71 05       	cpc	r23, r1
    4f16:	21 f0       	breq	.+8      	; 0x4f20 <malloc+0x94>
    4f18:	fb 01       	movw	r30, r22
    4f1a:	82 83       	std	Z+2, r24	; 0x02
    4f1c:	93 83       	std	Z+3, r25	; 0x03
    4f1e:	04 c0       	rjmp	.+8      	; 0x4f28 <malloc+0x9c>
    4f20:	80 93 5d 2a 	sts	0x2A5D, r24
    4f24:	90 93 5e 2a 	sts	0x2A5E, r25
    4f28:	fd 01       	movw	r30, r26
    4f2a:	32 96       	adiw	r30, 0x02	; 2
    4f2c:	44 c0       	rjmp	.+136    	; 0x4fb6 <malloc+0x12a>
    4f2e:	fd 01       	movw	r30, r26
    4f30:	e2 0f       	add	r30, r18
    4f32:	f3 1f       	adc	r31, r19
    4f34:	81 93       	st	Z+, r24
    4f36:	91 93       	st	Z+, r25
    4f38:	22 50       	subi	r18, 0x02	; 2
    4f3a:	31 09       	sbc	r19, r1
    4f3c:	2d 93       	st	X+, r18
    4f3e:	3c 93       	st	X, r19
    4f40:	3a c0       	rjmp	.+116    	; 0x4fb6 <malloc+0x12a>
    4f42:	20 91 5b 2a 	lds	r18, 0x2A5B
    4f46:	30 91 5c 2a 	lds	r19, 0x2A5C
    4f4a:	23 2b       	or	r18, r19
    4f4c:	41 f4       	brne	.+16     	; 0x4f5e <malloc+0xd2>
    4f4e:	20 91 03 20 	lds	r18, 0x2003
    4f52:	30 91 04 20 	lds	r19, 0x2004
    4f56:	20 93 5b 2a 	sts	0x2A5B, r18
    4f5a:	30 93 5c 2a 	sts	0x2A5C, r19
    4f5e:	20 91 01 20 	lds	r18, 0x2001
    4f62:	30 91 02 20 	lds	r19, 0x2002
    4f66:	21 15       	cp	r18, r1
    4f68:	31 05       	cpc	r19, r1
    4f6a:	41 f4       	brne	.+16     	; 0x4f7c <malloc+0xf0>
    4f6c:	2d b7       	in	r18, 0x3d	; 61
    4f6e:	3e b7       	in	r19, 0x3e	; 62
    4f70:	40 91 05 20 	lds	r20, 0x2005
    4f74:	50 91 06 20 	lds	r21, 0x2006
    4f78:	24 1b       	sub	r18, r20
    4f7a:	35 0b       	sbc	r19, r21
    4f7c:	e0 91 5b 2a 	lds	r30, 0x2A5B
    4f80:	f0 91 5c 2a 	lds	r31, 0x2A5C
    4f84:	e2 17       	cp	r30, r18
    4f86:	f3 07       	cpc	r31, r19
    4f88:	a0 f4       	brcc	.+40     	; 0x4fb2 <malloc+0x126>
    4f8a:	2e 1b       	sub	r18, r30
    4f8c:	3f 0b       	sbc	r19, r31
    4f8e:	28 17       	cp	r18, r24
    4f90:	39 07       	cpc	r19, r25
    4f92:	78 f0       	brcs	.+30     	; 0x4fb2 <malloc+0x126>
    4f94:	ac 01       	movw	r20, r24
    4f96:	4e 5f       	subi	r20, 0xFE	; 254
    4f98:	5f 4f       	sbci	r21, 0xFF	; 255
    4f9a:	24 17       	cp	r18, r20
    4f9c:	35 07       	cpc	r19, r21
    4f9e:	48 f0       	brcs	.+18     	; 0x4fb2 <malloc+0x126>
    4fa0:	4e 0f       	add	r20, r30
    4fa2:	5f 1f       	adc	r21, r31
    4fa4:	40 93 5b 2a 	sts	0x2A5B, r20
    4fa8:	50 93 5c 2a 	sts	0x2A5C, r21
    4fac:	81 93       	st	Z+, r24
    4fae:	91 93       	st	Z+, r25
    4fb0:	02 c0       	rjmp	.+4      	; 0x4fb6 <malloc+0x12a>
    4fb2:	e0 e0       	ldi	r30, 0x00	; 0
    4fb4:	f0 e0       	ldi	r31, 0x00	; 0
    4fb6:	cf 01       	movw	r24, r30
    4fb8:	df 91       	pop	r29
    4fba:	cf 91       	pop	r28
    4fbc:	1f 91       	pop	r17
    4fbe:	0f 91       	pop	r16
    4fc0:	08 95       	ret

00004fc2 <free>:
    4fc2:	ef 92       	push	r14
    4fc4:	ff 92       	push	r15
    4fc6:	0f 93       	push	r16
    4fc8:	1f 93       	push	r17
    4fca:	cf 93       	push	r28
    4fcc:	df 93       	push	r29
    4fce:	00 97       	sbiw	r24, 0x00	; 0
    4fd0:	09 f4       	brne	.+2      	; 0x4fd4 <free+0x12>
    4fd2:	8f c0       	rjmp	.+286    	; 0x50f2 <free+0x130>
    4fd4:	dc 01       	movw	r26, r24
    4fd6:	12 97       	sbiw	r26, 0x02	; 2
    4fd8:	12 96       	adiw	r26, 0x02	; 2
    4fda:	1d 92       	st	X+, r1
    4fdc:	1c 92       	st	X, r1
    4fde:	13 97       	sbiw	r26, 0x03	; 3
    4fe0:	e0 90 5d 2a 	lds	r14, 0x2A5D
    4fe4:	f0 90 5e 2a 	lds	r15, 0x2A5E
    4fe8:	e1 14       	cp	r14, r1
    4fea:	f1 04       	cpc	r15, r1
    4fec:	89 f4       	brne	.+34     	; 0x5010 <free+0x4e>
    4fee:	2d 91       	ld	r18, X+
    4ff0:	3c 91       	ld	r19, X
    4ff2:	11 97       	sbiw	r26, 0x01	; 1
    4ff4:	28 0f       	add	r18, r24
    4ff6:	39 1f       	adc	r19, r25
    4ff8:	80 91 5b 2a 	lds	r24, 0x2A5B
    4ffc:	90 91 5c 2a 	lds	r25, 0x2A5C
    5000:	82 17       	cp	r24, r18
    5002:	93 07       	cpc	r25, r19
    5004:	89 f5       	brne	.+98     	; 0x5068 <free+0xa6>
    5006:	a0 93 5b 2a 	sts	0x2A5B, r26
    500a:	b0 93 5c 2a 	sts	0x2A5C, r27
    500e:	71 c0       	rjmp	.+226    	; 0x50f2 <free+0x130>
    5010:	e7 01       	movw	r28, r14
    5012:	20 e0       	ldi	r18, 0x00	; 0
    5014:	30 e0       	ldi	r19, 0x00	; 0
    5016:	01 c0       	rjmp	.+2      	; 0x501a <free+0x58>
    5018:	ea 01       	movw	r28, r20
    501a:	ca 17       	cp	r28, r26
    501c:	db 07       	cpc	r29, r27
    501e:	38 f4       	brcc	.+14     	; 0x502e <free+0x6c>
    5020:	4a 81       	ldd	r20, Y+2	; 0x02
    5022:	5b 81       	ldd	r21, Y+3	; 0x03
    5024:	9e 01       	movw	r18, r28
    5026:	41 15       	cp	r20, r1
    5028:	51 05       	cpc	r21, r1
    502a:	b1 f7       	brne	.-20     	; 0x5018 <free+0x56>
    502c:	22 c0       	rjmp	.+68     	; 0x5072 <free+0xb0>
    502e:	bc 01       	movw	r22, r24
    5030:	62 50       	subi	r22, 0x02	; 2
    5032:	71 09       	sbc	r23, r1
    5034:	fb 01       	movw	r30, r22
    5036:	c2 83       	std	Z+2, r28	; 0x02
    5038:	d3 83       	std	Z+3, r29	; 0x03
    503a:	00 81       	ld	r16, Z
    503c:	11 81       	ldd	r17, Z+1	; 0x01
    503e:	ac 01       	movw	r20, r24
    5040:	40 0f       	add	r20, r16
    5042:	51 1f       	adc	r21, r17
    5044:	4c 17       	cp	r20, r28
    5046:	5d 07       	cpc	r21, r29
    5048:	61 f4       	brne	.+24     	; 0x5062 <free+0xa0>
    504a:	48 81       	ld	r20, Y
    504c:	59 81       	ldd	r21, Y+1	; 0x01
    504e:	40 0f       	add	r20, r16
    5050:	51 1f       	adc	r21, r17
    5052:	4e 5f       	subi	r20, 0xFE	; 254
    5054:	5f 4f       	sbci	r21, 0xFF	; 255
    5056:	40 83       	st	Z, r20
    5058:	51 83       	std	Z+1, r21	; 0x01
    505a:	4a 81       	ldd	r20, Y+2	; 0x02
    505c:	5b 81       	ldd	r21, Y+3	; 0x03
    505e:	42 83       	std	Z+2, r20	; 0x02
    5060:	53 83       	std	Z+3, r21	; 0x03
    5062:	21 15       	cp	r18, r1
    5064:	31 05       	cpc	r19, r1
    5066:	29 f4       	brne	.+10     	; 0x5072 <free+0xb0>
    5068:	a0 93 5d 2a 	sts	0x2A5D, r26
    506c:	b0 93 5e 2a 	sts	0x2A5E, r27
    5070:	40 c0       	rjmp	.+128    	; 0x50f2 <free+0x130>
    5072:	f9 01       	movw	r30, r18
    5074:	a2 83       	std	Z+2, r26	; 0x02
    5076:	b3 83       	std	Z+3, r27	; 0x03
    5078:	e9 01       	movw	r28, r18
    507a:	69 91       	ld	r22, Y+
    507c:	79 91       	ld	r23, Y+
    507e:	c6 0f       	add	r28, r22
    5080:	d7 1f       	adc	r29, r23
    5082:	ac 17       	cp	r26, r28
    5084:	bd 07       	cpc	r27, r29
    5086:	79 f4       	brne	.+30     	; 0x50a6 <free+0xe4>
    5088:	dc 01       	movw	r26, r24
    508a:	5e 91       	ld	r21, -X
    508c:	4e 91       	ld	r20, -X
    508e:	46 0f       	add	r20, r22
    5090:	57 1f       	adc	r21, r23
    5092:	4e 5f       	subi	r20, 0xFE	; 254
    5094:	5f 4f       	sbci	r21, 0xFF	; 255
    5096:	40 83       	st	Z, r20
    5098:	51 83       	std	Z+1, r21	; 0x01
    509a:	12 96       	adiw	r26, 0x02	; 2
    509c:	8d 91       	ld	r24, X+
    509e:	9c 91       	ld	r25, X
    50a0:	13 97       	sbiw	r26, 0x03	; 3
    50a2:	82 83       	std	Z+2, r24	; 0x02
    50a4:	93 83       	std	Z+3, r25	; 0x03
    50a6:	a0 e0       	ldi	r26, 0x00	; 0
    50a8:	b0 e0       	ldi	r27, 0x00	; 0
    50aa:	02 c0       	rjmp	.+4      	; 0x50b0 <free+0xee>
    50ac:	d7 01       	movw	r26, r14
    50ae:	7c 01       	movw	r14, r24
    50b0:	f7 01       	movw	r30, r14
    50b2:	82 81       	ldd	r24, Z+2	; 0x02
    50b4:	93 81       	ldd	r25, Z+3	; 0x03
    50b6:	00 97       	sbiw	r24, 0x00	; 0
    50b8:	c9 f7       	brne	.-14     	; 0x50ac <free+0xea>
    50ba:	c7 01       	movw	r24, r14
    50bc:	02 96       	adiw	r24, 0x02	; 2
    50be:	20 81       	ld	r18, Z
    50c0:	31 81       	ldd	r19, Z+1	; 0x01
    50c2:	82 0f       	add	r24, r18
    50c4:	93 1f       	adc	r25, r19
    50c6:	20 91 5b 2a 	lds	r18, 0x2A5B
    50ca:	30 91 5c 2a 	lds	r19, 0x2A5C
    50ce:	28 17       	cp	r18, r24
    50d0:	39 07       	cpc	r19, r25
    50d2:	79 f4       	brne	.+30     	; 0x50f2 <free+0x130>
    50d4:	10 97       	sbiw	r26, 0x00	; 0
    50d6:	29 f4       	brne	.+10     	; 0x50e2 <free+0x120>
    50d8:	10 92 5d 2a 	sts	0x2A5D, r1
    50dc:	10 92 5e 2a 	sts	0x2A5E, r1
    50e0:	04 c0       	rjmp	.+8      	; 0x50ea <free+0x128>
    50e2:	12 96       	adiw	r26, 0x02	; 2
    50e4:	1d 92       	st	X+, r1
    50e6:	1c 92       	st	X, r1
    50e8:	13 97       	sbiw	r26, 0x03	; 3
    50ea:	e0 92 5b 2a 	sts	0x2A5B, r14
    50ee:	f0 92 5c 2a 	sts	0x2A5C, r15
    50f2:	df 91       	pop	r29
    50f4:	cf 91       	pop	r28
    50f6:	1f 91       	pop	r17
    50f8:	0f 91       	pop	r16
    50fa:	ff 90       	pop	r15
    50fc:	ef 90       	pop	r14
    50fe:	08 95       	ret

00005100 <memcpy>:
    5100:	fb 01       	movw	r30, r22
    5102:	dc 01       	movw	r26, r24
    5104:	02 c0       	rjmp	.+4      	; 0x510a <memcpy+0xa>
    5106:	01 90       	ld	r0, Z+
    5108:	0d 92       	st	X+, r0
    510a:	41 50       	subi	r20, 0x01	; 1
    510c:	50 40       	sbci	r21, 0x00	; 0
    510e:	d8 f7       	brcc	.-10     	; 0x5106 <memcpy+0x6>
    5110:	08 95       	ret

00005112 <memset>:
    5112:	dc 01       	movw	r26, r24
    5114:	01 c0       	rjmp	.+2      	; 0x5118 <memset+0x6>
    5116:	6d 93       	st	X+, r22
    5118:	41 50       	subi	r20, 0x01	; 1
    511a:	50 40       	sbci	r21, 0x00	; 0
    511c:	e0 f7       	brcc	.-8      	; 0x5116 <memset+0x4>
    511e:	08 95       	ret

00005120 <itoa>:
    5120:	fb 01       	movw	r30, r22
    5122:	9f 01       	movw	r18, r30
    5124:	e8 94       	clt
    5126:	42 30       	cpi	r20, 0x02	; 2
    5128:	bc f0       	brlt	.+46     	; 0x5158 <itoa+0x38>
    512a:	45 32       	cpi	r20, 0x25	; 37
    512c:	ac f4       	brge	.+42     	; 0x5158 <itoa+0x38>
    512e:	4a 30       	cpi	r20, 0x0A	; 10
    5130:	29 f4       	brne	.+10     	; 0x513c <itoa+0x1c>
    5132:	97 fb       	bst	r25, 7
    5134:	1e f4       	brtc	.+6      	; 0x513c <itoa+0x1c>
    5136:	90 95       	com	r25
    5138:	81 95       	neg	r24
    513a:	9f 4f       	sbci	r25, 0xFF	; 255
    513c:	64 2f       	mov	r22, r20
    513e:	77 27       	eor	r23, r23
    5140:	22 de       	rcall	.-956    	; 0x4d86 <__udivmodhi4>
    5142:	80 5d       	subi	r24, 0xD0	; 208
    5144:	8a 33       	cpi	r24, 0x3A	; 58
    5146:	0c f0       	brlt	.+2      	; 0x514a <itoa+0x2a>
    5148:	89 5d       	subi	r24, 0xD9	; 217
    514a:	81 93       	st	Z+, r24
    514c:	cb 01       	movw	r24, r22
    514e:	00 97       	sbiw	r24, 0x00	; 0
    5150:	a9 f7       	brne	.-22     	; 0x513c <itoa+0x1c>
    5152:	16 f4       	brtc	.+4      	; 0x5158 <itoa+0x38>
    5154:	5d e2       	ldi	r21, 0x2D	; 45
    5156:	51 93       	st	Z+, r21
    5158:	10 82       	st	Z, r1
    515a:	c9 01       	movw	r24, r18
    515c:	66 c2       	rjmp	.+1228   	; 0x562a <strrev>

0000515e <snprintf>:
    515e:	0f 93       	push	r16
    5160:	1f 93       	push	r17
    5162:	cf 93       	push	r28
    5164:	df 93       	push	r29
    5166:	cd b7       	in	r28, 0x3d	; 61
    5168:	de b7       	in	r29, 0x3e	; 62
    516a:	2e 97       	sbiw	r28, 0x0e	; 14
    516c:	cd bf       	out	0x3d, r28	; 61
    516e:	de bf       	out	0x3e, r29	; 62
    5170:	0e 89       	ldd	r16, Y+22	; 0x16
    5172:	1f 89       	ldd	r17, Y+23	; 0x17
    5174:	88 8d       	ldd	r24, Y+24	; 0x18
    5176:	99 8d       	ldd	r25, Y+25	; 0x19
    5178:	26 e0       	ldi	r18, 0x06	; 6
    517a:	2c 83       	std	Y+4, r18	; 0x04
    517c:	09 83       	std	Y+1, r16	; 0x01
    517e:	1a 83       	std	Y+2, r17	; 0x02
    5180:	97 ff       	sbrs	r25, 7
    5182:	02 c0       	rjmp	.+4      	; 0x5188 <snprintf+0x2a>
    5184:	80 e0       	ldi	r24, 0x00	; 0
    5186:	90 e8       	ldi	r25, 0x80	; 128
    5188:	01 97       	sbiw	r24, 0x01	; 1
    518a:	8d 83       	std	Y+5, r24	; 0x05
    518c:	9e 83       	std	Y+6, r25	; 0x06
    518e:	ce 01       	movw	r24, r28
    5190:	4c 96       	adiw	r24, 0x1c	; 28
    5192:	ac 01       	movw	r20, r24
    5194:	6a 8d       	ldd	r22, Y+26	; 0x1a
    5196:	7b 8d       	ldd	r23, Y+27	; 0x1b
    5198:	ce 01       	movw	r24, r28
    519a:	01 96       	adiw	r24, 0x01	; 1
    519c:	3e d0       	rcall	.+124    	; 0x521a <vfprintf>
    519e:	4d 81       	ldd	r20, Y+5	; 0x05
    51a0:	5e 81       	ldd	r21, Y+6	; 0x06
    51a2:	57 fd       	sbrc	r21, 7
    51a4:	0a c0       	rjmp	.+20     	; 0x51ba <snprintf+0x5c>
    51a6:	2f 81       	ldd	r18, Y+7	; 0x07
    51a8:	38 85       	ldd	r19, Y+8	; 0x08
    51aa:	42 17       	cp	r20, r18
    51ac:	53 07       	cpc	r21, r19
    51ae:	0c f4       	brge	.+2      	; 0x51b2 <snprintf+0x54>
    51b0:	9a 01       	movw	r18, r20
    51b2:	f8 01       	movw	r30, r16
    51b4:	e2 0f       	add	r30, r18
    51b6:	f3 1f       	adc	r31, r19
    51b8:	10 82       	st	Z, r1
    51ba:	2e 96       	adiw	r28, 0x0e	; 14
    51bc:	cd bf       	out	0x3d, r28	; 61
    51be:	de bf       	out	0x3e, r29	; 62
    51c0:	df 91       	pop	r29
    51c2:	cf 91       	pop	r28
    51c4:	1f 91       	pop	r17
    51c6:	0f 91       	pop	r16
    51c8:	08 95       	ret

000051ca <sprintf>:
    51ca:	0f 93       	push	r16
    51cc:	1f 93       	push	r17
    51ce:	cf 93       	push	r28
    51d0:	df 93       	push	r29
    51d2:	cd b7       	in	r28, 0x3d	; 61
    51d4:	de b7       	in	r29, 0x3e	; 62
    51d6:	2e 97       	sbiw	r28, 0x0e	; 14
    51d8:	cd bf       	out	0x3d, r28	; 61
    51da:	de bf       	out	0x3e, r29	; 62
    51dc:	0e 89       	ldd	r16, Y+22	; 0x16
    51de:	1f 89       	ldd	r17, Y+23	; 0x17
    51e0:	86 e0       	ldi	r24, 0x06	; 6
    51e2:	8c 83       	std	Y+4, r24	; 0x04
    51e4:	09 83       	std	Y+1, r16	; 0x01
    51e6:	1a 83       	std	Y+2, r17	; 0x02
    51e8:	8f ef       	ldi	r24, 0xFF	; 255
    51ea:	9f e7       	ldi	r25, 0x7F	; 127
    51ec:	8d 83       	std	Y+5, r24	; 0x05
    51ee:	9e 83       	std	Y+6, r25	; 0x06
    51f0:	ce 01       	movw	r24, r28
    51f2:	4a 96       	adiw	r24, 0x1a	; 26
    51f4:	ac 01       	movw	r20, r24
    51f6:	68 8d       	ldd	r22, Y+24	; 0x18
    51f8:	79 8d       	ldd	r23, Y+25	; 0x19
    51fa:	ce 01       	movw	r24, r28
    51fc:	01 96       	adiw	r24, 0x01	; 1
    51fe:	0d d0       	rcall	.+26     	; 0x521a <vfprintf>
    5200:	ef 81       	ldd	r30, Y+7	; 0x07
    5202:	f8 85       	ldd	r31, Y+8	; 0x08
    5204:	e0 0f       	add	r30, r16
    5206:	f1 1f       	adc	r31, r17
    5208:	10 82       	st	Z, r1
    520a:	2e 96       	adiw	r28, 0x0e	; 14
    520c:	cd bf       	out	0x3d, r28	; 61
    520e:	de bf       	out	0x3e, r29	; 62
    5210:	df 91       	pop	r29
    5212:	cf 91       	pop	r28
    5214:	1f 91       	pop	r17
    5216:	0f 91       	pop	r16
    5218:	08 95       	ret

0000521a <vfprintf>:
    521a:	2f 92       	push	r2
    521c:	3f 92       	push	r3
    521e:	4f 92       	push	r4
    5220:	5f 92       	push	r5
    5222:	6f 92       	push	r6
    5224:	7f 92       	push	r7
    5226:	8f 92       	push	r8
    5228:	9f 92       	push	r9
    522a:	af 92       	push	r10
    522c:	bf 92       	push	r11
    522e:	cf 92       	push	r12
    5230:	df 92       	push	r13
    5232:	ef 92       	push	r14
    5234:	ff 92       	push	r15
    5236:	0f 93       	push	r16
    5238:	1f 93       	push	r17
    523a:	cf 93       	push	r28
    523c:	df 93       	push	r29
    523e:	cd b7       	in	r28, 0x3d	; 61
    5240:	de b7       	in	r29, 0x3e	; 62
    5242:	2c 97       	sbiw	r28, 0x0c	; 12
    5244:	cd bf       	out	0x3d, r28	; 61
    5246:	de bf       	out	0x3e, r29	; 62
    5248:	7c 01       	movw	r14, r24
    524a:	6b 01       	movw	r12, r22
    524c:	8a 01       	movw	r16, r20
    524e:	fc 01       	movw	r30, r24
    5250:	16 82       	std	Z+6, r1	; 0x06
    5252:	17 82       	std	Z+7, r1	; 0x07
    5254:	83 81       	ldd	r24, Z+3	; 0x03
    5256:	81 ff       	sbrs	r24, 1
    5258:	b9 c1       	rjmp	.+882    	; 0x55cc <vfprintf+0x3b2>
    525a:	88 24       	eor	r8, r8
    525c:	83 94       	inc	r8
    525e:	91 2c       	mov	r9, r1
    5260:	8c 0e       	add	r8, r28
    5262:	9d 1e       	adc	r9, r29
    5264:	f7 01       	movw	r30, r14
    5266:	93 81       	ldd	r25, Z+3	; 0x03
    5268:	f6 01       	movw	r30, r12
    526a:	93 fd       	sbrc	r25, 3
    526c:	85 91       	lpm	r24, Z+
    526e:	93 ff       	sbrs	r25, 3
    5270:	81 91       	ld	r24, Z+
    5272:	6f 01       	movw	r12, r30
    5274:	88 23       	and	r24, r24
    5276:	09 f4       	brne	.+2      	; 0x527a <vfprintf+0x60>
    5278:	a5 c1       	rjmp	.+842    	; 0x55c4 <vfprintf+0x3aa>
    527a:	85 32       	cpi	r24, 0x25	; 37
    527c:	39 f4       	brne	.+14     	; 0x528c <vfprintf+0x72>
    527e:	93 fd       	sbrc	r25, 3
    5280:	85 91       	lpm	r24, Z+
    5282:	93 ff       	sbrs	r25, 3
    5284:	81 91       	ld	r24, Z+
    5286:	6f 01       	movw	r12, r30
    5288:	85 32       	cpi	r24, 0x25	; 37
    528a:	21 f4       	brne	.+8      	; 0x5294 <vfprintf+0x7a>
    528c:	b7 01       	movw	r22, r14
    528e:	90 e0       	ldi	r25, 0x00	; 0
    5290:	dc d1       	rcall	.+952    	; 0x564a <fputc>
    5292:	e8 cf       	rjmp	.-48     	; 0x5264 <vfprintf+0x4a>
    5294:	51 2c       	mov	r5, r1
    5296:	31 2c       	mov	r3, r1
    5298:	20 e0       	ldi	r18, 0x00	; 0
    529a:	20 32       	cpi	r18, 0x20	; 32
    529c:	a8 f4       	brcc	.+42     	; 0x52c8 <vfprintf+0xae>
    529e:	8b 32       	cpi	r24, 0x2B	; 43
    52a0:	61 f0       	breq	.+24     	; 0x52ba <vfprintf+0xa0>
    52a2:	28 f4       	brcc	.+10     	; 0x52ae <vfprintf+0x94>
    52a4:	80 32       	cpi	r24, 0x20	; 32
    52a6:	51 f0       	breq	.+20     	; 0x52bc <vfprintf+0xa2>
    52a8:	83 32       	cpi	r24, 0x23	; 35
    52aa:	71 f4       	brne	.+28     	; 0x52c8 <vfprintf+0xae>
    52ac:	0b c0       	rjmp	.+22     	; 0x52c4 <vfprintf+0xaa>
    52ae:	8d 32       	cpi	r24, 0x2D	; 45
    52b0:	39 f0       	breq	.+14     	; 0x52c0 <vfprintf+0xa6>
    52b2:	80 33       	cpi	r24, 0x30	; 48
    52b4:	49 f4       	brne	.+18     	; 0x52c8 <vfprintf+0xae>
    52b6:	21 60       	ori	r18, 0x01	; 1
    52b8:	28 c0       	rjmp	.+80     	; 0x530a <vfprintf+0xf0>
    52ba:	22 60       	ori	r18, 0x02	; 2
    52bc:	24 60       	ori	r18, 0x04	; 4
    52be:	25 c0       	rjmp	.+74     	; 0x530a <vfprintf+0xf0>
    52c0:	28 60       	ori	r18, 0x08	; 8
    52c2:	23 c0       	rjmp	.+70     	; 0x530a <vfprintf+0xf0>
    52c4:	20 61       	ori	r18, 0x10	; 16
    52c6:	21 c0       	rjmp	.+66     	; 0x530a <vfprintf+0xf0>
    52c8:	27 fd       	sbrc	r18, 7
    52ca:	27 c0       	rjmp	.+78     	; 0x531a <vfprintf+0x100>
    52cc:	38 2f       	mov	r19, r24
    52ce:	30 53       	subi	r19, 0x30	; 48
    52d0:	3a 30       	cpi	r19, 0x0A	; 10
    52d2:	78 f4       	brcc	.+30     	; 0x52f2 <vfprintf+0xd8>
    52d4:	26 ff       	sbrs	r18, 6
    52d6:	06 c0       	rjmp	.+12     	; 0x52e4 <vfprintf+0xca>
    52d8:	fa e0       	ldi	r31, 0x0A	; 10
    52da:	5f 9e       	mul	r5, r31
    52dc:	30 0d       	add	r19, r0
    52de:	11 24       	eor	r1, r1
    52e0:	53 2e       	mov	r5, r19
    52e2:	13 c0       	rjmp	.+38     	; 0x530a <vfprintf+0xf0>
    52e4:	8a e0       	ldi	r24, 0x0A	; 10
    52e6:	38 9e       	mul	r3, r24
    52e8:	30 0d       	add	r19, r0
    52ea:	11 24       	eor	r1, r1
    52ec:	33 2e       	mov	r3, r19
    52ee:	20 62       	ori	r18, 0x20	; 32
    52f0:	0c c0       	rjmp	.+24     	; 0x530a <vfprintf+0xf0>
    52f2:	8e 32       	cpi	r24, 0x2E	; 46
    52f4:	21 f4       	brne	.+8      	; 0x52fe <vfprintf+0xe4>
    52f6:	26 fd       	sbrc	r18, 6
    52f8:	65 c1       	rjmp	.+714    	; 0x55c4 <vfprintf+0x3aa>
    52fa:	20 64       	ori	r18, 0x40	; 64
    52fc:	06 c0       	rjmp	.+12     	; 0x530a <vfprintf+0xf0>
    52fe:	8c 36       	cpi	r24, 0x6C	; 108
    5300:	11 f4       	brne	.+4      	; 0x5306 <vfprintf+0xec>
    5302:	20 68       	ori	r18, 0x80	; 128
    5304:	02 c0       	rjmp	.+4      	; 0x530a <vfprintf+0xf0>
    5306:	88 36       	cpi	r24, 0x68	; 104
    5308:	41 f4       	brne	.+16     	; 0x531a <vfprintf+0x100>
    530a:	f6 01       	movw	r30, r12
    530c:	93 fd       	sbrc	r25, 3
    530e:	85 91       	lpm	r24, Z+
    5310:	93 ff       	sbrs	r25, 3
    5312:	81 91       	ld	r24, Z+
    5314:	6f 01       	movw	r12, r30
    5316:	81 11       	cpse	r24, r1
    5318:	c0 cf       	rjmp	.-128    	; 0x529a <vfprintf+0x80>
    531a:	98 2f       	mov	r25, r24
    531c:	95 54       	subi	r25, 0x45	; 69
    531e:	93 30       	cpi	r25, 0x03	; 3
    5320:	18 f0       	brcs	.+6      	; 0x5328 <vfprintf+0x10e>
    5322:	90 52       	subi	r25, 0x20	; 32
    5324:	93 30       	cpi	r25, 0x03	; 3
    5326:	28 f4       	brcc	.+10     	; 0x5332 <vfprintf+0x118>
    5328:	0c 5f       	subi	r16, 0xFC	; 252
    532a:	1f 4f       	sbci	r17, 0xFF	; 255
    532c:	ff e3       	ldi	r31, 0x3F	; 63
    532e:	f9 83       	std	Y+1, r31	; 0x01
    5330:	0d c0       	rjmp	.+26     	; 0x534c <vfprintf+0x132>
    5332:	83 36       	cpi	r24, 0x63	; 99
    5334:	31 f0       	breq	.+12     	; 0x5342 <vfprintf+0x128>
    5336:	83 37       	cpi	r24, 0x73	; 115
    5338:	71 f0       	breq	.+28     	; 0x5356 <vfprintf+0x13c>
    533a:	83 35       	cpi	r24, 0x53	; 83
    533c:	09 f0       	breq	.+2      	; 0x5340 <vfprintf+0x126>
    533e:	5a c0       	rjmp	.+180    	; 0x53f4 <vfprintf+0x1da>
    5340:	22 c0       	rjmp	.+68     	; 0x5386 <vfprintf+0x16c>
    5342:	f8 01       	movw	r30, r16
    5344:	80 81       	ld	r24, Z
    5346:	89 83       	std	Y+1, r24	; 0x01
    5348:	0e 5f       	subi	r16, 0xFE	; 254
    534a:	1f 4f       	sbci	r17, 0xFF	; 255
    534c:	44 24       	eor	r4, r4
    534e:	43 94       	inc	r4
    5350:	51 2c       	mov	r5, r1
    5352:	54 01       	movw	r10, r8
    5354:	14 c0       	rjmp	.+40     	; 0x537e <vfprintf+0x164>
    5356:	38 01       	movw	r6, r16
    5358:	f2 e0       	ldi	r31, 0x02	; 2
    535a:	6f 0e       	add	r6, r31
    535c:	71 1c       	adc	r7, r1
    535e:	f8 01       	movw	r30, r16
    5360:	a0 80       	ld	r10, Z
    5362:	b1 80       	ldd	r11, Z+1	; 0x01
    5364:	26 ff       	sbrs	r18, 6
    5366:	03 c0       	rjmp	.+6      	; 0x536e <vfprintf+0x154>
    5368:	65 2d       	mov	r22, r5
    536a:	70 e0       	ldi	r23, 0x00	; 0
    536c:	02 c0       	rjmp	.+4      	; 0x5372 <vfprintf+0x158>
    536e:	6f ef       	ldi	r22, 0xFF	; 255
    5370:	7f ef       	ldi	r23, 0xFF	; 255
    5372:	c5 01       	movw	r24, r10
    5374:	2c 87       	std	Y+12, r18	; 0x0c
    5376:	4e d1       	rcall	.+668    	; 0x5614 <strnlen>
    5378:	2c 01       	movw	r4, r24
    537a:	83 01       	movw	r16, r6
    537c:	2c 85       	ldd	r18, Y+12	; 0x0c
    537e:	6f e7       	ldi	r22, 0x7F	; 127
    5380:	26 2e       	mov	r2, r22
    5382:	22 22       	and	r2, r18
    5384:	17 c0       	rjmp	.+46     	; 0x53b4 <vfprintf+0x19a>
    5386:	38 01       	movw	r6, r16
    5388:	f2 e0       	ldi	r31, 0x02	; 2
    538a:	6f 0e       	add	r6, r31
    538c:	71 1c       	adc	r7, r1
    538e:	f8 01       	movw	r30, r16
    5390:	a0 80       	ld	r10, Z
    5392:	b1 80       	ldd	r11, Z+1	; 0x01
    5394:	26 ff       	sbrs	r18, 6
    5396:	03 c0       	rjmp	.+6      	; 0x539e <vfprintf+0x184>
    5398:	65 2d       	mov	r22, r5
    539a:	70 e0       	ldi	r23, 0x00	; 0
    539c:	02 c0       	rjmp	.+4      	; 0x53a2 <vfprintf+0x188>
    539e:	6f ef       	ldi	r22, 0xFF	; 255
    53a0:	7f ef       	ldi	r23, 0xFF	; 255
    53a2:	c5 01       	movw	r24, r10
    53a4:	2c 87       	std	Y+12, r18	; 0x0c
    53a6:	2b d1       	rcall	.+598    	; 0x55fe <strnlen_P>
    53a8:	2c 01       	movw	r4, r24
    53aa:	2c 85       	ldd	r18, Y+12	; 0x0c
    53ac:	50 e8       	ldi	r21, 0x80	; 128
    53ae:	25 2e       	mov	r2, r21
    53b0:	22 2a       	or	r2, r18
    53b2:	83 01       	movw	r16, r6
    53b4:	23 fc       	sbrc	r2, 3
    53b6:	1a c0       	rjmp	.+52     	; 0x53ec <vfprintf+0x1d2>
    53b8:	05 c0       	rjmp	.+10     	; 0x53c4 <vfprintf+0x1aa>
    53ba:	b7 01       	movw	r22, r14
    53bc:	80 e2       	ldi	r24, 0x20	; 32
    53be:	90 e0       	ldi	r25, 0x00	; 0
    53c0:	44 d1       	rcall	.+648    	; 0x564a <fputc>
    53c2:	3a 94       	dec	r3
    53c4:	83 2d       	mov	r24, r3
    53c6:	90 e0       	ldi	r25, 0x00	; 0
    53c8:	48 16       	cp	r4, r24
    53ca:	59 06       	cpc	r5, r25
    53cc:	b0 f3       	brcs	.-20     	; 0x53ba <vfprintf+0x1a0>
    53ce:	0e c0       	rjmp	.+28     	; 0x53ec <vfprintf+0x1d2>
    53d0:	f5 01       	movw	r30, r10
    53d2:	27 fc       	sbrc	r2, 7
    53d4:	85 91       	lpm	r24, Z+
    53d6:	27 fe       	sbrs	r2, 7
    53d8:	81 91       	ld	r24, Z+
    53da:	5f 01       	movw	r10, r30
    53dc:	b7 01       	movw	r22, r14
    53de:	90 e0       	ldi	r25, 0x00	; 0
    53e0:	34 d1       	rcall	.+616    	; 0x564a <fputc>
    53e2:	31 10       	cpse	r3, r1
    53e4:	3a 94       	dec	r3
    53e6:	f1 e0       	ldi	r31, 0x01	; 1
    53e8:	4f 1a       	sub	r4, r31
    53ea:	51 08       	sbc	r5, r1
    53ec:	41 14       	cp	r4, r1
    53ee:	51 04       	cpc	r5, r1
    53f0:	79 f7       	brne	.-34     	; 0x53d0 <vfprintf+0x1b6>
    53f2:	e5 c0       	rjmp	.+458    	; 0x55be <vfprintf+0x3a4>
    53f4:	84 36       	cpi	r24, 0x64	; 100
    53f6:	11 f0       	breq	.+4      	; 0x53fc <vfprintf+0x1e2>
    53f8:	89 36       	cpi	r24, 0x69	; 105
    53fa:	39 f5       	brne	.+78     	; 0x544a <vfprintf+0x230>
    53fc:	f8 01       	movw	r30, r16
    53fe:	27 ff       	sbrs	r18, 7
    5400:	07 c0       	rjmp	.+14     	; 0x5410 <vfprintf+0x1f6>
    5402:	60 81       	ld	r22, Z
    5404:	71 81       	ldd	r23, Z+1	; 0x01
    5406:	82 81       	ldd	r24, Z+2	; 0x02
    5408:	93 81       	ldd	r25, Z+3	; 0x03
    540a:	0c 5f       	subi	r16, 0xFC	; 252
    540c:	1f 4f       	sbci	r17, 0xFF	; 255
    540e:	08 c0       	rjmp	.+16     	; 0x5420 <vfprintf+0x206>
    5410:	60 81       	ld	r22, Z
    5412:	71 81       	ldd	r23, Z+1	; 0x01
    5414:	88 27       	eor	r24, r24
    5416:	77 fd       	sbrc	r23, 7
    5418:	80 95       	com	r24
    541a:	98 2f       	mov	r25, r24
    541c:	0e 5f       	subi	r16, 0xFE	; 254
    541e:	1f 4f       	sbci	r17, 0xFF	; 255
    5420:	4f e6       	ldi	r20, 0x6F	; 111
    5422:	b4 2e       	mov	r11, r20
    5424:	b2 22       	and	r11, r18
    5426:	97 ff       	sbrs	r25, 7
    5428:	09 c0       	rjmp	.+18     	; 0x543c <vfprintf+0x222>
    542a:	90 95       	com	r25
    542c:	80 95       	com	r24
    542e:	70 95       	com	r23
    5430:	61 95       	neg	r22
    5432:	7f 4f       	sbci	r23, 0xFF	; 255
    5434:	8f 4f       	sbci	r24, 0xFF	; 255
    5436:	9f 4f       	sbci	r25, 0xFF	; 255
    5438:	f0 e8       	ldi	r31, 0x80	; 128
    543a:	bf 2a       	or	r11, r31
    543c:	2a e0       	ldi	r18, 0x0A	; 10
    543e:	30 e0       	ldi	r19, 0x00	; 0
    5440:	a4 01       	movw	r20, r8
    5442:	2f d1       	rcall	.+606    	; 0x56a2 <__ultoa_invert>
    5444:	a8 2e       	mov	r10, r24
    5446:	a8 18       	sub	r10, r8
    5448:	42 c0       	rjmp	.+132    	; 0x54ce <vfprintf+0x2b4>
    544a:	85 37       	cpi	r24, 0x75	; 117
    544c:	31 f4       	brne	.+12     	; 0x545a <vfprintf+0x240>
    544e:	3f ee       	ldi	r19, 0xEF	; 239
    5450:	b3 2e       	mov	r11, r19
    5452:	b2 22       	and	r11, r18
    5454:	2a e0       	ldi	r18, 0x0A	; 10
    5456:	30 e0       	ldi	r19, 0x00	; 0
    5458:	24 c0       	rjmp	.+72     	; 0x54a2 <vfprintf+0x288>
    545a:	99 ef       	ldi	r25, 0xF9	; 249
    545c:	b9 2e       	mov	r11, r25
    545e:	b2 22       	and	r11, r18
    5460:	8f 36       	cpi	r24, 0x6F	; 111
    5462:	b9 f0       	breq	.+46     	; 0x5492 <vfprintf+0x278>
    5464:	20 f4       	brcc	.+8      	; 0x546e <vfprintf+0x254>
    5466:	88 35       	cpi	r24, 0x58	; 88
    5468:	09 f0       	breq	.+2      	; 0x546c <vfprintf+0x252>
    546a:	ac c0       	rjmp	.+344    	; 0x55c4 <vfprintf+0x3aa>
    546c:	0d c0       	rjmp	.+26     	; 0x5488 <vfprintf+0x26e>
    546e:	80 37       	cpi	r24, 0x70	; 112
    5470:	21 f0       	breq	.+8      	; 0x547a <vfprintf+0x260>
    5472:	88 37       	cpi	r24, 0x78	; 120
    5474:	09 f0       	breq	.+2      	; 0x5478 <vfprintf+0x25e>
    5476:	a6 c0       	rjmp	.+332    	; 0x55c4 <vfprintf+0x3aa>
    5478:	02 c0       	rjmp	.+4      	; 0x547e <vfprintf+0x264>
    547a:	20 e1       	ldi	r18, 0x10	; 16
    547c:	b2 2a       	or	r11, r18
    547e:	b4 fe       	sbrs	r11, 4
    5480:	0b c0       	rjmp	.+22     	; 0x5498 <vfprintf+0x27e>
    5482:	84 e0       	ldi	r24, 0x04	; 4
    5484:	b8 2a       	or	r11, r24
    5486:	08 c0       	rjmp	.+16     	; 0x5498 <vfprintf+0x27e>
    5488:	24 ff       	sbrs	r18, 4
    548a:	09 c0       	rjmp	.+18     	; 0x549e <vfprintf+0x284>
    548c:	e6 e0       	ldi	r30, 0x06	; 6
    548e:	be 2a       	or	r11, r30
    5490:	06 c0       	rjmp	.+12     	; 0x549e <vfprintf+0x284>
    5492:	28 e0       	ldi	r18, 0x08	; 8
    5494:	30 e0       	ldi	r19, 0x00	; 0
    5496:	05 c0       	rjmp	.+10     	; 0x54a2 <vfprintf+0x288>
    5498:	20 e1       	ldi	r18, 0x10	; 16
    549a:	30 e0       	ldi	r19, 0x00	; 0
    549c:	02 c0       	rjmp	.+4      	; 0x54a2 <vfprintf+0x288>
    549e:	20 e1       	ldi	r18, 0x10	; 16
    54a0:	32 e0       	ldi	r19, 0x02	; 2
    54a2:	f8 01       	movw	r30, r16
    54a4:	b7 fe       	sbrs	r11, 7
    54a6:	07 c0       	rjmp	.+14     	; 0x54b6 <vfprintf+0x29c>
    54a8:	60 81       	ld	r22, Z
    54aa:	71 81       	ldd	r23, Z+1	; 0x01
    54ac:	82 81       	ldd	r24, Z+2	; 0x02
    54ae:	93 81       	ldd	r25, Z+3	; 0x03
    54b0:	0c 5f       	subi	r16, 0xFC	; 252
    54b2:	1f 4f       	sbci	r17, 0xFF	; 255
    54b4:	06 c0       	rjmp	.+12     	; 0x54c2 <vfprintf+0x2a8>
    54b6:	60 81       	ld	r22, Z
    54b8:	71 81       	ldd	r23, Z+1	; 0x01
    54ba:	80 e0       	ldi	r24, 0x00	; 0
    54bc:	90 e0       	ldi	r25, 0x00	; 0
    54be:	0e 5f       	subi	r16, 0xFE	; 254
    54c0:	1f 4f       	sbci	r17, 0xFF	; 255
    54c2:	a4 01       	movw	r20, r8
    54c4:	ee d0       	rcall	.+476    	; 0x56a2 <__ultoa_invert>
    54c6:	a8 2e       	mov	r10, r24
    54c8:	a8 18       	sub	r10, r8
    54ca:	ff e7       	ldi	r31, 0x7F	; 127
    54cc:	bf 22       	and	r11, r31
    54ce:	b6 fe       	sbrs	r11, 6
    54d0:	0b c0       	rjmp	.+22     	; 0x54e8 <vfprintf+0x2ce>
    54d2:	2b 2d       	mov	r18, r11
    54d4:	2e 7f       	andi	r18, 0xFE	; 254
    54d6:	a5 14       	cp	r10, r5
    54d8:	50 f4       	brcc	.+20     	; 0x54ee <vfprintf+0x2d4>
    54da:	b4 fe       	sbrs	r11, 4
    54dc:	0a c0       	rjmp	.+20     	; 0x54f2 <vfprintf+0x2d8>
    54de:	b2 fc       	sbrc	r11, 2
    54e0:	08 c0       	rjmp	.+16     	; 0x54f2 <vfprintf+0x2d8>
    54e2:	2b 2d       	mov	r18, r11
    54e4:	2e 7e       	andi	r18, 0xEE	; 238
    54e6:	05 c0       	rjmp	.+10     	; 0x54f2 <vfprintf+0x2d8>
    54e8:	7a 2c       	mov	r7, r10
    54ea:	2b 2d       	mov	r18, r11
    54ec:	03 c0       	rjmp	.+6      	; 0x54f4 <vfprintf+0x2da>
    54ee:	7a 2c       	mov	r7, r10
    54f0:	01 c0       	rjmp	.+2      	; 0x54f4 <vfprintf+0x2da>
    54f2:	75 2c       	mov	r7, r5
    54f4:	24 ff       	sbrs	r18, 4
    54f6:	0d c0       	rjmp	.+26     	; 0x5512 <vfprintf+0x2f8>
    54f8:	fe 01       	movw	r30, r28
    54fa:	ea 0d       	add	r30, r10
    54fc:	f1 1d       	adc	r31, r1
    54fe:	80 81       	ld	r24, Z
    5500:	80 33       	cpi	r24, 0x30	; 48
    5502:	11 f4       	brne	.+4      	; 0x5508 <vfprintf+0x2ee>
    5504:	29 7e       	andi	r18, 0xE9	; 233
    5506:	09 c0       	rjmp	.+18     	; 0x551a <vfprintf+0x300>
    5508:	22 ff       	sbrs	r18, 2
    550a:	06 c0       	rjmp	.+12     	; 0x5518 <vfprintf+0x2fe>
    550c:	73 94       	inc	r7
    550e:	73 94       	inc	r7
    5510:	04 c0       	rjmp	.+8      	; 0x551a <vfprintf+0x300>
    5512:	82 2f       	mov	r24, r18
    5514:	86 78       	andi	r24, 0x86	; 134
    5516:	09 f0       	breq	.+2      	; 0x551a <vfprintf+0x300>
    5518:	73 94       	inc	r7
    551a:	23 fd       	sbrc	r18, 3
    551c:	13 c0       	rjmp	.+38     	; 0x5544 <vfprintf+0x32a>
    551e:	20 ff       	sbrs	r18, 0
    5520:	0e c0       	rjmp	.+28     	; 0x553e <vfprintf+0x324>
    5522:	5a 2c       	mov	r5, r10
    5524:	73 14       	cp	r7, r3
    5526:	58 f4       	brcc	.+22     	; 0x553e <vfprintf+0x324>
    5528:	53 0c       	add	r5, r3
    552a:	57 18       	sub	r5, r7
    552c:	73 2c       	mov	r7, r3
    552e:	07 c0       	rjmp	.+14     	; 0x553e <vfprintf+0x324>
    5530:	b7 01       	movw	r22, r14
    5532:	80 e2       	ldi	r24, 0x20	; 32
    5534:	90 e0       	ldi	r25, 0x00	; 0
    5536:	2c 87       	std	Y+12, r18	; 0x0c
    5538:	88 d0       	rcall	.+272    	; 0x564a <fputc>
    553a:	73 94       	inc	r7
    553c:	2c 85       	ldd	r18, Y+12	; 0x0c
    553e:	73 14       	cp	r7, r3
    5540:	b8 f3       	brcs	.-18     	; 0x5530 <vfprintf+0x316>
    5542:	04 c0       	rjmp	.+8      	; 0x554c <vfprintf+0x332>
    5544:	73 14       	cp	r7, r3
    5546:	10 f4       	brcc	.+4      	; 0x554c <vfprintf+0x332>
    5548:	37 18       	sub	r3, r7
    554a:	01 c0       	rjmp	.+2      	; 0x554e <vfprintf+0x334>
    554c:	31 2c       	mov	r3, r1
    554e:	24 ff       	sbrs	r18, 4
    5550:	11 c0       	rjmp	.+34     	; 0x5574 <vfprintf+0x35a>
    5552:	b7 01       	movw	r22, r14
    5554:	80 e3       	ldi	r24, 0x30	; 48
    5556:	90 e0       	ldi	r25, 0x00	; 0
    5558:	2c 87       	std	Y+12, r18	; 0x0c
    555a:	77 d0       	rcall	.+238    	; 0x564a <fputc>
    555c:	2c 85       	ldd	r18, Y+12	; 0x0c
    555e:	22 ff       	sbrs	r18, 2
    5560:	1c c0       	rjmp	.+56     	; 0x559a <vfprintf+0x380>
    5562:	21 ff       	sbrs	r18, 1
    5564:	03 c0       	rjmp	.+6      	; 0x556c <vfprintf+0x352>
    5566:	88 e5       	ldi	r24, 0x58	; 88
    5568:	90 e0       	ldi	r25, 0x00	; 0
    556a:	02 c0       	rjmp	.+4      	; 0x5570 <vfprintf+0x356>
    556c:	88 e7       	ldi	r24, 0x78	; 120
    556e:	90 e0       	ldi	r25, 0x00	; 0
    5570:	b7 01       	movw	r22, r14
    5572:	0c c0       	rjmp	.+24     	; 0x558c <vfprintf+0x372>
    5574:	82 2f       	mov	r24, r18
    5576:	86 78       	andi	r24, 0x86	; 134
    5578:	81 f0       	breq	.+32     	; 0x559a <vfprintf+0x380>
    557a:	21 fd       	sbrc	r18, 1
    557c:	02 c0       	rjmp	.+4      	; 0x5582 <vfprintf+0x368>
    557e:	80 e2       	ldi	r24, 0x20	; 32
    5580:	01 c0       	rjmp	.+2      	; 0x5584 <vfprintf+0x36a>
    5582:	8b e2       	ldi	r24, 0x2B	; 43
    5584:	27 fd       	sbrc	r18, 7
    5586:	8d e2       	ldi	r24, 0x2D	; 45
    5588:	b7 01       	movw	r22, r14
    558a:	90 e0       	ldi	r25, 0x00	; 0
    558c:	5e d0       	rcall	.+188    	; 0x564a <fputc>
    558e:	05 c0       	rjmp	.+10     	; 0x559a <vfprintf+0x380>
    5590:	b7 01       	movw	r22, r14
    5592:	80 e3       	ldi	r24, 0x30	; 48
    5594:	90 e0       	ldi	r25, 0x00	; 0
    5596:	59 d0       	rcall	.+178    	; 0x564a <fputc>
    5598:	5a 94       	dec	r5
    559a:	a5 14       	cp	r10, r5
    559c:	c8 f3       	brcs	.-14     	; 0x5590 <vfprintf+0x376>
    559e:	aa 94       	dec	r10
    55a0:	f4 01       	movw	r30, r8
    55a2:	ea 0d       	add	r30, r10
    55a4:	f1 1d       	adc	r31, r1
    55a6:	b7 01       	movw	r22, r14
    55a8:	80 81       	ld	r24, Z
    55aa:	90 e0       	ldi	r25, 0x00	; 0
    55ac:	4e d0       	rcall	.+156    	; 0x564a <fputc>
    55ae:	a1 10       	cpse	r10, r1
    55b0:	f6 cf       	rjmp	.-20     	; 0x559e <vfprintf+0x384>
    55b2:	05 c0       	rjmp	.+10     	; 0x55be <vfprintf+0x3a4>
    55b4:	b7 01       	movw	r22, r14
    55b6:	80 e2       	ldi	r24, 0x20	; 32
    55b8:	90 e0       	ldi	r25, 0x00	; 0
    55ba:	47 d0       	rcall	.+142    	; 0x564a <fputc>
    55bc:	3a 94       	dec	r3
    55be:	31 10       	cpse	r3, r1
    55c0:	f9 cf       	rjmp	.-14     	; 0x55b4 <vfprintf+0x39a>
    55c2:	50 ce       	rjmp	.-864    	; 0x5264 <vfprintf+0x4a>
    55c4:	f7 01       	movw	r30, r14
    55c6:	26 81       	ldd	r18, Z+6	; 0x06
    55c8:	37 81       	ldd	r19, Z+7	; 0x07
    55ca:	02 c0       	rjmp	.+4      	; 0x55d0 <vfprintf+0x3b6>
    55cc:	2f ef       	ldi	r18, 0xFF	; 255
    55ce:	3f ef       	ldi	r19, 0xFF	; 255
    55d0:	c9 01       	movw	r24, r18
    55d2:	2c 96       	adiw	r28, 0x0c	; 12
    55d4:	cd bf       	out	0x3d, r28	; 61
    55d6:	de bf       	out	0x3e, r29	; 62
    55d8:	df 91       	pop	r29
    55da:	cf 91       	pop	r28
    55dc:	1f 91       	pop	r17
    55de:	0f 91       	pop	r16
    55e0:	ff 90       	pop	r15
    55e2:	ef 90       	pop	r14
    55e4:	df 90       	pop	r13
    55e6:	cf 90       	pop	r12
    55e8:	bf 90       	pop	r11
    55ea:	af 90       	pop	r10
    55ec:	9f 90       	pop	r9
    55ee:	8f 90       	pop	r8
    55f0:	7f 90       	pop	r7
    55f2:	6f 90       	pop	r6
    55f4:	5f 90       	pop	r5
    55f6:	4f 90       	pop	r4
    55f8:	3f 90       	pop	r3
    55fa:	2f 90       	pop	r2
    55fc:	08 95       	ret

000055fe <strnlen_P>:
    55fe:	fc 01       	movw	r30, r24
    5600:	05 90       	lpm	r0, Z+
    5602:	61 50       	subi	r22, 0x01	; 1
    5604:	70 40       	sbci	r23, 0x00	; 0
    5606:	01 10       	cpse	r0, r1
    5608:	d8 f7       	brcc	.-10     	; 0x5600 <strnlen_P+0x2>
    560a:	80 95       	com	r24
    560c:	90 95       	com	r25
    560e:	8e 0f       	add	r24, r30
    5610:	9f 1f       	adc	r25, r31
    5612:	08 95       	ret

00005614 <strnlen>:
    5614:	fc 01       	movw	r30, r24
    5616:	61 50       	subi	r22, 0x01	; 1
    5618:	70 40       	sbci	r23, 0x00	; 0
    561a:	01 90       	ld	r0, Z+
    561c:	01 10       	cpse	r0, r1
    561e:	d8 f7       	brcc	.-10     	; 0x5616 <strnlen+0x2>
    5620:	80 95       	com	r24
    5622:	90 95       	com	r25
    5624:	8e 0f       	add	r24, r30
    5626:	9f 1f       	adc	r25, r31
    5628:	08 95       	ret

0000562a <strrev>:
    562a:	dc 01       	movw	r26, r24
    562c:	fc 01       	movw	r30, r24
    562e:	67 2f       	mov	r22, r23
    5630:	71 91       	ld	r23, Z+
    5632:	77 23       	and	r23, r23
    5634:	e1 f7       	brne	.-8      	; 0x562e <strrev+0x4>
    5636:	32 97       	sbiw	r30, 0x02	; 2
    5638:	04 c0       	rjmp	.+8      	; 0x5642 <strrev+0x18>
    563a:	7c 91       	ld	r23, X
    563c:	6d 93       	st	X+, r22
    563e:	70 83       	st	Z, r23
    5640:	62 91       	ld	r22, -Z
    5642:	ae 17       	cp	r26, r30
    5644:	bf 07       	cpc	r27, r31
    5646:	c8 f3       	brcs	.-14     	; 0x563a <strrev+0x10>
    5648:	08 95       	ret

0000564a <fputc>:
    564a:	0f 93       	push	r16
    564c:	1f 93       	push	r17
    564e:	cf 93       	push	r28
    5650:	df 93       	push	r29
    5652:	8c 01       	movw	r16, r24
    5654:	eb 01       	movw	r28, r22
    5656:	8b 81       	ldd	r24, Y+3	; 0x03
    5658:	81 fd       	sbrc	r24, 1
    565a:	03 c0       	rjmp	.+6      	; 0x5662 <fputc+0x18>
    565c:	0f ef       	ldi	r16, 0xFF	; 255
    565e:	1f ef       	ldi	r17, 0xFF	; 255
    5660:	1a c0       	rjmp	.+52     	; 0x5696 <fputc+0x4c>
    5662:	82 ff       	sbrs	r24, 2
    5664:	0d c0       	rjmp	.+26     	; 0x5680 <fputc+0x36>
    5666:	2e 81       	ldd	r18, Y+6	; 0x06
    5668:	3f 81       	ldd	r19, Y+7	; 0x07
    566a:	8c 81       	ldd	r24, Y+4	; 0x04
    566c:	9d 81       	ldd	r25, Y+5	; 0x05
    566e:	28 17       	cp	r18, r24
    5670:	39 07       	cpc	r19, r25
    5672:	64 f4       	brge	.+24     	; 0x568c <fputc+0x42>
    5674:	e8 81       	ld	r30, Y
    5676:	f9 81       	ldd	r31, Y+1	; 0x01
    5678:	01 93       	st	Z+, r16
    567a:	e8 83       	st	Y, r30
    567c:	f9 83       	std	Y+1, r31	; 0x01
    567e:	06 c0       	rjmp	.+12     	; 0x568c <fputc+0x42>
    5680:	e8 85       	ldd	r30, Y+8	; 0x08
    5682:	f9 85       	ldd	r31, Y+9	; 0x09
    5684:	80 2f       	mov	r24, r16
    5686:	19 95       	eicall
    5688:	89 2b       	or	r24, r25
    568a:	41 f7       	brne	.-48     	; 0x565c <fputc+0x12>
    568c:	8e 81       	ldd	r24, Y+6	; 0x06
    568e:	9f 81       	ldd	r25, Y+7	; 0x07
    5690:	01 96       	adiw	r24, 0x01	; 1
    5692:	8e 83       	std	Y+6, r24	; 0x06
    5694:	9f 83       	std	Y+7, r25	; 0x07
    5696:	c8 01       	movw	r24, r16
    5698:	df 91       	pop	r29
    569a:	cf 91       	pop	r28
    569c:	1f 91       	pop	r17
    569e:	0f 91       	pop	r16
    56a0:	08 95       	ret

000056a2 <__ultoa_invert>:
    56a2:	fa 01       	movw	r30, r20
    56a4:	aa 27       	eor	r26, r26
    56a6:	28 30       	cpi	r18, 0x08	; 8
    56a8:	51 f1       	breq	.+84     	; 0x56fe <__ultoa_invert+0x5c>
    56aa:	20 31       	cpi	r18, 0x10	; 16
    56ac:	81 f1       	breq	.+96     	; 0x570e <__ultoa_invert+0x6c>
    56ae:	e8 94       	clt
    56b0:	6f 93       	push	r22
    56b2:	6e 7f       	andi	r22, 0xFE	; 254
    56b4:	6e 5f       	subi	r22, 0xFE	; 254
    56b6:	7f 4f       	sbci	r23, 0xFF	; 255
    56b8:	8f 4f       	sbci	r24, 0xFF	; 255
    56ba:	9f 4f       	sbci	r25, 0xFF	; 255
    56bc:	af 4f       	sbci	r26, 0xFF	; 255
    56be:	b1 e0       	ldi	r27, 0x01	; 1
    56c0:	3e d0       	rcall	.+124    	; 0x573e <__ultoa_invert+0x9c>
    56c2:	b4 e0       	ldi	r27, 0x04	; 4
    56c4:	3c d0       	rcall	.+120    	; 0x573e <__ultoa_invert+0x9c>
    56c6:	67 0f       	add	r22, r23
    56c8:	78 1f       	adc	r23, r24
    56ca:	89 1f       	adc	r24, r25
    56cc:	9a 1f       	adc	r25, r26
    56ce:	a1 1d       	adc	r26, r1
    56d0:	68 0f       	add	r22, r24
    56d2:	79 1f       	adc	r23, r25
    56d4:	8a 1f       	adc	r24, r26
    56d6:	91 1d       	adc	r25, r1
    56d8:	a1 1d       	adc	r26, r1
    56da:	6a 0f       	add	r22, r26
    56dc:	71 1d       	adc	r23, r1
    56de:	81 1d       	adc	r24, r1
    56e0:	91 1d       	adc	r25, r1
    56e2:	a1 1d       	adc	r26, r1
    56e4:	20 d0       	rcall	.+64     	; 0x5726 <__ultoa_invert+0x84>
    56e6:	09 f4       	brne	.+2      	; 0x56ea <__ultoa_invert+0x48>
    56e8:	68 94       	set
    56ea:	3f 91       	pop	r19
    56ec:	2a e0       	ldi	r18, 0x0A	; 10
    56ee:	26 9f       	mul	r18, r22
    56f0:	11 24       	eor	r1, r1
    56f2:	30 19       	sub	r19, r0
    56f4:	30 5d       	subi	r19, 0xD0	; 208
    56f6:	31 93       	st	Z+, r19
    56f8:	de f6       	brtc	.-74     	; 0x56b0 <__ultoa_invert+0xe>
    56fa:	cf 01       	movw	r24, r30
    56fc:	08 95       	ret
    56fe:	46 2f       	mov	r20, r22
    5700:	47 70       	andi	r20, 0x07	; 7
    5702:	40 5d       	subi	r20, 0xD0	; 208
    5704:	41 93       	st	Z+, r20
    5706:	b3 e0       	ldi	r27, 0x03	; 3
    5708:	0f d0       	rcall	.+30     	; 0x5728 <__ultoa_invert+0x86>
    570a:	c9 f7       	brne	.-14     	; 0x56fe <__ultoa_invert+0x5c>
    570c:	f6 cf       	rjmp	.-20     	; 0x56fa <__ultoa_invert+0x58>
    570e:	46 2f       	mov	r20, r22
    5710:	4f 70       	andi	r20, 0x0F	; 15
    5712:	40 5d       	subi	r20, 0xD0	; 208
    5714:	4a 33       	cpi	r20, 0x3A	; 58
    5716:	18 f0       	brcs	.+6      	; 0x571e <__ultoa_invert+0x7c>
    5718:	49 5d       	subi	r20, 0xD9	; 217
    571a:	31 fd       	sbrc	r19, 1
    571c:	40 52       	subi	r20, 0x20	; 32
    571e:	41 93       	st	Z+, r20
    5720:	02 d0       	rcall	.+4      	; 0x5726 <__ultoa_invert+0x84>
    5722:	a9 f7       	brne	.-22     	; 0x570e <__ultoa_invert+0x6c>
    5724:	ea cf       	rjmp	.-44     	; 0x56fa <__ultoa_invert+0x58>
    5726:	b4 e0       	ldi	r27, 0x04	; 4
    5728:	a6 95       	lsr	r26
    572a:	97 95       	ror	r25
    572c:	87 95       	ror	r24
    572e:	77 95       	ror	r23
    5730:	67 95       	ror	r22
    5732:	ba 95       	dec	r27
    5734:	c9 f7       	brne	.-14     	; 0x5728 <__ultoa_invert+0x86>
    5736:	00 97       	sbiw	r24, 0x00	; 0
    5738:	61 05       	cpc	r22, r1
    573a:	71 05       	cpc	r23, r1
    573c:	08 95       	ret
    573e:	9b 01       	movw	r18, r22
    5740:	ac 01       	movw	r20, r24
    5742:	0a 2e       	mov	r0, r26
    5744:	06 94       	lsr	r0
    5746:	57 95       	ror	r21
    5748:	47 95       	ror	r20
    574a:	37 95       	ror	r19
    574c:	27 95       	ror	r18
    574e:	ba 95       	dec	r27
    5750:	c9 f7       	brne	.-14     	; 0x5744 <__ultoa_invert+0xa2>
    5752:	62 0f       	add	r22, r18
    5754:	73 1f       	adc	r23, r19
    5756:	84 1f       	adc	r24, r20
    5758:	95 1f       	adc	r25, r21
    575a:	a0 1d       	adc	r26, r0
    575c:	08 95       	ret

0000575e <_exit>:
    575e:	f8 94       	cli

00005760 <__stop_program>:
    5760:	ff cf       	rjmp	.-2      	; 0x5760 <__stop_program>
